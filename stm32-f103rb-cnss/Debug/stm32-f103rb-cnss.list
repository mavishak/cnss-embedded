
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b64  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080037d0  080037d0  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037d0  080037d0  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080037d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc4  200000c4  0800389c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e88  0800389c  00020e88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094f7  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a06  00000000  00000000  000295e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000470  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001eb4  00000000  00000000  0002b818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054b9  00000000  00000000  0002d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000595b0  00000000  00000000  00032b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001240  00000000  00000000  0008c1b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c4 	.word	0x200000c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002c54 	.word	0x08002c54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000c8 	.word	0x200000c8
 800016c:	08002c54 	.word	0x08002c54

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <CONFIGURATIONS_uid_read>:
#include <string.h>

static struct u_id ID;
BOOL RESET_FLAG;

void CONFIGURATIONS_uid_read(struct u_id *id){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	id->off0 = MMIO16(ID_ADDR + 0x0);
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <CONFIGURATIONS_uid_read+0x38>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	b29a      	uxth	r2, r3
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	801a      	strh	r2, [r3, #0]
	id->off2 = MMIO16(ID_ADDR + 0x2);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <CONFIGURATIONS_uid_read+0x3c>)
 8000194:	881b      	ldrh	r3, [r3, #0]
 8000196:	b29a      	uxth	r2, r3
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	805a      	strh	r2, [r3, #2]
	id->off4 = MMIO32(ID_ADDR + 0x4);
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <CONFIGURATIONS_uid_read+0x40>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	605a      	str	r2, [r3, #4]
	id->off8 = MMIO32(ID_ADDR + 0x8);
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <CONFIGURATIONS_uid_read+0x44>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	609a      	str	r2, [r3, #8]

}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	1ffff7e8 	.word	0x1ffff7e8
 80001bc:	1ffff7ea 	.word	0x1ffff7ea
 80001c0:	1ffff7ec 	.word	0x1ffff7ec
 80001c4:	1ffff7f0 	.word	0x1ffff7f0

080001c8 <CONFIGURATIONS_set_device_id>:

void CONFIGURATIONS_set_device_id(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8

	CONFIGURATIONS_uid_read(&ID);
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001d0:	f7ff ffd6 	bl	8000180 <CONFIGURATIONS_uid_read>
	memset(DEVICE_ID,'\0', ID_SIZE*sizeof(uint8_t));
 80001d4:	2219      	movs	r2, #25
 80001d6:	2100      	movs	r1, #0
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001da:	f002 f908 	bl	80023ee <memset>
	sprintf((char*)DEVICE_ID,"%X%X%lX%lX",ID.off0,ID.off2,ID.off4,ID.off8);
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e6:	885b      	ldrh	r3, [r3, #2]
 80001e8:	4618      	mov	r0, r3
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001f0:	6892      	ldr	r2, [r2, #8]
 80001f2:	9201      	str	r2, [sp, #4]
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	4603      	mov	r3, r0
 80001f8:	460a      	mov	r2, r1
 80001fa:	4905      	ldr	r1, [pc, #20]	; (8000210 <CONFIGURATIONS_set_device_id+0x48>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001fe:	f002 f8ff 	bl	8002400 <siprintf>

}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	20000de0 	.word	0x20000de0
 8000210:	08002c6c 	.word	0x08002c6c

08000214 <CONFIGURATIONS_set_network>:

BOOL CONFIGURATIONS_set_network(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\033[96m\r\nIf at some point nothing seems to be happening\033[0m"));
 8000218:	481b      	ldr	r0, [pc, #108]	; (8000288 <CONFIGURATIONS_set_network+0x74>)
 800021a:	f001 fd67 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)("\033[96m\r\ndisconnect the device from your computer, wait a few minutes, and then reconnect.\r\n\033[0m"));
 800021e:	481b      	ldr	r0, [pc, #108]	; (800028c <CONFIGURATIONS_set_network+0x78>)
 8000220:	f001 fd64 	bl	8001cec <USART2_write>


	if(!SYSTEM_CONTROL_set_up()){
 8000224:	f001 f882 	bl	800132c <SYSTEM_CONTROL_set_up>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d113      	bne.n	8000256 <CONFIGURATIONS_set_network+0x42>
		USART2_write((uint8_t*)("\033[91m\r\nNetwok connection error.\033[0m"));
 800022e:	4818      	ldr	r0, [pc, #96]	; (8000290 <CONFIGURATIONS_set_network+0x7c>)
 8000230:	f001 fd5c 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nIf you are sure you entered the correct network name and password,\r\ndo the following:\033[0m"));
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <CONFIGURATIONS_set_network+0x80>)
 8000236:	f001 fd59 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nCheck your network signal, is it strong enough?\033[0m"));
 800023a:	4817      	ldr	r0, [pc, #92]	; (8000298 <CONFIGURATIONS_set_network+0x84>)
 800023c:	f001 fd56 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nIf it is not, try again later or from another physical location.\033[0m"));
 8000240:	4816      	ldr	r0, [pc, #88]	; (800029c <CONFIGURATIONS_set_network+0x88>)
 8000242:	f001 fd53 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96mIf it is, hit the reset button or disconnect the device from the computer, wait a few minutes, then reconnect and try again.\033[0m"));
 8000246:	4816      	ldr	r0, [pc, #88]	; (80002a0 <CONFIGURATIONS_set_network+0x8c>)
 8000248:	f001 fd50 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)"\r\n\r\n");
 800024c:	4815      	ldr	r0, [pc, #84]	; (80002a4 <CONFIGURATIONS_set_network+0x90>)
 800024e:	f001 fd4d 	bl	8001cec <USART2_write>
		return FALSE;
 8000252:	2300      	movs	r3, #0
 8000254:	e015      	b.n	8000282 <CONFIGURATIONS_set_network+0x6e>
	}
	else{
		USART2_write((uint8_t*)("\033[96m\r\nYour device was successfully registered.\033[0m"));
 8000256:	4814      	ldr	r0, [pc, #80]	; (80002a8 <CONFIGURATIONS_set_network+0x94>)
 8000258:	f001 fd48 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nThis is your device ID: \033[0m"));
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <CONFIGURATIONS_set_network+0x98>)
 800025e:	f001 fd45 	bl	8001cec <USART2_write>
		USART2_write(DEVICE_ID);
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <CONFIGURATIONS_set_network+0x9c>)
 8000264:	f001 fd42 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[32m\r\nCoppy it, you will need it later.\033[0m"));
 8000268:	4812      	ldr	r0, [pc, #72]	; (80002b4 <CONFIGURATIONS_set_network+0xa0>)
 800026a:	f001 fd3f 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\n\r\nYou can now safely disconnect the device and connect it to an electric power supply.\033[0m"));
 800026e:	4812      	ldr	r0, [pc, #72]	; (80002b8 <CONFIGURATIONS_set_network+0xa4>)
 8000270:	f001 fd3c 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)"\033[96m\r\nIf you ever wish to reset your network details,\r\nconnect the device to the computer and open 'TeraTerm'.\033[0m");
 8000274:	4811      	ldr	r0, [pc, #68]	; (80002bc <CONFIGURATIONS_set_network+0xa8>)
 8000276:	f001 fd39 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)"\r\n\r\n");
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <CONFIGURATIONS_set_network+0x90>)
 800027c:	f001 fd36 	bl	8001cec <USART2_write>
		return TRUE;
 8000280:	2301      	movs	r3, #1
	}

}
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08002c78 	.word	0x08002c78
 800028c:	08002cb4 	.word	0x08002cb4
 8000290:	08002d14 	.word	0x08002d14
 8000294:	08002d38 	.word	0x08002d38
 8000298:	08002d9c 	.word	0x08002d9c
 800029c:	08002dd8 	.word	0x08002dd8
 80002a0:	08002e24 	.word	0x08002e24
 80002a4:	08002eac 	.word	0x08002eac
 80002a8:	08002eb4 	.word	0x08002eb4
 80002ac:	08002ee8 	.word	0x08002ee8
 80002b0:	20000de0 	.word	0x20000de0
 80002b4:	08002f0c 	.word	0x08002f0c
 80002b8:	08002f3c 	.word	0x08002f3c
 80002bc:	08002fa0 	.word	0x08002fa0

080002c0 <configuration_Handler>:

void* configuration_Handler(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

	CONFIGURATIONS_set_network(); // returns TRUE upon success
 80002c4:	f7ff ffa6 	bl	8000214 <CONFIGURATIONS_set_network>

	USART2_write((uint8_t*)"\033[32m\r\nEnter 'ok' to continue: \033[0m");
 80002c8:	4815      	ldr	r0, [pc, #84]	; (8000320 <configuration_Handler+0x60>)
 80002ca:	f001 fd0f 	bl	8001cec <USART2_write>
	USART2_enable_Rx();
 80002ce:	f001 fcbb 	bl	8001c48 <USART2_enable_Rx>
	while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80002d2:	bf00      	nop
 80002d4:	f001 fbe8 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0fa      	beq.n	80002d4 <configuration_Handler+0x14>
	USART2_disable_Rx();
 80002de:	f001 fcc1 	bl	8001c64 <USART2_disable_Rx>

	while(!USART2_ok()){
 80002e2:	e00e      	b.n	8000302 <configuration_Handler+0x42>
		USART2_NEW_LINE_READ_set();
 80002e4:	f001 fbec 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter 'ok' to continue: \033[0m");
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <configuration_Handler+0x60>)
 80002ea:	f001 fcff 	bl	8001cec <USART2_write>
		USART2_enable_Rx();
 80002ee:	f001 fcab 	bl	8001c48 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80002f2:	bf00      	nop
 80002f4:	f001 fbd8 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0fa      	beq.n	80002f4 <configuration_Handler+0x34>
		USART2_disable_Rx();
 80002fe:	f001 fcb1 	bl	8001c64 <USART2_disable_Rx>
	while(!USART2_ok()){
 8000302:	f001 fde1 	bl	8001ec8 <USART2_ok>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0eb      	beq.n	80002e4 <configuration_Handler+0x24>

	}
	USART2_NEW_LINE_READ_set();
 800030c:	f001 fbd8 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

	RESET_FLAG = TRUE; // allow another event just like this
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <configuration_Handler+0x64>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	USART2_enable_Rx();
 8000316:	f001 fc97 	bl	8001c48 <USART2_enable_Rx>
	return NULL;
 800031a:	2300      	movs	r3, #0
}
 800031c:	4618      	mov	r0, r3
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08003014 	.word	0x08003014
 8000324:	20000ddc 	.word	0x20000ddc

08000328 <alert_Handler>:
	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");

}

void *alert_Handler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 800032e:	2303      	movs	r3, #3
 8000330:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000332:	e002      	b.n	800033a <alert_Handler+0x12>
		i--;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d008      	beq.n	8000352 <alert_Handler+0x2a>
 8000340:	f000 f884 	bl	800044c <recordAlert>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d103      	bne.n	8000352 <alert_Handler+0x2a>
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <alert_Handler+0x38>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f0      	bne.n	8000334 <alert_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 8000352:	f001 fa27 	bl	80017a4 <TIMER4_disable>

	return NULL;
 8000356:	2300      	movs	r3, #0

}
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000474 	.word	0x20000474

08000364 <control_Handler>:

void *control_Handler(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 800036a:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <control_Handler+0x8c>)
 800036c:	2203      	movs	r2, #3
 800036e:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 8000370:	2303      	movs	r3, #3
 8000372:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 8000374:	e002      	b.n	800037c <control_Handler+0x18>
		i--;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3b01      	subs	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d008      	beq.n	8000394 <control_Handler+0x30>
 8000382:	f000 f8b7 	bl	80004f4 <checkSwitchState>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d103      	bne.n	8000394 <control_Handler+0x30>
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <control_Handler+0x90>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1f0      	bne.n	8000376 <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <control_Handler+0x8c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <control_Handler+0x40>
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <control_Handler+0x8c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d109      	bne.n	80003b8 <control_Handler+0x54>
		disable_sensor();
 80003a4:	f000 ff06 	bl	80011b4 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 80003a8:	f001 f9ee 	bl	8001788 <TIMER3_disable>
		LED_off();
 80003ac:	f000 ff50 	bl	8001250 <LED_off>
		USART2_write((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 80003b0:	4811      	ldr	r0, [pc, #68]	; (80003f8 <control_Handler+0x94>)
 80003b2:	f001 fc9b 	bl	8001cec <USART2_write>
 80003b6:	e014      	b.n	80003e2 <control_Handler+0x7e>
	}

	else if(state == ON){
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <control_Handler+0x8c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d107      	bne.n	80003d0 <control_Handler+0x6c>
		enable_sensor();
 80003c0:	f000 feec 	bl	800119c <enable_sensor>
		LED_on();
 80003c4:	f000 ff36 	bl	8001234 <LED_on>
		USART2_write((uint8_t*)("\r\nON\r\n"));
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <control_Handler+0x98>)
 80003ca:	f001 fc8f 	bl	8001cec <USART2_write>
 80003ce:	e008      	b.n	80003e2 <control_Handler+0x7e>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 80003d0:	f000 fef0 	bl	80011b4 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 80003d4:	f001 f9d8 	bl	8001788 <TIMER3_disable>
		LED_off();
 80003d8:	f000 ff3a 	bl	8001250 <LED_off>
		USART2_write((uint8_t*)("\r\nNON\r\n"));
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <control_Handler+0x9c>)
 80003de:	f001 fc85 	bl	8001cec <USART2_write>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80003e2:	f001 f9df 	bl	80017a4 <TIMER4_disable>

	return NULL;
 80003e6:	2300      	movs	r3, #0

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000475 	.word	0x20000475
 80003f4:	20000474 	.word	0x20000474
 80003f8:	08003044 	.word	0x08003044
 80003fc:	08003054 	.word	0x08003054
 8000400:	0800305c 	.word	0x0800305c

08000404 <registeration_Handler>:

BOOL registeration_Handler(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 800040a:	2303      	movs	r3, #3
 800040c:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 800040e:	e002      	b.n	8000416 <registeration_Handler+0x12>
		i--;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d008      	beq.n	800042e <registeration_Handler+0x2a>
 800041c:	f000 f8be 	bl	800059c <registerDeviceID>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d103      	bne.n	800042e <registeration_Handler+0x2a>
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <registeration_Handler+0x44>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1f0      	bne.n	8000410 <registeration_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 800042e:	f001 f9b9 	bl	80017a4 <TIMER4_disable>

	if(i == 0){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d101      	bne.n	800043c <registeration_Handler+0x38>
		return FALSE;
 8000438:	2300      	movs	r3, #0
 800043a:	e000      	b.n	800043e <registeration_Handler+0x3a>
	}
	return TRUE;
 800043c:	2301      	movs	r3, #1
}
 800043e:	4618      	mov	r0, r3
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000474 	.word	0x20000474

0800044c <recordAlert>:

/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In recordAlert()\r\n"); // for debugging
 8000450:	4822      	ldr	r0, [pc, #136]	; (80004dc <recordAlert+0x90>)
 8000452:	f001 fc4b 	bl	8001cec <USART2_write>

	connection_closed = TRUE;
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <recordAlert+0x94>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 800045c:	231e      	movs	r3, #30
 800045e:	2206      	movs	r2, #6
 8000460:	2102      	movs	r1, #2
 8000462:	2002      	movs	r0, #2
 8000464:	f000 fa04 	bl	8000870 <connectFirebaseHost>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d101      	bne.n	8000472 <recordAlert+0x26>
		return FALSE;
 800046e:	2300      	movs	r3, #0
 8000470:	e031      	b.n	80004d6 <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000472:	481c      	ldr	r0, [pc, #112]	; (80004e4 <recordAlert+0x98>)
 8000474:	f001 fc3a 	bl	8001cec <USART2_write>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//USART2_write((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 8000478:	f000 faa6 	bl	80009c8 <createPostMsg>
	USART2_write((uint8_t*)"4\r\n");
 800047c:	481a      	ldr	r0, [pc, #104]	; (80004e8 <recordAlert+0x9c>)
 800047e:	f001 fc35 	bl	8001cec <USART2_write>


	//Send number of data bytes
	if(!sendRequest(1,1,30,40)){
 8000482:	2328      	movs	r3, #40	; 0x28
 8000484:	221e      	movs	r2, #30
 8000486:	2101      	movs	r1, #1
 8000488:	2001      	movs	r0, #1
 800048a:	f000 fb51 	bl	8000b30 <sendRequest>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d109      	bne.n	80004a8 <recordAlert+0x5c>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 8000494:	2106      	movs	r1, #6
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fc78 	bl	8000d8c <closeConnection>
 800049c:	4603      	mov	r3, r0
 800049e:	461a      	mov	r2, r3
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <recordAlert+0x94>)
 80004a2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	e016      	b.n	80004d6 <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <recordAlert+0xa0>)
 80004aa:	f001 fc1f 	bl	8001cec <USART2_write>

	//Read response
	if(!readResponse(60)){ //timeout set t0 3 minutes
 80004ae:	203c      	movs	r0, #60	; 0x3c
 80004b0:	f000 fbec 	bl	8000c8c <readResponse>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d109      	bne.n	80004ce <recordAlert+0x82>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 80004ba:	2106      	movs	r1, #6
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fc65 	bl	8000d8c <closeConnection>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <recordAlert+0x94>)
 80004c8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	e003      	b.n	80004d6 <recordAlert+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 80004ce:	4808      	ldr	r0, [pc, #32]	; (80004f0 <recordAlert+0xa4>)
 80004d0:	f001 fc0c 	bl	8001cec <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 80004d4:	2301      	movs	r3, #1

}
 80004d6:	4618      	mov	r0, r3
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	08003064 	.word	0x08003064
 80004e0:	20000474 	.word	0x20000474
 80004e4:	08003078 	.word	0x08003078
 80004e8:	0800307c 	.word	0x0800307c
 80004ec:	08003080 	.word	0x08003080
 80004f0:	08003084 	.word	0x08003084

080004f4 <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 80004f8:	4822      	ldr	r0, [pc, #136]	; (8000584 <checkSwitchState+0x90>)
 80004fa:	f001 fbf7 	bl	8001cec <USART2_write>

	connection_closed = TRUE;//added 30.4.21
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <checkSwitchState+0x94>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000504:	231e      	movs	r3, #30
 8000506:	2206      	movs	r2, #6
 8000508:	2102      	movs	r1, #2
 800050a:	2002      	movs	r0, #2
 800050c:	f000 f9b0 	bl	8000870 <connectFirebaseHost>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d101      	bne.n	800051a <checkSwitchState+0x26>
		return FALSE;
 8000516:	2300      	movs	r3, #0
 8000518:	e031      	b.n	800057e <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 800051a:	481c      	ldr	r0, [pc, #112]	; (800058c <checkSwitchState+0x98>)
 800051c:	f001 fbe6 	bl	8001cec <USART2_write>


	//Create HTTP request
	createGetMsg();
 8000520:	f000 fa98 	bl	8000a54 <createGetMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000524:	481a      	ldr	r0, [pc, #104]	; (8000590 <checkSwitchState+0x9c>)
 8000526:	f001 fbe1 	bl	8001cec <USART2_write>


	//Send number of data bytes
	if(!sendRequest(1,1,30,40)){
 800052a:	2328      	movs	r3, #40	; 0x28
 800052c:	221e      	movs	r2, #30
 800052e:	2101      	movs	r1, #1
 8000530:	2001      	movs	r0, #1
 8000532:	f000 fafd 	bl	8000b30 <sendRequest>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d109      	bne.n	8000550 <checkSwitchState+0x5c>
		connection_closed = closeConnection(2,6);
 800053c:	2106      	movs	r1, #6
 800053e:	2002      	movs	r0, #2
 8000540:	f000 fc24 	bl	8000d8c <closeConnection>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <checkSwitchState+0x94>)
 800054a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800054c:	2300      	movs	r3, #0
 800054e:	e016      	b.n	800057e <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <checkSwitchState+0xa0>)
 8000552:	f001 fbcb 	bl	8001cec <USART2_write>

	//Read response
	if(!parseResponse(60)){//timeout set t0 3 minutes
 8000556:	203c      	movs	r0, #60	; 0x3c
 8000558:	f000 fbcc 	bl	8000cf4 <parseResponse>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d109      	bne.n	8000576 <checkSwitchState+0x82>
		connection_closed = closeConnection(2,6);//added 30.4.21
 8000562:	2106      	movs	r1, #6
 8000564:	2002      	movs	r0, #2
 8000566:	f000 fc11 	bl	8000d8c <closeConnection>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <checkSwitchState+0x94>)
 8000570:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000572:	2300      	movs	r3, #0
 8000574:	e003      	b.n	800057e <checkSwitchState+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 8000576:	4808      	ldr	r0, [pc, #32]	; (8000598 <checkSwitchState+0xa4>)
 8000578:	f001 fbb8 	bl	8001cec <USART2_write>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 800057c:	2301      	movs	r3, #1


}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	08003088 	.word	0x08003088
 8000588:	20000474 	.word	0x20000474
 800058c:	08003078 	.word	0x08003078
 8000590:	0800307c 	.word	0x0800307c
 8000594:	08003080 	.word	0x08003080
 8000598:	08003084 	.word	0x08003084

0800059c <registerDeviceID>:



BOOL registerDeviceID(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"registerDeviceID\r\n"); // for debugging
 80005a0:	4835      	ldr	r0, [pc, #212]	; (8000678 <registerDeviceID+0xdc>)
 80005a2:	f001 fba3 	bl	8001cec <USART2_write>

	connection_closed = TRUE;
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <registerDeviceID+0xe0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){
 80005ac:	2106      	movs	r1, #6
 80005ae:	2003      	movs	r0, #3
 80005b0:	f000 f874 	bl	800069c <reset>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <registerDeviceID+0x22>
		return FALSE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e05a      	b.n	8000674 <registerDeviceID+0xd8>
	 }
	 TIMER4_delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 f8fe 	bl	80017c0 <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 80005c4:	482e      	ldr	r0, [pc, #184]	; (8000680 <registerDeviceID+0xe4>)
 80005c6:	f001 fb91 	bl	8001cec <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 80005ca:	2106      	movs	r1, #6
 80005cc:	2002      	movs	r0, #2
 80005ce:	f000 f8ad 	bl	800072c <setClientMode>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <registerDeviceID+0x40>
		return FALSE;
 80005d8:	2300      	movs	r3, #0
 80005da:	e04b      	b.n	8000674 <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 80005dc:	4829      	ldr	r0, [pc, #164]	; (8000684 <registerDeviceID+0xe8>)
 80005de:	f001 fb85 	bl	8001cec <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,30)){
 80005e2:	211e      	movs	r1, #30
 80005e4:	2002      	movs	r0, #2
 80005e6:	f000 f8e9 	bl	80007bc <joinAccessPoint>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <registerDeviceID+0x58>
		return FALSE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e03f      	b.n	8000674 <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <registerDeviceID+0xec>)
 80005f6:	f001 fb79 	bl	8001cec <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 80005fa:	231e      	movs	r3, #30
 80005fc:	2206      	movs	r2, #6
 80005fe:	2102      	movs	r1, #2
 8000600:	2002      	movs	r0, #2
 8000602:	f000 f935 	bl	8000870 <connectFirebaseHost>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d101      	bne.n	8000610 <registerDeviceID+0x74>
		return FALSE;
 800060c:	2300      	movs	r3, #0
 800060e:	e031      	b.n	8000674 <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <registerDeviceID+0xf0>)
 8000612:	f001 fb6b 	bl	8001cec <USART2_write>


	//Create HTTP request
	createPutMsg();
 8000616:	f000 fa45 	bl	8000aa4 <createPutMsg>
	USART2_write((uint8_t*)"4\r\n");
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <registerDeviceID+0xf4>)
 800061c:	f001 fb66 	bl	8001cec <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000620:	2328      	movs	r3, #40	; 0x28
 8000622:	221e      	movs	r2, #30
 8000624:	2102      	movs	r1, #2
 8000626:	2002      	movs	r0, #2
 8000628:	f000 fa82 	bl	8000b30 <sendRequest>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d109      	bne.n	8000646 <registerDeviceID+0xaa>
		connection_closed = closeConnection(2,6);
 8000632:	2106      	movs	r1, #6
 8000634:	2002      	movs	r0, #2
 8000636:	f000 fba9 	bl	8000d8c <closeConnection>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <registerDeviceID+0xe0>)
 8000640:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000642:	2300      	movs	r3, #0
 8000644:	e016      	b.n	8000674 <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <registerDeviceID+0xf8>)
 8000648:	f001 fb50 	bl	8001cec <USART2_write>

	//Read response
	if(!readResponse(60)){ //timeout set to 3 minutes
 800064c:	203c      	movs	r0, #60	; 0x3c
 800064e:	f000 fb1d 	bl	8000c8c <readResponse>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d109      	bne.n	800066c <registerDeviceID+0xd0>
		connection_closed = closeConnection(2,6);
 8000658:	2106      	movs	r1, #6
 800065a:	2002      	movs	r0, #2
 800065c:	f000 fb96 	bl	8000d8c <closeConnection>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <registerDeviceID+0xe0>)
 8000666:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000668:	2300      	movs	r3, #0
 800066a:	e003      	b.n	8000674 <registerDeviceID+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <registerDeviceID+0xfc>)
 800066e:	f001 fb3d 	bl	8001cec <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 8000672:	2301      	movs	r3, #1

}
 8000674:	4618      	mov	r0, r3
 8000676:	bd80      	pop	{r7, pc}
 8000678:	080030a0 	.word	0x080030a0
 800067c:	20000474 	.word	0x20000474
 8000680:	080030b4 	.word	0x080030b4
 8000684:	080030b8 	.word	0x080030b8
 8000688:	080030bc 	.word	0x080030bc
 800068c:	08003078 	.word	0x08003078
 8000690:	0800307c 	.word	0x0800307c
 8000694:	08003080 	.word	0x08003080
 8000698:	08003084 	.word	0x08003084

0800069c <reset>:
/*This function resets ESP8266 modem with AT+RST command,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.
 * !TODO This functionality does not work properly - needs fixing.*/
BOOL reset(uint32_t tries, uint32_t timeout){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <reset+0x80>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_RST);
 80006ac:	481c      	ldr	r0, [pc, #112]	; (8000720 <reset+0x84>)
 80006ae:	f001 fc33 	bl	8001f18 <USART1_write>
	while(tries > 0){
 80006b2:	e02a      	b.n	800070a <reset+0x6e>
		TIMER4_set_timeout(timeout);
 80006b4:	6838      	ldr	r0, [r7, #0]
 80006b6:	f001 f8e3 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006ba:	e00e      	b.n	80006da <reset+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 80006bc:	f001 f9dc 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d009      	beq.n	80006da <reset+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <reset+0x88>)
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <reset+0x8c>)
 80006ca:	f001 fcab 	bl	8002024 <USART1_search_buffer_Rx>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <reset+0x80>)
 80006d4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80006d6:	f001 f9db 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <reset+0x80>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d104      	bne.n	80006ec <reset+0x50>
 80006e2:	f001 f8df 	bl	80018a4 <TIMER4_timeout_done>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0e7      	beq.n	80006bc <reset+0x20>
			}
		}
		if(found == PASS){
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <reset+0x80>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <reset+0x5c>
			return TRUE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e00c      	b.n	8000712 <reset+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <reset+0x80>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_RST);
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <reset+0x84>)
 8000706:	f001 fc07 	bl	8001f18 <USART1_write>
	while(tries > 0){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1d1      	bne.n	80006b4 <reset+0x18>
		}
	}
	return FALSE;
 8000710:	2300      	movs	r3, #0

}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000005c 	.word	0x2000005c
 8000720:	080030d8 	.word	0x080030d8
 8000724:	080030c8 	.word	0x080030c8
 8000728:	080030d0 	.word	0x080030d0

0800072c <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <setClientMode+0x80>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CWMODE);
 800073c:	481c      	ldr	r0, [pc, #112]	; (80007b0 <setClientMode+0x84>)
 800073e:	f001 fbeb 	bl	8001f18 <USART1_write>
	while(tries > 0){
 8000742:	e02a      	b.n	800079a <setClientMode+0x6e>
		TIMER4_set_timeout(timeout);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f001 f89b 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800074a:	e00e      	b.n	800076a <setClientMode+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 800074c:	f001 f994 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d009      	beq.n	800076a <setClientMode+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 8000756:	4917      	ldr	r1, [pc, #92]	; (80007b4 <setClientMode+0x88>)
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <setClientMode+0x8c>)
 800075a:	f001 fc63 	bl	8002024 <USART1_search_buffer_Rx>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <setClientMode+0x80>)
 8000764:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000766:	f001 f993 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <setClientMode+0x80>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d104      	bne.n	800077c <setClientMode+0x50>
 8000772:	f001 f897 	bl	80018a4 <TIMER4_timeout_done>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0e7      	beq.n	800074c <setClientMode+0x20>
			}
		}
		if(found == PASS){
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <setClientMode+0x80>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d101      	bne.n	8000788 <setClientMode+0x5c>
			return TRUE;
 8000784:	2301      	movs	r3, #1
 8000786:	e00c      	b.n	80007a2 <setClientMode+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <setClientMode+0x80>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_CWMODE);
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <setClientMode+0x84>)
 8000796:	f001 fbbf 	bl	8001f18 <USART1_write>
	while(tries > 0){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1d1      	bne.n	8000744 <setClientMode+0x18>
		}
	}
	return FALSE;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000005c 	.word	0x2000005c
 80007b0:	080030e4 	.word	0x080030e4
 80007b4:	080030c8 	.word	0x080030c8
 80007b8:	080030d0 	.word	0x080030d0

080007bc <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ca:	2100      	movs	r1, #0
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <joinAccessPoint+0x98>)
 80007ce:	f001 fe0e 	bl	80023ee <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PWD);
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <joinAccessPoint+0x9c>)
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <joinAccessPoint+0xa0>)
 80007d6:	4922      	ldr	r1, [pc, #136]	; (8000860 <joinAccessPoint+0xa4>)
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <joinAccessPoint+0x98>)
 80007da:	f001 fe11 	bl	8002400 <siprintf>

	found = STANDBY;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <joinAccessPoint+0xa8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 80007e4:	481b      	ldr	r0, [pc, #108]	; (8000854 <joinAccessPoint+0x98>)
 80007e6:	f001 fb97 	bl	8001f18 <USART1_write>
	while(tries > 0){
 80007ea:	e02a      	b.n	8000842 <joinAccessPoint+0x86>
		TIMER4_set_timeout(timeout);
 80007ec:	6838      	ldr	r0, [r7, #0]
 80007ee:	f001 f847 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80007f2:	e00e      	b.n	8000812 <joinAccessPoint+0x56>
			if(USART1_NEW_LINE_FOUND_get()){
 80007f4:	f001 f940 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <joinAccessPoint+0x56>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80007fe:	491a      	ldr	r1, [pc, #104]	; (8000868 <joinAccessPoint+0xac>)
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <joinAccessPoint+0xb0>)
 8000802:	f001 fc0f 	bl	8002024 <USART1_search_buffer_Rx>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <joinAccessPoint+0xa8>)
 800080c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800080e:	f001 f93f 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <joinAccessPoint+0xa8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d104      	bne.n	8000824 <joinAccessPoint+0x68>
 800081a:	f001 f843 	bl	80018a4 <TIMER4_timeout_done>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0e7      	beq.n	80007f4 <joinAccessPoint+0x38>
			}
		}
		if(found == PASS){
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <joinAccessPoint+0xa8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <joinAccessPoint+0x74>
			return TRUE;
 800082c:	2301      	movs	r3, #1
 800082e:	e00c      	b.n	800084a <joinAccessPoint+0x8e>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <joinAccessPoint+0xa8>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <joinAccessPoint+0x98>)
 800083e:	f001 fb6b 	bl	8001f18 <USART1_write>
	while(tries > 0){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1d1      	bne.n	80007ec <joinAccessPoint+0x30>
		}
	}
	return FALSE;
 8000848:	2300      	movs	r3, #0

}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000ec 	.word	0x200000ec
 8000858:	20000dfc 	.word	0x20000dfc
 800085c:	20000e40 	.word	0x20000e40
 8000860:	080030f4 	.word	0x080030f4
 8000864:	2000005c 	.word	0x2000005c
 8000868:	0800310c 	.word	0x0800310c
 800086c:	080030d0 	.word	0x080030d0

08000870 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 800087e:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <connectFirebaseHost+0x134>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000884:	4848      	ldr	r0, [pc, #288]	; (80009a8 <connectFirebaseHost+0x138>)
 8000886:	f001 fb47 	bl	8001f18 <USART1_write>
	while(_ssl_tries > 0){
 800088a:	e028      	b.n	80008de <connectFirebaseHost+0x6e>
		TIMER4_set_timeout(_ssl_timeout);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 fff7 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000892:	e00e      	b.n	80008b2 <connectFirebaseHost+0x42>
			if(USART1_NEW_LINE_FOUND_get()){
 8000894:	f001 f8f0 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d009      	beq.n	80008b2 <connectFirebaseHost+0x42>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800089e:	4943      	ldr	r1, [pc, #268]	; (80009ac <connectFirebaseHost+0x13c>)
 80008a0:	4843      	ldr	r0, [pc, #268]	; (80009b0 <connectFirebaseHost+0x140>)
 80008a2:	f001 fbbf 	bl	8002024 <USART1_search_buffer_Rx>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <connectFirebaseHost+0x134>)
 80008ac:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80008ae:	f001 f8ef 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <connectFirebaseHost+0x134>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d104      	bne.n	80008c4 <connectFirebaseHost+0x54>
 80008ba:	f000 fff3 	bl	80018a4 <TIMER4_timeout_done>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0e7      	beq.n	8000894 <connectFirebaseHost+0x24>
			}
		}
		if(found == PASS){
 80008c4:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <connectFirebaseHost+0x134>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00c      	beq.n	80008e6 <connectFirebaseHost+0x76>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
			found = STANDBY; // reset found
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <connectFirebaseHost+0x134>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 80008d8:	4833      	ldr	r0, [pc, #204]	; (80009a8 <connectFirebaseHost+0x138>)
 80008da:	f001 fb1d 	bl	8001f18 <USART1_write>
	while(_ssl_tries > 0){
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1d3      	bne.n	800088c <connectFirebaseHost+0x1c>
 80008e4:	e000      	b.n	80008e8 <connectFirebaseHost+0x78>
			break; //move on to next command
 80008e6:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <connectFirebaseHost+0x134>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d003      	beq.n	80008f8 <connectFirebaseHost+0x88>
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <connectFirebaseHost+0x134>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <connectFirebaseHost+0x8c>
		return FALSE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e04e      	b.n	800099a <connectFirebaseHost+0x12a>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80008fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000900:	2100      	movs	r1, #0
 8000902:	482c      	ldr	r0, [pc, #176]	; (80009b4 <connectFirebaseHost+0x144>)
 8000904:	f001 fd73 	bl	80023ee <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <connectFirebaseHost+0x148>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <connectFirebaseHost+0x14c>)
 800090e:	492c      	ldr	r1, [pc, #176]	; (80009c0 <connectFirebaseHost+0x150>)
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <connectFirebaseHost+0x144>)
 8000912:	f001 fd75 	bl	8002400 <siprintf>

	found = STANDBY;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <connectFirebaseHost+0x134>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 800091c:	4825      	ldr	r0, [pc, #148]	; (80009b4 <connectFirebaseHost+0x144>)
 800091e:	f001 fafb 	bl	8001f18 <USART1_write>
	while(_cipstart_tries > 0){
 8000922:	e036      	b.n	8000992 <connectFirebaseHost+0x122>
		TIMER4_set_timeout(_cipstart_timeout);
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 ffab 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800092a:	e01a      	b.n	8000962 <connectFirebaseHost+0xf2>
			if(USART1_NEW_LINE_FOUND_get()){
 800092c:	f001 f8a4 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d015      	beq.n	8000962 <connectFirebaseHost+0xf2>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000936:	491d      	ldr	r1, [pc, #116]	; (80009ac <connectFirebaseHost+0x13c>)
 8000938:	481d      	ldr	r0, [pc, #116]	; (80009b0 <connectFirebaseHost+0x140>)
 800093a:	f001 fb73 	bl	8002024 <USART1_search_buffer_Rx>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <connectFirebaseHost+0x134>)
 8000944:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <connectFirebaseHost+0x134>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d107      	bne.n	800095e <connectFirebaseHost+0xee>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 800094e:	4917      	ldr	r1, [pc, #92]	; (80009ac <connectFirebaseHost+0x13c>)
 8000950:	481c      	ldr	r0, [pc, #112]	; (80009c4 <connectFirebaseHost+0x154>)
 8000952:	f001 fb67 	bl	8002024 <USART1_search_buffer_Rx>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <connectFirebaseHost+0x134>)
 800095c:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 800095e:	f001 f897 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <connectFirebaseHost+0x134>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d104      	bne.n	8000974 <connectFirebaseHost+0x104>
 800096a:	f000 ff9b 	bl	80018a4 <TIMER4_timeout_done>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0db      	beq.n	800092c <connectFirebaseHost+0xbc>
			}
		}
		if(found == PASS){
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <connectFirebaseHost+0x134>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <connectFirebaseHost+0x110>
			return TRUE;
 800097c:	2301      	movs	r3, #1
 800097e:	e00c      	b.n	800099a <connectFirebaseHost+0x12a>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3b01      	subs	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
			found = STANDBY; // reset found
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <connectFirebaseHost+0x134>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <connectFirebaseHost+0x144>)
 800098e:	f001 fac3 	bl	8001f18 <USART1_write>
	while(_cipstart_tries > 0){
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1c5      	bne.n	8000924 <connectFirebaseHost+0xb4>
		}
	}
	return FALSE;
 8000998:	2300      	movs	r3, #0



}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000005c 	.word	0x2000005c
 80009a8:	08003114 	.word	0x08003114
 80009ac:	080030c8 	.word	0x080030c8
 80009b0:	080030d0 	.word	0x080030d0
 80009b4:	200000ec 	.word	0x200000ec
 80009b8:	20000058 	.word	0x20000058
 80009bc:	20000000 	.word	0x20000000
 80009c0:	0800312c 	.word	0x0800312c
 80009c4:	0800314c 	.word	0x0800314c

080009c8 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	2100      	movs	r1, #0
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <createPostMsg+0x68>)
 80009d4:	f001 fd0b 	bl	80023ee <memset>
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <createPostMsg+0x68>)
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <createPostMsg+0x6c>)
 80009dc:	4610      	mov	r0, r2
 80009de:	4619      	mov	r1, r3
 80009e0:	235c      	movs	r3, #92	; 0x5c
 80009e2:	461a      	mov	r2, r3
 80009e4:	f001 fcf8 	bl	80023d8 <memcpy>
	content_len = strlen((char*)content);
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <createPostMsg+0x68>)
 80009ea:	f7ff fbc1 	bl	8000170 <strlen>
 80009ee:	4602      	mov	r2, r0
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <createPostMsg+0x70>)
 80009f2:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80009f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f8:	2100      	movs	r1, #0
 80009fa:	4810      	ldr	r0, [pc, #64]	; (8000a3c <createPostMsg+0x74>)
 80009fc:	f001 fcf7 	bl	80023ee <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <createPostMsg+0x70>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <createPostMsg+0x68>)
 8000a06:	9202      	str	r2, [sp, #8]
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <createPostMsg+0x78>)
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <createPostMsg+0x7c>)
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <createPostMsg+0x80>)
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <createPostMsg+0x84>)
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <createPostMsg+0x74>)
 8000a16:	f001 fcf3 	bl	8002400 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000a1a:	4808      	ldr	r0, [pc, #32]	; (8000a3c <createPostMsg+0x74>)
 8000a1c:	f7ff fba8 	bl	8000170 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	3b02      	subs	r3, #2
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <createPostMsg+0x88>)
 8000a26:	6013      	str	r3, [r2, #0]

}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200003f0 	.word	0x200003f0
 8000a34:	08003160 	.word	0x08003160
 8000a38:	20000470 	.word	0x20000470
 8000a3c:	200001ec 	.word	0x200001ec
 8000a40:	20000000 	.word	0x20000000
 8000a44:	2000002c 	.word	0x2000002c
 8000a48:	20000de0 	.word	0x20000de0
 8000a4c:	080031bc 	.word	0x080031bc
 8000a50:	200003ec 	.word	0x200003ec

08000a54 <createGetMsg>:

void createGetMsg(void){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	2100      	movs	r1, #0
 8000a60:	480a      	ldr	r0, [pc, #40]	; (8000a8c <createGetMsg+0x38>)
 8000a62:	f001 fcc4 	bl	80023ee <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <createGetMsg+0x3c>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <createGetMsg+0x40>)
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <createGetMsg+0x44>)
 8000a6e:	490b      	ldr	r1, [pc, #44]	; (8000a9c <createGetMsg+0x48>)
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <createGetMsg+0x38>)
 8000a72:	f001 fcc5 	bl	8002400 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <createGetMsg+0x38>)
 8000a78:	f7ff fb7a 	bl	8000170 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <createGetMsg+0x4c>)
 8000a82:	6013      	str	r3, [r2, #0]

}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001ec 	.word	0x200001ec
 8000a90:	20000000 	.word	0x20000000
 8000a94:	2000002c 	.word	0x2000002c
 8000a98:	20000de0 	.word	0x20000de0
 8000a9c:	08003234 	.word	0x08003234
 8000aa0:	200003ec 	.word	0x200003ec

08000aa4 <createPutMsg>:

void createPutMsg(void){
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	2100      	movs	r1, #0
 8000aae:	4817      	ldr	r0, [pc, #92]	; (8000b0c <createPutMsg+0x68>)
 8000ab0:	f001 fc9d 	bl	80023ee <memset>
	sprintf((char*)content,"{\"is_in_use\": true}");
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <createPutMsg+0x68>)
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <createPutMsg+0x6c>)
 8000ab8:	4614      	mov	r4, r2
 8000aba:	461d      	mov	r5, r3
 8000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	6023      	str	r3, [r4, #0]
	content_len = strlen((char*)content);
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <createPutMsg+0x68>)
 8000ac6:	f7ff fb53 	bl	8000170 <strlen>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <createPutMsg+0x70>)
 8000ace:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4810      	ldr	r0, [pc, #64]	; (8000b18 <createPutMsg+0x74>)
 8000ad8:	f001 fc89 	bl	80023ee <memset>
	sprintf((char*)http,"PUT /device-list/%s.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <createPutMsg+0x70>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <createPutMsg+0x68>)
 8000ae2:	9202      	str	r2, [sp, #8]
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <createPutMsg+0x78>)
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <createPutMsg+0x7c>)
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <createPutMsg+0x80>)
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <createPutMsg+0x84>)
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <createPutMsg+0x74>)
 8000af2:	f001 fc85 	bl	8002400 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <createPutMsg+0x74>)
 8000af8:	f7ff fb3a 	bl	8000170 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	3b02      	subs	r3, #2
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <createPutMsg+0x88>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200003f0 	.word	0x200003f0
 8000b10:	08003278 	.word	0x08003278
 8000b14:	20000470 	.word	0x20000470
 8000b18:	200001ec 	.word	0x200001ec
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	2000002c 	.word	0x2000002c
 8000b24:	20000de0 	.word	0x20000de0
 8000b28:	0800328c 	.word	0x0800328c
 8000b2c:	200003ec 	.word	0x200003ec

08000b30 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	2100      	movs	r1, #0
 8000b44:	4847      	ldr	r0, [pc, #284]	; (8000c64 <sendRequest+0x134>)
 8000b46:	f001 fc52 	bl	80023ee <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 8000b4a:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <sendRequest+0x138>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4946      	ldr	r1, [pc, #280]	; (8000c6c <sendRequest+0x13c>)
 8000b52:	4844      	ldr	r0, [pc, #272]	; (8000c64 <sendRequest+0x134>)
 8000b54:	f001 fc54 	bl	8002400 <siprintf>

	found = STANDBY;
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <sendRequest+0x140>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000b5e:	4841      	ldr	r0, [pc, #260]	; (8000c64 <sendRequest+0x134>)
 8000b60:	f001 f9da 	bl	8001f18 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000b64:	e034      	b.n	8000bd0 <sendRequest+0xa0>
		TIMER4_set_timeout(_CIPSEND_timeout);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 fe8a 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000b6c:	e01a      	b.n	8000ba4 <sendRequest+0x74>
			if(USART1_NEW_LINE_FOUND_get()){
 8000b6e:	f000 ff83 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d015      	beq.n	8000ba4 <sendRequest+0x74>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000b78:	493e      	ldr	r1, [pc, #248]	; (8000c74 <sendRequest+0x144>)
 8000b7a:	483f      	ldr	r0, [pc, #252]	; (8000c78 <sendRequest+0x148>)
 8000b7c:	f001 fa52 	bl	8002024 <USART1_search_buffer_Rx>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <sendRequest+0x140>)
 8000b86:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000b88:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <sendRequest+0x140>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d107      	bne.n	8000ba0 <sendRequest+0x70>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000b90:	493a      	ldr	r1, [pc, #232]	; (8000c7c <sendRequest+0x14c>)
 8000b92:	4839      	ldr	r0, [pc, #228]	; (8000c78 <sendRequest+0x148>)
 8000b94:	f001 fa46 	bl	8002024 <USART1_search_buffer_Rx>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <sendRequest+0x140>)
 8000b9e:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000ba0:	f000 ff76 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <sendRequest+0x140>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <sendRequest+0x86>
 8000bac:	f000 fe7a 	bl	80018a4 <TIMER4_timeout_done>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0db      	beq.n	8000b6e <sendRequest+0x3e>
			}
		}
		if(found == PASS){
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <sendRequest+0x140>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00c      	beq.n	8000bd8 <sendRequest+0xa8>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
			found = STANDBY; // reset found
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <sendRequest+0x140>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 8000bca:	4826      	ldr	r0, [pc, #152]	; (8000c64 <sendRequest+0x134>)
 8000bcc:	f001 f9a4 	bl	8001f18 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1c7      	bne.n	8000b66 <sendRequest+0x36>
 8000bd6:	e000      	b.n	8000bda <sendRequest+0xaa>
			break; //move on to next command
 8000bd8:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <sendRequest+0x140>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d003      	beq.n	8000bea <sendRequest+0xba>
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <sendRequest+0x140>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d101      	bne.n	8000bee <sendRequest+0xbe>
		return FALSE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e035      	b.n	8000c5a <sendRequest+0x12a>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <sendRequest+0x140>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)http);
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <sendRequest+0x150>)
 8000bf6:	f001 f98f 	bl	8001f18 <USART1_write>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000bfa:	e02a      	b.n	8000c52 <sendRequest+0x122>
		TIMER4_set_timeout(_SEND_OK_timeout);
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f000 fe3f 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c02:	e00e      	b.n	8000c22 <sendRequest+0xf2>
			if(USART1_NEW_LINE_FOUND_get()){
 8000c04:	f000 ff38 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d009      	beq.n	8000c22 <sendRequest+0xf2>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000c0e:	491d      	ldr	r1, [pc, #116]	; (8000c84 <sendRequest+0x154>)
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <sendRequest+0x158>)
 8000c12:	f001 fa07 	bl	8002024 <USART1_search_buffer_Rx>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <sendRequest+0x140>)
 8000c1c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000c1e:	f000 ff37 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <sendRequest+0x140>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d104      	bne.n	8000c34 <sendRequest+0x104>
 8000c2a:	f000 fe3b 	bl	80018a4 <TIMER4_timeout_done>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0e7      	beq.n	8000c04 <sendRequest+0xd4>
			}
		}
		if(found == PASS){
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <sendRequest+0x140>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <sendRequest+0x110>
			return TRUE;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e00c      	b.n	8000c5a <sendRequest+0x12a>
		}
		else{
			_SEND_OK_tries--;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
			found = STANDBY; // reset found
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <sendRequest+0x140>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)http);
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <sendRequest+0x150>)
 8000c4e:	f001 f963 	bl	8001f18 <USART1_write>
	while(_SEND_OK_tries > 0){
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1d1      	bne.n	8000bfc <sendRequest+0xcc>
		}
	}
	return FALSE;
 8000c58:	2300      	movs	r3, #0

}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000ec 	.word	0x200000ec
 8000c68:	200003ec 	.word	0x200003ec
 8000c6c:	08003300 	.word	0x08003300
 8000c70:	2000005c 	.word	0x2000005c
 8000c74:	080030c8 	.word	0x080030c8
 8000c78:	08003314 	.word	0x08003314
 8000c7c:	08003318 	.word	0x08003318
 8000c80:	200001ec 	.word	0x200001ec
 8000c84:	0800310c 	.word	0x0800310c
 8000c88:	08003324 	.word	0x08003324

08000c8c <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <readResponse+0x5c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fdf0 	bl	8001880 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000ca0:	e00e      	b.n	8000cc0 <readResponse+0x34>
		if(USART1_NEW_LINE_FOUND_get()){
 8000ca2:	f000 fee9 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d009      	beq.n	8000cc0 <readResponse+0x34>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000cac:	490f      	ldr	r1, [pc, #60]	; (8000cec <readResponse+0x60>)
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <readResponse+0x64>)
 8000cb0:	f001 f9b8 	bl	8002024 <USART1_search_buffer_Rx>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <readResponse+0x5c>)
 8000cba:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 8000cbc:	f000 fee8 	bl	8001a90 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <readResponse+0x5c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <readResponse+0x46>
 8000cc8:	f000 fdec 	bl	80018a4 <TIMER4_timeout_done>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0e7      	beq.n	8000ca2 <readResponse+0x16>
		}
	}
	if(found == PASS){
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <readResponse+0x5c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <readResponse+0x52>
		return TRUE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <readResponse+0x54>
	}
	else{
		return FALSE;
 8000cde:	2300      	movs	r3, #0
	}

}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000005c 	.word	0x2000005c
 8000cec:	0800310c 	.word	0x0800310c
 8000cf0:	08003318 	.word	0x08003318

08000cf4 <parseResponse>:


BOOL parseResponse(uint32_t timeout){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <parseResponse+0x7c>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
	state = NON;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <parseResponse+0x80>)
 8000d04:	2203      	movs	r2, #3
 8000d06:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 fdb9 	bl	8001880 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000d0e:	e01b      	b.n	8000d48 <parseResponse+0x54>
		if(USART1_NEW_LINE_FOUND_get()){
 8000d10:	f000 feb2 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d016      	beq.n	8000d48 <parseResponse+0x54>
			state = USART1_check_state_buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <parseResponse+0x84>)
 8000d1c:	4917      	ldr	r1, [pc, #92]	; (8000d7c <parseResponse+0x88>)
 8000d1e:	4818      	ldr	r0, [pc, #96]	; (8000d80 <parseResponse+0x8c>)
 8000d20:	f001 f9d8 	bl	80020d4 <USART1_check_state_buffer_Rx>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <parseResponse+0x80>)
 8000d2a:	701a      	strb	r2, [r3, #0]
			if(state != NON){
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <parseResponse+0x80>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d007      	beq.n	8000d44 <parseResponse+0x50>
				found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000d34:	4913      	ldr	r1, [pc, #76]	; (8000d84 <parseResponse+0x90>)
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <parseResponse+0x94>)
 8000d38:	f001 f974 	bl	8002024 <USART1_search_buffer_Rx>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <parseResponse+0x7c>)
 8000d42:	701a      	strb	r2, [r3, #0]
			}
			USART1_NEW_LINE_READ_set();
 8000d44:	f000 fea4 	bl	8001a90 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <parseResponse+0x7c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d104      	bne.n	8000d5a <parseResponse+0x66>
 8000d50:	f000 fda8 	bl	80018a4 <TIMER4_timeout_done>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0da      	beq.n	8000d10 <parseResponse+0x1c>
		}
	}
	if(found == PASS){
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <parseResponse+0x7c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <parseResponse+0x72>
		return TRUE;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <parseResponse+0x74>
	}
	else{
		return FALSE;
 8000d66:	2300      	movs	r3, #0
	}

}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000005c 	.word	0x2000005c
 8000d74:	20000475 	.word	0x20000475
 8000d78:	08003330 	.word	0x08003330
 8000d7c:	0800333c 	.word	0x0800333c
 8000d80:	08003348 	.word	0x08003348
 8000d84:	0800310c 	.word	0x0800310c
 8000d88:	08003318 	.word	0x08003318

08000d8c <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <closeConnection+0x80>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CIPCLOSE);
 8000d9c:	481c      	ldr	r0, [pc, #112]	; (8000e10 <closeConnection+0x84>)
 8000d9e:	f001 f8bb 	bl	8001f18 <USART1_write>
	while(tries > 0){
 8000da2:	e02a      	b.n	8000dfa <closeConnection+0x6e>
		TIMER4_set_timeout(timeout);
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f000 fd6b 	bl	8001880 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000daa:	e00e      	b.n	8000dca <closeConnection+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000dac:	f000 fe64 	bl	8001a78 <USART1_NEW_LINE_FOUND_get>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <closeConnection+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000db6:	4917      	ldr	r1, [pc, #92]	; (8000e14 <closeConnection+0x88>)
 8000db8:	4817      	ldr	r0, [pc, #92]	; (8000e18 <closeConnection+0x8c>)
 8000dba:	f001 f933 	bl	8002024 <USART1_search_buffer_Rx>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <closeConnection+0x80>)
 8000dc4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000dc6:	f000 fe63 	bl	8001a90 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <closeConnection+0x80>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <closeConnection+0x50>
 8000dd2:	f000 fd67 	bl	80018a4 <TIMER4_timeout_done>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0e7      	beq.n	8000dac <closeConnection+0x20>
			}
		}
		if(found == PASS){
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <closeConnection+0x80>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <closeConnection+0x5c>
			return TRUE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e00c      	b.n	8000e02 <closeConnection+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <closeConnection+0x80>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_CIPCLOSE);
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <closeConnection+0x84>)
 8000df6:	f001 f88f 	bl	8001f18 <USART1_write>
	while(tries > 0){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1d1      	bne.n	8000da4 <closeConnection+0x18>
		}
	}
	return FALSE;
 8000e00:	2300      	movs	r3, #0

}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000005c 	.word	0x2000005c
 8000e10:	08003354 	.word	0x08003354
 8000e14:	080030c8 	.word	0x080030c8
 8000e18:	080030d0 	.word	0x080030d0

08000e1c <QUEUE_init>:

static Queue queue;


void QUEUE_init()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-QUEUE_init->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <QUEUE_init+0x24>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <QUEUE_init+0x24>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <QUEUE_init+0x24>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000478 	.word	0x20000478

08000e44 <QUEUE_add_event>:


void QUEUE_add_event(Handler handler)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

	if(QUEUE_isFull()){
 8000e4c:	f000 f854 	bl	8000ef8 <QUEUE_isFull>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <QUEUE_add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8000e6c:	d807      	bhi.n	8000e7e <QUEUE_add_event+0x3a>
		queue.writeIndex++;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e70:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000e7c:	e005      	b.n	8000e8a <QUEUE_add_event+0x46>
	else
		queue.writeIndex = 0;
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <QUEUE_add_event+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000e86:	e000      	b.n	8000e8a <QUEUE_add_event+0x46>
		return;
 8000e88:	bf00      	nop

}
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000478 	.word	0x20000478

08000e94 <QUEUE_do_event>:



void *QUEUE_do_event()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	void *res;

	if(QUEUE_isEmpty()){
 8000e9a:	f000 f843 	bl	8000f24 <QUEUE_isEmpty>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <QUEUE_do_event+0x14>
		return NULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e020      	b.n	8000eea <QUEUE_do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000eaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	4798      	blx	r3
 8000eb6:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000eba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ebe:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000ec8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8000ece:	d807      	bhi.n	8000ee0 <QUEUE_do_event+0x4c>
      queue.readIndex++;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000ed2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000eda:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000ede:	e003      	b.n	8000ee8 <QUEUE_do_event+0x54>
   else
      queue.readIndex = 0;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <QUEUE_do_event+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000ee8:	687b      	ldr	r3, [r7, #4]

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000478 	.word	0x20000478

08000ef8 <QUEUE_isFull>:


BOOL QUEUE_isFull()
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <QUEUE_isFull+0x28>)
 8000efe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <QUEUE_isFull+0x28>)
 8000f04:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000478 	.word	0x20000478

08000f24 <QUEUE_isEmpty>:


BOOL QUEUE_isEmpty()
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <QUEUE_isEmpty+0x24>)
 8000f2a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <QUEUE_isEmpty+0x24>)
 8000f30:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000f34:	429a      	cmp	r2, r3
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000478 	.word	0x20000478

08000f4c <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <EXTI15_10_IRQHandler+0x24>)
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <EXTI15_10_IRQHandler+0x24>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <EXTI15_10_IRQHandler+0x24>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6153      	str	r3, [r2, #20]

	QUEUE_add_event(interrupt_handler);
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <EXTI15_10_IRQHandler+0x28>)
 8000f66:	f7ff ff6d 	bl	8000e44 <QUEUE_add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40010400 	.word	0x40010400
 8000f74:	08000f79 	.word	0x08000f79

08000f78 <interrupt_handler>:

void *interrupt_handler(void){
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <interrupt_handler+0x3c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d109      	bne.n	8000f98 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <interrupt_handler+0x40>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <interrupt_handler+0x40>)
 8000f8a:	f043 0320 	orr.w	r3, r3, #32
 8000f8e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <interrupt_handler+0x3c>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e008      	b.n	8000faa <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <interrupt_handler+0x40>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <interrupt_handler+0x40>)
 8000f9e:	f023 0320 	bic.w	r3, r3, #32
 8000fa2:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <interrupt_handler+0x3c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000faa:	2300      	movs	r3, #0

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000e80 	.word	0x20000e80
 8000fb8:	40010800 	.word	0x40010800

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <__NVIC_EnableIRQ+0x34>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db10      	blt.n	8001070 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <__NVIC_DisableIRQ+0x40>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	3320      	adds	r3, #32
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800106c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0c      	blt.n	80010ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_ClearPendingIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	3360      	adds	r3, #96	; 0x60
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <SENSOR_init>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void SENSOR_init(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <SENSOR_init+0x7c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a1c      	ldr	r2, [pc, #112]	; (800118c <SENSOR_init+0x7c>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <SENSOR_init+0x7c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <SENSOR_init+0x7c>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <SENSOR_init+0x80>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <SENSOR_init+0x80>)
 8001132:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001136:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <SENSOR_init+0x80>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <SENSOR_init+0x80>)
 800113e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001142:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <SENSOR_init+0x80>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <SENSOR_init+0x80>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SENSOR_init+0x84>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SENSOR_init+0x84>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <SENSOR_init+0x88>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <SENSOR_init+0x88>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <SENSOR_init+0x88>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SENSOR_init+0x88>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001176:	2007      	movs	r0, #7
 8001178:	f7ff ff20 	bl	8000fbc <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 800117c:	2100      	movs	r1, #0
 800117e:	200a      	movs	r0, #10
 8001180:	f7ff ff9c 	bl	80010bc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8001184:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40010000 	.word	0x40010000
 8001198:	40010400 	.word	0x40010400

0800119c <enable_sensor>:

void enable_sensor(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 80011a2:	200a      	movs	r0, #10
 80011a4:	f7ff ff6c 	bl	8001080 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 80011a8:	200a      	movs	r0, #10
 80011aa:	f7ff ff2b 	bl	8001004 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011ae:	b662      	cpsie	i
	__enable_irq();

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <disable_sensor>:

void disable_sensor(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 80011ba:	200a      	movs	r0, #10
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011c0:	b662      	cpsie	i
	__enable_irq();

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <EXTI4_IRQHandler+0x2c>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <EXTI4_IRQHandler+0x2c>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6153      	str	r3, [r2, #20]
	if(TIMER3_timeout_done())
 80011d8:	f000 fb40 	bl	800185c <TIMER3_timeout_done>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <EXTI4_IRQHandler+0x26>
	{
		QUEUE_add_event(alert_Handler);
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <EXTI4_IRQHandler+0x30>)
 80011e4:	f7ff fe2e 	bl	8000e44 <QUEUE_add_event>
		TIMER3_set_timeout(60); //60 seconds = 1 minute
 80011e8:	203c      	movs	r0, #60	; 0x3c
 80011ea:	f000 fb25 	bl	8001838 <TIMER3_set_timeout>
	}

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010400 	.word	0x40010400
 80011f8:	08000329 	.word	0x08000329

080011fc <LED_init>:
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ() and NVIC_SetPriority()*/
#include <string.h>
#include <stdlib.h>

void LED_init(){
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	/*USING LD2 (PA5) as output*/
	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <LED_init+0x30>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a09      	ldr	r2, [pc, #36]	; (800122c <LED_init+0x30>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LED_init+0x34>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <LED_init+0x34>)
 8001212:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001216:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LED_init+0x34>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <LED_init+0x34>)
 800121e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001222:	6013      	str	r3, [r2, #0]

}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010800 	.word	0x40010800

08001234 <LED_on>:
	// Toggle GPIOA pin 5.
	GPIOA->ODR ^= 0x0020;
}

void LED_on()
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 0x0020;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <LED_on+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <LED_on+0x18>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40010800 	.word	0x40010800

08001250 <LED_off>:

void LED_off()
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(0x0020);
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <LED_off+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <LED_off+0x18>)
 800125a:	f023 0320 	bic.w	r3, r3, #32
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40010800 	.word	0x40010800

0800126c <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	//init_MCO();




	USART1_init(); // for ESP8266
 8001270:	f000 fc8e 	bl	8001b90 <USART1_init>
	USART2_init(); // for debugging
 8001274:	f000 fc30 	bl	8001ad8 <USART2_init>

	TIMER2_init(); // for monitoring switch state.
 8001278:	f000 f994 	bl	80015a4 <TIMER2_init>
	TIMER3_init(); // for sensor delay
 800127c:	f000 f9d4 	bl	8001628 <TIMER3_init>
	TIMER4_init(); // for ESP8266 timeout
 8001280:	f000 fa0e 	bl	80016a0 <TIMER4_init>

	QUEUE_init();
 8001284:	f7ff fdca 	bl	8000e1c <QUEUE_init>

	CONFIGURATIONS_set_device_id();
 8001288:	f7fe ff9e 	bl	80001c8 <CONFIGURATIONS_set_device_id>

	USART2_enable_Rx(); // for ESC
 800128c:	f000 fcdc 	bl	8001c48 <USART2_enable_Rx>

	USART2_write((uint8_t*)("\033[32m\r\nPress ESC to  configure\033[0m"));
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <main+0x60>)
 8001292:	f000 fd2b 	bl	8001cec <USART2_write>
	TIMER4_set_timeout(60);
 8001296:	203c      	movs	r0, #60	; 0x3c
 8001298:	f000 faf2 	bl	8001880 <TIMER4_set_timeout>
	while(QUEUE_isEmpty() && !TIMER4_timeout_done());
 800129c:	bf00      	nop
 800129e:	f7ff fe41 	bl	8000f24 <QUEUE_isEmpty>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <main+0x46>
 80012a8:	f000 fafc 	bl	80018a4 <TIMER4_timeout_done>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f5      	beq.n	800129e <main+0x32>

	SENSOR_init(); // sensor interrupts are not inabled
 80012b2:	f7ff ff2d 	bl	8001110 <SENSOR_init>

	LED_init();
 80012b6:	f7ff ffa1 	bl	80011fc <LED_init>



	//init_i2c1();
	USART2_write((uint8_t*)("\r\n_______________\r\n"));//For test
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <main+0x64>)
 80012bc:	f000 fd16 	bl	8001cec <USART2_write>

	while(1)
	{

		QUEUE_do_event();
 80012c0:	f7ff fde8 	bl	8000e94 <QUEUE_do_event>
		SYSTEM_CONTROL_monitor_switch_state(120); // every 2 minutes
 80012c4:	2078      	movs	r0, #120	; 0x78
 80012c6:	f000 f8ed 	bl	80014a4 <SYSTEM_CONTROL_monitor_switch_state>
		QUEUE_do_event();
 80012ca:	e7f9      	b.n	80012c0 <main+0x54>
 80012cc:	080033f4 	.word	0x080033f4
 80012d0:	08003418 	.word	0x08003418

080012d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x50>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x16>
		heap_end = &end;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <_sbrk+0x50>)
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <_sbrk+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <_sbrk+0x50>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <_sbrk+0x50>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	466a      	mov	r2, sp
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d907      	bls.n	800130e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012fe:	f001 f841 	bl	8002384 <__errno>
 8001302:	4602      	mov	r2, r0
 8001304:	230c      	movs	r3, #12
 8001306:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	e006      	b.n	800131c <_sbrk+0x48>
	}

	heap_end += incr;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <_sbrk+0x50>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <_sbrk+0x50>)
 8001318:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000584 	.word	0x20000584
 8001328:	20000e88 	.word	0x20000e88

0800132c <SYSTEM_CONTROL_set_up>:
uint8_t PWD[WiFi_SIZE];  // extern see configurations
uint8_t DEVICE_ID[ID_SIZE]; // extern see configurations



BOOL SYSTEM_CONTROL_set_up(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\033[96m\r\n\r\nDear user, thank you for participating in our project!\r\n\033[0m"));
 8001330:	484d      	ldr	r0, [pc, #308]	; (8001468 <SYSTEM_CONTROL_set_up+0x13c>)
 8001332:	f000 fcdb 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)("\033[96mJust a few more steps...\r\n\r\n\033[0m"));
 8001336:	484d      	ldr	r0, [pc, #308]	; (800146c <SYSTEM_CONTROL_set_up+0x140>)
 8001338:	f000 fcd8 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)("\033[96mThe security device needs to connect to your WiFi network.\r\n\033[0m"));
 800133c:	484c      	ldr	r0, [pc, #304]	; (8001470 <SYSTEM_CONTROL_set_up+0x144>)
 800133e:	f000 fcd5 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)("\033[96mFor that, we need you to enter your network connection information.\r\n\033[0m"));
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <SYSTEM_CONTROL_set_up+0x148>)
 8001344:	f000 fcd2 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)("\033[96mFor your assurance, this information will not be saved in any database!\r\n\033[0m"));
 8001348:	484b      	ldr	r0, [pc, #300]	; (8001478 <SYSTEM_CONTROL_set_up+0x14c>)
 800134a:	f000 fccf 	bl	8001cec <USART2_write>

	// set network ssid
	USART2_set_buffer_Rx(); // reset buffer
 800134e:	f000 fcb7 	bl	8001cc0 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 8001352:	e034      	b.n	80013be <SYSTEM_CONTROL_set_up+0x92>
		USART2_NEW_LINE_READ_set();
 8001354:	f000 fbb4 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter network name (case-sensitive): \033[0m");
 8001358:	4848      	ldr	r0, [pc, #288]	; (800147c <SYSTEM_CONTROL_set_up+0x150>)
 800135a:	f000 fcc7 	bl	8001cec <USART2_write>
		USART2_enable_Rx();
 800135e:	f000 fc73 	bl	8001c48 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001362:	bf00      	nop
 8001364:	f000 fba0 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0fa      	beq.n	8001364 <SYSTEM_CONTROL_set_up+0x38>
		USART2_disable_Rx();
 800136e:	f000 fc79 	bl	8001c64 <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 8001372:	e00e      	b.n	8001392 <SYSTEM_CONTROL_set_up+0x66>
			USART2_NEW_LINE_READ_set();
 8001374:	f000 fba4 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\033[91m\r\nThe network name is too long, try again: \033[0m");
 8001378:	4841      	ldr	r0, [pc, #260]	; (8001480 <SYSTEM_CONTROL_set_up+0x154>)
 800137a:	f000 fcb7 	bl	8001cec <USART2_write>
			USART2_enable_Rx();
 800137e:	f000 fc63 	bl	8001c48 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001382:	bf00      	nop
 8001384:	f000 fb90 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0fa      	beq.n	8001384 <SYSTEM_CONTROL_set_up+0x58>
			USART2_disable_Rx();
 800138e:	f000 fc69 	bl	8001c64 <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 8001392:	493c      	ldr	r1, [pc, #240]	; (8001484 <SYSTEM_CONTROL_set_up+0x158>)
 8001394:	2040      	movs	r0, #64	; 0x40
 8001396:	f000 fd65 	bl	8001e64 <USART2_read_buffer_Rx>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e9      	beq.n	8001374 <SYSTEM_CONTROL_set_up+0x48>
		}
		USART2_NEW_LINE_READ_set();
 80013a0:	f000 fb8e 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32mEnter 'ok' to continue or any other key to change network name: \033[0m");
 80013a4:	4838      	ldr	r0, [pc, #224]	; (8001488 <SYSTEM_CONTROL_set_up+0x15c>)
 80013a6:	f000 fca1 	bl	8001cec <USART2_write>
		USART2_enable_Rx();
 80013aa:	f000 fc4d 	bl	8001c48 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80013ae:	bf00      	nop
 80013b0:	f000 fb7a 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0fa      	beq.n	80013b0 <SYSTEM_CONTROL_set_up+0x84>
		USART2_disable_Rx();
 80013ba:	f000 fc53 	bl	8001c64 <USART2_disable_Rx>
	while(!USART2_ok()){
 80013be:	f000 fd83 	bl	8001ec8 <USART2_ok>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0c5      	beq.n	8001354 <SYSTEM_CONTROL_set_up+0x28>
	}
	USART2_NEW_LINE_READ_set();
 80013c8:	f000 fb7a 	bl	8001ac0 <USART2_NEW_LINE_READ_set>


	// set network password
	USART2_set_buffer_Rx(); // reset buffer
 80013cc:	f000 fc78 	bl	8001cc0 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 80013d0:	e034      	b.n	800143c <SYSTEM_CONTROL_set_up+0x110>
		USART2_NEW_LINE_READ_set();
 80013d2:	f000 fb75 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter network access code (password): \033[0m");
 80013d6:	482d      	ldr	r0, [pc, #180]	; (800148c <SYSTEM_CONTROL_set_up+0x160>)
 80013d8:	f000 fc88 	bl	8001cec <USART2_write>
		USART2_enable_Rx();
 80013dc:	f000 fc34 	bl	8001c48 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80013e0:	bf00      	nop
 80013e2:	f000 fb61 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0fa      	beq.n	80013e2 <SYSTEM_CONTROL_set_up+0xb6>
		USART2_disable_Rx();
 80013ec:	f000 fc3a 	bl	8001c64 <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 80013f0:	e00e      	b.n	8001410 <SYSTEM_CONTROL_set_up+0xe4>
			USART2_NEW_LINE_READ_set();
 80013f2:	f000 fb65 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\033[91m\r\nThe access code is to long, try again: \033[0m");
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <SYSTEM_CONTROL_set_up+0x164>)
 80013f8:	f000 fc78 	bl	8001cec <USART2_write>
			USART2_enable_Rx();
 80013fc:	f000 fc24 	bl	8001c48 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001400:	bf00      	nop
 8001402:	f000 fb51 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0fa      	beq.n	8001402 <SYSTEM_CONTROL_set_up+0xd6>
			USART2_disable_Rx();
 800140c:	f000 fc2a 	bl	8001c64 <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 8001410:	4920      	ldr	r1, [pc, #128]	; (8001494 <SYSTEM_CONTROL_set_up+0x168>)
 8001412:	2040      	movs	r0, #64	; 0x40
 8001414:	f000 fd26 	bl	8001e64 <USART2_read_buffer_Rx>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0e9      	beq.n	80013f2 <SYSTEM_CONTROL_set_up+0xc6>
		}
		USART2_NEW_LINE_READ_set();
 800141e:	f000 fb4f 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32mEnter 'ok' to continue or any other key to change password: \033[0m");
 8001422:	481d      	ldr	r0, [pc, #116]	; (8001498 <SYSTEM_CONTROL_set_up+0x16c>)
 8001424:	f000 fc62 	bl	8001cec <USART2_write>
		USART2_enable_Rx();
 8001428:	f000 fc0e 	bl	8001c48 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 800142c:	bf00      	nop
 800142e:	f000 fb3b 	bl	8001aa8 <USART2_NEW_LINE_FOUND_get>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0fa      	beq.n	800142e <SYSTEM_CONTROL_set_up+0x102>
		USART2_disable_Rx();
 8001438:	f000 fc14 	bl	8001c64 <USART2_disable_Rx>
	while(!USART2_ok()){
 800143c:	f000 fd44 	bl	8001ec8 <USART2_ok>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0c5      	beq.n	80013d2 <SYSTEM_CONTROL_set_up+0xa6>
	}
	USART2_NEW_LINE_READ_set();
 8001446:	f000 fb3b 	bl	8001ac0 <USART2_NEW_LINE_READ_set>

	USART2_write((uint8_t*)"\033[96m\r\nTrying to connect...\r\nPlease wait, this might take a few minutes.\033[0m");
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <SYSTEM_CONTROL_set_up+0x170>)
 800144c:	f000 fc4e 	bl	8001cec <USART2_write>
	USART2_write((uint8_t*)"\r\n\r\n");
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <SYSTEM_CONTROL_set_up+0x174>)
 8001452:	f000 fc4b 	bl	8001cec <USART2_write>
	TIMER4_delay(5);
 8001456:	2005      	movs	r0, #5
 8001458:	f000 f9b2 	bl	80017c0 <TIMER4_delay>
	return registeration_Handler();
 800145c:	f7fe ffd2 	bl	8000404 <registeration_Handler>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800342c 	.word	0x0800342c
 800146c:	08003474 	.word	0x08003474
 8001470:	0800349c 	.word	0x0800349c
 8001474:	080034e4 	.word	0x080034e4
 8001478:	08003534 	.word	0x08003534
 800147c:	08003588 	.word	0x08003588
 8001480:	080035bc 	.word	0x080035bc
 8001484:	20000e40 	.word	0x20000e40
 8001488:	080035f4 	.word	0x080035f4
 800148c:	08003640 	.word	0x08003640
 8001490:	08003674 	.word	0x08003674
 8001494:	20000dfc 	.word	0x20000dfc
 8001498:	080036a8 	.word	0x080036a8
 800149c:	080036f0 	.word	0x080036f0
 80014a0:	08003740 	.word	0x08003740

080014a4 <SYSTEM_CONTROL_monitor_switch_state>:

void SYSTEM_CONTROL_monitor_switch_state(uint32_t seconds){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

	if(TIMER2_timeout_done()){
 80014ac:	f000 f9b2 	bl	8001814 <TIMER2_timeout_done>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <SYSTEM_CONTROL_monitor_switch_state+0x1e>
		QUEUE_add_event(control_Handler);
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <SYSTEM_CONTROL_monitor_switch_state+0x28>)
 80014b8:	f7ff fcc4 	bl	8000e44 <QUEUE_add_event>
		TIMER2_set_timeout(seconds);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f997 	bl	80017f0 <TIMER2_set_timeout>
	}
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	08000365 	.word	0x08000365

080014d0 <__NVIC_SetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <TIMER2_init>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;


void TIMER2_init(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <TIMER2_init+0x7c>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <TIMER2_init+0x7c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80015b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80015be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 80015da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 80015ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80015fa:	2007      	movs	r0, #7
 80015fc:	f7ff ff68 	bl	80014d0 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001600:	2100      	movs	r1, #0
 8001602:	201c      	movs	r0, #28
 8001604:	f7ff ffa4 	bl	8001550 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8001608:	201c      	movs	r0, #28
 800160a:	f7ff ff85 	bl	8001518 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800160e:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <TIMER2_init+0x80>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <TIMER2_init+0x80>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	20000588 	.word	0x20000588

08001628 <TIMER3_init>:

void TIMER3_init(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <TIMER3_init+0x6c>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4a18      	ldr	r2, [pc, #96]	; (8001694 <TIMER3_init+0x6c>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <TIMER3_init+0x70>)
 800163a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <TIMER3_init+0x70>)
 8001642:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <TIMER3_init+0x70>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <TIMER3_init+0x70>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <TIMER3_init+0x70>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <TIMER3_init+0x70>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <TIMER3_init+0x70>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <TIMER3_init+0x70>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800166e:	2007      	movs	r0, #7
 8001670:	f7ff ff2e 	bl	80014d0 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001674:	2100      	movs	r1, #0
 8001676:	201d      	movs	r0, #29
 8001678:	f7ff ff6a 	bl	8001550 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 800167c:	201d      	movs	r0, #29
 800167e:	f7ff ff4b 	bl	8001518 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001682:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <TIMER3_init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <TIMER3_init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40000400 	.word	0x40000400
 800169c:	20000590 	.word	0x20000590

080016a0 <TIMER4_init>:

void TIMER4_init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <TIMER4_init+0x6c>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <TIMER4_init+0x6c>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <TIMER4_init+0x70>)
 80016b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <TIMER4_init+0x70>)
 80016ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <TIMER4_init+0x70>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <TIMER4_init+0x70>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <TIMER4_init+0x70>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <TIMER4_init+0x70>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <TIMER4_init+0x70>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <TIMER4_init+0x70>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80016e6:	2007      	movs	r0, #7
 80016e8:	f7ff fef2 	bl	80014d0 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80016ec:	2100      	movs	r1, #0
 80016ee:	201e      	movs	r0, #30
 80016f0:	f7ff ff2e 	bl	8001550 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80016f4:	201e      	movs	r0, #30
 80016f6:	f7ff ff0f 	bl	8001518 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80016fa:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <TIMER4_init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <TIMER4_init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	40000800 	.word	0x40000800
 8001714:	20000598 	.word	0x20000598

08001718 <TIMER2_enable>:


void TIMER2_enable(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <TIMER3_enable>:

void TIMER3_enable(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <TIMER3_enable+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <TIMER3_enable+0x18>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40000400 	.word	0x40000400

08001750 <TIMER4_enable>:

void TIMER4_enable(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <TIMER4_enable+0x18>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <TIMER4_enable+0x18>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40000800 	.word	0x40000800

0800176c <TIMER2_disable>:


void TIMER2_disable(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8001770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <TIMER3_disable>:

void TIMER3_disable(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <TIMER3_disable+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <TIMER3_disable+0x18>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40000400 	.word	0x40000400

080017a4 <TIMER4_disable>:

void TIMER4_disable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <TIMER4_disable+0x18>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <TIMER4_disable+0x18>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]

}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40000800 	.word	0x40000800

080017c0 <TIMER4_delay>:
	TIMER3_disable();

}

void TIMER4_delay(uint32_t num_of_sec)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	TIMER4_enable();
 80017c8:	f7ff ffc2 	bl	8001750 <TIMER4_enable>

	timer4.countTicks = 0;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <TIMER4_delay+0x2c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 80017d2:	bf00      	nop
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <TIMER4_delay+0x2c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d8fa      	bhi.n	80017d4 <TIMER4_delay+0x14>

	TIMER4_disable();
 80017de:	f7ff ffe1 	bl	80017a4 <TIMER4_disable>

}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000598 	.word	0x20000598

080017f0 <TIMER2_set_timeout>:


void TIMER2_set_timeout(uint32_t num_of_sec)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	timer2.targetTick = num_of_sec;
 80017f8:	4a05      	ldr	r2, [pc, #20]	; (8001810 <TIMER2_set_timeout+0x20>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6053      	str	r3, [r2, #4]
	timer2.countTicks = 0;
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <TIMER2_set_timeout+0x20>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
	TIMER2_enable();
 8001804:	f7ff ff88 	bl	8001718 <TIMER2_enable>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000588 	.word	0x20000588

08001814 <TIMER2_timeout_done>:

BOOL TIMER2_timeout_done(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <TIMER2_timeout_done+0x20>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <TIMER2_timeout_done+0x20>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d303      	bcc.n	800182c <TIMER2_timeout_done+0x18>

		TIMER2_disable();
 8001824:	f7ff ffa2 	bl	800176c <TIMER2_disable>
		return TRUE;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <TIMER2_timeout_done+0x1a>
	}
	return FALSE;
 800182c:	2300      	movs	r3, #0

}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000588 	.word	0x20000588

08001838 <TIMER3_set_timeout>:


void TIMER3_set_timeout(uint32_t num_of_sec)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <TIMER3_set_timeout+0x20>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6053      	str	r3, [r2, #4]
	timer3.countTicks = 0;
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <TIMER3_set_timeout+0x20>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
	TIMER3_enable();
 800184c:	f7ff ff72 	bl	8001734 <TIMER3_enable>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000590 	.word	0x20000590

0800185c <TIMER3_timeout_done>:

BOOL TIMER3_timeout_done(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <TIMER3_timeout_done+0x20>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <TIMER3_timeout_done+0x20>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d303      	bcc.n	8001874 <TIMER3_timeout_done+0x18>

		TIMER3_disable();
 800186c:	f7ff ff8c 	bl	8001788 <TIMER3_disable>
		return TRUE;
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <TIMER3_timeout_done+0x1a>
	}
	return FALSE;
 8001874:	2300      	movs	r3, #0

}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000590 	.word	0x20000590

08001880 <TIMER4_set_timeout>:


void TIMER4_set_timeout(uint32_t num_of_seconds)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	timer4.targetTick = num_of_seconds;
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <TIMER4_set_timeout+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6053      	str	r3, [r2, #4]
	timer4.countTicks = 0;
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <TIMER4_set_timeout+0x20>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	TIMER4_enable();
 8001894:	f7ff ff5c 	bl	8001750 <TIMER4_enable>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000598 	.word	0x20000598

080018a4 <TIMER4_timeout_done>:

BOOL TIMER4_timeout_done(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	if(timer4.countTicks >= timer4.targetTick){
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <TIMER4_timeout_done+0x20>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <TIMER4_timeout_done+0x20>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d303      	bcc.n	80018bc <TIMER4_timeout_done+0x18>

		TIMER4_disable();
 80018b4:	f7ff ff76 	bl	80017a4 <TIMER4_disable>
		return TRUE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <TIMER4_timeout_done+0x1a>
	}
	return FALSE;
 80018bc:	2300      	movs	r3, #0

}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000598 	.word	0x20000598

080018c8 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 80018cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d115      	bne.n	8001906 <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~(0x0001);
 80018da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <TIM2_IRQHandler+0x48>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <TIM2_IRQHandler+0x48>)
 80018f2:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer2.countTicks == MAX_COUNT){
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <TIM2_IRQHandler+0x48>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <TIM2_IRQHandler+0x3e>
			timer2.countTicks = 0;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <TIM2_IRQHandler+0x48>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER2\r\n"));//For test


}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000588 	.word	0x20000588

08001914 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <TIM3_IRQHandler+0x40>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b01      	cmp	r3, #1
 8001922:	d113      	bne.n	800194c <TIM3_IRQHandler+0x38>
	{
		TIM3->SR &= ~(0x0001);
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <TIM3_IRQHandler+0x40>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <TIM3_IRQHandler+0x40>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <TIM3_IRQHandler+0x44>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <TIM3_IRQHandler+0x44>)
 8001938:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer3.countTicks == MAX_COUNT){
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <TIM3_IRQHandler+0x44>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <TIM3_IRQHandler+0x38>
			timer3.countTicks = 0;
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <TIM3_IRQHandler+0x44>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER3\r\n"));//For test


}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40000400 	.word	0x40000400
 8001958:	20000590 	.word	0x20000590

0800195c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <TIM4_IRQHandler+0x40>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d113      	bne.n	8001994 <TIM4_IRQHandler+0x38>
	{
		TIM4->SR &= ~(0x0001);
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <TIM4_IRQHandler+0x40>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <TIM4_IRQHandler+0x40>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <TIM4_IRQHandler+0x44>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <TIM4_IRQHandler+0x44>)
 8001980:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer4.countTicks == MAX_COUNT){
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <TIM4_IRQHandler+0x44>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800198a:	4293      	cmp	r3, r2
 800198c:	d102      	bne.n	8001994 <TIM4_IRQHandler+0x38>
			timer4.countTicks = 0;
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <TIM4_IRQHandler+0x44>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
		}

	}
	// USART2_write((uint8_t*)("\r\nTIMER4\r\n"));//For test

}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40000800 	.word	0x40000800
 80019a0:	20000598 	.word	0x20000598

080019a4 <__NVIC_SetPriorityGrouping>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4906      	ldr	r1, [pc, #24]	; (8001a20 <__NVIC_EnableIRQ+0x34>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <USART1_NEW_LINE_FOUND_get>:

static uint8_t *START;  // for search UART2_write_line
static uint8_t *END;  // for search


BOOL USART1_NEW_LINE_FOUND_get(void){
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	return usart1.new_line_found;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <USART1_NEW_LINE_FOUND_get+0x14>)
 8001a7e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200009b4 	.word	0x200009b4

08001a90 <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	usart1.new_line_read = TRUE;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <USART1_NEW_LINE_READ_set+0x14>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	200009b4 	.word	0x200009b4

08001aa8 <USART2_NEW_LINE_FOUND_get>:


BOOL USART2_NEW_LINE_FOUND_get(void){
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	return usart2.new_line_found;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <USART2_NEW_LINE_FOUND_get+0x14>)
 8001aae:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200005a0 	.word	0x200005a0

08001ac0 <USART2_NEW_LINE_READ_set>:

void USART2_NEW_LINE_READ_set(void){
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	usart2.new_line_read = TRUE;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <USART2_NEW_LINE_READ_set+0x14>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	200005a0 	.word	0x200005a0

08001ad8 <USART2_init>:



void USART2_init(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	/*This program works when TeraTerm speed is set to 9600 and USART_BRR is set to 0x34D.*/

	RESET_FLAG = TRUE; // for ESC
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <USART2_init+0xa8>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <USART2_init+0xac>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <USART2_init+0xac>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <USART2_init+0xb0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <USART2_init+0xb0>)
 8001af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af8:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <USART2_init+0xb0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <USART2_init+0xb0>)
 8001b00:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8001b04:	6013      	str	r3, [r2, #0]

	/*Configure USART2 Rx (PA3) as Input*/
	GPIOA->CRL &= 0xFFFF0FFF; //Leave all bits as they are except for bit 3 (see reference manual 9.2.2)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <USART2_init+0xb0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <USART2_init+0xb0>)
 8001b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b10:	6013      	str	r3, [r2, #0]
	//For Input Pull-Up (See reference manual p. 167)
	GPIOA->CRL |= 0x00008000; //configure as input with pull up/pull down (see reference manual 9.2.2).
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <USART2_init+0xb0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <USART2_init+0xb0>)
 8001b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1c:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= 0x00000008;//(reference manual p. 161 and 9.2.4)
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <USART2_init+0xb0>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <USART2_init+0xb0>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see reference manual 8.3.8)
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <USART2_init+0xac>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <USART2_init+0xac>)
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	61d3      	str	r3, [r2, #28]
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO


	/*Following directions RM p. 792 (Setting Tx procesure)*/
	/*Following directions RM p. 795 (Setting Rx procesure) */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <USART2_init+0xb4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <USART2_init+0xb4>)
 8001b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b40:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <USART2_init+0xb4>)
 8001b44:	f240 324d 	movw	r2, #845	; 0x34d
 8001b48:	609a      	str	r2, [r3, #8]

	/*Enable USART Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <USART2_init+0xb4>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <USART2_init+0xb4>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b56:	b672      	cpsid	i
	/*Enable USART Receive*/
	//USART2->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)

	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART2->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <USART2_init+0xb4>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <USART2_init+0xb4>)
 8001b5e:	f043 0320 	orr.w	r3, r3, #32
 8001b62:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001b64:	2007      	movs	r0, #7
 8001b66:	f7ff ff1d 	bl	80019a4 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2026      	movs	r0, #38	; 0x26
 8001b6e:	f7ff ff59 	bl	8001a24 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
 8001b72:	2026      	movs	r0, #38	; 0x26
 8001b74:	f7ff ff3a 	bl	80019ec <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b78:	b662      	cpsie	i
	__enable_irq();
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000ddc 	.word	0x20000ddc
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40004400 	.word	0x40004400

08001b90 <USART1_init>:

void USART1_init(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <USART1_init+0xac>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <USART1_init+0xac>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <USART1_init+0xb0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <USART1_init+0xb0>)
 8001ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001baa:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <USART1_init+0xb0>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <USART1_init+0xb0>)
 8001bb2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001bb6:	6053      	str	r3, [r2, #4]


	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <USART1_init+0xb0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <USART1_init+0xb0>)
 8001bbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bc2:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <USART1_init+0xb0>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <USART1_init+0xb0>)
 8001bca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bce:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <USART1_init+0xb0>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <USART1_init+0xb0>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <USART1_init+0xac>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <USART1_init+0xac>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be6:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <USART1_init+0xb4>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <USART1_init+0xb4>)
 8001bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf2:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <USART1_init+0xb4>)
 8001bf6:	2245      	movs	r2, #69	; 0x45
 8001bf8:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <USART1_init+0xb4>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <USART1_init+0xb4>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <USART1_init+0xb4>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <USART1_init+0xb4>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c12:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <USART1_init+0xb4>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <USART1_init+0xb4>)
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001c20:	2007      	movs	r0, #7
 8001c22:	f7ff febf 	bl	80019a4 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001c26:	2100      	movs	r1, #0
 8001c28:	2025      	movs	r0, #37	; 0x25
 8001c2a:	f7ff fefb 	bl	8001a24 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8001c2e:	2025      	movs	r0, #37	; 0x25
 8001c30:	f7ff fedc 	bl	80019ec <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c34:	b662      	cpsie	i
	__enable_irq();

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40013800 	.word	0x40013800

08001c48 <USART2_enable_Rx>:



void USART2_enable_Rx(void){
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

	USART2->CR1 |= 0x00000004;// set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <USART2_enable_Rx+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <USART2_enable_Rx+0x18>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	60d3      	str	r3, [r2, #12]

}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40004400 	.word	0x40004400

08001c64 <USART2_disable_Rx>:

void USART2_disable_Rx(void){
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(0x00000004);// reset the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <USART2_disable_Rx+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <USART2_disable_Rx+0x18>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	60d3      	str	r3, [r2, #12]

}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40004400 	.word	0x40004400

08001c80 <USART2_set_buffer_Tx>:

void USART2_set_buffer_Tx(uint8_t *msg){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	480b      	ldr	r0, [pc, #44]	; (8001cbc <USART2_set_buffer_Tx+0x3c>)
 8001c90:	f000 fbad 	bl	80023ee <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <USART2_set_buffer_Tx+0x3c>)
 8001c98:	f000 fbd2 	bl	8002440 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7fe fa67 	bl	8000170 <strlen>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <USART2_set_buffer_Tx+0x3c>)
 8001ca6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}

	usart2.write_index = 0;
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <USART2_set_buffer_Tx+0x3c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200005a0 	.word	0x200005a0

08001cc0 <USART2_set_buffer_Rx>:

void USART2_set_buffer_Rx(){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

	memset(usart2.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <USART2_set_buffer_Rx+0x24>)
 8001ccc:	f000 fb8f 	bl	80023ee <memset>
	usart2.Rx_len = 0;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <USART2_set_buffer_Rx+0x28>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart2.read_index = 0;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <USART2_set_buffer_Rx+0x28>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200007a0 	.word	0x200007a0
 8001ce8:	200005a0 	.word	0x200005a0

08001cec <USART2_write>:

void USART2_write(uint8_t* msg){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with msg*/
	USART2_set_buffer_Tx(msg);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffc3 	bl	8001c80 <USART2_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART2_set_buffer_Rx();
 8001cfa:	f7ff ffe1 	bl	8001cc0 <USART2_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart2.new_line_found = FALSE;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <USART2_write+0x84>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart2.new_line_read = TRUE;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <USART2_write+0x84>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	while(usart2.write_index < usart2.Tx_len)
 8001d0e:	e014      	b.n	8001d3a <USART2_write+0x4e>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001d10:	bf00      	nop
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <USART2_write+0x88>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f9      	beq.n	8001d12 <USART2_write+0x26>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <USART2_write+0x84>)
 8001d20:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <USART2_write+0x84>)
 8001d26:	5cd2      	ldrb	r2, [r2, r3]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <USART2_write+0x88>)
 8001d2a:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <USART2_write+0x84>)
 8001d2e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <USART2_write+0x84>)
 8001d36:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <USART2_write+0x84>)
 8001d3c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <USART2_write+0x84>)
 8001d42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3e2      	bcc.n	8001d10 <USART2_write+0x24>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001d4a:	bf00      	nop
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <USART2_write+0x88>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b40      	cmp	r3, #64	; 0x40
 8001d56:	d1f9      	bne.n	8001d4c <USART2_write+0x60>
	usart2.write_index = 0;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <USART2_write+0x84>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <USART2_write+0x84>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200005a0 	.word	0x200005a0
 8001d74:	40004400 	.word	0x40004400

08001d78 <USART2_write_line>:

void USART2_write_line(uint8_t *start, uint8_t *end){
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d86:	2100      	movs	r1, #0
 8001d88:	4833      	ldr	r0, [pc, #204]	; (8001e58 <USART2_write_line+0xe0>)
 8001d8a:	f000 fb30 	bl	80023ee <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d98:	3301      	adds	r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0c      	bge.n	8001db8 <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <USART2_write_line+0xe0>)
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <USART2_write_line+0xe4>)
 8001da2:	4614      	mov	r4, r2
 8001da4:	461d      	mov	r5, r3
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <USART2_write_line+0xe0>)
 8001db0:	2213      	movs	r2, #19
 8001db2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001db6:	e01a      	b.n	8001dee <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <USART2_write_line+0xe0>)
 8001dc6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		while(start < end){
 8001dca:	e00c      	b.n	8001de6 <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7819      	ldrb	r1, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <USART2_write_line+0xe0>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
			start++;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
			i++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
		while(start < end){
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3ee      	bcc.n	8001dcc <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <USART2_write_line+0xe0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

	while(usart2.write_index < usart2.Tx_len)
 8001df6:	e014      	b.n	8001e22 <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001df8:	bf00      	nop
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <USART2_write_line+0xe8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f9      	beq.n	8001dfa <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <USART2_write_line+0xe0>)
 8001e08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e0c:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <USART2_write_line+0xe0>)
 8001e0e:	5cd2      	ldrb	r2, [r2, r3]
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <USART2_write_line+0xe8>)
 8001e12:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <USART2_write_line+0xe0>)
 8001e16:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <USART2_write_line+0xe0>)
 8001e1e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <USART2_write_line+0xe0>)
 8001e24:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <USART2_write_line+0xe0>)
 8001e2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3e2      	bcc.n	8001df8 <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001e32:	bf00      	nop
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <USART2_write_line+0xe8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d1f9      	bne.n	8001e34 <USART2_write_line+0xbc>
	usart2.write_index = 0;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <USART2_write_line+0xe0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <USART2_write_line+0xe0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	200005a0 	.word	0x200005a0
 8001e5c:	08003748 	.word	0x08003748
 8001e60:	40004400 	.word	0x40004400

08001e64 <USART2_read_buffer_Rx>:

BOOL USART2_read_buffer_Rx(uint32_t dest_size, uint8_t *dest){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]


	memset(dest, '\0', dest_size*sizeof(uint8_t));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	2100      	movs	r1, #0
 8001e72:	6838      	ldr	r0, [r7, #0]
 8001e74:	f000 fabb 	bl	80023ee <memset>
	if((usart2.Rx_len + 1) < dest_size){
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <USART2_read_buffer_Rx+0x60>)
 8001e7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e7e:	3301      	adds	r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d919      	bls.n	8001eba <USART2_read_buffer_Rx+0x56>

		uint32_t i = 0; // Rx index
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001e8a:	e00c      	b.n	8001ea6 <USART2_read_buffer_Rx+0x42>
			dest[i] = usart2.Rx[i];
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <USART2_read_buffer_Rx+0x60>)
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	440a      	add	r2, r1
 8001e98:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
			i++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <USART2_read_buffer_Rx+0x60>)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b0d      	cmp	r3, #13
 8001eb4:	d1ea      	bne.n	8001e8c <USART2_read_buffer_Rx+0x28>
		}
		return TRUE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <USART2_read_buffer_Rx+0x58>
	}
	return FALSE;
 8001eba:	2300      	movs	r3, #0

}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200005a0 	.word	0x200005a0

08001ec8 <USART2_ok>:

BOOL USART2_ok(void){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

	if(strstr((const char*)usart2.Rx , (const char*)"ok\r\n")){
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <USART2_ok+0x40>)
 8001ece:	480f      	ldr	r0, [pc, #60]	; (8001f0c <USART2_ok+0x44>)
 8001ed0:	f000 fabe 	bl	8002450 <strstr>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <USART2_ok+0x16>
		return TRUE;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e012      	b.n	8001f04 <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"OK\r\n")){
 8001ede:	490c      	ldr	r1, [pc, #48]	; (8001f10 <USART2_ok+0x48>)
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <USART2_ok+0x44>)
 8001ee2:	f000 fab5 	bl	8002450 <strstr>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <USART2_ok+0x28>
		return TRUE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e009      	b.n	8001f04 <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"Ok\r\n")){
 8001ef0:	4908      	ldr	r1, [pc, #32]	; (8001f14 <USART2_ok+0x4c>)
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <USART2_ok+0x44>)
 8001ef4:	f000 faac 	bl	8002450 <strstr>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <USART2_ok+0x3a>
		return TRUE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <USART2_ok+0x3c>
	}
	return FALSE;
 8001f02:	2300      	movs	r3, #0

}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	0800375c 	.word	0x0800375c
 8001f0c:	200007a0 	.word	0x200007a0
 8001f10:	08003764 	.word	0x08003764
 8001f14:	0800376c 	.word	0x0800376c

08001f18 <USART1_write>:





void USART1_write(uint8_t *command){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	USART1_set_buffer_Tx(command);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f83f 	bl	8001fa4 <USART1_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART1_set_buffer_Rx();
 8001f26:	f000 f85d 	bl	8001fe4 <USART1_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart1.new_line_found = FALSE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <USART1_write+0x84>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart1.new_line_read = TRUE;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <USART1_write+0x84>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001f3a:	e014      	b.n	8001f66 <USART1_write+0x4e>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001f3c:	bf00      	nop
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <USART1_write+0x88>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f9      	beq.n	8001f3e <USART1_write+0x26>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <USART1_write+0x84>)
 8001f4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <USART1_write+0x84>)
 8001f52:	5cd2      	ldrb	r2, [r2, r3]
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <USART1_write+0x88>)
 8001f56:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <USART1_write+0x84>)
 8001f5a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <USART1_write+0x84>)
 8001f62:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <USART1_write+0x84>)
 8001f68:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <USART1_write+0x84>)
 8001f6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3e2      	bcc.n	8001f3c <USART1_write+0x24>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001f76:	bf00      	nop
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <USART1_write+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d1f9      	bne.n	8001f78 <USART1_write+0x60>
	usart1.write_index = 0;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <USART1_write+0x84>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <USART1_write+0x84>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200009b4 	.word	0x200009b4
 8001fa0:	40013800 	.word	0x40013800

08001fa4 <USART1_set_buffer_Tx>:

void USART1_set_buffer_Tx(uint8_t *command){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <USART1_set_buffer_Tx+0x3c>)
 8001fb4:	f000 fa1b 	bl	80023ee <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <USART1_set_buffer_Tx+0x3c>)
 8001fbc:	f000 fa40 	bl	8002440 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe f8d5 	bl	8000170 <strlen>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <USART1_set_buffer_Tx+0x3c>)
 8001fca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <USART1_set_buffer_Tx+0x3c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200009b4 	.word	0x200009b4

08001fe4 <USART1_set_buffer_Rx>:

void USART1_set_buffer_Rx(){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	2100      	movs	r1, #0
 8001fee:	4809      	ldr	r0, [pc, #36]	; (8002014 <USART1_set_buffer_Rx+0x30>)
 8001ff0:	f000 f9fd 	bl	80023ee <memset>
	usart1.Rx_len = 0;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <USART1_set_buffer_Rx+0x34>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <USART1_set_buffer_Rx+0x34>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <USART1_set_buffer_Rx+0x38>)
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <USART1_set_buffer_Rx+0x30>)
 8002008:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <USART1_set_buffer_Rx+0x3c>)
 800200c:	4a01      	ldr	r2, [pc, #4]	; (8002014 <USART1_set_buffer_Rx+0x30>)
 800200e:	601a      	str	r2, [r3, #0]

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000bb4 	.word	0x20000bb4
 8002018:	200009b4 	.word	0x200009b4
 800201c:	20000dcc 	.word	0x20000dcc
 8002020:	20000dd0 	.word	0x20000dd0

08002024 <USART1_search_buffer_Rx>:

STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <USART1_search_buffer_Rx+0x9c>)
 8002030:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002034:	3301      	adds	r3, #1
 8002036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203a:	d236      	bcs.n	80020aa <USART1_search_buffer_Rx+0x86>

		START = END;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <USART1_search_buffer_Rx+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <USART1_search_buffer_Rx+0xa4>)
 8002042:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <USART1_search_buffer_Rx+0x9c>)
 8002046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <USART1_search_buffer_Rx+0xa8>)
 800204c:	4413      	add	r3, r2
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <USART1_search_buffer_Rx+0xa0>)
 8002050:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	481d      	ldr	r0, [pc, #116]	; (80020cc <USART1_search_buffer_Rx+0xa8>)
 8002056:	f000 f9fb 	bl	8002450 <strstr>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <USART1_search_buffer_Rx+0xa4>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <USART1_search_buffer_Rx+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7ff fe84 	bl	8001d78 <USART2_write_line>
			return PASS;
 8002070:	2300      	movs	r3, #0
 8002072:	e021      	b.n	80020b8 <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <USART1_search_buffer_Rx+0xa8>)
 8002078:	f000 f9ea 	bl	8002450 <strstr>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <USART1_search_buffer_Rx+0xa4>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <USART1_search_buffer_Rx+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7ff fe73 	bl	8001d78 <USART2_write_line>
			return FAIL;
 8002092:	2302      	movs	r3, #2
 8002094:	e010      	b.n	80020b8 <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <USART1_search_buffer_Rx+0xa4>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <USART1_search_buffer_Rx+0xa0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7ff fe69 	bl	8001d78 <USART2_write_line>
			return STANDBY;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e006      	b.n	80020b8 <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 80020aa:	4809      	ldr	r0, [pc, #36]	; (80020d0 <USART1_search_buffer_Rx+0xac>)
 80020ac:	f7ff fe1e 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <USART1_search_buffer_Rx+0xa8>)
 80020b2:	f7ff fe1b 	bl	8001cec <USART2_write>
		return FAIL;
 80020b6:	2302      	movs	r3, #2
	}

}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200009b4 	.word	0x200009b4
 80020c4:	20000dd0 	.word	0x20000dd0
 80020c8:	20000dcc 	.word	0x20000dcc
 80020cc:	20000bb4 	.word	0x20000bb4
 80020d0:	08003774 	.word	0x08003774

080020d4 <USART1_check_state_buffer_Rx>:

SWITCH_STATE USART1_check_state_buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <USART1_check_state_buffer_Rx+0xb8>)
 80020e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80020e6:	3301      	adds	r3, #1
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ec:	d242      	bcs.n	8002174 <USART1_check_state_buffer_Rx+0xa0>

		START = END;
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <USART1_check_state_buffer_Rx+0xbc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a28      	ldr	r2, [pc, #160]	; (8002194 <USART1_check_state_buffer_Rx+0xc0>)
 80020f4:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <USART1_check_state_buffer_Rx+0xb8>)
 80020f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 80020fe:	4413      	add	r3, r2
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <USART1_check_state_buffer_Rx+0xbc>)
 8002102:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4824      	ldr	r0, [pc, #144]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 8002108:	f000 f9a2 	bl	8002450 <strstr>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <USART1_check_state_buffer_Rx+0x52>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); //write response to screen
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <USART1_check_state_buffer_Rx+0xc0>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <USART1_check_state_buffer_Rx+0xbc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f7ff fe2b 	bl	8001d78 <USART2_write_line>
			return (uint32_t)ON;
 8002122:	2301      	movs	r3, #1
 8002124:	e02d      	b.n	8002182 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	481b      	ldr	r0, [pc, #108]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 800212a:	f000 f991 	bl	8002450 <strstr>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <USART1_check_state_buffer_Rx+0x74>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <USART1_check_state_buffer_Rx+0xc0>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <USART1_check_state_buffer_Rx+0xbc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f7ff fe1a 	bl	8001d78 <USART2_write_line>
			return (uint32_t)OFF;
 8002144:	2300      	movs	r3, #0
 8002146:	e01c      	b.n	8002182 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4813      	ldr	r0, [pc, #76]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 800214c:	f000 f980 	bl	8002450 <strstr>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <USART1_check_state_buffer_Rx+0x96>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <USART1_check_state_buffer_Rx+0xc0>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <USART1_check_state_buffer_Rx+0xbc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4610      	mov	r0, r2
 8002162:	f7ff fe09 	bl	8001d78 <USART2_write_line>
			return (uint32_t)NO_PATH;
 8002166:	2302      	movs	r3, #2
 8002168:	e00b      	b.n	8002182 <USART1_check_state_buffer_Rx+0xae>
		}
		else{
			USART2_write((uint8_t*)usart1.Rx);//for debuging
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 800216c:	f7ff fdbe 	bl	8001cec <USART2_write>
			return (uint32_t)NON;
 8002170:	2303      	movs	r3, #3
 8002172:	e006      	b.n	8002182 <USART1_check_state_buffer_Rx+0xae>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8002174:	4809      	ldr	r0, [pc, #36]	; (800219c <USART1_check_state_buffer_Rx+0xc8>)
 8002176:	f7ff fdb9 	bl	8001cec <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <USART1_check_state_buffer_Rx+0xc4>)
 800217c:	f7ff fdb6 	bl	8001cec <USART2_write>
		return (uint32_t)NO_PATH;
 8002180:	2302      	movs	r3, #2
	}

}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200009b4 	.word	0x200009b4
 8002190:	20000dd0 	.word	0x20000dd0
 8002194:	20000dcc 	.word	0x20000dcc
 8002198:	20000bb4 	.word	0x20000bb4
 800219c:	08003774 	.word	0x08003774

080021a0 <USART1_IRQHandler>:


/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <USART1_IRQHandler+0xa8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d146      	bne.n	800223e <USART1_IRQHandler+0x9e>

		c = USART1->DR; // clear RXNE bit
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <USART1_IRQHandler+0xa8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <USART1_IRQHandler+0xac>)
 80021b8:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021c0:	3301      	adds	r3, #1
 80021c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c6:	d303      	bcc.n	80021d0 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <USART1_IRQHandler+0xac>)
 80021d8:	7811      	ldrb	r1, [r2, #0]
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a18      	ldr	r2, [pc, #96]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021ee:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <USART1_IRQHandler+0xb0>)
 80021fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart1.new_line_read){
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <USART1_IRQHandler+0xac>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b0a      	cmp	r3, #10
 8002206:	d10d      	bne.n	8002224 <USART1_IRQHandler+0x84>
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <USART1_IRQHandler+0xb0>)
 800220a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <USART1_IRQHandler+0x84>
			usart1.new_line_found = TRUE;
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <USART1_IRQHandler+0xb0>)
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart1.new_line_read = FALSE;
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <USART1_IRQHandler+0xb0>)
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart1.new_line_found = FALSE;
		}

	}

}
 8002222:	e00c      	b.n	800223e <USART1_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart1.new_line_read){
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <USART1_IRQHandler+0xac>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b0a      	cmp	r3, #10
 800222a:	d008      	beq.n	800223e <USART1_IRQHandler+0x9e>
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <USART1_IRQHandler+0xb0>)
 800222e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <USART1_IRQHandler+0x9e>
			usart1.new_line_found = FALSE;
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <USART1_IRQHandler+0xb0>)
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	20000dc8 	.word	0x20000dc8
 8002250:	200009b4 	.word	0x200009b4

08002254 <USART2_IRQHandler>:

/*USART2 Interrupt Handler - Only Rx is set to have interrupts*/
void USART2_IRQHandler(void){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0

	if(((USART2->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <USART2_IRQHandler+0xc8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b20      	cmp	r3, #32
 8002262:	d158      	bne.n	8002316 <USART2_IRQHandler+0xc2>

		c = USART2->DR; // clear RXNE bit
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <USART2_IRQHandler+0xc8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <USART2_IRQHandler+0xcc>)
 800226c:	701a      	strb	r2, [r3, #0]


		if(c == 0x1B && RESET_FLAG){ // User entered ESC after reset
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <USART2_IRQHandler+0xcc>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b1b      	cmp	r3, #27
 8002274:	d10c      	bne.n	8002290 <USART2_IRQHandler+0x3c>
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <USART2_IRQHandler+0xd0>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <USART2_IRQHandler+0x3c>

			RESET_FLAG = FALSE;
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <USART2_IRQHandler+0xd0>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
			QUEUE_add_event(configuration_Handler);
 8002284:	4828      	ldr	r0, [pc, #160]	; (8002328 <USART2_IRQHandler+0xd4>)
 8002286:	f7fe fddd 	bl	8000e44 <QUEUE_add_event>
			USART2_disable_Rx();
 800228a:	f7ff fceb 	bl	8001c64 <USART2_disable_Rx>
		if(c == 0x1B && RESET_FLAG){ // User entered ESC after reset
 800228e:	e042      	b.n	8002316 <USART2_IRQHandler+0xc2>

		}
		else{

			if((usart2.read_index + 1) >= BUFF_SIZE){
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <USART2_IRQHandler+0xd8>)
 8002292:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002296:	3301      	adds	r3, #1
 8002298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229c:	d303      	bcc.n	80022a6 <USART2_IRQHandler+0x52>
				usart2.read_index = 0;
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <USART2_IRQHandler+0xd8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			usart2.Rx[usart2.read_index] = (uint8_t)(c & 0xFF);
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <USART2_IRQHandler+0xd8>)
 80022a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <USART2_IRQHandler+0xcc>)
 80022ae:	7811      	ldrb	r1, [r2, #0]
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <USART2_IRQHandler+0xd8>)
 80022b2:	4413      	add	r3, r2
 80022b4:	460a      	mov	r2, r1
 80022b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
			usart2.read_index++;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <USART2_IRQHandler+0xd8>)
 80022bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <USART2_IRQHandler+0xd8>)
 80022c4:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
			usart2.Rx_len++; // count total chars received
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <USART2_IRQHandler+0xd8>)
 80022ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <USART2_IRQHandler+0xd8>)
 80022d2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

			if(c == (uint8_t)'\n' && usart2.new_line_read){
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <USART2_IRQHandler+0xcc>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b0a      	cmp	r3, #10
 80022dc:	d10d      	bne.n	80022fa <USART2_IRQHandler+0xa6>
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <USART2_IRQHandler+0xd8>)
 80022e0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <USART2_IRQHandler+0xa6>
				usart2.new_line_found = TRUE;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <USART2_IRQHandler+0xd8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				usart2.new_line_read = FALSE;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <USART2_IRQHandler+0xd8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 80022f8:	e00d      	b.n	8002316 <USART2_IRQHandler+0xc2>
			}
			else if(c != (uint8_t)'\n' && usart2.new_line_read){
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <USART2_IRQHandler+0xcc>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d009      	beq.n	8002316 <USART2_IRQHandler+0xc2>
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <USART2_IRQHandler+0xd8>)
 8002304:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <USART2_IRQHandler+0xc2>
				usart2.new_line_found = FALSE;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <USART2_IRQHandler+0xd8>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

		}

	}

}
 8002314:	e7ff      	b.n	8002316 <USART2_IRQHandler+0xc2>
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400
 8002320:	20000dc8 	.word	0x20000dc8
 8002324:	20000ddc 	.word	0x20000ddc
 8002328:	080002c1 	.word	0x080002c1
 800232c:	200005a0 	.word	0x200005a0

08002330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490e      	ldr	r1, [pc, #56]	; (8002370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0b      	ldr	r4, [pc, #44]	; (800237c <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800235a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800235e:	f000 f817 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7fe ff83 	bl	800126c <main>

08002366 <LoopForever>:

LoopForever:
    b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   r0, =_estack
 8002368:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002374:	080037d8 	.word	0x080037d8
  ldr r2, =_sbss
 8002378:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800237c:	20000e88 	.word	0x20000e88

08002380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_2_IRQHandler>
	...

08002384 <__errno>:
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <__errno+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000060 	.word	0x20000060

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	2500      	movs	r5, #0
 8002394:	4e0c      	ldr	r6, [pc, #48]	; (80023c8 <__libc_init_array+0x38>)
 8002396:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002398:	1ba4      	subs	r4, r4, r6
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	42a5      	cmp	r5, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	f000 fc58 	bl	8002c54 <_init>
 80023a4:	2500      	movs	r5, #0
 80023a6:	4e0a      	ldr	r6, [pc, #40]	; (80023d0 <__libc_init_array+0x40>)
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <__libc_init_array+0x44>)
 80023aa:	1ba4      	subs	r4, r4, r6
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	42a5      	cmp	r5, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b8:	4798      	blx	r3
 80023ba:	3501      	adds	r5, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c2:	4798      	blx	r3
 80023c4:	3501      	adds	r5, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	080037d0 	.word	0x080037d0
 80023cc:	080037d0 	.word	0x080037d0
 80023d0:	080037d0 	.word	0x080037d0
 80023d4:	080037d4 	.word	0x080037d4

080023d8 <memcpy>:
 80023d8:	b510      	push	{r4, lr}
 80023da:	1e43      	subs	r3, r0, #1
 80023dc:	440a      	add	r2, r1
 80023de:	4291      	cmp	r1, r2
 80023e0:	d100      	bne.n	80023e4 <memcpy+0xc>
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023ec:	e7f7      	b.n	80023de <memcpy+0x6>

080023ee <memset>:
 80023ee:	4603      	mov	r3, r0
 80023f0:	4402      	add	r2, r0
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d100      	bne.n	80023f8 <memset+0xa>
 80023f6:	4770      	bx	lr
 80023f8:	f803 1b01 	strb.w	r1, [r3], #1
 80023fc:	e7f9      	b.n	80023f2 <memset+0x4>
	...

08002400 <siprintf>:
 8002400:	b40e      	push	{r1, r2, r3}
 8002402:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002406:	b500      	push	{lr}
 8002408:	b09c      	sub	sp, #112	; 0x70
 800240a:	ab1d      	add	r3, sp, #116	; 0x74
 800240c:	9002      	str	r0, [sp, #8]
 800240e:	9006      	str	r0, [sp, #24]
 8002410:	9107      	str	r1, [sp, #28]
 8002412:	9104      	str	r1, [sp, #16]
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <siprintf+0x38>)
 8002416:	4909      	ldr	r1, [pc, #36]	; (800243c <siprintf+0x3c>)
 8002418:	f853 2b04 	ldr.w	r2, [r3], #4
 800241c:	9105      	str	r1, [sp, #20]
 800241e:	6800      	ldr	r0, [r0, #0]
 8002420:	a902      	add	r1, sp, #8
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	f000 f888 	bl	8002538 <_svfiprintf_r>
 8002428:	2200      	movs	r2, #0
 800242a:	9b02      	ldr	r3, [sp, #8]
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	b01c      	add	sp, #112	; 0x70
 8002430:	f85d eb04 	ldr.w	lr, [sp], #4
 8002434:	b003      	add	sp, #12
 8002436:	4770      	bx	lr
 8002438:	20000060 	.word	0x20000060
 800243c:	ffff0208 	.word	0xffff0208

08002440 <strcpy>:
 8002440:	4603      	mov	r3, r0
 8002442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002446:	f803 2b01 	strb.w	r2, [r3], #1
 800244a:	2a00      	cmp	r2, #0
 800244c:	d1f9      	bne.n	8002442 <strcpy+0x2>
 800244e:	4770      	bx	lr

08002450 <strstr>:
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	7803      	ldrb	r3, [r0, #0]
 8002454:	b17b      	cbz	r3, 8002476 <strstr+0x26>
 8002456:	4604      	mov	r4, r0
 8002458:	7823      	ldrb	r3, [r4, #0]
 800245a:	4620      	mov	r0, r4
 800245c:	1c66      	adds	r6, r4, #1
 800245e:	b17b      	cbz	r3, 8002480 <strstr+0x30>
 8002460:	1e4a      	subs	r2, r1, #1
 8002462:	1e63      	subs	r3, r4, #1
 8002464:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002468:	b14d      	cbz	r5, 800247e <strstr+0x2e>
 800246a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800246e:	4634      	mov	r4, r6
 8002470:	42af      	cmp	r7, r5
 8002472:	d0f7      	beq.n	8002464 <strstr+0x14>
 8002474:	e7f0      	b.n	8002458 <strstr+0x8>
 8002476:	780b      	ldrb	r3, [r1, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf18      	it	ne
 800247c:	2000      	movne	r0, #0
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	4618      	mov	r0, r3
 8002482:	e7fc      	b.n	800247e <strstr+0x2e>

08002484 <__ssputs_r>:
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	688e      	ldr	r6, [r1, #8]
 800248a:	4682      	mov	sl, r0
 800248c:	429e      	cmp	r6, r3
 800248e:	460c      	mov	r4, r1
 8002490:	4690      	mov	r8, r2
 8002492:	4699      	mov	r9, r3
 8002494:	d837      	bhi.n	8002506 <__ssputs_r+0x82>
 8002496:	898a      	ldrh	r2, [r1, #12]
 8002498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800249c:	d031      	beq.n	8002502 <__ssputs_r+0x7e>
 800249e:	2302      	movs	r3, #2
 80024a0:	6825      	ldr	r5, [r4, #0]
 80024a2:	6909      	ldr	r1, [r1, #16]
 80024a4:	1a6f      	subs	r7, r5, r1
 80024a6:	6965      	ldr	r5, [r4, #20]
 80024a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80024b0:	f109 0301 	add.w	r3, r9, #1
 80024b4:	443b      	add	r3, r7
 80024b6:	429d      	cmp	r5, r3
 80024b8:	bf38      	it	cc
 80024ba:	461d      	movcc	r5, r3
 80024bc:	0553      	lsls	r3, r2, #21
 80024be:	d530      	bpl.n	8002522 <__ssputs_r+0x9e>
 80024c0:	4629      	mov	r1, r5
 80024c2:	f000 fb2d 	bl	8002b20 <_malloc_r>
 80024c6:	4606      	mov	r6, r0
 80024c8:	b950      	cbnz	r0, 80024e0 <__ssputs_r+0x5c>
 80024ca:	230c      	movs	r3, #12
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f8ca 3000 	str.w	r3, [sl]
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024da:	81a3      	strh	r3, [r4, #12]
 80024dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e0:	463a      	mov	r2, r7
 80024e2:	6921      	ldr	r1, [r4, #16]
 80024e4:	f7ff ff78 	bl	80023d8 <memcpy>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f2:	81a3      	strh	r3, [r4, #12]
 80024f4:	6126      	str	r6, [r4, #16]
 80024f6:	443e      	add	r6, r7
 80024f8:	6026      	str	r6, [r4, #0]
 80024fa:	464e      	mov	r6, r9
 80024fc:	6165      	str	r5, [r4, #20]
 80024fe:	1bed      	subs	r5, r5, r7
 8002500:	60a5      	str	r5, [r4, #8]
 8002502:	454e      	cmp	r6, r9
 8002504:	d900      	bls.n	8002508 <__ssputs_r+0x84>
 8002506:	464e      	mov	r6, r9
 8002508:	4632      	mov	r2, r6
 800250a:	4641      	mov	r1, r8
 800250c:	6820      	ldr	r0, [r4, #0]
 800250e:	f000 faa1 	bl	8002a54 <memmove>
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	2000      	movs	r0, #0
 8002516:	1b9b      	subs	r3, r3, r6
 8002518:	60a3      	str	r3, [r4, #8]
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	441e      	add	r6, r3
 800251e:	6026      	str	r6, [r4, #0]
 8002520:	e7dc      	b.n	80024dc <__ssputs_r+0x58>
 8002522:	462a      	mov	r2, r5
 8002524:	f000 fb56 	bl	8002bd4 <_realloc_r>
 8002528:	4606      	mov	r6, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d1e2      	bne.n	80024f4 <__ssputs_r+0x70>
 800252e:	6921      	ldr	r1, [r4, #16]
 8002530:	4650      	mov	r0, sl
 8002532:	f000 faa9 	bl	8002a88 <_free_r>
 8002536:	e7c8      	b.n	80024ca <__ssputs_r+0x46>

08002538 <_svfiprintf_r>:
 8002538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	461d      	mov	r5, r3
 800253e:	898b      	ldrh	r3, [r1, #12]
 8002540:	b09d      	sub	sp, #116	; 0x74
 8002542:	061f      	lsls	r7, r3, #24
 8002544:	4680      	mov	r8, r0
 8002546:	460c      	mov	r4, r1
 8002548:	4616      	mov	r6, r2
 800254a:	d50f      	bpl.n	800256c <_svfiprintf_r+0x34>
 800254c:	690b      	ldr	r3, [r1, #16]
 800254e:	b96b      	cbnz	r3, 800256c <_svfiprintf_r+0x34>
 8002550:	2140      	movs	r1, #64	; 0x40
 8002552:	f000 fae5 	bl	8002b20 <_malloc_r>
 8002556:	6020      	str	r0, [r4, #0]
 8002558:	6120      	str	r0, [r4, #16]
 800255a:	b928      	cbnz	r0, 8002568 <_svfiprintf_r+0x30>
 800255c:	230c      	movs	r3, #12
 800255e:	f8c8 3000 	str.w	r3, [r8]
 8002562:	f04f 30ff 	mov.w	r0, #4294967295
 8002566:	e0c8      	b.n	80026fa <_svfiprintf_r+0x1c2>
 8002568:	2340      	movs	r3, #64	; 0x40
 800256a:	6163      	str	r3, [r4, #20]
 800256c:	2300      	movs	r3, #0
 800256e:	9309      	str	r3, [sp, #36]	; 0x24
 8002570:	2320      	movs	r3, #32
 8002572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002576:	2330      	movs	r3, #48	; 0x30
 8002578:	f04f 0b01 	mov.w	fp, #1
 800257c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002580:	9503      	str	r5, [sp, #12]
 8002582:	4637      	mov	r7, r6
 8002584:	463d      	mov	r5, r7
 8002586:	f815 3b01 	ldrb.w	r3, [r5], #1
 800258a:	b10b      	cbz	r3, 8002590 <_svfiprintf_r+0x58>
 800258c:	2b25      	cmp	r3, #37	; 0x25
 800258e:	d13e      	bne.n	800260e <_svfiprintf_r+0xd6>
 8002590:	ebb7 0a06 	subs.w	sl, r7, r6
 8002594:	d00b      	beq.n	80025ae <_svfiprintf_r+0x76>
 8002596:	4653      	mov	r3, sl
 8002598:	4632      	mov	r2, r6
 800259a:	4621      	mov	r1, r4
 800259c:	4640      	mov	r0, r8
 800259e:	f7ff ff71 	bl	8002484 <__ssputs_r>
 80025a2:	3001      	adds	r0, #1
 80025a4:	f000 80a4 	beq.w	80026f0 <_svfiprintf_r+0x1b8>
 80025a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025aa:	4453      	add	r3, sl
 80025ac:	9309      	str	r3, [sp, #36]	; 0x24
 80025ae:	783b      	ldrb	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 809d 	beq.w	80026f0 <_svfiprintf_r+0x1b8>
 80025b6:	2300      	movs	r3, #0
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025c0:	9304      	str	r3, [sp, #16]
 80025c2:	9307      	str	r3, [sp, #28]
 80025c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025c8:	931a      	str	r3, [sp, #104]	; 0x68
 80025ca:	462f      	mov	r7, r5
 80025cc:	2205      	movs	r2, #5
 80025ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80025d2:	4850      	ldr	r0, [pc, #320]	; (8002714 <_svfiprintf_r+0x1dc>)
 80025d4:	f000 fa30 	bl	8002a38 <memchr>
 80025d8:	9b04      	ldr	r3, [sp, #16]
 80025da:	b9d0      	cbnz	r0, 8002612 <_svfiprintf_r+0xda>
 80025dc:	06d9      	lsls	r1, r3, #27
 80025de:	bf44      	itt	mi
 80025e0:	2220      	movmi	r2, #32
 80025e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025e6:	071a      	lsls	r2, r3, #28
 80025e8:	bf44      	itt	mi
 80025ea:	222b      	movmi	r2, #43	; 0x2b
 80025ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025f0:	782a      	ldrb	r2, [r5, #0]
 80025f2:	2a2a      	cmp	r2, #42	; 0x2a
 80025f4:	d015      	beq.n	8002622 <_svfiprintf_r+0xea>
 80025f6:	462f      	mov	r7, r5
 80025f8:	2000      	movs	r0, #0
 80025fa:	250a      	movs	r5, #10
 80025fc:	9a07      	ldr	r2, [sp, #28]
 80025fe:	4639      	mov	r1, r7
 8002600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002604:	3b30      	subs	r3, #48	; 0x30
 8002606:	2b09      	cmp	r3, #9
 8002608:	d94d      	bls.n	80026a6 <_svfiprintf_r+0x16e>
 800260a:	b1b8      	cbz	r0, 800263c <_svfiprintf_r+0x104>
 800260c:	e00f      	b.n	800262e <_svfiprintf_r+0xf6>
 800260e:	462f      	mov	r7, r5
 8002610:	e7b8      	b.n	8002584 <_svfiprintf_r+0x4c>
 8002612:	4a40      	ldr	r2, [pc, #256]	; (8002714 <_svfiprintf_r+0x1dc>)
 8002614:	463d      	mov	r5, r7
 8002616:	1a80      	subs	r0, r0, r2
 8002618:	fa0b f000 	lsl.w	r0, fp, r0
 800261c:	4318      	orrs	r0, r3
 800261e:	9004      	str	r0, [sp, #16]
 8002620:	e7d3      	b.n	80025ca <_svfiprintf_r+0x92>
 8002622:	9a03      	ldr	r2, [sp, #12]
 8002624:	1d11      	adds	r1, r2, #4
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	9103      	str	r1, [sp, #12]
 800262a:	2a00      	cmp	r2, #0
 800262c:	db01      	blt.n	8002632 <_svfiprintf_r+0xfa>
 800262e:	9207      	str	r2, [sp, #28]
 8002630:	e004      	b.n	800263c <_svfiprintf_r+0x104>
 8002632:	4252      	negs	r2, r2
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	9207      	str	r2, [sp, #28]
 800263a:	9304      	str	r3, [sp, #16]
 800263c:	783b      	ldrb	r3, [r7, #0]
 800263e:	2b2e      	cmp	r3, #46	; 0x2e
 8002640:	d10c      	bne.n	800265c <_svfiprintf_r+0x124>
 8002642:	787b      	ldrb	r3, [r7, #1]
 8002644:	2b2a      	cmp	r3, #42	; 0x2a
 8002646:	d133      	bne.n	80026b0 <_svfiprintf_r+0x178>
 8002648:	9b03      	ldr	r3, [sp, #12]
 800264a:	3702      	adds	r7, #2
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	9203      	str	r2, [sp, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	bfb8      	it	lt
 8002656:	f04f 33ff 	movlt.w	r3, #4294967295
 800265a:	9305      	str	r3, [sp, #20]
 800265c:	4d2e      	ldr	r5, [pc, #184]	; (8002718 <_svfiprintf_r+0x1e0>)
 800265e:	2203      	movs	r2, #3
 8002660:	7839      	ldrb	r1, [r7, #0]
 8002662:	4628      	mov	r0, r5
 8002664:	f000 f9e8 	bl	8002a38 <memchr>
 8002668:	b138      	cbz	r0, 800267a <_svfiprintf_r+0x142>
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	1b40      	subs	r0, r0, r5
 800266e:	fa03 f000 	lsl.w	r0, r3, r0
 8002672:	9b04      	ldr	r3, [sp, #16]
 8002674:	3701      	adds	r7, #1
 8002676:	4303      	orrs	r3, r0
 8002678:	9304      	str	r3, [sp, #16]
 800267a:	7839      	ldrb	r1, [r7, #0]
 800267c:	2206      	movs	r2, #6
 800267e:	4827      	ldr	r0, [pc, #156]	; (800271c <_svfiprintf_r+0x1e4>)
 8002680:	1c7e      	adds	r6, r7, #1
 8002682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002686:	f000 f9d7 	bl	8002a38 <memchr>
 800268a:	2800      	cmp	r0, #0
 800268c:	d038      	beq.n	8002700 <_svfiprintf_r+0x1c8>
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <_svfiprintf_r+0x1e8>)
 8002690:	bb13      	cbnz	r3, 80026d8 <_svfiprintf_r+0x1a0>
 8002692:	9b03      	ldr	r3, [sp, #12]
 8002694:	3307      	adds	r3, #7
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	3308      	adds	r3, #8
 800269c:	9303      	str	r3, [sp, #12]
 800269e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a0:	444b      	add	r3, r9
 80026a2:	9309      	str	r3, [sp, #36]	; 0x24
 80026a4:	e76d      	b.n	8002582 <_svfiprintf_r+0x4a>
 80026a6:	fb05 3202 	mla	r2, r5, r2, r3
 80026aa:	2001      	movs	r0, #1
 80026ac:	460f      	mov	r7, r1
 80026ae:	e7a6      	b.n	80025fe <_svfiprintf_r+0xc6>
 80026b0:	2300      	movs	r3, #0
 80026b2:	250a      	movs	r5, #10
 80026b4:	4619      	mov	r1, r3
 80026b6:	3701      	adds	r7, #1
 80026b8:	9305      	str	r3, [sp, #20]
 80026ba:	4638      	mov	r0, r7
 80026bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026c0:	3a30      	subs	r2, #48	; 0x30
 80026c2:	2a09      	cmp	r2, #9
 80026c4:	d903      	bls.n	80026ce <_svfiprintf_r+0x196>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0c8      	beq.n	800265c <_svfiprintf_r+0x124>
 80026ca:	9105      	str	r1, [sp, #20]
 80026cc:	e7c6      	b.n	800265c <_svfiprintf_r+0x124>
 80026ce:	fb05 2101 	mla	r1, r5, r1, r2
 80026d2:	2301      	movs	r3, #1
 80026d4:	4607      	mov	r7, r0
 80026d6:	e7f0      	b.n	80026ba <_svfiprintf_r+0x182>
 80026d8:	ab03      	add	r3, sp, #12
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4622      	mov	r2, r4
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_svfiprintf_r+0x1ec>)
 80026e0:	a904      	add	r1, sp, #16
 80026e2:	4640      	mov	r0, r8
 80026e4:	f3af 8000 	nop.w
 80026e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026ec:	4681      	mov	r9, r0
 80026ee:	d1d6      	bne.n	800269e <_svfiprintf_r+0x166>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	065b      	lsls	r3, r3, #25
 80026f4:	f53f af35 	bmi.w	8002562 <_svfiprintf_r+0x2a>
 80026f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026fa:	b01d      	add	sp, #116	; 0x74
 80026fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002700:	ab03      	add	r3, sp, #12
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4622      	mov	r2, r4
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_svfiprintf_r+0x1ec>)
 8002708:	a904      	add	r1, sp, #16
 800270a:	4640      	mov	r0, r8
 800270c:	f000 f882 	bl	8002814 <_printf_i>
 8002710:	e7ea      	b.n	80026e8 <_svfiprintf_r+0x1b0>
 8002712:	bf00      	nop
 8002714:	0800379b 	.word	0x0800379b
 8002718:	080037a1 	.word	0x080037a1
 800271c:	080037a5 	.word	0x080037a5
 8002720:	00000000 	.word	0x00000000
 8002724:	08002485 	.word	0x08002485

08002728 <_printf_common>:
 8002728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	4691      	mov	r9, r2
 800272e:	461f      	mov	r7, r3
 8002730:	688a      	ldr	r2, [r1, #8]
 8002732:	690b      	ldr	r3, [r1, #16]
 8002734:	4606      	mov	r6, r0
 8002736:	4293      	cmp	r3, r2
 8002738:	bfb8      	it	lt
 800273a:	4613      	movlt	r3, r2
 800273c:	f8c9 3000 	str.w	r3, [r9]
 8002740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002744:	460c      	mov	r4, r1
 8002746:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800274a:	b112      	cbz	r2, 8002752 <_printf_common+0x2a>
 800274c:	3301      	adds	r3, #1
 800274e:	f8c9 3000 	str.w	r3, [r9]
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	0699      	lsls	r1, r3, #26
 8002756:	bf42      	ittt	mi
 8002758:	f8d9 3000 	ldrmi.w	r3, [r9]
 800275c:	3302      	addmi	r3, #2
 800275e:	f8c9 3000 	strmi.w	r3, [r9]
 8002762:	6825      	ldr	r5, [r4, #0]
 8002764:	f015 0506 	ands.w	r5, r5, #6
 8002768:	d107      	bne.n	800277a <_printf_common+0x52>
 800276a:	f104 0a19 	add.w	sl, r4, #25
 800276e:	68e3      	ldr	r3, [r4, #12]
 8002770:	f8d9 2000 	ldr.w	r2, [r9]
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	42ab      	cmp	r3, r5
 8002778:	dc29      	bgt.n	80027ce <_printf_common+0xa6>
 800277a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	3300      	adds	r3, #0
 8002782:	bf18      	it	ne
 8002784:	2301      	movne	r3, #1
 8002786:	0692      	lsls	r2, r2, #26
 8002788:	d42e      	bmi.n	80027e8 <_printf_common+0xc0>
 800278a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800278e:	4639      	mov	r1, r7
 8002790:	4630      	mov	r0, r6
 8002792:	47c0      	blx	r8
 8002794:	3001      	adds	r0, #1
 8002796:	d021      	beq.n	80027dc <_printf_common+0xb4>
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	68e5      	ldr	r5, [r4, #12]
 800279c:	f003 0306 	and.w	r3, r3, #6
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	bf18      	it	ne
 80027a4:	2500      	movne	r5, #0
 80027a6:	f8d9 2000 	ldr.w	r2, [r9]
 80027aa:	f04f 0900 	mov.w	r9, #0
 80027ae:	bf08      	it	eq
 80027b0:	1aad      	subeq	r5, r5, r2
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	6922      	ldr	r2, [r4, #16]
 80027b6:	bf08      	it	eq
 80027b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027bc:	4293      	cmp	r3, r2
 80027be:	bfc4      	itt	gt
 80027c0:	1a9b      	subgt	r3, r3, r2
 80027c2:	18ed      	addgt	r5, r5, r3
 80027c4:	341a      	adds	r4, #26
 80027c6:	454d      	cmp	r5, r9
 80027c8:	d11a      	bne.n	8002800 <_printf_common+0xd8>
 80027ca:	2000      	movs	r0, #0
 80027cc:	e008      	b.n	80027e0 <_printf_common+0xb8>
 80027ce:	2301      	movs	r3, #1
 80027d0:	4652      	mov	r2, sl
 80027d2:	4639      	mov	r1, r7
 80027d4:	4630      	mov	r0, r6
 80027d6:	47c0      	blx	r8
 80027d8:	3001      	adds	r0, #1
 80027da:	d103      	bne.n	80027e4 <_printf_common+0xbc>
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027e4:	3501      	adds	r5, #1
 80027e6:	e7c2      	b.n	800276e <_printf_common+0x46>
 80027e8:	2030      	movs	r0, #48	; 0x30
 80027ea:	18e1      	adds	r1, r4, r3
 80027ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027f6:	4422      	add	r2, r4
 80027f8:	3302      	adds	r3, #2
 80027fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027fe:	e7c4      	b.n	800278a <_printf_common+0x62>
 8002800:	2301      	movs	r3, #1
 8002802:	4622      	mov	r2, r4
 8002804:	4639      	mov	r1, r7
 8002806:	4630      	mov	r0, r6
 8002808:	47c0      	blx	r8
 800280a:	3001      	adds	r0, #1
 800280c:	d0e6      	beq.n	80027dc <_printf_common+0xb4>
 800280e:	f109 0901 	add.w	r9, r9, #1
 8002812:	e7d8      	b.n	80027c6 <_printf_common+0x9e>

08002814 <_printf_i>:
 8002814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800281c:	460c      	mov	r4, r1
 800281e:	7e09      	ldrb	r1, [r1, #24]
 8002820:	b085      	sub	sp, #20
 8002822:	296e      	cmp	r1, #110	; 0x6e
 8002824:	4617      	mov	r7, r2
 8002826:	4606      	mov	r6, r0
 8002828:	4698      	mov	r8, r3
 800282a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800282c:	f000 80b3 	beq.w	8002996 <_printf_i+0x182>
 8002830:	d822      	bhi.n	8002878 <_printf_i+0x64>
 8002832:	2963      	cmp	r1, #99	; 0x63
 8002834:	d036      	beq.n	80028a4 <_printf_i+0x90>
 8002836:	d80a      	bhi.n	800284e <_printf_i+0x3a>
 8002838:	2900      	cmp	r1, #0
 800283a:	f000 80b9 	beq.w	80029b0 <_printf_i+0x19c>
 800283e:	2958      	cmp	r1, #88	; 0x58
 8002840:	f000 8083 	beq.w	800294a <_printf_i+0x136>
 8002844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800284c:	e032      	b.n	80028b4 <_printf_i+0xa0>
 800284e:	2964      	cmp	r1, #100	; 0x64
 8002850:	d001      	beq.n	8002856 <_printf_i+0x42>
 8002852:	2969      	cmp	r1, #105	; 0x69
 8002854:	d1f6      	bne.n	8002844 <_printf_i+0x30>
 8002856:	6820      	ldr	r0, [r4, #0]
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	0605      	lsls	r5, r0, #24
 800285c:	f103 0104 	add.w	r1, r3, #4
 8002860:	d52a      	bpl.n	80028b8 <_printf_i+0xa4>
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	da03      	bge.n	8002872 <_printf_i+0x5e>
 800286a:	222d      	movs	r2, #45	; 0x2d
 800286c:	425b      	negs	r3, r3
 800286e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002872:	486f      	ldr	r0, [pc, #444]	; (8002a30 <_printf_i+0x21c>)
 8002874:	220a      	movs	r2, #10
 8002876:	e039      	b.n	80028ec <_printf_i+0xd8>
 8002878:	2973      	cmp	r1, #115	; 0x73
 800287a:	f000 809d 	beq.w	80029b8 <_printf_i+0x1a4>
 800287e:	d808      	bhi.n	8002892 <_printf_i+0x7e>
 8002880:	296f      	cmp	r1, #111	; 0x6f
 8002882:	d020      	beq.n	80028c6 <_printf_i+0xb2>
 8002884:	2970      	cmp	r1, #112	; 0x70
 8002886:	d1dd      	bne.n	8002844 <_printf_i+0x30>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	f043 0320 	orr.w	r3, r3, #32
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	e003      	b.n	800289a <_printf_i+0x86>
 8002892:	2975      	cmp	r1, #117	; 0x75
 8002894:	d017      	beq.n	80028c6 <_printf_i+0xb2>
 8002896:	2978      	cmp	r1, #120	; 0x78
 8002898:	d1d4      	bne.n	8002844 <_printf_i+0x30>
 800289a:	2378      	movs	r3, #120	; 0x78
 800289c:	4865      	ldr	r0, [pc, #404]	; (8002a34 <_printf_i+0x220>)
 800289e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028a2:	e055      	b.n	8002950 <_printf_i+0x13c>
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028aa:	1d19      	adds	r1, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6011      	str	r1, [r2, #0]
 80028b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028b4:	2301      	movs	r3, #1
 80028b6:	e08c      	b.n	80029d2 <_printf_i+0x1be>
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028be:	6011      	str	r1, [r2, #0]
 80028c0:	bf18      	it	ne
 80028c2:	b21b      	sxthne	r3, r3
 80028c4:	e7cf      	b.n	8002866 <_printf_i+0x52>
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	6825      	ldr	r5, [r4, #0]
 80028ca:	1d18      	adds	r0, r3, #4
 80028cc:	6010      	str	r0, [r2, #0]
 80028ce:	0628      	lsls	r0, r5, #24
 80028d0:	d501      	bpl.n	80028d6 <_printf_i+0xc2>
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e002      	b.n	80028dc <_printf_i+0xc8>
 80028d6:	0668      	lsls	r0, r5, #25
 80028d8:	d5fb      	bpl.n	80028d2 <_printf_i+0xbe>
 80028da:	881b      	ldrh	r3, [r3, #0]
 80028dc:	296f      	cmp	r1, #111	; 0x6f
 80028de:	bf14      	ite	ne
 80028e0:	220a      	movne	r2, #10
 80028e2:	2208      	moveq	r2, #8
 80028e4:	4852      	ldr	r0, [pc, #328]	; (8002a30 <_printf_i+0x21c>)
 80028e6:	2100      	movs	r1, #0
 80028e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028ec:	6865      	ldr	r5, [r4, #4]
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	60a5      	str	r5, [r4, #8]
 80028f2:	f2c0 8095 	blt.w	8002a20 <_printf_i+0x20c>
 80028f6:	6821      	ldr	r1, [r4, #0]
 80028f8:	f021 0104 	bic.w	r1, r1, #4
 80028fc:	6021      	str	r1, [r4, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d13d      	bne.n	800297e <_printf_i+0x16a>
 8002902:	2d00      	cmp	r5, #0
 8002904:	f040 808e 	bne.w	8002a24 <_printf_i+0x210>
 8002908:	4665      	mov	r5, ip
 800290a:	2a08      	cmp	r2, #8
 800290c:	d10b      	bne.n	8002926 <_printf_i+0x112>
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	07db      	lsls	r3, r3, #31
 8002912:	d508      	bpl.n	8002926 <_printf_i+0x112>
 8002914:	6923      	ldr	r3, [r4, #16]
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	bfde      	ittt	le
 800291c:	2330      	movle	r3, #48	; 0x30
 800291e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002922:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002926:	ebac 0305 	sub.w	r3, ip, r5
 800292a:	6123      	str	r3, [r4, #16]
 800292c:	f8cd 8000 	str.w	r8, [sp]
 8002930:	463b      	mov	r3, r7
 8002932:	aa03      	add	r2, sp, #12
 8002934:	4621      	mov	r1, r4
 8002936:	4630      	mov	r0, r6
 8002938:	f7ff fef6 	bl	8002728 <_printf_common>
 800293c:	3001      	adds	r0, #1
 800293e:	d14d      	bne.n	80029dc <_printf_i+0x1c8>
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	b005      	add	sp, #20
 8002946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800294a:	4839      	ldr	r0, [pc, #228]	; (8002a30 <_printf_i+0x21c>)
 800294c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	1d1d      	adds	r5, r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6015      	str	r5, [r2, #0]
 800295a:	060a      	lsls	r2, r1, #24
 800295c:	d50b      	bpl.n	8002976 <_printf_i+0x162>
 800295e:	07ca      	lsls	r2, r1, #31
 8002960:	bf44      	itt	mi
 8002962:	f041 0120 	orrmi.w	r1, r1, #32
 8002966:	6021      	strmi	r1, [r4, #0]
 8002968:	b91b      	cbnz	r3, 8002972 <_printf_i+0x15e>
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	f022 0220 	bic.w	r2, r2, #32
 8002970:	6022      	str	r2, [r4, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	e7b7      	b.n	80028e6 <_printf_i+0xd2>
 8002976:	064d      	lsls	r5, r1, #25
 8002978:	bf48      	it	mi
 800297a:	b29b      	uxthmi	r3, r3
 800297c:	e7ef      	b.n	800295e <_printf_i+0x14a>
 800297e:	4665      	mov	r5, ip
 8002980:	fbb3 f1f2 	udiv	r1, r3, r2
 8002984:	fb02 3311 	mls	r3, r2, r1, r3
 8002988:	5cc3      	ldrb	r3, [r0, r3]
 800298a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800298e:	460b      	mov	r3, r1
 8002990:	2900      	cmp	r1, #0
 8002992:	d1f5      	bne.n	8002980 <_printf_i+0x16c>
 8002994:	e7b9      	b.n	800290a <_printf_i+0xf6>
 8002996:	6813      	ldr	r3, [r2, #0]
 8002998:	6825      	ldr	r5, [r4, #0]
 800299a:	1d18      	adds	r0, r3, #4
 800299c:	6961      	ldr	r1, [r4, #20]
 800299e:	6010      	str	r0, [r2, #0]
 80029a0:	0628      	lsls	r0, r5, #24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	d501      	bpl.n	80029aa <_printf_i+0x196>
 80029a6:	6019      	str	r1, [r3, #0]
 80029a8:	e002      	b.n	80029b0 <_printf_i+0x19c>
 80029aa:	066a      	lsls	r2, r5, #25
 80029ac:	d5fb      	bpl.n	80029a6 <_printf_i+0x192>
 80029ae:	8019      	strh	r1, [r3, #0]
 80029b0:	2300      	movs	r3, #0
 80029b2:	4665      	mov	r5, ip
 80029b4:	6123      	str	r3, [r4, #16]
 80029b6:	e7b9      	b.n	800292c <_printf_i+0x118>
 80029b8:	6813      	ldr	r3, [r2, #0]
 80029ba:	1d19      	adds	r1, r3, #4
 80029bc:	6011      	str	r1, [r2, #0]
 80029be:	681d      	ldr	r5, [r3, #0]
 80029c0:	6862      	ldr	r2, [r4, #4]
 80029c2:	2100      	movs	r1, #0
 80029c4:	4628      	mov	r0, r5
 80029c6:	f000 f837 	bl	8002a38 <memchr>
 80029ca:	b108      	cbz	r0, 80029d0 <_printf_i+0x1bc>
 80029cc:	1b40      	subs	r0, r0, r5
 80029ce:	6060      	str	r0, [r4, #4]
 80029d0:	6863      	ldr	r3, [r4, #4]
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	2300      	movs	r3, #0
 80029d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029da:	e7a7      	b.n	800292c <_printf_i+0x118>
 80029dc:	6923      	ldr	r3, [r4, #16]
 80029de:	462a      	mov	r2, r5
 80029e0:	4639      	mov	r1, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	47c0      	blx	r8
 80029e6:	3001      	adds	r0, #1
 80029e8:	d0aa      	beq.n	8002940 <_printf_i+0x12c>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	079b      	lsls	r3, r3, #30
 80029ee:	d413      	bmi.n	8002a18 <_printf_i+0x204>
 80029f0:	68e0      	ldr	r0, [r4, #12]
 80029f2:	9b03      	ldr	r3, [sp, #12]
 80029f4:	4298      	cmp	r0, r3
 80029f6:	bfb8      	it	lt
 80029f8:	4618      	movlt	r0, r3
 80029fa:	e7a3      	b.n	8002944 <_printf_i+0x130>
 80029fc:	2301      	movs	r3, #1
 80029fe:	464a      	mov	r2, r9
 8002a00:	4639      	mov	r1, r7
 8002a02:	4630      	mov	r0, r6
 8002a04:	47c0      	blx	r8
 8002a06:	3001      	adds	r0, #1
 8002a08:	d09a      	beq.n	8002940 <_printf_i+0x12c>
 8002a0a:	3501      	adds	r5, #1
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	9a03      	ldr	r2, [sp, #12]
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	42ab      	cmp	r3, r5
 8002a14:	dcf2      	bgt.n	80029fc <_printf_i+0x1e8>
 8002a16:	e7eb      	b.n	80029f0 <_printf_i+0x1dc>
 8002a18:	2500      	movs	r5, #0
 8002a1a:	f104 0919 	add.w	r9, r4, #25
 8002a1e:	e7f5      	b.n	8002a0c <_printf_i+0x1f8>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ac      	bne.n	800297e <_printf_i+0x16a>
 8002a24:	7803      	ldrb	r3, [r0, #0]
 8002a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a2e:	e76c      	b.n	800290a <_printf_i+0xf6>
 8002a30:	080037ac 	.word	0x080037ac
 8002a34:	080037bd 	.word	0x080037bd

08002a38 <memchr>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	b2c9      	uxtb	r1, r1
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4290      	cmp	r0, r2
 8002a40:	4603      	mov	r3, r0
 8002a42:	d101      	bne.n	8002a48 <memchr+0x10>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e003      	b.n	8002a50 <memchr+0x18>
 8002a48:	781c      	ldrb	r4, [r3, #0]
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	428c      	cmp	r4, r1
 8002a4e:	d1f6      	bne.n	8002a3e <memchr+0x6>
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <memmove>:
 8002a54:	4288      	cmp	r0, r1
 8002a56:	b510      	push	{r4, lr}
 8002a58:	eb01 0302 	add.w	r3, r1, r2
 8002a5c:	d807      	bhi.n	8002a6e <memmove+0x1a>
 8002a5e:	1e42      	subs	r2, r0, #1
 8002a60:	4299      	cmp	r1, r3
 8002a62:	d00a      	beq.n	8002a7a <memmove+0x26>
 8002a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a6c:	e7f8      	b.n	8002a60 <memmove+0xc>
 8002a6e:	4283      	cmp	r3, r0
 8002a70:	d9f5      	bls.n	8002a5e <memmove+0xa>
 8002a72:	1881      	adds	r1, r0, r2
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	42d3      	cmn	r3, r2
 8002a78:	d100      	bne.n	8002a7c <memmove+0x28>
 8002a7a:	bd10      	pop	{r4, pc}
 8002a7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a84:	e7f7      	b.n	8002a76 <memmove+0x22>
	...

08002a88 <_free_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4605      	mov	r5, r0
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d043      	beq.n	8002b18 <_free_r+0x90>
 8002a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a94:	1f0c      	subs	r4, r1, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfb8      	it	lt
 8002a9a:	18e4      	addlt	r4, r4, r3
 8002a9c:	f000 f8d0 	bl	8002c40 <__malloc_lock>
 8002aa0:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <_free_r+0x94>)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	b933      	cbnz	r3, 8002ab6 <_free_r+0x2e>
 8002aa8:	6063      	str	r3, [r4, #4]
 8002aaa:	6014      	str	r4, [r2, #0]
 8002aac:	4628      	mov	r0, r5
 8002aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ab2:	f000 b8c6 	b.w	8002c42 <__malloc_unlock>
 8002ab6:	42a3      	cmp	r3, r4
 8002ab8:	d90b      	bls.n	8002ad2 <_free_r+0x4a>
 8002aba:	6821      	ldr	r1, [r4, #0]
 8002abc:	1862      	adds	r2, r4, r1
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf01      	itttt	eq
 8002ac2:	681a      	ldreq	r2, [r3, #0]
 8002ac4:	685b      	ldreq	r3, [r3, #4]
 8002ac6:	1852      	addeq	r2, r2, r1
 8002ac8:	6022      	streq	r2, [r4, #0]
 8002aca:	6063      	str	r3, [r4, #4]
 8002acc:	6004      	str	r4, [r0, #0]
 8002ace:	e7ed      	b.n	8002aac <_free_r+0x24>
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	b10a      	cbz	r2, 8002ada <_free_r+0x52>
 8002ad6:	42a2      	cmp	r2, r4
 8002ad8:	d9fa      	bls.n	8002ad0 <_free_r+0x48>
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	1858      	adds	r0, r3, r1
 8002ade:	42a0      	cmp	r0, r4
 8002ae0:	d10b      	bne.n	8002afa <_free_r+0x72>
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	4401      	add	r1, r0
 8002ae6:	1858      	adds	r0, r3, r1
 8002ae8:	4282      	cmp	r2, r0
 8002aea:	6019      	str	r1, [r3, #0]
 8002aec:	d1de      	bne.n	8002aac <_free_r+0x24>
 8002aee:	6810      	ldr	r0, [r2, #0]
 8002af0:	6852      	ldr	r2, [r2, #4]
 8002af2:	4401      	add	r1, r0
 8002af4:	6019      	str	r1, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	e7d8      	b.n	8002aac <_free_r+0x24>
 8002afa:	d902      	bls.n	8002b02 <_free_r+0x7a>
 8002afc:	230c      	movs	r3, #12
 8002afe:	602b      	str	r3, [r5, #0]
 8002b00:	e7d4      	b.n	8002aac <_free_r+0x24>
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	1821      	adds	r1, r4, r0
 8002b06:	428a      	cmp	r2, r1
 8002b08:	bf01      	itttt	eq
 8002b0a:	6811      	ldreq	r1, [r2, #0]
 8002b0c:	6852      	ldreq	r2, [r2, #4]
 8002b0e:	1809      	addeq	r1, r1, r0
 8002b10:	6021      	streq	r1, [r4, #0]
 8002b12:	6062      	str	r2, [r4, #4]
 8002b14:	605c      	str	r4, [r3, #4]
 8002b16:	e7c9      	b.n	8002aac <_free_r+0x24>
 8002b18:	bd38      	pop	{r3, r4, r5, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000dd4 	.word	0x20000dd4

08002b20 <_malloc_r>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	1ccd      	adds	r5, r1, #3
 8002b24:	f025 0503 	bic.w	r5, r5, #3
 8002b28:	3508      	adds	r5, #8
 8002b2a:	2d0c      	cmp	r5, #12
 8002b2c:	bf38      	it	cc
 8002b2e:	250c      	movcc	r5, #12
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	4606      	mov	r6, r0
 8002b34:	db01      	blt.n	8002b3a <_malloc_r+0x1a>
 8002b36:	42a9      	cmp	r1, r5
 8002b38:	d903      	bls.n	8002b42 <_malloc_r+0x22>
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	6033      	str	r3, [r6, #0]
 8002b3e:	2000      	movs	r0, #0
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
 8002b42:	f000 f87d 	bl	8002c40 <__malloc_lock>
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <_malloc_r+0xac>)
 8002b48:	6814      	ldr	r4, [r2, #0]
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	b991      	cbnz	r1, 8002b74 <_malloc_r+0x54>
 8002b4e:	4c20      	ldr	r4, [pc, #128]	; (8002bd0 <_malloc_r+0xb0>)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	b91b      	cbnz	r3, 8002b5c <_malloc_r+0x3c>
 8002b54:	4630      	mov	r0, r6
 8002b56:	f000 f863 	bl	8002c20 <_sbrk_r>
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f000 f85e 	bl	8002c20 <_sbrk_r>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d124      	bne.n	8002bb2 <_malloc_r+0x92>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	f000 f868 	bl	8002c42 <__malloc_unlock>
 8002b72:	e7e4      	b.n	8002b3e <_malloc_r+0x1e>
 8002b74:	680b      	ldr	r3, [r1, #0]
 8002b76:	1b5b      	subs	r3, r3, r5
 8002b78:	d418      	bmi.n	8002bac <_malloc_r+0x8c>
 8002b7a:	2b0b      	cmp	r3, #11
 8002b7c:	d90f      	bls.n	8002b9e <_malloc_r+0x7e>
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	18cc      	adds	r4, r1, r3
 8002b82:	50cd      	str	r5, [r1, r3]
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 f85c 	bl	8002c42 <__malloc_unlock>
 8002b8a:	f104 000b 	add.w	r0, r4, #11
 8002b8e:	1d23      	adds	r3, r4, #4
 8002b90:	f020 0007 	bic.w	r0, r0, #7
 8002b94:	1ac3      	subs	r3, r0, r3
 8002b96:	d0d3      	beq.n	8002b40 <_malloc_r+0x20>
 8002b98:	425a      	negs	r2, r3
 8002b9a:	50e2      	str	r2, [r4, r3]
 8002b9c:	e7d0      	b.n	8002b40 <_malloc_r+0x20>
 8002b9e:	684b      	ldr	r3, [r1, #4]
 8002ba0:	428c      	cmp	r4, r1
 8002ba2:	bf16      	itet	ne
 8002ba4:	6063      	strne	r3, [r4, #4]
 8002ba6:	6013      	streq	r3, [r2, #0]
 8002ba8:	460c      	movne	r4, r1
 8002baa:	e7eb      	b.n	8002b84 <_malloc_r+0x64>
 8002bac:	460c      	mov	r4, r1
 8002bae:	6849      	ldr	r1, [r1, #4]
 8002bb0:	e7cc      	b.n	8002b4c <_malloc_r+0x2c>
 8002bb2:	1cc4      	adds	r4, r0, #3
 8002bb4:	f024 0403 	bic.w	r4, r4, #3
 8002bb8:	42a0      	cmp	r0, r4
 8002bba:	d005      	beq.n	8002bc8 <_malloc_r+0xa8>
 8002bbc:	1a21      	subs	r1, r4, r0
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 f82e 	bl	8002c20 <_sbrk_r>
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d0cf      	beq.n	8002b68 <_malloc_r+0x48>
 8002bc8:	6025      	str	r5, [r4, #0]
 8002bca:	e7db      	b.n	8002b84 <_malloc_r+0x64>
 8002bcc:	20000dd4 	.word	0x20000dd4
 8002bd0:	20000dd8 	.word	0x20000dd8

08002bd4 <_realloc_r>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	4607      	mov	r7, r0
 8002bd8:	4614      	mov	r4, r2
 8002bda:	460e      	mov	r6, r1
 8002bdc:	b921      	cbnz	r1, 8002be8 <_realloc_r+0x14>
 8002bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002be2:	4611      	mov	r1, r2
 8002be4:	f7ff bf9c 	b.w	8002b20 <_malloc_r>
 8002be8:	b922      	cbnz	r2, 8002bf4 <_realloc_r+0x20>
 8002bea:	f7ff ff4d 	bl	8002a88 <_free_r>
 8002bee:	4625      	mov	r5, r4
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf4:	f000 f826 	bl	8002c44 <_malloc_usable_size_r>
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d20f      	bcs.n	8002c1c <_realloc_r+0x48>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f7ff ff8e 	bl	8002b20 <_malloc_r>
 8002c04:	4605      	mov	r5, r0
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d0f2      	beq.n	8002bf0 <_realloc_r+0x1c>
 8002c0a:	4631      	mov	r1, r6
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	f7ff fbe3 	bl	80023d8 <memcpy>
 8002c12:	4631      	mov	r1, r6
 8002c14:	4638      	mov	r0, r7
 8002c16:	f7ff ff37 	bl	8002a88 <_free_r>
 8002c1a:	e7e9      	b.n	8002bf0 <_realloc_r+0x1c>
 8002c1c:	4635      	mov	r5, r6
 8002c1e:	e7e7      	b.n	8002bf0 <_realloc_r+0x1c>

08002c20 <_sbrk_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	2300      	movs	r3, #0
 8002c24:	4c05      	ldr	r4, [pc, #20]	; (8002c3c <_sbrk_r+0x1c>)
 8002c26:	4605      	mov	r5, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	f7fe fb52 	bl	80012d4 <_sbrk>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d102      	bne.n	8002c3a <_sbrk_r+0x1a>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	b103      	cbz	r3, 8002c3a <_sbrk_r+0x1a>
 8002c38:	602b      	str	r3, [r5, #0]
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	20000e84 	.word	0x20000e84

08002c40 <__malloc_lock>:
 8002c40:	4770      	bx	lr

08002c42 <__malloc_unlock>:
 8002c42:	4770      	bx	lr

08002c44 <_malloc_usable_size_r>:
 8002c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c48:	1f18      	subs	r0, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	bfbc      	itt	lt
 8002c4e:	580b      	ldrlt	r3, [r1, r0]
 8002c50:	18c0      	addlt	r0, r0, r3
 8002c52:	4770      	bx	lr

08002c54 <_init>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr

08002c60 <_fini>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	bf00      	nop
 8002c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c66:	bc08      	pop	{r3}
 8002c68:	469e      	mov	lr, r3
 8002c6a:	4770      	bx	lr
