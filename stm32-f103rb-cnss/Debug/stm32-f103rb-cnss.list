
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001960  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d90  08001d90  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08001d90  08001d90  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d90  08001d90  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08001d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  200000d4  08001e6c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  08001e6c  00020b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c24  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c9  00000000  00000000  00027d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000380  00000000  00000000  000292f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002d8  00000000  00000000  00029670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000120eb  00000000  00000000  00029948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000480a  00000000  00000000  0003ba33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059355  00000000  00000000  0004023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00099592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ed8  00000000  00000000  00099610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a78 	.word	0x08001a78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08001a78 	.word	0x08001a78

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <init_MCO>:


}


void init_MCO(void){
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	/*Enable Port A RCC clock (PA8 corresponds to MCO) [Datasheet p. 31 Table 5.] */
	RCC->APB2ENR |= 0x00000004; // set IOPAEN [reference manual section 8.3.7]
 8000184:	4b13      	ldr	r3, [pc, #76]	; (80001d4 <init_MCO+0x54>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <init_MCO+0x54>)
 800018a:	f043 0304 	orr.w	r3, r3, #4
 800018e:	6193      	str	r3, [r2, #24]

	/*Clock enable AFIO*/
	RCC->APB2ENR |= 0x00000001; // set AFIOEN [reference manual section 8.3.7]
 8000190:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <init_MCO+0x54>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <init_MCO+0x54>)
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	6193      	str	r3, [r2, #24]

	/*Configure PA8 as Alternate function mode push pull [reference manual p. 170 Table 33.]*/
	GPIOA->CRH &= 0xFFFFFFF0; // reset CNF8 and MODE8 [reference manual 9.2.2]
 800019c:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <init_MCO+0x58>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	4a0d      	ldr	r2, [pc, #52]	; (80001d8 <init_MCO+0x58>)
 80001a2:	f023 030f 	bic.w	r3, r3, #15
 80001a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x0000000B; // set PA8 (data sheet p.31) as Alternate function push-pull | frequency of 50 MHz
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <init_MCO+0x58>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <init_MCO+0x58>)
 80001ae:	f043 030b 	orr.w	r3, r3, #11
 80001b2:	6053      	str	r3, [r2, #4]

	/*Set clock src for Microcontorller clock output (MCO) [refernce manual section 8.3.2 p. 135]*/
	RCC->CFGR &= 0xF8FFFFFF; // reset MCO
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <init_MCO+0x54>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <init_MCO+0x54>)
 80001ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80001be:	6053      	str	r3, [r2, #4]

//	RCC->CFGR |= 0x07000000; //  Pllclk/2 selected
	RCC->CFGR |= 0x04000000; // 0100: System clock (SYSCLK) selected
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <init_MCO+0x54>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a03      	ldr	r2, [pc, #12]	; (80001d4 <init_MCO+0x54>)
 80001c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001ca:	6053      	str	r3, [r2, #4]

}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40010800 	.word	0x40010800

080001dc <setImagePath>:
static uint8_t image_path[PATH_SIZE];




void setImagePath(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 80001e0:	2280      	movs	r2, #128	; 0x80
 80001e2:	2100      	movs	r1, #0
 80001e4:	4806      	ldr	r0, [pc, #24]	; (8000200 <setImagePath+0x24>)
 80001e6:	f001 f80b 	bl	8001200 <memset>
	sprintf((char*)image_path, "image/path");
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <setImagePath+0x24>)
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <setImagePath+0x28>)
 80001ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f0:	c303      	stmia	r3!, {r0, r1}
 80001f2:	801a      	strh	r2, [r3, #0]
 80001f4:	3302      	adds	r3, #2
 80001f6:	0c12      	lsrs	r2, r2, #16
 80001f8:	701a      	strb	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000478 	.word	0x20000478
 8000204:	08001a90 	.word	0x08001a90

08000208 <alert_Handler>:

void *alert_Handler(void){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 800020e:	2303      	movs	r3, #3
 8000210:	607b      	str	r3, [r7, #4]
	while(i > 0 && !recordAlert()){
 8000212:	e002      	b.n	800021a <alert_Handler+0x12>
		i--;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3b01      	subs	r3, #1
 8000218:	607b      	str	r3, [r7, #4]
	while(i > 0 && !recordAlert()){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <alert_Handler+0x22>
 8000220:	f000 f808 	bl	8000234 <recordAlert>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f4      	beq.n	8000214 <alert_Handler+0xc>
	}
	return NULL;
 800022a:	2300      	movs	r3, #0


}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <recordAlert>:


/*This function sends an alert to realtime DB in containig the time of the alert firebase
 * before useing this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 8000238:	2106      	movs	r1, #6
 800023a:	2003      	movs	r0, #3
 800023c:	f000 f85e 	bl	80002fc <setClientMode>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d101      	bne.n	800024a <recordAlert+0x16>
		return FALSE;
 8000246:	2300      	movs	r3, #0
 8000248:	e048      	b.n	80002dc <recordAlert+0xa8>
	}
	write_usart2((uint8_t*)"1\r\n");
 800024a:	4825      	ldr	r0, [pc, #148]	; (80002e0 <recordAlert+0xac>)
 800024c:	f000 fe4a 	bl	8000ee4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 8000250:	2106      	movs	r1, #6
 8000252:	2003      	movs	r0, #3
 8000254:	f000 f88c 	bl	8000370 <joinAccessPoint>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d101      	bne.n	8000262 <recordAlert+0x2e>
		return FALSE;
 800025e:	2300      	movs	r3, #0
 8000260:	e03c      	b.n	80002dc <recordAlert+0xa8>
	}
	write_usart2((uint8_t*)"2\r\n");
 8000262:	4820      	ldr	r0, [pc, #128]	; (80002e4 <recordAlert+0xb0>)
 8000264:	f000 fe3e 	bl	8000ee4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 8000268:	2314      	movs	r3, #20
 800026a:	2206      	movs	r2, #6
 800026c:	2103      	movs	r1, #3
 800026e:	2003      	movs	r0, #3
 8000270:	f000 f8ca 	bl	8000408 <connectFirebaseHost>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d101      	bne.n	800027e <recordAlert+0x4a>
		return FALSE;
 800027a:	2300      	movs	r3, #0
 800027c:	e02e      	b.n	80002dc <recordAlert+0xa8>
	}
	write_usart2((uint8_t*)"3\r\n");
 800027e:	481a      	ldr	r0, [pc, #104]	; (80002e8 <recordAlert+0xb4>)
 8000280:	f000 fe30 	bl	8000ee4 <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 8000284:	f7ff ffaa 	bl	80001dc <setImagePath>
	write_usart2((uint8_t*)"4\r\n");
 8000288:	4818      	ldr	r0, [pc, #96]	; (80002ec <recordAlert+0xb8>)
 800028a:	f000 fe2b 	bl	8000ee4 <write_usart2>

	//Create HTTP request
	createPostMsg();
 800028e:	f000 f94d 	bl	800052c <createPostMsg>
	write_usart2((uint8_t*)"5\r\n");
 8000292:	4817      	ldr	r0, [pc, #92]	; (80002f0 <recordAlert+0xbc>)
 8000294:	f000 fe26 	bl	8000ee4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 8000298:	233c      	movs	r3, #60	; 0x3c
 800029a:	221e      	movs	r2, #30
 800029c:	2103      	movs	r1, #3
 800029e:	2003      	movs	r0, #3
 80002a0:	f000 f988 	bl	80005b4 <sendRequest>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <recordAlert+0x82>
		closeCunnection(3,3);
 80002aa:	2103      	movs	r1, #3
 80002ac:	2003      	movs	r0, #3
 80002ae:	f000 fa41 	bl	8000734 <closeCunnection>
		return FALSE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e012      	b.n	80002dc <recordAlert+0xa8>
	}
	write_usart2((uint8_t*)"6\r\n");
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <recordAlert+0xc0>)
 80002b8:	f000 fe14 	bl	8000ee4 <write_usart2>

	//Read response
	if(!readResponse(180)){//timeout set t0 3 minutes
 80002bc:	20b4      	movs	r0, #180	; 0xb4
 80002be:	f000 fa0d 	bl	80006dc <readResponse>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d105      	bne.n	80002d4 <recordAlert+0xa0>
		closeCunnection(3,3);
 80002c8:	2103      	movs	r1, #3
 80002ca:	2003      	movs	r0, #3
 80002cc:	f000 fa32 	bl	8000734 <closeCunnection>
		return FALSE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	e003      	b.n	80002dc <recordAlert+0xa8>
	}

	write_usart2((uint8_t*)"7\r\n");
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <recordAlert+0xc4>)
 80002d6:	f000 fe05 	bl	8000ee4 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"8\r\n");

	return TRUE;
 80002da:	2301      	movs	r3, #1

}
 80002dc:	4618      	mov	r0, r3
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	08001a9c 	.word	0x08001a9c
 80002e4:	08001aa0 	.word	0x08001aa0
 80002e8:	08001aa4 	.word	0x08001aa4
 80002ec:	08001aa8 	.word	0x08001aa8
 80002f0:	08001aac 	.word	0x08001aac
 80002f4:	08001ab0 	.word	0x08001ab0
 80002f8:	08001ab4 	.word	0x08001ab4

080002fc <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <setClientMode+0x64>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 800030c:	4815      	ldr	r0, [pc, #84]	; (8000364 <setClientMode+0x68>)
 800030e:	f000 fe25 	bl	8000f5c <write_usart1>
	while(tries > 0){
 8000312:	e01d      	b.n	8000350 <setClientMode+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <setClientMode+0x6c>)
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <setClientMode+0x70>)
 8000318:	f000 fe92 	bl	8001040 <search_usart1_buffer_Rx>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <setClientMode+0x64>)
 8000322:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <setClientMode+0x64>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d105      	bne.n	8000338 <setClientMode+0x3c>
 800032c:	6838      	ldr	r0, [r7, #0]
 800032e:	f000 fce7 	bl	8000d00 <timeout_with_timer4>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0ed      	beq.n	8000314 <setClientMode+0x18>
		}
		if(found == PASS){
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <setClientMode+0x64>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d101      	bne.n	8000344 <setClientMode+0x48>
			return TRUE;
 8000340:	2301      	movs	r3, #1
 8000342:	e009      	b.n	8000358 <setClientMode+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <setClientMode+0x68>)
 800034c:	f000 fe06 	bl	8000f5c <write_usart1>
	while(tries > 0){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1e6      	bne.n	8000324 <setClientMode+0x28>
		}
	}
	return FALSE;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000006c 	.word	0x2000006c
 8000364:	08001adc 	.word	0x08001adc
 8000368:	08001ac0 	.word	0x08001ac0
 800036c:	08001ac8 	.word	0x08001ac8

08000370 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800037a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037e:	2100      	movs	r1, #0
 8000380:	481a      	ldr	r0, [pc, #104]	; (80003ec <joinAccessPoint+0x7c>)
 8000382:	f000 ff3d 	bl	8001200 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <joinAccessPoint+0x80>)
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <joinAccessPoint+0x84>)
 800038a:	491b      	ldr	r1, [pc, #108]	; (80003f8 <joinAccessPoint+0x88>)
 800038c:	4817      	ldr	r0, [pc, #92]	; (80003ec <joinAccessPoint+0x7c>)
 800038e:	f000 ff3f 	bl	8001210 <siprintf>

	found = STANDBY;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <joinAccessPoint+0x8c>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000398:	4814      	ldr	r0, [pc, #80]	; (80003ec <joinAccessPoint+0x7c>)
 800039a:	f000 fddf 	bl	8000f5c <write_usart1>
	while(tries > 0){
 800039e:	e01d      	b.n	80003dc <joinAccessPoint+0x6c>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80003a0:	4917      	ldr	r1, [pc, #92]	; (8000400 <joinAccessPoint+0x90>)
 80003a2:	4818      	ldr	r0, [pc, #96]	; (8000404 <joinAccessPoint+0x94>)
 80003a4:	f000 fe4c 	bl	8001040 <search_usart1_buffer_Rx>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <joinAccessPoint+0x8c>)
 80003ae:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <joinAccessPoint+0x8c>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d105      	bne.n	80003c4 <joinAccessPoint+0x54>
 80003b8:	6838      	ldr	r0, [r7, #0]
 80003ba:	f000 fca1 	bl	8000d00 <timeout_with_timer4>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0ed      	beq.n	80003a0 <joinAccessPoint+0x30>
		}
		if(found == PASS){
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <joinAccessPoint+0x8c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d101      	bne.n	80003d0 <joinAccessPoint+0x60>
			return TRUE;
 80003cc:	2301      	movs	r3, #1
 80003ce:	e009      	b.n	80003e4 <joinAccessPoint+0x74>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <joinAccessPoint+0x7c>)
 80003d8:	f000 fdc0 	bl	8000f5c <write_usart1>
	while(tries > 0){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1e6      	bne.n	80003b0 <joinAccessPoint+0x40>
		}
	}
	return FALSE;
 80003e2:	2300      	movs	r3, #0

}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000f0 	.word	0x200000f0
 80003f0:	08001aec 	.word	0x08001aec
 80003f4:	08001af8 	.word	0x08001af8
 80003f8:	08001b00 	.word	0x08001b00
 80003fc:	2000006c 	.word	0x2000006c
 8000400:	08001b18 	.word	0x08001b18
 8000404:	08001ac8 	.word	0x08001ac8

08000408 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
 8000414:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 8000416:	4b3c      	ldr	r3, [pc, #240]	; (8000508 <connectFirebaseHost+0x100>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 800041c:	483b      	ldr	r0, [pc, #236]	; (800050c <connectFirebaseHost+0x104>)
 800041e:	f000 fd9d 	bl	8000f5c <write_usart1>
	while(_ssl_tries > 0){
 8000422:	e01b      	b.n	800045c <connectFirebaseHost+0x54>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000424:	493a      	ldr	r1, [pc, #232]	; (8000510 <connectFirebaseHost+0x108>)
 8000426:	483b      	ldr	r0, [pc, #236]	; (8000514 <connectFirebaseHost+0x10c>)
 8000428:	f000 fe0a 	bl	8001040 <search_usart1_buffer_Rx>
 800042c:	4603      	mov	r3, r0
 800042e:	461a      	mov	r2, r3
 8000430:	4b35      	ldr	r3, [pc, #212]	; (8000508 <connectFirebaseHost+0x100>)
 8000432:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 8000434:	4b34      	ldr	r3, [pc, #208]	; (8000508 <connectFirebaseHost+0x100>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d105      	bne.n	8000448 <connectFirebaseHost+0x40>
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fc5f 	bl	8000d00 <timeout_with_timer4>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0ed      	beq.n	8000424 <connectFirebaseHost+0x1c>
		}
		if(found == PASS){
 8000448:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <connectFirebaseHost+0x100>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d009      	beq.n	8000464 <connectFirebaseHost+0x5c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	3b01      	subs	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 8000456:	482d      	ldr	r0, [pc, #180]	; (800050c <connectFirebaseHost+0x104>)
 8000458:	f000 fd80 	bl	8000f5c <write_usart1>
	while(_ssl_tries > 0){
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1e8      	bne.n	8000434 <connectFirebaseHost+0x2c>
 8000462:	e000      	b.n	8000466 <connectFirebaseHost+0x5e>
			break; //move on to next command
 8000464:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 8000466:	4b28      	ldr	r3, [pc, #160]	; (8000508 <connectFirebaseHost+0x100>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d003      	beq.n	8000476 <connectFirebaseHost+0x6e>
 800046e:	4b26      	ldr	r3, [pc, #152]	; (8000508 <connectFirebaseHost+0x100>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d101      	bne.n	800047a <connectFirebaseHost+0x72>
		return FALSE;
 8000476:	2300      	movs	r3, #0
 8000478:	e041      	b.n	80004fe <connectFirebaseHost+0xf6>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800047a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800047e:	2100      	movs	r1, #0
 8000480:	4825      	ldr	r0, [pc, #148]	; (8000518 <connectFirebaseHost+0x110>)
 8000482:	f000 febd 	bl	8001200 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <connectFirebaseHost+0x114>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a25      	ldr	r2, [pc, #148]	; (8000520 <connectFirebaseHost+0x118>)
 800048c:	4925      	ldr	r1, [pc, #148]	; (8000524 <connectFirebaseHost+0x11c>)
 800048e:	4822      	ldr	r0, [pc, #136]	; (8000518 <connectFirebaseHost+0x110>)
 8000490:	f000 febe 	bl	8001210 <siprintf>

	found = STANDBY;
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <connectFirebaseHost+0x100>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800049a:	481f      	ldr	r0, [pc, #124]	; (8000518 <connectFirebaseHost+0x110>)
 800049c:	f000 fd5e 	bl	8000f5c <write_usart1>
	while(_cipstart_tries > 0){
 80004a0:	e029      	b.n	80004f6 <connectFirebaseHost+0xee>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80004a2:	491b      	ldr	r1, [pc, #108]	; (8000510 <connectFirebaseHost+0x108>)
 80004a4:	481b      	ldr	r0, [pc, #108]	; (8000514 <connectFirebaseHost+0x10c>)
 80004a6:	f000 fdcb 	bl	8001040 <search_usart1_buffer_Rx>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b16      	ldr	r3, [pc, #88]	; (8000508 <connectFirebaseHost+0x100>)
 80004b0:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <connectFirebaseHost+0x100>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d107      	bne.n	80004ca <connectFirebaseHost+0xc2>
				found = search_usart1_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);//NO IDEA WHY THIS IS SO CRITICAL BUT IT IS!
 80004ba:	4915      	ldr	r1, [pc, #84]	; (8000510 <connectFirebaseHost+0x108>)
 80004bc:	481a      	ldr	r0, [pc, #104]	; (8000528 <connectFirebaseHost+0x120>)
 80004be:	f000 fdbf 	bl	8001040 <search_usart1_buffer_Rx>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <connectFirebaseHost+0x100>)
 80004c8:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <connectFirebaseHost+0x100>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d105      	bne.n	80004de <connectFirebaseHost+0xd6>
 80004d2:	6838      	ldr	r0, [r7, #0]
 80004d4:	f000 fc14 	bl	8000d00 <timeout_with_timer4>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0e1      	beq.n	80004a2 <connectFirebaseHost+0x9a>
			}
		}
		if(found == PASS){
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <connectFirebaseHost+0x100>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <connectFirebaseHost+0xe2>
			return TRUE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e009      	b.n	80004fe <connectFirebaseHost+0xf6>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <connectFirebaseHost+0x110>)
 80004f2:	f000 fd33 	bl	8000f5c <write_usart1>
	while(_cipstart_tries > 0){
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1e6      	bne.n	80004ca <connectFirebaseHost+0xc2>
		}
	}
	return FALSE;
 80004fc:	2300      	movs	r3, #0



}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	2000006c 	.word	0x2000006c
 800050c:	08001b20 	.word	0x08001b20
 8000510:	08001ac0 	.word	0x08001ac0
 8000514:	08001ac8 	.word	0x08001ac8
 8000518:	200000f0 	.word	0x200000f0
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000000 	.word	0x20000000
 8000524:	08001b38 	.word	0x08001b38
 8000528:	08001b58 	.word	0x08001b58

0800052c <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	2100      	movs	r1, #0
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <createPostMsg+0x60>)
 8000538:	f000 fe62 	bl	8001200 <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <createPostMsg+0x64>)
 800053e:	4915      	ldr	r1, [pc, #84]	; (8000594 <createPostMsg+0x68>)
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <createPostMsg+0x60>)
 8000542:	f000 fe65 	bl	8001210 <siprintf>
	content_len = strlen((char*)content);
 8000546:	4811      	ldr	r0, [pc, #68]	; (800058c <createPostMsg+0x60>)
 8000548:	f7ff fe12 	bl	8000170 <strlen>
 800054c:	4602      	mov	r2, r0
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <createPostMsg+0x6c>)
 8000550:	601a      	str	r2, [r3, #0]
	//content_len = strlen("{\"image_path\": \"\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}") + strlen((char*)image_path);


	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000556:	2100      	movs	r1, #0
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <createPostMsg+0x70>)
 800055a:	f000 fe51 	bl	8001200 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <createPostMsg+0x6c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <createPostMsg+0x60>)
 8000564:	9202      	str	r2, [sp, #8]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <createPostMsg+0x74>)
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <createPostMsg+0x78>)
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <createPostMsg+0x7c>)
 8000570:	490e      	ldr	r1, [pc, #56]	; (80005ac <createPostMsg+0x80>)
 8000572:	480a      	ldr	r0, [pc, #40]	; (800059c <createPostMsg+0x70>)
 8000574:	f000 fe4c 	bl	8001210 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <createPostMsg+0x70>)
 800057a:	f7ff fdf9 	bl	8000170 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	3b02      	subs	r3, #2
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <createPostMsg+0x84>)
 8000584:	6013      	str	r3, [r2, #0]

}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200003f4 	.word	0x200003f4
 8000590:	20000478 	.word	0x20000478
 8000594:	08001b6c 	.word	0x08001b6c
 8000598:	20000474 	.word	0x20000474
 800059c:	200001f0 	.word	0x200001f0
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000030 	.word	0x20000030
 80005a8:	2000005c 	.word	0x2000005c
 80005ac:	08001bc0 	.word	0x08001bc0
 80005b0:	200003f0 	.word	0x200003f0

080005b4 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80005c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c6:	2100      	movs	r1, #0
 80005c8:	483a      	ldr	r0, [pc, #232]	; (80006b4 <sendRequest+0x100>)
 80005ca:	f000 fe19 	bl	8001200 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <sendRequest+0x104>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4939      	ldr	r1, [pc, #228]	; (80006bc <sendRequest+0x108>)
 80005d6:	4837      	ldr	r0, [pc, #220]	; (80006b4 <sendRequest+0x100>)
 80005d8:	f000 fe1a 	bl	8001210 <siprintf>

	found = STANDBY;
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <sendRequest+0x10c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80005e2:	4834      	ldr	r0, [pc, #208]	; (80006b4 <sendRequest+0x100>)
 80005e4:	f000 fcba 	bl	8000f5c <write_usart1>
	while(_CIPSEND_tries > 0){
 80005e8:	e027      	b.n	800063a <sendRequest+0x86>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 80005ea:	4936      	ldr	r1, [pc, #216]	; (80006c4 <sendRequest+0x110>)
 80005ec:	4836      	ldr	r0, [pc, #216]	; (80006c8 <sendRequest+0x114>)
 80005ee:	f000 fd27 	bl	8001040 <search_usart1_buffer_Rx>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <sendRequest+0x10c>)
 80005f8:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <sendRequest+0x10c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d107      	bne.n	8000612 <sendRequest+0x5e>
				found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000602:	4932      	ldr	r1, [pc, #200]	; (80006cc <sendRequest+0x118>)
 8000604:	4830      	ldr	r0, [pc, #192]	; (80006c8 <sendRequest+0x114>)
 8000606:	f000 fd1b 	bl	8001040 <search_usart1_buffer_Rx>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <sendRequest+0x10c>)
 8000610:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <sendRequest+0x10c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d105      	bne.n	8000626 <sendRequest+0x72>
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fb70 	bl	8000d00 <timeout_with_timer4>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0e1      	beq.n	80005ea <sendRequest+0x36>
			}
		}
		if(found == PASS){
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <sendRequest+0x10c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <sendRequest+0x8e>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3b01      	subs	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 8000634:	481f      	ldr	r0, [pc, #124]	; (80006b4 <sendRequest+0x100>)
 8000636:	f000 fc91 	bl	8000f5c <write_usart1>
	while(_CIPSEND_tries > 0){
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1e8      	bne.n	8000612 <sendRequest+0x5e>
 8000640:	e000      	b.n	8000644 <sendRequest+0x90>
			break; //move on to next command
 8000642:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <sendRequest+0x10c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d003      	beq.n	8000654 <sendRequest+0xa0>
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <sendRequest+0x10c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d101      	bne.n	8000658 <sendRequest+0xa4>
		return FALSE;
 8000654:	2300      	movs	r3, #0
 8000656:	e028      	b.n	80006aa <sendRequest+0xf6>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <sendRequest+0x10c>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 800065e:	481c      	ldr	r0, [pc, #112]	; (80006d0 <sendRequest+0x11c>)
 8000660:	f000 fc7c 	bl	8000f5c <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000664:	e01d      	b.n	80006a2 <sendRequest+0xee>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000666:	491b      	ldr	r1, [pc, #108]	; (80006d4 <sendRequest+0x120>)
 8000668:	481b      	ldr	r0, [pc, #108]	; (80006d8 <sendRequest+0x124>)
 800066a:	f000 fce9 	bl	8001040 <search_usart1_buffer_Rx>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <sendRequest+0x10c>)
 8000674:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <sendRequest+0x10c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d105      	bne.n	800068a <sendRequest+0xd6>
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f000 fb3e 	bl	8000d00 <timeout_with_timer4>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0ed      	beq.n	8000666 <sendRequest+0xb2>
		}
		if(found == PASS){
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <sendRequest+0x10c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <sendRequest+0xe2>
			return TRUE;
 8000692:	2301      	movs	r3, #1
 8000694:	e009      	b.n	80006aa <sendRequest+0xf6>
		}
		else{
			_SEND_OK_tries--;
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3b01      	subs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <sendRequest+0x11c>)
 800069e:	f000 fc5d 	bl	8000f5c <write_usart1>
	while(_SEND_OK_tries > 0){
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1e6      	bne.n	8000676 <sendRequest+0xc2>
		}
	}
	return FALSE;
 80006a8:	2300      	movs	r3, #0

}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000f0 	.word	0x200000f0
 80006b8:	200003f0 	.word	0x200003f0
 80006bc:	08001c38 	.word	0x08001c38
 80006c0:	2000006c 	.word	0x2000006c
 80006c4:	08001ac0 	.word	0x08001ac0
 80006c8:	08001c4c 	.word	0x08001c4c
 80006cc:	08001c50 	.word	0x08001c50
 80006d0:	200001f0 	.word	0x200001f0
 80006d4:	08001b18 	.word	0x08001b18
 80006d8:	08001c5c 	.word	0x08001c5c

080006dc <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <readResponse+0x4c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80006ea:	e007      	b.n	80006fc <readResponse+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80006ec:	490f      	ldr	r1, [pc, #60]	; (800072c <readResponse+0x50>)
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <readResponse+0x54>)
 80006f0:	f000 fca6 	bl	8001040 <search_usart1_buffer_Rx>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <readResponse+0x4c>)
 80006fa:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <readResponse+0x4c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d105      	bne.n	8000710 <readResponse+0x34>
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 fafb 	bl	8000d00 <timeout_with_timer4>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0ed      	beq.n	80006ec <readResponse+0x10>
	}
	if(found == PASS){
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <readResponse+0x4c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <readResponse+0x40>
		return TRUE;
 8000718:	2301      	movs	r3, #1
 800071a:	e000      	b.n	800071e <readResponse+0x42>
	}
	else{
		return FALSE;
 800071c:	2300      	movs	r3, #0
	}

}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000006c 	.word	0x2000006c
 800072c:	08001b18 	.word	0x08001b18
 8000730:	08001c50 	.word	0x08001c50

08000734 <closeCunnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeCunnection(uint32_t tries, uint32_t timeout){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <closeCunnection+0x64>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <closeCunnection+0x68>)
 8000746:	f000 fc09 	bl	8000f5c <write_usart1>
	while(tries > 0){
 800074a:	e01d      	b.n	8000788 <closeCunnection+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800074c:	4914      	ldr	r1, [pc, #80]	; (80007a0 <closeCunnection+0x6c>)
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <closeCunnection+0x70>)
 8000750:	f000 fc76 	bl	8001040 <search_usart1_buffer_Rx>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <closeCunnection+0x64>)
 800075a:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <closeCunnection+0x64>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d105      	bne.n	8000770 <closeCunnection+0x3c>
 8000764:	6838      	ldr	r0, [r7, #0]
 8000766:	f000 facb 	bl	8000d00 <timeout_with_timer4>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0ed      	beq.n	800074c <closeCunnection+0x18>
		}
		if(found == PASS){
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <closeCunnection+0x64>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <closeCunnection+0x48>
			return TRUE;
 8000778:	2301      	movs	r3, #1
 800077a:	e009      	b.n	8000790 <closeCunnection+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <closeCunnection+0x68>)
 8000784:	f000 fbea 	bl	8000f5c <write_usart1>
	while(tries > 0){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1e6      	bne.n	800075c <closeCunnection+0x28>
		}
	}
	return FALSE;
 800078e:	2300      	movs	r3, #0

}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000006c 	.word	0x2000006c
 800079c:	08001c68 	.word	0x08001c68
 80007a0:	08001ac0 	.word	0x08001ac0
 80007a4:	08001ac8 	.word	0x08001ac8

080007a8 <add_event>:
	queue.accept = GO;
}


void add_event(Handler handler)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 80007b0:	f000 f81e 	bl	80007f0 <queue_isFull>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d113      	bne.n	80007e2 <add_event+0x3a>
		//write_usart2((uint8_t*)("\r\n<-queue is full->\r\n"));
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <add_event+0x44>)
 80007bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007be:	490b      	ldr	r1, [pc, #44]	; (80007ec <add_event+0x44>)
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE-1)) //changed from  < QUEUE_SIZE
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <add_event+0x44>)
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	2b08      	cmp	r3, #8
 80007cc:	d805      	bhi.n	80007da <add_event+0x32>
		queue.writeIndex++;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <add_event+0x44>)
 80007d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <add_event+0x44>)
 80007d6:	6293      	str	r3, [r2, #40]	; 0x28
 80007d8:	e004      	b.n	80007e4 <add_event+0x3c>
	else
		queue.writeIndex = 0;
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <add_event+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
 80007e0:	e000      	b.n	80007e4 <add_event+0x3c>
		return;
 80007e2:	bf00      	nop

	//write_usart2((uint8_t*)("\r\n<-queue add event->\r\n"));

}
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200004f8 	.word	0x200004f8

080007f0 <queue_isFull>:

}


BOOL queue_isFull()
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <queue_isFull+0x34>)
 80007f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <queue_isFull+0x34>)
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	1c59      	adds	r1, r3, #1
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <queue_isFull+0x38>)
 8000800:	fba3 2301 	umull	r2, r3, r3, r1
 8000804:	08da      	lsrs	r2, r3, #3
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	1aca      	subs	r2, r1, r3
 8000810:	4290      	cmp	r0, r2
 8000812:	bf0c      	ite	eq
 8000814:	2301      	moveq	r3, #1
 8000816:	2300      	movne	r3, #0
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200004f8 	.word	0x200004f8
 8000828:	cccccccd 	.word	0xcccccccd

0800082c <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <EXTI15_10_IRQHandler+0x24>)
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <EXTI15_10_IRQHandler+0x24>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <EXTI15_10_IRQHandler+0x24>)
 800083e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000842:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <EXTI15_10_IRQHandler+0x28>)
 8000846:	f7ff ffaf 	bl	80007a8 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010400 	.word	0x40010400
 8000854:	08000859 	.word	0x08000859

08000858 <interrupt_handler>:

void *interrupt_handler(void){
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

	if(state == OFF)
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <interrupt_handler+0x3c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <interrupt_handler+0x40>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <interrupt_handler+0x40>)
 800086a:	f043 0320 	orr.w	r3, r3, #32
 800086e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <interrupt_handler+0x3c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e008      	b.n	800088a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <interrupt_handler+0x40>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <interrupt_handler+0x40>)
 800087e:	f023 0320 	bic.w	r3, r3, #32
 8000882:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <interrupt_handler+0x3c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 800088a:	2300      	movs	r3, #0

}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000b80 	.word	0x20000b80
 8000898:	40010800 	.word	0x40010800

0800089c <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <EXTI4_IRQHandler+0x1c>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <EXTI4_IRQHandler+0x1c>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6153      	str	r3, [r2, #20]
	add_event(alert_Handler);
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <EXTI4_IRQHandler+0x20>)
 80008ae:	f7ff ff7b 	bl	80007a8 <add_event>

	//toggle_led(); //This is temporary for testing.
	//write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue


}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010400 	.word	0x40010400
 80008bc:	08000209 	.word	0x08000209

080008c0 <init_i2c1>:
*3.	send the slave-the address so you can find the actual slave you're talking to
*4.	wait until the slave replies(until the bit ADDR in I2C Status register 1 (I2C_SR1) (p.777) is set- cause it means that Received address matched)
*5.	once the drafts finds a match then you can start go ahead and you know proceed with your rx or TX whatever it is you're gonna do
*/

void init_i2c1(void){
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

	/*Enable use of SCL (PB6) and SDA (PB7)*/
	RCC->APB2ENR |= 0x00000008;  // [referance manual 7.3.7]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <init_i2c1+0x94>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <init_i2c1+0x94>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]

	/*Enable I2C1 RCC clock*/
	RCC->APB1ENR |= 0x00200000; // [referance manual 7.3.8]
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <init_i2c1+0x94>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <init_i2c1+0x94>)
 80008d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008da:	61d3      	str	r3, [r2, #28]


	//Configure PB6 and PB7 as SCL and SDA (respectively)

	/*Enable AFIO*/
	RCC->APB2ENR |= 0x00000001; // ... test with and without
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <init_i2c1+0x94>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <init_i2c1+0x94>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6193      	str	r3, [r2, #24]

	/*Set SCL (PB6) and SDA (PB7) [reference manual p. 168 Table  27]*/
	GPIOB->CRL &= 0x00FFFFFF; // reset relevent bits [reference manual 9.2.1]
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <init_i2c1+0x98>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <init_i2c1+0x98>)
 80008ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008f2:	6013      	str	r3, [r2, #0]
//	GPIOB->CRL |= 0xEE000000; // set as Alternate function output Open-drain, max speed 2 MHz.
	GPIOB->CRL |= 0x55000000; // set as General purpose open drain, max speed 2 MHz.//For Debug
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <init_i2c1+0x98>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <init_i2c1+0x98>)
 80008fa:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80008fe:	6013      	str	r3, [r2, #0]

	GPIOB->ODR |= 0x000000C0;//set
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <init_i2c1+0x98>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <init_i2c1+0x98>)
 8000906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800090a:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~(0x000000C0);//reset
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <init_i2c1+0x98>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <init_i2c1+0x98>)
 8000912:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000916:	60d3      	str	r3, [r2, #12]
	//The following is the required sequence in master mode. [reference manual p. 758]

	//I2C_OAR1[ADD0]: 7-bit addressing mode: don’t care [referense manual 26.6.3]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 &= 0xFFC0; // reset relavent bits FREQ[5:0]
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <init_i2c1+0x9c>)
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <init_i2c1+0x9c>)
 800091e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000922:	4013      	ands	r3, r2
 8000924:	604b      	str	r3, [r1, #4]
	I2C1->CR2 |= 0x0008; // set frequency to 8MHz same frequency as APB1
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <init_i2c1+0x9c>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <init_i2c1+0x9c>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6053      	str	r3, [r2, #4]

	/*Set CCR register: http://fastbitlab.com/stm32-i2c-lecture-12-i2c-serial-clock-settings-with-explanations/
	 *See: [reference manual 26.6.8], [datasheet p. 59 Table 40]*/

	/*Set CCR to generate 100kHz frequency in Sm mode [referance manual p. 782 "For intance"]*/
	I2C1->CCR = 0x0028;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <init_i2c1+0x9c>)
 8000934:	2228      	movs	r2, #40	; 0x28
 8000936:	61da      	str	r2, [r3, #28]


	/* Configure the rise time register: TRISE*/

	/*Set TRISE to maximum allowed SCL rise time in Sm mode [referance manual p. 783 "For intance"].*/
	I2C1->TRISE = 0x0009;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <init_i2c1+0x9c>)
 800093a:	2209      	movs	r2, #9
 800093c:	621a      	str	r2, [r3, #32]


	/*Enable I2C peripheral (PE = 1)*/
	I2C1->CR1 |= 0x0001; //The CCR register must be configured only when the I2C is disabled (PE = 0) [reference manual p. 781 26.6.8].
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <init_i2c1+0x9c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <init_i2c1+0x9c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6013      	str	r3, [r2, #0]
	//I2C2->CR2 |= I2C_CR2_ITEVTEN; //event interrupts

	//I2C2->CR1 |= I2C_CR1_PE; //enable peripheral needs to be done last (Ref Manual p. 772, 26.6.1)

	//_________________INITIAL CODE_________________________//
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	40010c00 	.word	0x40010c00
 800095c:	40005400 	.word	0x40005400

08000960 <I2C1_Read1Byte>:

/* OV7670 DeviceAddr:
 * 0x42 write (Transmitter mode)
 * 0x43 Read (Receiver mode) = 0x42 | 0x01
 * DeviceAddr can be any one of them*/
uint8_t I2C1_Read1Byte(uint8_t DeviceAddr, uint8_t addr){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]


	//Transmitter mode

	/*wait if I2C1 is busy [reference manual p. 758 | section 26.3.3]*/
	while((I2C1->SR2 & 0x0002) == 0x0002); // BUSY bit [reference manual 26.6.7]
 8000970:	bf00      	nop
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b02      	cmp	r3, #2
 800097c:	d0f9      	beq.n	8000972 <I2C1_Read1Byte+0x12>

	/*generate START [reference manual p. 760 | Figure 273. [S]]*/
	I2C1->CR1 |= 0x0100; // START bit [reference manual 26.6.1]
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6013      	str	r3, [r2, #0]

	/*wait EV5: wait until start condition generated [reference manual p. 760 | Figure 273. [EV5]]*/
	while((I2C1->SR1 & 0x0001) != 0x0001); // SB bit [reference manual 26.6.6]
 800098a:	bf00      	nop
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b01      	cmp	r3, #1
 8000996:	d1f9      	bne.n	800098c <I2C1_Read1Byte+0x2c>

	//SB=1: Cleared by software by reading the SR1 register followed by writing the DR register

	/*send device addr [reference manual p. 760 | Figure 273. [EV5]]*/
	I2C1->DR = (uint8_t)((DeviceAddr & ~(0x01))); // [reference manual p. 759 'To enter Transmitter mode']
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 800099c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80009a0:	6113      	str	r3, [r2, #16]

	/*wait EV6: wait until address is received and matched [reference manual p. 760 | Figure 273. [EV6]]*/
	while((I2C1->SR1 & 0x0002) != 0x0002); // ADDR bit [reference manual 26.6.6]
 80009a2:	bf00      	nop
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d1f9      	bne.n	80009a4 <I2C1_Read1Byte+0x44>

	//ADDER=1: Cleared by software reading SR1 register followed reading SR2

	/*addr within device*/
	temp = I2C1->SR2;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <I2C1_Read1Byte+0xdc>)
 80009b6:	6013      	str	r3, [r2, #0]

	/*wait for EV8_2 [reference manual p. 760 | Figure 273. [EV8_2]]*/
	while((I2C1->SR1 & 0x0080) != 0x0080); // TxE bit [reference manual 26.6.6]
 80009b8:	bf00      	nop
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	2b80      	cmp	r3, #128	; 0x80
 80009c4:	d1f9      	bne.n	80009ba <I2C1_Read1Byte+0x5a>
	// ???

	////Receiver mode

	/*generate START [reference manual p. 761 | Figure 274. [S]]*/
	I2C1->CR1 |= 0x0100; // START bit [reference manual 26.6.1]
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6013      	str	r3, [r2, #0]

	/*wait EV5: wait until start condition arrived [reference manual p. 761 | Figure 274. [EV5]]*/
	while((I2C1->SR1 & 0x0001) == 0x0001); // SB bit [reference manual 26.6.6]
 80009d2:	bf00      	nop
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d0f9      	beq.n	80009d4 <I2C1_Read1Byte+0x74>

	/*send device addr [reference manual p. 760 | Figure 273. [EV5]]*/
	I2C1->DR = (uint8_t)((DeviceAddr | 0x01)); // [reference manual p. 759 'To enter Receiver mode']
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009ea:	611a      	str	r2, [r3, #16]

	/*wait EV6: wait until address is recieved and matched [refernce manual p. 761 | Figure 274. [EV6]]*/
	while((I2C1->SR1 & 0x0002) != 0x0002); // ADDR bit [refernce manual 26.6.6]
 80009ec:	bf00      	nop
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d1f9      	bne.n	80009ee <I2C1_Read1Byte+0x8e>

	/*do not acknowledge [refernce manual p. 763 | 'Case of a single byte to ber received']*/
	I2C1->CR1 &= ~(0x0400); // ACK bit [reference manual 26.6.1]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a04:	6013      	str	r3, [r2, #0]

	/*wait EV7 [refernce manual p. 761 | Figure 274. [EV7]]*/
	while((I2C1->SR1 & 0x0040) != 0x0040); // RxE bit [reference manual 26.6.6]
 8000a06:	bf00      	nop
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a10:	2b40      	cmp	r3, #64	; 0x40
 8000a12:	d1f9      	bne.n	8000a08 <I2C1_Read1Byte+0xa8>

	/*retrieve byte [reference manual p. 763 | 'Case of a single byte to ber received']*/
	byte1_buff = I2C1->DR;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <I2C1_Read1Byte+0xd8>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <I2C1_Read1Byte+0xe0>)
 8000a1c:	701a      	strb	r2, [r3, #0]

	/*Generate stop condition [reference manual p. 763 | 'Case of a single byte to ber received']*/
	I2C2->CR1 |= 0x0200; // STOP bit [reference manual 26.6.1]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <I2C1_Read1Byte+0xe4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <I2C1_Read1Byte+0xe4>)
 8000a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a28:	6013      	str	r3, [r2, #0]

	return byte1_buff;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <I2C1_Read1Byte+0xe0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]

}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	2000052c 	.word	0x2000052c
 8000a40:	20000530 	.word	0x20000530
 8000a44:	40005800 	.word	0x40005800

08000a48 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	init_MCO();
 8000a4c:	f7ff fb98 	bl	8000180 <init_MCO>
//	/*FOR TESTING*/
//	init_queue();
//	//init_interrupt();
//	/*FOR TESTING*/
//
	init_usart2(); // for debugging
 8000a50:	f000 f9f4 	bl	8000e3c <init_usart2>
//
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <main+0x40>)
 8000a56:	f000 fa45 	bl	8000ee4 <write_usart2>
//
//	init_queue();
//	init_sensor_with_interrupt();
//	//init_sensor_led_response();
//
	init_timer2();//for testing i2c
 8000a5a:	f000 f8b1 	bl	8000bc0 <init_timer2>
	//}
	//else{
	//	write_usart2((uint8_t*)(":(\r\n"));
	//}

	init_i2c1();
 8000a5e:	f7ff ff2f 	bl	80008c0 <init_i2c1>


	while(1)
	{
		/*Testing I2C with camera module*/
		if(I2C1_Read1Byte(0x43, 0x0A) == 0x76)
 8000a62:	210a      	movs	r1, #10
 8000a64:	2043      	movs	r0, #67	; 0x43
 8000a66:	f7ff ff7b 	bl	8000960 <I2C1_Read1Byte>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b76      	cmp	r3, #118	; 0x76
 8000a6e:	d103      	bne.n	8000a78 <main+0x30>
		{
			write_usart2((uint8_t*)("\r\nI2C Test Pass\r\n"));//For test
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <main+0x44>)
 8000a72:	f000 fa37 	bl	8000ee4 <write_usart2>
 8000a76:	e002      	b.n	8000a7e <main+0x36>
		}
		else
		{
			write_usart2((uint8_t*)("\r\nI2C Test Failed\r\n"));//For test
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <main+0x48>)
 8000a7a:	f000 fa33 	bl	8000ee4 <write_usart2>
		}
		delay_with_timer2(500);//0.5 second
 8000a7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a82:	f000 f91b 	bl	8000cbc <delay_with_timer2>
		if(I2C1_Read1Byte(0x43, 0x0A) == 0x76)
 8000a86:	e7ec      	b.n	8000a62 <main+0x1a>
 8000a88:	08001d08 	.word	0x08001d08
 8000a8c:	08001d1c 	.word	0x08001d1c
 8000a90:	08001d30 	.word	0x08001d30

08000a94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x16>
		heap_end = &end;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <_sbrk+0x50>)
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <_sbrk+0x54>)
 8000aa8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <_sbrk+0x50>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <_sbrk+0x50>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	466a      	mov	r2, sp
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d907      	bls.n	8000ace <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000abe:	f000 fb75 	bl	80011ac <__errno>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	e006      	b.n	8000adc <_sbrk+0x48>
	}

	heap_end += incr;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <_sbrk+0x50>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <_sbrk+0x50>)
 8000ad8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000534 	.word	0x20000534
 8000ae8:	20000b88 	.word	0x20000b88

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <init_timer2>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;

/*init's timer2 to  interrupt once a milli second when enabled*/
void init_timer2(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <init_timer2+0x84>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <init_timer2+0x84>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	2264      	movs	r2, #100	; 0x64
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bdc:	2250      	movs	r2, #80	; 0x50
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8000bf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 8000c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000c12:	2007      	movs	r0, #7
 8000c14:	f7ff ff6a 	bl	8000aec <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201c      	movs	r0, #28
 8000c1c:	f7ff ffa6 	bl	8000b6c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8000c20:	201c      	movs	r0, #28
 8000c22:	f7ff ff87 	bl	8000b34 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c26:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <init_timer2+0x88>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
	timer2.timeout_count = 0;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <init_timer2+0x88>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
	timer2.delay = FALSE;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <init_timer2+0x88>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	721a      	strb	r2, [r3, #8]
	timer2.timeout = FALSE;
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <init_timer2+0x88>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	725a      	strb	r2, [r3, #9]

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	20000538 	.word	0x20000538

08000c4c <enable_timer2>:
	timer4.timeout = FALSE;
}


void enable_timer2(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8000c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <enable_timer4>:
{
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
}

void enable_timer4(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <enable_timer4+0x18>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <enable_timer4+0x18>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40000800 	.word	0x40000800

08000c84 <disable_timer2>:


void disable_timer2(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8000c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <disable_timer4>:
{
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
}

void disable_timer4(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <disable_timer4+0x18>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <disable_timer4+0x18>)
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]

}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40000800 	.word	0x40000800

08000cbc <delay_with_timer2>:


void delay_with_timer2(uint32_t num_of_millis)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	enable_timer2();
 8000cc4:	f7ff ffc2 	bl	8000c4c <enable_timer2>

	timer2.countTicks = 0;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <delay_with_timer2+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
	timer2.delay = TRUE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <delay_with_timer2+0x40>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	721a      	strb	r2, [r3, #8]

	while(timer2.countTicks < num_of_millis);
 8000cd4:	bf00      	nop
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <delay_with_timer2+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8fa      	bhi.n	8000cd6 <delay_with_timer2+0x1a>

	timer2.delay = FALSE;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <delay_with_timer2+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	721a      	strb	r2, [r3, #8]
	if(!timer2.timeout){
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <delay_with_timer2+0x40>)
 8000ce8:	7a5b      	ldrb	r3, [r3, #9]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <delay_with_timer2+0x36>
		disable_timer2();
 8000cee:	f7ff ffc9 	bl	8000c84 <disable_timer2>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000538 	.word	0x20000538

08000d00 <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000d08:	f7ff ffae 	bl	8000c68 <enable_timer4>

	timer4.timeout = TRUE;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <timeout_with_timer4+0x44>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	725a      	strb	r2, [r3, #9]
	if(timer4.timeout_count >= num_of_sec){
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <timeout_with_timer4+0x44>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d80d      	bhi.n	8000d38 <timeout_with_timer4+0x38>
		if(!timer4.delay){
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <timeout_with_timer4+0x44>)
 8000d1e:	7a1b      	ldrb	r3, [r3, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <timeout_with_timer4+0x28>
			disable_timer4();
 8000d24:	f7ff ffbc 	bl	8000ca0 <disable_timer4>
		}
		timer4.timeout = FALSE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <timeout_with_timer4+0x44>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	725a      	strb	r2, [r3, #9]
		timer4.timeout_count = 0;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <timeout_with_timer4+0x44>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <timeout_with_timer4+0x3a>
	}
	else{
		return FALSE;
 8000d38:	2300      	movs	r3, #0
	}
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000550 	.word	0x20000550

08000d48 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d119      	bne.n	8000d8e <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d104      	bne.n	8000d6c <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d6a:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d6e:	7a5b      	ldrb	r3, [r3, #9]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d104      	bne.n	8000d7e <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <TIM2_IRQHandler+0x50>)
 8000d7c:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d88:	f023 0301 	bic.w	r3, r3, #1
 8000d8c:	6113      	str	r3, [r2, #16]
	}
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000538 	.word	0x20000538

08000d9c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <TIM3_IRQHandler+0x48>)
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d117      	bne.n	8000ddc <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000dae:	7a1b      	ldrb	r3, [r3, #8]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d104      	bne.n	8000dbe <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000dbc:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d104      	bne.n	8000dd0 <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <TIM3_IRQHandler+0x4c>)
 8000dce:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <TIM3_IRQHandler+0x48>)
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <TIM3_IRQHandler+0x48>)
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	6113      	str	r3, [r2, #16]
	}
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40000400 	.word	0x40000400
 8000de8:	20000544 	.word	0x20000544

08000dec <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <TIM4_IRQHandler+0x48>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d117      	bne.n	8000e2c <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000dfe:	7a1b      	ldrb	r3, [r3, #8]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d104      	bne.n	8000e0e <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000e0c:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000e10:	7a5b      	ldrb	r3, [r3, #9]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d104      	bne.n	8000e20 <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <TIM4_IRQHandler+0x4c>)
 8000e1e:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <TIM4_IRQHandler+0x48>)
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <TIM4_IRQHandler+0x48>)
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	6113      	str	r3, [r2, #16]
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	40000800 	.word	0x40000800
 8000e38:	20000550 	.word	0x20000550

08000e3c <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <init_usart2+0x5c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <init_usart2+0x5c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <init_usart2+0x60>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <init_usart2+0x60>)
 8000e52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e56:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <init_usart2+0x60>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <init_usart2+0x60>)
 8000e5e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000e62:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <init_usart2+0x5c>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <init_usart2+0x5c>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <init_usart2+0x64>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <init_usart2+0x64>)
 8000e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e7a:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <init_usart2+0x64>)
 8000e7e:	f240 324d 	movw	r2, #845	; 0x34d
 8000e82:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <init_usart2+0x64>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <init_usart2+0x64>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <set_usart2_buffer_Tx>:
}


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <set_usart2_buffer_Tx+0x3c>)
 8000eb4:	f000 f9a4 	bl	8001200 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <set_usart2_buffer_Tx+0x3c>)
 8000ebc:	f000 f9c8 	bl	8001250 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff f955 	bl	8000170 <strlen>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <set_usart2_buffer_Tx+0x3c>)
 8000eca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <set_usart2_buffer_Tx+0x3c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000055c 	.word	0x2000055c

08000ee4 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ffd9 	bl	8000ea4 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 8000ef2:	e014      	b.n	8000f1e <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000ef4:	bf00      	nop
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <write_usart2+0x70>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f9      	beq.n	8000ef6 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <write_usart2+0x74>)
 8000f04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <write_usart2+0x74>)
 8000f0a:	5cd2      	ldrb	r2, [r2, r3]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <write_usart2+0x70>)
 8000f0e:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <write_usart2+0x74>)
 8000f12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <write_usart2+0x74>)
 8000f1a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <write_usart2+0x74>)
 8000f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <write_usart2+0x74>)
 8000f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3e2      	bcc.n	8000ef4 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000f2e:	bf00      	nop
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <write_usart2+0x70>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f38:	2b40      	cmp	r3, #64	; 0x40
 8000f3a:	d1f9      	bne.n	8000f30 <write_usart2+0x4c>
	usart2.write_index = 0;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <write_usart2+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <write_usart2+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40004400 	.word	0x40004400
 8000f58:	2000055c 	.word	0x2000055c

08000f5c <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f835 	bl	8000fd4 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8000f6a:	e014      	b.n	8000f96 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000f6c:	bf00      	nop
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <write_usart1+0x70>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f9      	beq.n	8000f6e <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <write_usart1+0x74>)
 8000f7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <write_usart1+0x74>)
 8000f82:	5cd2      	ldrb	r2, [r2, r3]
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <write_usart1+0x70>)
 8000f86:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <write_usart1+0x74>)
 8000f8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <write_usart1+0x74>)
 8000f92:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <write_usart1+0x74>)
 8000f98:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <write_usart1+0x74>)
 8000f9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3e2      	bcc.n	8000f6c <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000fa6:	bf00      	nop
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <write_usart1+0x70>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb0:	2b40      	cmp	r3, #64	; 0x40
 8000fb2:	d1f9      	bne.n	8000fa8 <write_usart1+0x4c>
	usart1.write_index = 0;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <write_usart1+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <write_usart1+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	20000764 	.word	0x20000764

08000fd4 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <set_usart1_buffer_Tx+0x3c>)
 8000fe4:	f000 f90c 	bl	8001200 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <set_usart1_buffer_Tx+0x3c>)
 8000fec:	f000 f930 	bl	8001250 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff f8bd 	bl	8000170 <strlen>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <set_usart1_buffer_Tx+0x3c>)
 8000ffa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <set_usart1_buffer_Tx+0x3c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000764 	.word	0x20000764

08001014 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	2100      	movs	r1, #0
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <set_usart1_buffer_Rx+0x24>)
 8001020:	f000 f8ee 	bl	8001200 <memset>
	usart1.Rx_len = 0;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <set_usart1_buffer_Rx+0x28>)
 8001026:	2200      	movs	r2, #0
 8001028:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <set_usart1_buffer_Rx+0x28>)
 800102e:	2200      	movs	r2, #0
 8001030:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000964 	.word	0x20000964
 800103c:	20000764 	.word	0x20000764

08001040 <search_usart1_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <search_usart1_buffer_Rx+0x7c>)
 800104c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001050:	3301      	adds	r3, #1
 8001052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001056:	d223      	bcs.n	80010a0 <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4819      	ldr	r0, [pc, #100]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 800105c:	f000 f900 	bl	8001260 <strstr>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8001066:	4816      	ldr	r0, [pc, #88]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 8001068:	f7ff ff3c 	bl	8000ee4 <write_usart2>
			set_usart1_buffer_Rx();
 800106c:	f7ff ffd2 	bl	8001014 <set_usart1_buffer_Rx>
			return (uint32_t)PASS;
 8001070:	2300      	movs	r3, #0
 8001072:	e01e      	b.n	80010b2 <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 8001078:	f000 f8f2 	bl	8001260 <strstr>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 8001084:	f7ff ff2e 	bl	8000ee4 <write_usart2>
			set_usart1_buffer_Rx();
 8001088:	f7ff ffc4 	bl	8001014 <set_usart1_buffer_Rx>
			return (uint32_t)FAIL;
 800108c:	2302      	movs	r3, #2
 800108e:	e010      	b.n	80010b2 <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 8001092:	f7ff ff27 	bl	8000ee4 <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <search_usart1_buffer_Rx+0x84>)
 8001098:	f7ff ff24 	bl	8000ee4 <write_usart2>
			return (uint32_t)STANDBY;
 800109c:	2301      	movs	r3, #1
 800109e:	e008      	b.n	80010b2 <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <search_usart1_buffer_Rx+0x88>)
 80010a2:	f7ff ff1f 	bl	8000ee4 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <search_usart1_buffer_Rx+0x80>)
 80010a8:	f7ff ff1c 	bl	8000ee4 <write_usart2>
		set_usart1_buffer_Rx();
 80010ac:	f7ff ffb2 	bl	8001014 <set_usart1_buffer_Rx>
		return (uint32_t)STANDBY;
 80010b0:	2301      	movs	r3, #1
	}

}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000764 	.word	0x20000764
 80010c0:	20000964 	.word	0x20000964
 80010c4:	08001d44 	.word	0x08001d44
 80010c8:	08001d48 	.word	0x08001d48

080010cc <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <USART1_IRQHandler+0x80>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d132      	bne.n	8001142 <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <USART1_IRQHandler+0x80>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <USART1_IRQHandler+0x84>)
 80010e4:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <USART1_IRQHandler+0x88>)
 80010e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80010ec:	3301      	adds	r3, #1
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d20a      	bcs.n	800110a <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <USART1_IRQHandler+0x88>)
 80010f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <USART1_IRQHandler+0x84>)
 80010fc:	7811      	ldrb	r1, [r2, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <USART1_IRQHandler+0x88>)
 8001100:	4413      	add	r3, r2
 8001102:	460a      	mov	r2, r1
 8001104:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8001108:	e00d      	b.n	8001126 <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <USART1_IRQHandler+0x88>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <USART1_IRQHandler+0x88>)
 8001114:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <USART1_IRQHandler+0x84>)
 800111a:	7811      	ldrb	r1, [r2, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <USART1_IRQHandler+0x88>)
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <USART1_IRQHandler+0x88>)
 8001128:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800112c:	3301      	adds	r3, #1
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <USART1_IRQHandler+0x88>)
 8001130:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <USART1_IRQHandler+0x88>)
 8001136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800113a:	3301      	adds	r3, #1
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <USART1_IRQHandler+0x88>)
 800113e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40013800 	.word	0x40013800
 8001150:	20000b74 	.word	0x20000b74
 8001154:	20000764 	.word	0x20000764

08001158 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001182:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001186:	f000 f817 	bl	80011b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7ff fc5d 	bl	8000a48 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800119c:	08001d98 	.word	0x08001d98
  ldr r2, =_sbss
 80011a0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80011a4:	20000b88 	.word	0x20000b88

080011a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_2_IRQHandler>
	...

080011ac <__errno>:
 80011ac:	4b01      	ldr	r3, [pc, #4]	; (80011b4 <__errno+0x8>)
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000070 	.word	0x20000070

080011b8 <__libc_init_array>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	2500      	movs	r5, #0
 80011bc:	4e0c      	ldr	r6, [pc, #48]	; (80011f0 <__libc_init_array+0x38>)
 80011be:	4c0d      	ldr	r4, [pc, #52]	; (80011f4 <__libc_init_array+0x3c>)
 80011c0:	1ba4      	subs	r4, r4, r6
 80011c2:	10a4      	asrs	r4, r4, #2
 80011c4:	42a5      	cmp	r5, r4
 80011c6:	d109      	bne.n	80011dc <__libc_init_array+0x24>
 80011c8:	f000 fc56 	bl	8001a78 <_init>
 80011cc:	2500      	movs	r5, #0
 80011ce:	4e0a      	ldr	r6, [pc, #40]	; (80011f8 <__libc_init_array+0x40>)
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <__libc_init_array+0x44>)
 80011d2:	1ba4      	subs	r4, r4, r6
 80011d4:	10a4      	asrs	r4, r4, #2
 80011d6:	42a5      	cmp	r5, r4
 80011d8:	d105      	bne.n	80011e6 <__libc_init_array+0x2e>
 80011da:	bd70      	pop	{r4, r5, r6, pc}
 80011dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011e0:	4798      	blx	r3
 80011e2:	3501      	adds	r5, #1
 80011e4:	e7ee      	b.n	80011c4 <__libc_init_array+0xc>
 80011e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ea:	4798      	blx	r3
 80011ec:	3501      	adds	r5, #1
 80011ee:	e7f2      	b.n	80011d6 <__libc_init_array+0x1e>
 80011f0:	08001d90 	.word	0x08001d90
 80011f4:	08001d90 	.word	0x08001d90
 80011f8:	08001d90 	.word	0x08001d90
 80011fc:	08001d94 	.word	0x08001d94

08001200 <memset>:
 8001200:	4603      	mov	r3, r0
 8001202:	4402      	add	r2, r0
 8001204:	4293      	cmp	r3, r2
 8001206:	d100      	bne.n	800120a <memset+0xa>
 8001208:	4770      	bx	lr
 800120a:	f803 1b01 	strb.w	r1, [r3], #1
 800120e:	e7f9      	b.n	8001204 <memset+0x4>

08001210 <siprintf>:
 8001210:	b40e      	push	{r1, r2, r3}
 8001212:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001216:	b500      	push	{lr}
 8001218:	b09c      	sub	sp, #112	; 0x70
 800121a:	ab1d      	add	r3, sp, #116	; 0x74
 800121c:	9002      	str	r0, [sp, #8]
 800121e:	9006      	str	r0, [sp, #24]
 8001220:	9107      	str	r1, [sp, #28]
 8001222:	9104      	str	r1, [sp, #16]
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <siprintf+0x38>)
 8001226:	4909      	ldr	r1, [pc, #36]	; (800124c <siprintf+0x3c>)
 8001228:	f853 2b04 	ldr.w	r2, [r3], #4
 800122c:	9105      	str	r1, [sp, #20]
 800122e:	6800      	ldr	r0, [r0, #0]
 8001230:	a902      	add	r1, sp, #8
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f000 f888 	bl	8001348 <_svfiprintf_r>
 8001238:	2200      	movs	r2, #0
 800123a:	9b02      	ldr	r3, [sp, #8]
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	b01c      	add	sp, #112	; 0x70
 8001240:	f85d eb04 	ldr.w	lr, [sp], #4
 8001244:	b003      	add	sp, #12
 8001246:	4770      	bx	lr
 8001248:	20000070 	.word	0x20000070
 800124c:	ffff0208 	.word	0xffff0208

08001250 <strcpy>:
 8001250:	4603      	mov	r3, r0
 8001252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001256:	f803 2b01 	strb.w	r2, [r3], #1
 800125a:	2a00      	cmp	r2, #0
 800125c:	d1f9      	bne.n	8001252 <strcpy+0x2>
 800125e:	4770      	bx	lr

08001260 <strstr>:
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	7803      	ldrb	r3, [r0, #0]
 8001264:	b17b      	cbz	r3, 8001286 <strstr+0x26>
 8001266:	4604      	mov	r4, r0
 8001268:	7823      	ldrb	r3, [r4, #0]
 800126a:	4620      	mov	r0, r4
 800126c:	1c66      	adds	r6, r4, #1
 800126e:	b17b      	cbz	r3, 8001290 <strstr+0x30>
 8001270:	1e4a      	subs	r2, r1, #1
 8001272:	1e63      	subs	r3, r4, #1
 8001274:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001278:	b14d      	cbz	r5, 800128e <strstr+0x2e>
 800127a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800127e:	4634      	mov	r4, r6
 8001280:	42af      	cmp	r7, r5
 8001282:	d0f7      	beq.n	8001274 <strstr+0x14>
 8001284:	e7f0      	b.n	8001268 <strstr+0x8>
 8001286:	780b      	ldrb	r3, [r1, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf18      	it	ne
 800128c:	2000      	movne	r0, #0
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001290:	4618      	mov	r0, r3
 8001292:	e7fc      	b.n	800128e <strstr+0x2e>

08001294 <__ssputs_r>:
 8001294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001298:	688e      	ldr	r6, [r1, #8]
 800129a:	4682      	mov	sl, r0
 800129c:	429e      	cmp	r6, r3
 800129e:	460c      	mov	r4, r1
 80012a0:	4690      	mov	r8, r2
 80012a2:	4699      	mov	r9, r3
 80012a4:	d837      	bhi.n	8001316 <__ssputs_r+0x82>
 80012a6:	898a      	ldrh	r2, [r1, #12]
 80012a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012ac:	d031      	beq.n	8001312 <__ssputs_r+0x7e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	6825      	ldr	r5, [r4, #0]
 80012b2:	6909      	ldr	r1, [r1, #16]
 80012b4:	1a6f      	subs	r7, r5, r1
 80012b6:	6965      	ldr	r5, [r4, #20]
 80012b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80012c0:	f109 0301 	add.w	r3, r9, #1
 80012c4:	443b      	add	r3, r7
 80012c6:	429d      	cmp	r5, r3
 80012c8:	bf38      	it	cc
 80012ca:	461d      	movcc	r5, r3
 80012cc:	0553      	lsls	r3, r2, #21
 80012ce:	d530      	bpl.n	8001332 <__ssputs_r+0x9e>
 80012d0:	4629      	mov	r1, r5
 80012d2:	f000 fb37 	bl	8001944 <_malloc_r>
 80012d6:	4606      	mov	r6, r0
 80012d8:	b950      	cbnz	r0, 80012f0 <__ssputs_r+0x5c>
 80012da:	230c      	movs	r3, #12
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f8ca 3000 	str.w	r3, [sl]
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ea:	81a3      	strh	r3, [r4, #12]
 80012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f0:	463a      	mov	r2, r7
 80012f2:	6921      	ldr	r1, [r4, #16]
 80012f4:	f000 fab6 	bl	8001864 <memcpy>
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	81a3      	strh	r3, [r4, #12]
 8001304:	6126      	str	r6, [r4, #16]
 8001306:	443e      	add	r6, r7
 8001308:	6026      	str	r6, [r4, #0]
 800130a:	464e      	mov	r6, r9
 800130c:	6165      	str	r5, [r4, #20]
 800130e:	1bed      	subs	r5, r5, r7
 8001310:	60a5      	str	r5, [r4, #8]
 8001312:	454e      	cmp	r6, r9
 8001314:	d900      	bls.n	8001318 <__ssputs_r+0x84>
 8001316:	464e      	mov	r6, r9
 8001318:	4632      	mov	r2, r6
 800131a:	4641      	mov	r1, r8
 800131c:	6820      	ldr	r0, [r4, #0]
 800131e:	f000 faac 	bl	800187a <memmove>
 8001322:	68a3      	ldr	r3, [r4, #8]
 8001324:	2000      	movs	r0, #0
 8001326:	1b9b      	subs	r3, r3, r6
 8001328:	60a3      	str	r3, [r4, #8]
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	441e      	add	r6, r3
 800132e:	6026      	str	r6, [r4, #0]
 8001330:	e7dc      	b.n	80012ec <__ssputs_r+0x58>
 8001332:	462a      	mov	r2, r5
 8001334:	f000 fb60 	bl	80019f8 <_realloc_r>
 8001338:	4606      	mov	r6, r0
 800133a:	2800      	cmp	r0, #0
 800133c:	d1e2      	bne.n	8001304 <__ssputs_r+0x70>
 800133e:	6921      	ldr	r1, [r4, #16]
 8001340:	4650      	mov	r0, sl
 8001342:	f000 fab3 	bl	80018ac <_free_r>
 8001346:	e7c8      	b.n	80012da <__ssputs_r+0x46>

08001348 <_svfiprintf_r>:
 8001348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	461d      	mov	r5, r3
 800134e:	898b      	ldrh	r3, [r1, #12]
 8001350:	b09d      	sub	sp, #116	; 0x74
 8001352:	061f      	lsls	r7, r3, #24
 8001354:	4680      	mov	r8, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4616      	mov	r6, r2
 800135a:	d50f      	bpl.n	800137c <_svfiprintf_r+0x34>
 800135c:	690b      	ldr	r3, [r1, #16]
 800135e:	b96b      	cbnz	r3, 800137c <_svfiprintf_r+0x34>
 8001360:	2140      	movs	r1, #64	; 0x40
 8001362:	f000 faef 	bl	8001944 <_malloc_r>
 8001366:	6020      	str	r0, [r4, #0]
 8001368:	6120      	str	r0, [r4, #16]
 800136a:	b928      	cbnz	r0, 8001378 <_svfiprintf_r+0x30>
 800136c:	230c      	movs	r3, #12
 800136e:	f8c8 3000 	str.w	r3, [r8]
 8001372:	f04f 30ff 	mov.w	r0, #4294967295
 8001376:	e0c8      	b.n	800150a <_svfiprintf_r+0x1c2>
 8001378:	2340      	movs	r3, #64	; 0x40
 800137a:	6163      	str	r3, [r4, #20]
 800137c:	2300      	movs	r3, #0
 800137e:	9309      	str	r3, [sp, #36]	; 0x24
 8001380:	2320      	movs	r3, #32
 8001382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001386:	2330      	movs	r3, #48	; 0x30
 8001388:	f04f 0b01 	mov.w	fp, #1
 800138c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001390:	9503      	str	r5, [sp, #12]
 8001392:	4637      	mov	r7, r6
 8001394:	463d      	mov	r5, r7
 8001396:	f815 3b01 	ldrb.w	r3, [r5], #1
 800139a:	b10b      	cbz	r3, 80013a0 <_svfiprintf_r+0x58>
 800139c:	2b25      	cmp	r3, #37	; 0x25
 800139e:	d13e      	bne.n	800141e <_svfiprintf_r+0xd6>
 80013a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80013a4:	d00b      	beq.n	80013be <_svfiprintf_r+0x76>
 80013a6:	4653      	mov	r3, sl
 80013a8:	4632      	mov	r2, r6
 80013aa:	4621      	mov	r1, r4
 80013ac:	4640      	mov	r0, r8
 80013ae:	f7ff ff71 	bl	8001294 <__ssputs_r>
 80013b2:	3001      	adds	r0, #1
 80013b4:	f000 80a4 	beq.w	8001500 <_svfiprintf_r+0x1b8>
 80013b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ba:	4453      	add	r3, sl
 80013bc:	9309      	str	r3, [sp, #36]	; 0x24
 80013be:	783b      	ldrb	r3, [r7, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 809d 	beq.w	8001500 <_svfiprintf_r+0x1b8>
 80013c6:	2300      	movs	r3, #0
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013d0:	9304      	str	r3, [sp, #16]
 80013d2:	9307      	str	r3, [sp, #28]
 80013d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013d8:	931a      	str	r3, [sp, #104]	; 0x68
 80013da:	462f      	mov	r7, r5
 80013dc:	2205      	movs	r2, #5
 80013de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80013e2:	4850      	ldr	r0, [pc, #320]	; (8001524 <_svfiprintf_r+0x1dc>)
 80013e4:	f000 fa30 	bl	8001848 <memchr>
 80013e8:	9b04      	ldr	r3, [sp, #16]
 80013ea:	b9d0      	cbnz	r0, 8001422 <_svfiprintf_r+0xda>
 80013ec:	06d9      	lsls	r1, r3, #27
 80013ee:	bf44      	itt	mi
 80013f0:	2220      	movmi	r2, #32
 80013f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80013f6:	071a      	lsls	r2, r3, #28
 80013f8:	bf44      	itt	mi
 80013fa:	222b      	movmi	r2, #43	; 0x2b
 80013fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001400:	782a      	ldrb	r2, [r5, #0]
 8001402:	2a2a      	cmp	r2, #42	; 0x2a
 8001404:	d015      	beq.n	8001432 <_svfiprintf_r+0xea>
 8001406:	462f      	mov	r7, r5
 8001408:	2000      	movs	r0, #0
 800140a:	250a      	movs	r5, #10
 800140c:	9a07      	ldr	r2, [sp, #28]
 800140e:	4639      	mov	r1, r7
 8001410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001414:	3b30      	subs	r3, #48	; 0x30
 8001416:	2b09      	cmp	r3, #9
 8001418:	d94d      	bls.n	80014b6 <_svfiprintf_r+0x16e>
 800141a:	b1b8      	cbz	r0, 800144c <_svfiprintf_r+0x104>
 800141c:	e00f      	b.n	800143e <_svfiprintf_r+0xf6>
 800141e:	462f      	mov	r7, r5
 8001420:	e7b8      	b.n	8001394 <_svfiprintf_r+0x4c>
 8001422:	4a40      	ldr	r2, [pc, #256]	; (8001524 <_svfiprintf_r+0x1dc>)
 8001424:	463d      	mov	r5, r7
 8001426:	1a80      	subs	r0, r0, r2
 8001428:	fa0b f000 	lsl.w	r0, fp, r0
 800142c:	4318      	orrs	r0, r3
 800142e:	9004      	str	r0, [sp, #16]
 8001430:	e7d3      	b.n	80013da <_svfiprintf_r+0x92>
 8001432:	9a03      	ldr	r2, [sp, #12]
 8001434:	1d11      	adds	r1, r2, #4
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	9103      	str	r1, [sp, #12]
 800143a:	2a00      	cmp	r2, #0
 800143c:	db01      	blt.n	8001442 <_svfiprintf_r+0xfa>
 800143e:	9207      	str	r2, [sp, #28]
 8001440:	e004      	b.n	800144c <_svfiprintf_r+0x104>
 8001442:	4252      	negs	r2, r2
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	9207      	str	r2, [sp, #28]
 800144a:	9304      	str	r3, [sp, #16]
 800144c:	783b      	ldrb	r3, [r7, #0]
 800144e:	2b2e      	cmp	r3, #46	; 0x2e
 8001450:	d10c      	bne.n	800146c <_svfiprintf_r+0x124>
 8001452:	787b      	ldrb	r3, [r7, #1]
 8001454:	2b2a      	cmp	r3, #42	; 0x2a
 8001456:	d133      	bne.n	80014c0 <_svfiprintf_r+0x178>
 8001458:	9b03      	ldr	r3, [sp, #12]
 800145a:	3702      	adds	r7, #2
 800145c:	1d1a      	adds	r2, r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	9203      	str	r2, [sp, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	bfb8      	it	lt
 8001466:	f04f 33ff 	movlt.w	r3, #4294967295
 800146a:	9305      	str	r3, [sp, #20]
 800146c:	4d2e      	ldr	r5, [pc, #184]	; (8001528 <_svfiprintf_r+0x1e0>)
 800146e:	2203      	movs	r2, #3
 8001470:	7839      	ldrb	r1, [r7, #0]
 8001472:	4628      	mov	r0, r5
 8001474:	f000 f9e8 	bl	8001848 <memchr>
 8001478:	b138      	cbz	r0, 800148a <_svfiprintf_r+0x142>
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	1b40      	subs	r0, r0, r5
 800147e:	fa03 f000 	lsl.w	r0, r3, r0
 8001482:	9b04      	ldr	r3, [sp, #16]
 8001484:	3701      	adds	r7, #1
 8001486:	4303      	orrs	r3, r0
 8001488:	9304      	str	r3, [sp, #16]
 800148a:	7839      	ldrb	r1, [r7, #0]
 800148c:	2206      	movs	r2, #6
 800148e:	4827      	ldr	r0, [pc, #156]	; (800152c <_svfiprintf_r+0x1e4>)
 8001490:	1c7e      	adds	r6, r7, #1
 8001492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001496:	f000 f9d7 	bl	8001848 <memchr>
 800149a:	2800      	cmp	r0, #0
 800149c:	d038      	beq.n	8001510 <_svfiprintf_r+0x1c8>
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <_svfiprintf_r+0x1e8>)
 80014a0:	bb13      	cbnz	r3, 80014e8 <_svfiprintf_r+0x1a0>
 80014a2:	9b03      	ldr	r3, [sp, #12]
 80014a4:	3307      	adds	r3, #7
 80014a6:	f023 0307 	bic.w	r3, r3, #7
 80014aa:	3308      	adds	r3, #8
 80014ac:	9303      	str	r3, [sp, #12]
 80014ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014b0:	444b      	add	r3, r9
 80014b2:	9309      	str	r3, [sp, #36]	; 0x24
 80014b4:	e76d      	b.n	8001392 <_svfiprintf_r+0x4a>
 80014b6:	fb05 3202 	mla	r2, r5, r2, r3
 80014ba:	2001      	movs	r0, #1
 80014bc:	460f      	mov	r7, r1
 80014be:	e7a6      	b.n	800140e <_svfiprintf_r+0xc6>
 80014c0:	2300      	movs	r3, #0
 80014c2:	250a      	movs	r5, #10
 80014c4:	4619      	mov	r1, r3
 80014c6:	3701      	adds	r7, #1
 80014c8:	9305      	str	r3, [sp, #20]
 80014ca:	4638      	mov	r0, r7
 80014cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014d0:	3a30      	subs	r2, #48	; 0x30
 80014d2:	2a09      	cmp	r2, #9
 80014d4:	d903      	bls.n	80014de <_svfiprintf_r+0x196>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0c8      	beq.n	800146c <_svfiprintf_r+0x124>
 80014da:	9105      	str	r1, [sp, #20]
 80014dc:	e7c6      	b.n	800146c <_svfiprintf_r+0x124>
 80014de:	fb05 2101 	mla	r1, r5, r1, r2
 80014e2:	2301      	movs	r3, #1
 80014e4:	4607      	mov	r7, r0
 80014e6:	e7f0      	b.n	80014ca <_svfiprintf_r+0x182>
 80014e8:	ab03      	add	r3, sp, #12
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4622      	mov	r2, r4
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_svfiprintf_r+0x1ec>)
 80014f0:	a904      	add	r1, sp, #16
 80014f2:	4640      	mov	r0, r8
 80014f4:	f3af 8000 	nop.w
 80014f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80014fc:	4681      	mov	r9, r0
 80014fe:	d1d6      	bne.n	80014ae <_svfiprintf_r+0x166>
 8001500:	89a3      	ldrh	r3, [r4, #12]
 8001502:	065b      	lsls	r3, r3, #25
 8001504:	f53f af35 	bmi.w	8001372 <_svfiprintf_r+0x2a>
 8001508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800150a:	b01d      	add	sp, #116	; 0x74
 800150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001510:	ab03      	add	r3, sp, #12
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4622      	mov	r2, r4
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_svfiprintf_r+0x1ec>)
 8001518:	a904      	add	r1, sp, #16
 800151a:	4640      	mov	r0, r8
 800151c:	f000 f882 	bl	8001624 <_printf_i>
 8001520:	e7ea      	b.n	80014f8 <_svfiprintf_r+0x1b0>
 8001522:	bf00      	nop
 8001524:	08001d5c 	.word	0x08001d5c
 8001528:	08001d62 	.word	0x08001d62
 800152c:	08001d66 	.word	0x08001d66
 8001530:	00000000 	.word	0x00000000
 8001534:	08001295 	.word	0x08001295

08001538 <_printf_common>:
 8001538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800153c:	4691      	mov	r9, r2
 800153e:	461f      	mov	r7, r3
 8001540:	688a      	ldr	r2, [r1, #8]
 8001542:	690b      	ldr	r3, [r1, #16]
 8001544:	4606      	mov	r6, r0
 8001546:	4293      	cmp	r3, r2
 8001548:	bfb8      	it	lt
 800154a:	4613      	movlt	r3, r2
 800154c:	f8c9 3000 	str.w	r3, [r9]
 8001550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001554:	460c      	mov	r4, r1
 8001556:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800155a:	b112      	cbz	r2, 8001562 <_printf_common+0x2a>
 800155c:	3301      	adds	r3, #1
 800155e:	f8c9 3000 	str.w	r3, [r9]
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	0699      	lsls	r1, r3, #26
 8001566:	bf42      	ittt	mi
 8001568:	f8d9 3000 	ldrmi.w	r3, [r9]
 800156c:	3302      	addmi	r3, #2
 800156e:	f8c9 3000 	strmi.w	r3, [r9]
 8001572:	6825      	ldr	r5, [r4, #0]
 8001574:	f015 0506 	ands.w	r5, r5, #6
 8001578:	d107      	bne.n	800158a <_printf_common+0x52>
 800157a:	f104 0a19 	add.w	sl, r4, #25
 800157e:	68e3      	ldr	r3, [r4, #12]
 8001580:	f8d9 2000 	ldr.w	r2, [r9]
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	42ab      	cmp	r3, r5
 8001588:	dc29      	bgt.n	80015de <_printf_common+0xa6>
 800158a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	3300      	adds	r3, #0
 8001592:	bf18      	it	ne
 8001594:	2301      	movne	r3, #1
 8001596:	0692      	lsls	r2, r2, #26
 8001598:	d42e      	bmi.n	80015f8 <_printf_common+0xc0>
 800159a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800159e:	4639      	mov	r1, r7
 80015a0:	4630      	mov	r0, r6
 80015a2:	47c0      	blx	r8
 80015a4:	3001      	adds	r0, #1
 80015a6:	d021      	beq.n	80015ec <_printf_common+0xb4>
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	68e5      	ldr	r5, [r4, #12]
 80015ac:	f003 0306 	and.w	r3, r3, #6
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	bf18      	it	ne
 80015b4:	2500      	movne	r5, #0
 80015b6:	f8d9 2000 	ldr.w	r2, [r9]
 80015ba:	f04f 0900 	mov.w	r9, #0
 80015be:	bf08      	it	eq
 80015c0:	1aad      	subeq	r5, r5, r2
 80015c2:	68a3      	ldr	r3, [r4, #8]
 80015c4:	6922      	ldr	r2, [r4, #16]
 80015c6:	bf08      	it	eq
 80015c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bfc4      	itt	gt
 80015d0:	1a9b      	subgt	r3, r3, r2
 80015d2:	18ed      	addgt	r5, r5, r3
 80015d4:	341a      	adds	r4, #26
 80015d6:	454d      	cmp	r5, r9
 80015d8:	d11a      	bne.n	8001610 <_printf_common+0xd8>
 80015da:	2000      	movs	r0, #0
 80015dc:	e008      	b.n	80015f0 <_printf_common+0xb8>
 80015de:	2301      	movs	r3, #1
 80015e0:	4652      	mov	r2, sl
 80015e2:	4639      	mov	r1, r7
 80015e4:	4630      	mov	r0, r6
 80015e6:	47c0      	blx	r8
 80015e8:	3001      	adds	r0, #1
 80015ea:	d103      	bne.n	80015f4 <_printf_common+0xbc>
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f4:	3501      	adds	r5, #1
 80015f6:	e7c2      	b.n	800157e <_printf_common+0x46>
 80015f8:	2030      	movs	r0, #48	; 0x30
 80015fa:	18e1      	adds	r1, r4, r3
 80015fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001606:	4422      	add	r2, r4
 8001608:	3302      	adds	r3, #2
 800160a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800160e:	e7c4      	b.n	800159a <_printf_common+0x62>
 8001610:	2301      	movs	r3, #1
 8001612:	4622      	mov	r2, r4
 8001614:	4639      	mov	r1, r7
 8001616:	4630      	mov	r0, r6
 8001618:	47c0      	blx	r8
 800161a:	3001      	adds	r0, #1
 800161c:	d0e6      	beq.n	80015ec <_printf_common+0xb4>
 800161e:	f109 0901 	add.w	r9, r9, #1
 8001622:	e7d8      	b.n	80015d6 <_printf_common+0x9e>

08001624 <_printf_i>:
 8001624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001628:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800162c:	460c      	mov	r4, r1
 800162e:	7e09      	ldrb	r1, [r1, #24]
 8001630:	b085      	sub	sp, #20
 8001632:	296e      	cmp	r1, #110	; 0x6e
 8001634:	4617      	mov	r7, r2
 8001636:	4606      	mov	r6, r0
 8001638:	4698      	mov	r8, r3
 800163a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800163c:	f000 80b3 	beq.w	80017a6 <_printf_i+0x182>
 8001640:	d822      	bhi.n	8001688 <_printf_i+0x64>
 8001642:	2963      	cmp	r1, #99	; 0x63
 8001644:	d036      	beq.n	80016b4 <_printf_i+0x90>
 8001646:	d80a      	bhi.n	800165e <_printf_i+0x3a>
 8001648:	2900      	cmp	r1, #0
 800164a:	f000 80b9 	beq.w	80017c0 <_printf_i+0x19c>
 800164e:	2958      	cmp	r1, #88	; 0x58
 8001650:	f000 8083 	beq.w	800175a <_printf_i+0x136>
 8001654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001658:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800165c:	e032      	b.n	80016c4 <_printf_i+0xa0>
 800165e:	2964      	cmp	r1, #100	; 0x64
 8001660:	d001      	beq.n	8001666 <_printf_i+0x42>
 8001662:	2969      	cmp	r1, #105	; 0x69
 8001664:	d1f6      	bne.n	8001654 <_printf_i+0x30>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	0605      	lsls	r5, r0, #24
 800166c:	f103 0104 	add.w	r1, r3, #4
 8001670:	d52a      	bpl.n	80016c8 <_printf_i+0xa4>
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6011      	str	r1, [r2, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	da03      	bge.n	8001682 <_printf_i+0x5e>
 800167a:	222d      	movs	r2, #45	; 0x2d
 800167c:	425b      	negs	r3, r3
 800167e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001682:	486f      	ldr	r0, [pc, #444]	; (8001840 <_printf_i+0x21c>)
 8001684:	220a      	movs	r2, #10
 8001686:	e039      	b.n	80016fc <_printf_i+0xd8>
 8001688:	2973      	cmp	r1, #115	; 0x73
 800168a:	f000 809d 	beq.w	80017c8 <_printf_i+0x1a4>
 800168e:	d808      	bhi.n	80016a2 <_printf_i+0x7e>
 8001690:	296f      	cmp	r1, #111	; 0x6f
 8001692:	d020      	beq.n	80016d6 <_printf_i+0xb2>
 8001694:	2970      	cmp	r1, #112	; 0x70
 8001696:	d1dd      	bne.n	8001654 <_printf_i+0x30>
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	f043 0320 	orr.w	r3, r3, #32
 800169e:	6023      	str	r3, [r4, #0]
 80016a0:	e003      	b.n	80016aa <_printf_i+0x86>
 80016a2:	2975      	cmp	r1, #117	; 0x75
 80016a4:	d017      	beq.n	80016d6 <_printf_i+0xb2>
 80016a6:	2978      	cmp	r1, #120	; 0x78
 80016a8:	d1d4      	bne.n	8001654 <_printf_i+0x30>
 80016aa:	2378      	movs	r3, #120	; 0x78
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <_printf_i+0x220>)
 80016ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016b2:	e055      	b.n	8001760 <_printf_i+0x13c>
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016ba:	1d19      	adds	r1, r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6011      	str	r1, [r2, #0]
 80016c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016c4:	2301      	movs	r3, #1
 80016c6:	e08c      	b.n	80017e2 <_printf_i+0x1be>
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016ce:	6011      	str	r1, [r2, #0]
 80016d0:	bf18      	it	ne
 80016d2:	b21b      	sxthne	r3, r3
 80016d4:	e7cf      	b.n	8001676 <_printf_i+0x52>
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	6825      	ldr	r5, [r4, #0]
 80016da:	1d18      	adds	r0, r3, #4
 80016dc:	6010      	str	r0, [r2, #0]
 80016de:	0628      	lsls	r0, r5, #24
 80016e0:	d501      	bpl.n	80016e6 <_printf_i+0xc2>
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e002      	b.n	80016ec <_printf_i+0xc8>
 80016e6:	0668      	lsls	r0, r5, #25
 80016e8:	d5fb      	bpl.n	80016e2 <_printf_i+0xbe>
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	296f      	cmp	r1, #111	; 0x6f
 80016ee:	bf14      	ite	ne
 80016f0:	220a      	movne	r2, #10
 80016f2:	2208      	moveq	r2, #8
 80016f4:	4852      	ldr	r0, [pc, #328]	; (8001840 <_printf_i+0x21c>)
 80016f6:	2100      	movs	r1, #0
 80016f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016fc:	6865      	ldr	r5, [r4, #4]
 80016fe:	2d00      	cmp	r5, #0
 8001700:	60a5      	str	r5, [r4, #8]
 8001702:	f2c0 8095 	blt.w	8001830 <_printf_i+0x20c>
 8001706:	6821      	ldr	r1, [r4, #0]
 8001708:	f021 0104 	bic.w	r1, r1, #4
 800170c:	6021      	str	r1, [r4, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <_printf_i+0x16a>
 8001712:	2d00      	cmp	r5, #0
 8001714:	f040 808e 	bne.w	8001834 <_printf_i+0x210>
 8001718:	4665      	mov	r5, ip
 800171a:	2a08      	cmp	r2, #8
 800171c:	d10b      	bne.n	8001736 <_printf_i+0x112>
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	07db      	lsls	r3, r3, #31
 8001722:	d508      	bpl.n	8001736 <_printf_i+0x112>
 8001724:	6923      	ldr	r3, [r4, #16]
 8001726:	6862      	ldr	r2, [r4, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	bfde      	ittt	le
 800172c:	2330      	movle	r3, #48	; 0x30
 800172e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001732:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001736:	ebac 0305 	sub.w	r3, ip, r5
 800173a:	6123      	str	r3, [r4, #16]
 800173c:	f8cd 8000 	str.w	r8, [sp]
 8001740:	463b      	mov	r3, r7
 8001742:	aa03      	add	r2, sp, #12
 8001744:	4621      	mov	r1, r4
 8001746:	4630      	mov	r0, r6
 8001748:	f7ff fef6 	bl	8001538 <_printf_common>
 800174c:	3001      	adds	r0, #1
 800174e:	d14d      	bne.n	80017ec <_printf_i+0x1c8>
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	b005      	add	sp, #20
 8001756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800175a:	4839      	ldr	r0, [pc, #228]	; (8001840 <_printf_i+0x21c>)
 800175c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	6821      	ldr	r1, [r4, #0]
 8001764:	1d1d      	adds	r5, r3, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6015      	str	r5, [r2, #0]
 800176a:	060a      	lsls	r2, r1, #24
 800176c:	d50b      	bpl.n	8001786 <_printf_i+0x162>
 800176e:	07ca      	lsls	r2, r1, #31
 8001770:	bf44      	itt	mi
 8001772:	f041 0120 	orrmi.w	r1, r1, #32
 8001776:	6021      	strmi	r1, [r4, #0]
 8001778:	b91b      	cbnz	r3, 8001782 <_printf_i+0x15e>
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	f022 0220 	bic.w	r2, r2, #32
 8001780:	6022      	str	r2, [r4, #0]
 8001782:	2210      	movs	r2, #16
 8001784:	e7b7      	b.n	80016f6 <_printf_i+0xd2>
 8001786:	064d      	lsls	r5, r1, #25
 8001788:	bf48      	it	mi
 800178a:	b29b      	uxthmi	r3, r3
 800178c:	e7ef      	b.n	800176e <_printf_i+0x14a>
 800178e:	4665      	mov	r5, ip
 8001790:	fbb3 f1f2 	udiv	r1, r3, r2
 8001794:	fb02 3311 	mls	r3, r2, r1, r3
 8001798:	5cc3      	ldrb	r3, [r0, r3]
 800179a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800179e:	460b      	mov	r3, r1
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d1f5      	bne.n	8001790 <_printf_i+0x16c>
 80017a4:	e7b9      	b.n	800171a <_printf_i+0xf6>
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	6825      	ldr	r5, [r4, #0]
 80017aa:	1d18      	adds	r0, r3, #4
 80017ac:	6961      	ldr	r1, [r4, #20]
 80017ae:	6010      	str	r0, [r2, #0]
 80017b0:	0628      	lsls	r0, r5, #24
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	d501      	bpl.n	80017ba <_printf_i+0x196>
 80017b6:	6019      	str	r1, [r3, #0]
 80017b8:	e002      	b.n	80017c0 <_printf_i+0x19c>
 80017ba:	066a      	lsls	r2, r5, #25
 80017bc:	d5fb      	bpl.n	80017b6 <_printf_i+0x192>
 80017be:	8019      	strh	r1, [r3, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	4665      	mov	r5, ip
 80017c4:	6123      	str	r3, [r4, #16]
 80017c6:	e7b9      	b.n	800173c <_printf_i+0x118>
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	1d19      	adds	r1, r3, #4
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	681d      	ldr	r5, [r3, #0]
 80017d0:	6862      	ldr	r2, [r4, #4]
 80017d2:	2100      	movs	r1, #0
 80017d4:	4628      	mov	r0, r5
 80017d6:	f000 f837 	bl	8001848 <memchr>
 80017da:	b108      	cbz	r0, 80017e0 <_printf_i+0x1bc>
 80017dc:	1b40      	subs	r0, r0, r5
 80017de:	6060      	str	r0, [r4, #4]
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	6123      	str	r3, [r4, #16]
 80017e4:	2300      	movs	r3, #0
 80017e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017ea:	e7a7      	b.n	800173c <_printf_i+0x118>
 80017ec:	6923      	ldr	r3, [r4, #16]
 80017ee:	462a      	mov	r2, r5
 80017f0:	4639      	mov	r1, r7
 80017f2:	4630      	mov	r0, r6
 80017f4:	47c0      	blx	r8
 80017f6:	3001      	adds	r0, #1
 80017f8:	d0aa      	beq.n	8001750 <_printf_i+0x12c>
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	079b      	lsls	r3, r3, #30
 80017fe:	d413      	bmi.n	8001828 <_printf_i+0x204>
 8001800:	68e0      	ldr	r0, [r4, #12]
 8001802:	9b03      	ldr	r3, [sp, #12]
 8001804:	4298      	cmp	r0, r3
 8001806:	bfb8      	it	lt
 8001808:	4618      	movlt	r0, r3
 800180a:	e7a3      	b.n	8001754 <_printf_i+0x130>
 800180c:	2301      	movs	r3, #1
 800180e:	464a      	mov	r2, r9
 8001810:	4639      	mov	r1, r7
 8001812:	4630      	mov	r0, r6
 8001814:	47c0      	blx	r8
 8001816:	3001      	adds	r0, #1
 8001818:	d09a      	beq.n	8001750 <_printf_i+0x12c>
 800181a:	3501      	adds	r5, #1
 800181c:	68e3      	ldr	r3, [r4, #12]
 800181e:	9a03      	ldr	r2, [sp, #12]
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	42ab      	cmp	r3, r5
 8001824:	dcf2      	bgt.n	800180c <_printf_i+0x1e8>
 8001826:	e7eb      	b.n	8001800 <_printf_i+0x1dc>
 8001828:	2500      	movs	r5, #0
 800182a:	f104 0919 	add.w	r9, r4, #25
 800182e:	e7f5      	b.n	800181c <_printf_i+0x1f8>
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ac      	bne.n	800178e <_printf_i+0x16a>
 8001834:	7803      	ldrb	r3, [r0, #0]
 8001836:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800183a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800183e:	e76c      	b.n	800171a <_printf_i+0xf6>
 8001840:	08001d6d 	.word	0x08001d6d
 8001844:	08001d7e 	.word	0x08001d7e

08001848 <memchr>:
 8001848:	b510      	push	{r4, lr}
 800184a:	b2c9      	uxtb	r1, r1
 800184c:	4402      	add	r2, r0
 800184e:	4290      	cmp	r0, r2
 8001850:	4603      	mov	r3, r0
 8001852:	d101      	bne.n	8001858 <memchr+0x10>
 8001854:	2300      	movs	r3, #0
 8001856:	e003      	b.n	8001860 <memchr+0x18>
 8001858:	781c      	ldrb	r4, [r3, #0]
 800185a:	3001      	adds	r0, #1
 800185c:	428c      	cmp	r4, r1
 800185e:	d1f6      	bne.n	800184e <memchr+0x6>
 8001860:	4618      	mov	r0, r3
 8001862:	bd10      	pop	{r4, pc}

08001864 <memcpy>:
 8001864:	b510      	push	{r4, lr}
 8001866:	1e43      	subs	r3, r0, #1
 8001868:	440a      	add	r2, r1
 800186a:	4291      	cmp	r1, r2
 800186c:	d100      	bne.n	8001870 <memcpy+0xc>
 800186e:	bd10      	pop	{r4, pc}
 8001870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001878:	e7f7      	b.n	800186a <memcpy+0x6>

0800187a <memmove>:
 800187a:	4288      	cmp	r0, r1
 800187c:	b510      	push	{r4, lr}
 800187e:	eb01 0302 	add.w	r3, r1, r2
 8001882:	d807      	bhi.n	8001894 <memmove+0x1a>
 8001884:	1e42      	subs	r2, r0, #1
 8001886:	4299      	cmp	r1, r3
 8001888:	d00a      	beq.n	80018a0 <memmove+0x26>
 800188a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800188e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001892:	e7f8      	b.n	8001886 <memmove+0xc>
 8001894:	4283      	cmp	r3, r0
 8001896:	d9f5      	bls.n	8001884 <memmove+0xa>
 8001898:	1881      	adds	r1, r0, r2
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	42d3      	cmn	r3, r2
 800189e:	d100      	bne.n	80018a2 <memmove+0x28>
 80018a0:	bd10      	pop	{r4, pc}
 80018a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80018a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80018aa:	e7f7      	b.n	800189c <memmove+0x22>

080018ac <_free_r>:
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4605      	mov	r5, r0
 80018b0:	2900      	cmp	r1, #0
 80018b2:	d043      	beq.n	800193c <_free_r+0x90>
 80018b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018b8:	1f0c      	subs	r4, r1, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bfb8      	it	lt
 80018be:	18e4      	addlt	r4, r4, r3
 80018c0:	f000 f8d0 	bl	8001a64 <__malloc_lock>
 80018c4:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <_free_r+0x94>)
 80018c6:	6813      	ldr	r3, [r2, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	b933      	cbnz	r3, 80018da <_free_r+0x2e>
 80018cc:	6063      	str	r3, [r4, #4]
 80018ce:	6014      	str	r4, [r2, #0]
 80018d0:	4628      	mov	r0, r5
 80018d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018d6:	f000 b8c6 	b.w	8001a66 <__malloc_unlock>
 80018da:	42a3      	cmp	r3, r4
 80018dc:	d90b      	bls.n	80018f6 <_free_r+0x4a>
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	1862      	adds	r2, r4, r1
 80018e2:	4293      	cmp	r3, r2
 80018e4:	bf01      	itttt	eq
 80018e6:	681a      	ldreq	r2, [r3, #0]
 80018e8:	685b      	ldreq	r3, [r3, #4]
 80018ea:	1852      	addeq	r2, r2, r1
 80018ec:	6022      	streq	r2, [r4, #0]
 80018ee:	6063      	str	r3, [r4, #4]
 80018f0:	6004      	str	r4, [r0, #0]
 80018f2:	e7ed      	b.n	80018d0 <_free_r+0x24>
 80018f4:	4613      	mov	r3, r2
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	b10a      	cbz	r2, 80018fe <_free_r+0x52>
 80018fa:	42a2      	cmp	r2, r4
 80018fc:	d9fa      	bls.n	80018f4 <_free_r+0x48>
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	1858      	adds	r0, r3, r1
 8001902:	42a0      	cmp	r0, r4
 8001904:	d10b      	bne.n	800191e <_free_r+0x72>
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	4401      	add	r1, r0
 800190a:	1858      	adds	r0, r3, r1
 800190c:	4282      	cmp	r2, r0
 800190e:	6019      	str	r1, [r3, #0]
 8001910:	d1de      	bne.n	80018d0 <_free_r+0x24>
 8001912:	6810      	ldr	r0, [r2, #0]
 8001914:	6852      	ldr	r2, [r2, #4]
 8001916:	4401      	add	r1, r0
 8001918:	6019      	str	r1, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e7d8      	b.n	80018d0 <_free_r+0x24>
 800191e:	d902      	bls.n	8001926 <_free_r+0x7a>
 8001920:	230c      	movs	r3, #12
 8001922:	602b      	str	r3, [r5, #0]
 8001924:	e7d4      	b.n	80018d0 <_free_r+0x24>
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	1821      	adds	r1, r4, r0
 800192a:	428a      	cmp	r2, r1
 800192c:	bf01      	itttt	eq
 800192e:	6811      	ldreq	r1, [r2, #0]
 8001930:	6852      	ldreq	r2, [r2, #4]
 8001932:	1809      	addeq	r1, r1, r0
 8001934:	6021      	streq	r1, [r4, #0]
 8001936:	6062      	str	r2, [r4, #4]
 8001938:	605c      	str	r4, [r3, #4]
 800193a:	e7c9      	b.n	80018d0 <_free_r+0x24>
 800193c:	bd38      	pop	{r3, r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	20000b78 	.word	0x20000b78

08001944 <_malloc_r>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	1ccd      	adds	r5, r1, #3
 8001948:	f025 0503 	bic.w	r5, r5, #3
 800194c:	3508      	adds	r5, #8
 800194e:	2d0c      	cmp	r5, #12
 8001950:	bf38      	it	cc
 8001952:	250c      	movcc	r5, #12
 8001954:	2d00      	cmp	r5, #0
 8001956:	4606      	mov	r6, r0
 8001958:	db01      	blt.n	800195e <_malloc_r+0x1a>
 800195a:	42a9      	cmp	r1, r5
 800195c:	d903      	bls.n	8001966 <_malloc_r+0x22>
 800195e:	230c      	movs	r3, #12
 8001960:	6033      	str	r3, [r6, #0]
 8001962:	2000      	movs	r0, #0
 8001964:	bd70      	pop	{r4, r5, r6, pc}
 8001966:	f000 f87d 	bl	8001a64 <__malloc_lock>
 800196a:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <_malloc_r+0xac>)
 800196c:	6814      	ldr	r4, [r2, #0]
 800196e:	4621      	mov	r1, r4
 8001970:	b991      	cbnz	r1, 8001998 <_malloc_r+0x54>
 8001972:	4c20      	ldr	r4, [pc, #128]	; (80019f4 <_malloc_r+0xb0>)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	b91b      	cbnz	r3, 8001980 <_malloc_r+0x3c>
 8001978:	4630      	mov	r0, r6
 800197a:	f000 f863 	bl	8001a44 <_sbrk_r>
 800197e:	6020      	str	r0, [r4, #0]
 8001980:	4629      	mov	r1, r5
 8001982:	4630      	mov	r0, r6
 8001984:	f000 f85e 	bl	8001a44 <_sbrk_r>
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d124      	bne.n	80019d6 <_malloc_r+0x92>
 800198c:	230c      	movs	r3, #12
 800198e:	4630      	mov	r0, r6
 8001990:	6033      	str	r3, [r6, #0]
 8001992:	f000 f868 	bl	8001a66 <__malloc_unlock>
 8001996:	e7e4      	b.n	8001962 <_malloc_r+0x1e>
 8001998:	680b      	ldr	r3, [r1, #0]
 800199a:	1b5b      	subs	r3, r3, r5
 800199c:	d418      	bmi.n	80019d0 <_malloc_r+0x8c>
 800199e:	2b0b      	cmp	r3, #11
 80019a0:	d90f      	bls.n	80019c2 <_malloc_r+0x7e>
 80019a2:	600b      	str	r3, [r1, #0]
 80019a4:	18cc      	adds	r4, r1, r3
 80019a6:	50cd      	str	r5, [r1, r3]
 80019a8:	4630      	mov	r0, r6
 80019aa:	f000 f85c 	bl	8001a66 <__malloc_unlock>
 80019ae:	f104 000b 	add.w	r0, r4, #11
 80019b2:	1d23      	adds	r3, r4, #4
 80019b4:	f020 0007 	bic.w	r0, r0, #7
 80019b8:	1ac3      	subs	r3, r0, r3
 80019ba:	d0d3      	beq.n	8001964 <_malloc_r+0x20>
 80019bc:	425a      	negs	r2, r3
 80019be:	50e2      	str	r2, [r4, r3]
 80019c0:	e7d0      	b.n	8001964 <_malloc_r+0x20>
 80019c2:	684b      	ldr	r3, [r1, #4]
 80019c4:	428c      	cmp	r4, r1
 80019c6:	bf16      	itet	ne
 80019c8:	6063      	strne	r3, [r4, #4]
 80019ca:	6013      	streq	r3, [r2, #0]
 80019cc:	460c      	movne	r4, r1
 80019ce:	e7eb      	b.n	80019a8 <_malloc_r+0x64>
 80019d0:	460c      	mov	r4, r1
 80019d2:	6849      	ldr	r1, [r1, #4]
 80019d4:	e7cc      	b.n	8001970 <_malloc_r+0x2c>
 80019d6:	1cc4      	adds	r4, r0, #3
 80019d8:	f024 0403 	bic.w	r4, r4, #3
 80019dc:	42a0      	cmp	r0, r4
 80019de:	d005      	beq.n	80019ec <_malloc_r+0xa8>
 80019e0:	1a21      	subs	r1, r4, r0
 80019e2:	4630      	mov	r0, r6
 80019e4:	f000 f82e 	bl	8001a44 <_sbrk_r>
 80019e8:	3001      	adds	r0, #1
 80019ea:	d0cf      	beq.n	800198c <_malloc_r+0x48>
 80019ec:	6025      	str	r5, [r4, #0]
 80019ee:	e7db      	b.n	80019a8 <_malloc_r+0x64>
 80019f0:	20000b78 	.word	0x20000b78
 80019f4:	20000b7c 	.word	0x20000b7c

080019f8 <_realloc_r>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	4607      	mov	r7, r0
 80019fc:	4614      	mov	r4, r2
 80019fe:	460e      	mov	r6, r1
 8001a00:	b921      	cbnz	r1, 8001a0c <_realloc_r+0x14>
 8001a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a06:	4611      	mov	r1, r2
 8001a08:	f7ff bf9c 	b.w	8001944 <_malloc_r>
 8001a0c:	b922      	cbnz	r2, 8001a18 <_realloc_r+0x20>
 8001a0e:	f7ff ff4d 	bl	80018ac <_free_r>
 8001a12:	4625      	mov	r5, r4
 8001a14:	4628      	mov	r0, r5
 8001a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a18:	f000 f826 	bl	8001a68 <_malloc_usable_size_r>
 8001a1c:	42a0      	cmp	r0, r4
 8001a1e:	d20f      	bcs.n	8001a40 <_realloc_r+0x48>
 8001a20:	4621      	mov	r1, r4
 8001a22:	4638      	mov	r0, r7
 8001a24:	f7ff ff8e 	bl	8001944 <_malloc_r>
 8001a28:	4605      	mov	r5, r0
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0f2      	beq.n	8001a14 <_realloc_r+0x1c>
 8001a2e:	4631      	mov	r1, r6
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff ff17 	bl	8001864 <memcpy>
 8001a36:	4631      	mov	r1, r6
 8001a38:	4638      	mov	r0, r7
 8001a3a:	f7ff ff37 	bl	80018ac <_free_r>
 8001a3e:	e7e9      	b.n	8001a14 <_realloc_r+0x1c>
 8001a40:	4635      	mov	r5, r6
 8001a42:	e7e7      	b.n	8001a14 <_realloc_r+0x1c>

08001a44 <_sbrk_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	2300      	movs	r3, #0
 8001a48:	4c05      	ldr	r4, [pc, #20]	; (8001a60 <_sbrk_r+0x1c>)
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	6023      	str	r3, [r4, #0]
 8001a50:	f7ff f820 	bl	8000a94 <_sbrk>
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	d102      	bne.n	8001a5e <_sbrk_r+0x1a>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	b103      	cbz	r3, 8001a5e <_sbrk_r+0x1a>
 8001a5c:	602b      	str	r3, [r5, #0]
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
 8001a60:	20000b84 	.word	0x20000b84

08001a64 <__malloc_lock>:
 8001a64:	4770      	bx	lr

08001a66 <__malloc_unlock>:
 8001a66:	4770      	bx	lr

08001a68 <_malloc_usable_size_r>:
 8001a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a6c:	1f18      	subs	r0, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bfbc      	itt	lt
 8001a72:	580b      	ldrlt	r3, [r1, r0]
 8001a74:	18c0      	addlt	r0, r0, r3
 8001a76:	4770      	bx	lr

08001a78 <_init>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	bf00      	nop
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr

08001a84 <_fini>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	bf00      	nop
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr
