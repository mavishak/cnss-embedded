
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003a8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016a7  00000000  00000000  000103d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000053f  00000000  00000000  00011a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00011fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00012090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000309  00000000  00000000  00012130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001171  00000000  00000000  00012439  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000573ad  00000000  00000000  000135aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006a957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f8  00000000  00000000  0006a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000388 	.word	0x08000388

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000388 	.word	0x08000388

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <init_sensor_with_interrupt>:
#include "hc-sr501pir_sensor.h"
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ()*/


void init_sensor_with_interrupt(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0

	/*~~~USING D6 (PB10)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 80001ac:	4b1b      	ldr	r3, [pc, #108]	; (800021c <init_sensor_with_interrupt+0x74>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1a      	ldr	r2, [pc, #104]	; (800021c <init_sensor_with_interrupt+0x74>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 80001b8:	4b18      	ldr	r3, [pc, #96]	; (800021c <init_sensor_with_interrupt+0x74>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <init_sensor_with_interrupt+0x74>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRH &= 0xFFFFF0FF; //reset CNF and MODE only for bit 10, leave all the rest as they are
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	4a15      	ldr	r2, [pc, #84]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80001ce:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00000800; //PB10 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001da:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= 0x00000400; //PB10 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <init_sensor_with_interrupt+0x78>)
 80001e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e6:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e8:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR3 is reachable via the second index
	AFIO->EXTICR[2] |= 0x00000100; // Allow interupts for line_10 (see reference manual 9.4.6 and pg. 210)
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <init_sensor_with_interrupt+0x7c>)
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <init_sensor_with_interrupt+0x7c>)
 80001f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001f4:	6113      	str	r3, [r2, #16]
	EXTI->IMR |= 0x00000400; //Enable iterrupt with mask for port B pin 10 (see reference manual 10.3.1)
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <init_sensor_with_interrupt+0x80>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <init_sensor_with_interrupt+0x80>)
 80001fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000200:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000400 ; //rising trigger selection register - to anable full button press before reacting ((see reference manual 10.3.3)
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <init_sensor_with_interrupt+0x80>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <init_sensor_with_interrupt+0x80>)
 8000208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020c:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI15_10_IRQn); //enable handler
 800020e:	2028      	movs	r0, #40	; 0x28
 8000210:	f7ff ffae 	bl	8000170 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000214:	b662      	cpsie	i
	/*Enable external interrupt*/

	/*~~~______________~~~*/


}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40010000 	.word	0x40010000
 8000228:	40010400 	.word	0x40010400

0800022c <init_sensor_led_response>:


void init_sensor_led_response(){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

	/*~~~USING LD2 (PA5) as output~~~*/

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <init_sensor_led_response+0x38>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <init_sensor_led_response+0x38>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6193      	str	r3, [r2, #24]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <init_sensor_led_response+0x3c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a09      	ldr	r2, [pc, #36]	; (8000268 <init_sensor_led_response+0x3c>)
 8000242:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <init_sensor_led_response+0x3c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <init_sensor_led_response+0x3c>)
 800024e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000252:	6013      	str	r3, [r2, #0]

	/*Init state*/
	state = OFF;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <init_sensor_led_response+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]


}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800
 800026c:	2000001c 	.word	0x2000001c

08000270 <toggle_led>:


void toggle_led()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <toggle_led+0x3c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d109      	bne.n	8000290 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <toggle_led+0x40>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <toggle_led+0x40>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <toggle_led+0x3c>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800028e:	e008      	b.n	80002a2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <toggle_led+0x40>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <toggle_led+0x40>)
 8000296:	f023 0320 	bic.w	r3, r3, #32
 800029a:	60d3      	str	r3, [r2, #12]
		state=OFF;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <toggle_led+0x3c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000001c 	.word	0x2000001c
 80002b0:	40010800 	.word	0x40010800

080002b4 <main>:




int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0

	init_sensor_with_interrupt();
 80002b8:	f7ff ff76 	bl	80001a8 <init_sensor_with_interrupt>
	init_sensor_led_response();
 80002bc:	f7ff ffb6 	bl	800022c <init_sensor_led_response>
	while(1)
 80002c0:	e7fe      	b.n	80002c0 <main+0xc>
	...

080002c4 <EXTI15_10_IRQHandler>:



/*Interrupt service routine for sensor*/
void EXTI15_10_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <EXTI15_10_IRQHandler+0x18>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <EXTI15_10_IRQHandler+0x18>)
 80002ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d2:	6153      	str	r3, [r2, #20]
	toggle_led();
 80002d4:	f7ff ffcc 	bl	8000270 <toggle_led>

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010400 	.word	0x40010400

080002e0 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <Reset_Handler>:
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
 80002ee:	4685      	mov	sp, r0
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x6>)
 80002f2:	490e      	ldr	r1, [pc, #56]	; (800032c <LoopForever+0xa>)
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <LoopForever+0xe>)
 80002f6:	2300      	movs	r3, #0
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:
 80002fa:	58d4      	ldr	r4, [r2, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:
 8000300:	18c4      	adds	r4, r0, r3
 8000302:	428c      	cmp	r4, r1
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
 8000306:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LoopForever+0x12>)
 8000308:	4c0b      	ldr	r4, [pc, #44]	; (8000338 <LoopForever+0x16>)
 800030a:	2300      	movs	r3, #0
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:
 800030e:	6013      	str	r3, [r2, #0]
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:
 8000312:	42a2      	cmp	r2, r4
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>
 8000316:	f3af 8000 	nop.w
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
 800031e:	f7ff ffc9 	bl	80002b4 <main>

08000322 <LoopForever>:
 8000322:	e7fe      	b.n	8000322 <LoopForever>
 8000324:	20005000 	.word	0x20005000
 8000328:	20000000 	.word	0x20000000
 800032c:	20000000 	.word	0x20000000
 8000330:	080003a8 	.word	0x080003a8
 8000334:	20000000 	.word	0x20000000
 8000338:	20000020 	.word	0x20000020

0800033c <ADC1_2_IRQHandler>:
 800033c:	e7fe      	b.n	800033c <ADC1_2_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2500      	movs	r5, #0
 8000344:	4e0c      	ldr	r6, [pc, #48]	; (8000378 <__libc_init_array+0x38>)
 8000346:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000348:	1ba4      	subs	r4, r4, r6
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	42a5      	cmp	r5, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	f000 f81a 	bl	8000388 <_init>
 8000354:	2500      	movs	r5, #0
 8000356:	4e0a      	ldr	r6, [pc, #40]	; (8000380 <__libc_init_array+0x40>)
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <__libc_init_array+0x44>)
 800035a:	1ba4      	subs	r4, r4, r6
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	42a5      	cmp	r5, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000368:	4798      	blx	r3
 800036a:	3501      	adds	r5, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000372:	4798      	blx	r3
 8000374:	3501      	adds	r5, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
