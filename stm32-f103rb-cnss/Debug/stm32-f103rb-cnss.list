
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000650  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000780  08000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000800  08000800  00010808  2**0
                  CONTENTS
  4 .ARM          00000000  08000800  08000800  00010808  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000800  08000808  00010808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000800  08000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000804  08000804  00010804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000000  08000808  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08000808  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010808  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057d2  00000000  00000000  00010831  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000eda  00000000  00000000  00016003  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000268  00000000  00000000  00016ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  00017148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000aae  00000000  00000000  00017348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002c26  00000000  00000000  00017df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058a31  00000000  00000000  0001aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007344d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e4  00000000  00000000  000734c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000768 	.word	0x08000768

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000768 	.word	0x08000768

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <init_queue>:

static Queue queue;


void init_queue()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
	queue.writeIndex = 0;
 8000184:	4b06      	ldr	r3, [pc, #24]	; (80001a0 <init_queue+0x20>)
 8000186:	2200      	movs	r2, #0
 8000188:	629a      	str	r2, [r3, #40]	; 0x28
	queue.readIndex = 0;
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <init_queue+0x20>)
 800018c:	2200      	movs	r2, #0
 800018e:	62da      	str	r2, [r3, #44]	; 0x2c
	queue.accept = GO;
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <init_queue+0x20>)
 8000192:	2200      	movs	r2, #0
 8000194:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	2000001c 	.word	0x2000001c

080001a4 <add_event>:


void add_event(Handler handler)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]

	if(queue_isFull())
 80001ac:	f000 f844 	bl	8000238 <queue_isFull>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d113      	bne.n	80001de <add_event+0x3a>
		return;

	queue.eq[queue.writeIndex].handler = handler;
 80001b6:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <add_event+0x44>)
 80001b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001ba:	490b      	ldr	r1, [pc, #44]	; (80001e8 <add_event+0x44>)
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE-1)) //changed from  < QUEUE_SIZE
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <add_event+0x44>)
 80001c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001c6:	2b08      	cmp	r3, #8
 80001c8:	d805      	bhi.n	80001d6 <add_event+0x32>
		queue.writeIndex++;
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <add_event+0x44>)
 80001cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001ce:	3301      	adds	r3, #1
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <add_event+0x44>)
 80001d2:	6293      	str	r3, [r2, #40]	; 0x28
 80001d4:	e004      	b.n	80001e0 <add_event+0x3c>
	else
		queue.writeIndex = 0;
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <add_event+0x44>)
 80001d8:	2200      	movs	r2, #0
 80001da:	629a      	str	r2, [r3, #40]	; 0x28
 80001dc:	e000      	b.n	80001e0 <add_event+0x3c>
		return;
 80001de:	bf00      	nop

}
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	2000001c 	.word	0x2000001c

080001ec <do_event>:


void *do_event()
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 80001f2:	f000 f83f 	bl	8000274 <queue_isEmpty>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <do_event+0x14>
		return NULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	e014      	b.n	800022a <do_event+0x3e>
	}

   res = queue.eq[queue.readIndex].handler();
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <do_event+0x48>)
 8000202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <do_event+0x48>)
 8000206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020a:	4798      	blx	r3
 800020c:	6078      	str	r0, [r7, #4]

   if(queue.readIndex < (QUEUE_SIZE - 1))//changed from < QUEUE_SIZE
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <do_event+0x48>)
 8000210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000212:	2b08      	cmp	r3, #8
 8000214:	d805      	bhi.n	8000222 <do_event+0x36>
      queue.readIndex++;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <do_event+0x48>)
 8000218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800021a:	3301      	adds	r3, #1
 800021c:	4a05      	ldr	r2, [pc, #20]	; (8000234 <do_event+0x48>)
 800021e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000220:	e002      	b.n	8000228 <do_event+0x3c>
   else
      queue.readIndex = 0;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <do_event+0x48>)
 8000224:	2200      	movs	r2, #0
 8000226:	62da      	str	r2, [r3, #44]	; 0x2c

   return res;
 8000228:	687b      	ldr	r3, [r7, #4]

}
 800022a:	4618      	mov	r0, r3
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000001c 	.word	0x2000001c

08000238 <queue_isFull>:


BOOL queue_isFull()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <queue_isFull+0x34>)
 800023e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <queue_isFull+0x34>)
 8000242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000244:	1c59      	adds	r1, r3, #1
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <queue_isFull+0x38>)
 8000248:	fba3 2301 	umull	r2, r3, r3, r1
 800024c:	08da      	lsrs	r2, r3, #3
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	1aca      	subs	r2, r1, r3
 8000258:	4290      	cmp	r0, r2
 800025a:	bf0c      	ite	eq
 800025c:	2301      	moveq	r3, #1
 800025e:	2300      	movne	r3, #0
 8000260:	b2db      	uxtb	r3, r3
}
 8000262:	4618      	mov	r0, r3
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	2000001c 	.word	0x2000001c
 8000270:	cccccccd 	.word	0xcccccccd

08000274 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <queue_isEmpty+0x20>)
 800027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <queue_isEmpty+0x20>)
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	429a      	cmp	r2, r3
 8000282:	bf0c      	ite	eq
 8000284:	2301      	moveq	r3, #1
 8000286:	2300      	movne	r3, #0
 8000288:	b2db      	uxtb	r3, r3
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	2000001c 	.word	0x2000001c

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4906      	ldr	r1, [pc, #24]	; (80002cc <__NVIC_EnableIRQ+0x34>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <init_interrupt>:

}

/*This function enables user button B1 and led LD2 and interrupts*/
void init_interrupt()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	state = OFF;
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <init_interrupt+0x9c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]

	/*RCC enabled for user button PC13*/
	RCC->APB2ENR |= 0x00000010; //enable reset and control clock for port c (see reference manual 8.3.7)
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <init_interrupt+0xa0>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a24      	ldr	r2, [pc, #144]	; (8000370 <init_interrupt+0xa0>)
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	6193      	str	r3, [r2, #24]

	/*RCC enabled for led PA5*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 80002e6:	4b22      	ldr	r3, [pc, #136]	; (8000370 <init_interrupt+0xa0>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a21      	ldr	r2, [pc, #132]	; (8000370 <init_interrupt+0xa0>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6193      	str	r3, [r2, #24]

	/*RCC enable AFIO*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 8.3.7 and 9.4)
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <init_interrupt+0xa0>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <init_interrupt+0xa0>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]

	/*Configure user button PC13*/
	GPIOC->CRH &= 0xFF0FFFFF; //reset CNF and MODE only for bit 13, leave all the rest as they are
 80002fe:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <init_interrupt+0xa4>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <init_interrupt+0xa4>)
 8000304:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000308:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x00800000; //enable input with pullup/pulldown reset IDR bit 13 (see reference manual 9.2.2)
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <init_interrupt+0xa4>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	4a19      	ldr	r2, [pc, #100]	; (8000374 <init_interrupt+0xa4>)
 8000310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000314:	6053      	str	r3, [r2, #4]
	GPIOC->ODR |= 0x00002000; // pull up
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <init_interrupt+0xa4>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a16      	ldr	r2, [pc, #88]	; (8000374 <init_interrupt+0xa4>)
 800031c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000320:	60d3      	str	r3, [r2, #12]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <init_interrupt+0xa8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a14      	ldr	r2, [pc, #80]	; (8000378 <init_interrupt+0xa8>)
 8000328:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800032c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <init_interrupt+0xa8>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a11      	ldr	r2, [pc, #68]	; (8000378 <init_interrupt+0xa8>)
 8000334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000338:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033a:	b672      	cpsid	i

	/*Enable interrupts for PC13 rising triger*/
	__disable_irq();
	/*NOTE: It seems that EXTICR4 is reachable via the third index*/
	AFIO->EXTICR[3] |= 0x00000020; //Set interrupts for port c in line_13(see reference manual 9.4.6)
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <init_interrupt+0xac>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <init_interrupt+0xac>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6153      	str	r3, [r2, #20]
	EXTI->IMR |= 0x00002000; //Enable iterrupt with mask (see reference manual 10.3.1)
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <init_interrupt+0xb0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <init_interrupt+0xb0>)
 800034e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000352:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00002000 ; //rising trigger selection register ((see reference manual 10.3.3)
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <init_interrupt+0xb0>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <init_interrupt+0xb0>)
 800035a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035e:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI15_10_IRQn); //enable handler
 8000360:	2028      	movs	r0, #40	; 0x28
 8000362:	f7ff ff99 	bl	8000298 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000366:	b662      	cpsie	i
	__enable_irq();


}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	2000068d 	.word	0x2000068d
 8000370:	40021000 	.word	0x40021000
 8000374:	40011000 	.word	0x40011000
 8000378:	40010800 	.word	0x40010800
 800037c:	40010000 	.word	0x40010000
 8000380:	40010400 	.word	0x40010400

08000384 <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <EXTI15_10_IRQHandler+0x24>)
 800038a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800038e:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI15_10_IRQHandler+0x24>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI15_10_IRQHandler+0x24>)
 8000396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039a:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <EXTI15_10_IRQHandler+0x28>)
 800039e:	f7ff ff01 	bl	80001a4 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	080003b1 	.word	0x080003b1

080003b0 <interrupt_handler>:

void *interrupt_handler(void){
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

	if(state == OFF)
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <interrupt_handler+0x3c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <interrupt_handler+0x40>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <interrupt_handler+0x40>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	60d3      	str	r3, [r2, #12]
		state=ON;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <interrupt_handler+0x3c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
 80003ce:	e008      	b.n	80003e2 <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <interrupt_handler+0x40>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <interrupt_handler+0x40>)
 80003d6:	f023 0320 	bic.w	r3, r3, #32
 80003da:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <interrupt_handler+0x3c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 80003e2:	2300      	movs	r3, #0

}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	2000068d 	.word	0x2000068d
 80003f0:	40010800 	.word	0x40010800

080003f4 <toggle_led>:

}


void toggle_led()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

	if(state == OFF)
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <toggle_led+0x3c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d109      	bne.n	8000414 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <toggle_led+0x40>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <toggle_led+0x40>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	60d3      	str	r3, [r2, #12]
		state=ON;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <toggle_led+0x3c>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 8000412:	e008      	b.n	8000426 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <toggle_led+0x40>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <toggle_led+0x40>)
 800041a:	f023 0320 	bic.w	r3, r3, #32
 800041e:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <toggle_led+0x3c>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	2000068d 	.word	0x2000068d
 8000434:	40010800 	.word	0x40010800

08000438 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <EXTI4_IRQHandler+0x20>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <EXTI4_IRQHandler+0x20>)
 8000442:	f043 0310 	orr.w	r3, r3, #16
 8000446:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 8000448:	f7ff ffd4 	bl	80003f4 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <EXTI4_IRQHandler+0x24>)
 800044e:	f000 f8ab 	bl	80005a8 <write_usart2>

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010400 	.word	0x40010400
 800045c:	08000780 	.word	0x08000780

08000460 <main>:
#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

	/*FOR TESTING*/
	init_queue();
 8000464:	f7ff fe8c 	bl	8000180 <init_queue>
	init_interrupt();
 8000468:	f7ff ff32 	bl	80002d0 <init_interrupt>
	//}


	while(1)
	{
		do_event();
 800046c:	f7ff febe 	bl	80001ec <do_event>
 8000470:	e7fc      	b.n	800046c <main+0xc>
	...

08000474 <TIM2_IRQHandler>:
	}
}


void TIM2_IRQHandler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047c:	691b      	ldr	r3, [r3, #16]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b01      	cmp	r3, #1
 8000484:	d119      	bne.n	80004ba <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <TIM2_IRQHandler+0x50>)
 8000488:	7a1b      	ldrb	r3, [r3, #8]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d104      	bne.n	8000498 <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <TIM2_IRQHandler+0x50>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	3301      	adds	r3, #1
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <TIM2_IRQHandler+0x50>)
 8000496:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <TIM2_IRQHandler+0x50>)
 800049a:	7a5b      	ldrb	r3, [r3, #9]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d104      	bne.n	80004aa <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <TIM2_IRQHandler+0x50>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <TIM2_IRQHandler+0x50>)
 80004a8:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 80004aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	6113      	str	r3, [r2, #16]
	}
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000050 	.word	0x20000050

080004c8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <TIM3_IRQHandler+0x48>)
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d117      	bne.n	8000508 <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004da:	7a1b      	ldrb	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d104      	bne.n	80004ea <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004e8:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004ec:	7a5b      	ldrb	r3, [r3, #9]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <TIM3_IRQHandler+0x4c>)
 80004fa:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <TIM3_IRQHandler+0x48>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	4a03      	ldr	r2, [pc, #12]	; (8000510 <TIM3_IRQHandler+0x48>)
 8000502:	f023 0301 	bic.w	r3, r3, #1
 8000506:	6113      	str	r3, [r2, #16]
	}
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40000400 	.word	0x40000400
 8000514:	2000005c 	.word	0x2000005c

08000518 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <TIM4_IRQHandler+0x48>)
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b01      	cmp	r3, #1
 8000526:	d117      	bne.n	8000558 <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <TIM4_IRQHandler+0x4c>)
 800052a:	7a1b      	ldrb	r3, [r3, #8]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d104      	bne.n	800053a <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <TIM4_IRQHandler+0x4c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <TIM4_IRQHandler+0x4c>)
 8000538:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <TIM4_IRQHandler+0x4c>)
 800053c:	7a5b      	ldrb	r3, [r3, #9]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <TIM4_IRQHandler+0x4c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <TIM4_IRQHandler+0x4c>)
 800054a:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <TIM4_IRQHandler+0x48>)
 800054e:	691b      	ldr	r3, [r3, #16]
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <TIM4_IRQHandler+0x48>)
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6113      	str	r3, [r2, #16]
	}
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40000800 	.word	0x40000800
 8000564:	20000068 	.word	0x20000068

08000568 <set_usart2_buffer_Tx>:
}


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000574:	2100      	movs	r1, #0
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <set_usart2_buffer_Tx+0x3c>)
 8000578:	f000 f8e6 	bl	8000748 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <set_usart2_buffer_Tx+0x3c>)
 8000580:	f000 f8ea 	bl	8000758 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fdf3 	bl	8000170 <strlen>
 800058a:	4602      	mov	r2, r0
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <set_usart2_buffer_Tx+0x3c>)
 800058e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <set_usart2_buffer_Tx+0x3c>)
 8000594:	2200      	movs	r2, #0
 8000596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000074 	.word	0x20000074

080005a8 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffd9 	bl	8000568 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80005b6:	e014      	b.n	80005e2 <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80005b8:	bf00      	nop
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <write_usart2+0x70>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f9      	beq.n	80005ba <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <write_usart2+0x74>)
 80005c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80005cc:	4a13      	ldr	r2, [pc, #76]	; (800061c <write_usart2+0x74>)
 80005ce:	5cd2      	ldrb	r2, [r2, r3]
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <write_usart2+0x70>)
 80005d2:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <write_usart2+0x74>)
 80005d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80005da:	3301      	adds	r3, #1
 80005dc:	4a0f      	ldr	r2, [pc, #60]	; (800061c <write_usart2+0x74>)
 80005de:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <write_usart2+0x74>)
 80005e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <write_usart2+0x74>)
 80005ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3e2      	bcc.n	80005b8 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80005f2:	bf00      	nop
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <write_usart2+0x70>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fc:	2b40      	cmp	r3, #64	; 0x40
 80005fe:	d1f9      	bne.n	80005f4 <write_usart2+0x4c>
	usart2.write_index = 0;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <write_usart2+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <write_usart2+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40004400 	.word	0x40004400
 800061c:	20000074 	.word	0x20000074

08000620 <USART1_IRQHandler>:
	}

}

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <USART1_IRQHandler+0x80>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	2b20      	cmp	r3, #32
 800062e:	d132      	bne.n	8000696 <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <USART1_IRQHandler+0x80>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <USART1_IRQHandler+0x84>)
 8000638:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <USART1_IRQHandler+0x88>)
 800063c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000640:	3301      	adds	r3, #1
 8000642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000646:	d20a      	bcs.n	800065e <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <USART1_IRQHandler+0x88>)
 800064a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <USART1_IRQHandler+0x84>)
 8000650:	7811      	ldrb	r1, [r2, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000654:	4413      	add	r3, r2
 8000656:	460a      	mov	r2, r1
 8000658:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800065c:	e00d      	b.n	800067a <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000660:	2200      	movs	r2, #0
 8000662:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000668:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <USART1_IRQHandler+0x84>)
 800066e:	7811      	ldrb	r1, [r2, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <USART1_IRQHandler+0x88>)
 800067c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000680:	3301      	adds	r3, #1
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000684:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <USART1_IRQHandler+0x88>)
 800068a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800068e:	3301      	adds	r3, #1
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <USART1_IRQHandler+0x88>)
 8000692:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40013800 	.word	0x40013800
 80006a4:	2000068c 	.word	0x2000068c
 80006a8:	2000027c 	.word	0x2000027c

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490e      	ldr	r1, [pc, #56]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0b      	ldr	r4, [pc, #44]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff febf 	bl	8000460 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f0:	08000808 	.word	0x08000808
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	20000690 	.word	0x20000690

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	2500      	movs	r5, #0
 8000704:	4e0c      	ldr	r6, [pc, #48]	; (8000738 <__libc_init_array+0x38>)
 8000706:	4c0d      	ldr	r4, [pc, #52]	; (800073c <__libc_init_array+0x3c>)
 8000708:	1ba4      	subs	r4, r4, r6
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	42a5      	cmp	r5, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	f000 f82a 	bl	8000768 <_init>
 8000714:	2500      	movs	r5, #0
 8000716:	4e0a      	ldr	r6, [pc, #40]	; (8000740 <__libc_init_array+0x40>)
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <__libc_init_array+0x44>)
 800071a:	1ba4      	subs	r4, r4, r6
 800071c:	10a4      	asrs	r4, r4, #2
 800071e:	42a5      	cmp	r5, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000728:	4798      	blx	r3
 800072a:	3501      	adds	r5, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000732:	4798      	blx	r3
 8000734:	3501      	adds	r5, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000800 	.word	0x08000800
 800073c:	08000800 	.word	0x08000800
 8000740:	08000800 	.word	0x08000800
 8000744:	08000804 	.word	0x08000804

08000748 <memset>:
 8000748:	4603      	mov	r3, r0
 800074a:	4402      	add	r2, r0
 800074c:	4293      	cmp	r3, r2
 800074e:	d100      	bne.n	8000752 <memset+0xa>
 8000750:	4770      	bx	lr
 8000752:	f803 1b01 	strb.w	r1, [r3], #1
 8000756:	e7f9      	b.n	800074c <memset+0x4>

08000758 <strcpy>:
 8000758:	4603      	mov	r3, r0
 800075a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800075e:	f803 2b01 	strb.w	r2, [r3], #1
 8000762:	2a00      	cmp	r2, #0
 8000764:	d1f9      	bne.n	800075a <strcpy+0x2>
 8000766:	4770      	bx	lr

08000768 <_init>:
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	bf00      	nop
 800076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076e:	bc08      	pop	{r3}
 8000770:	469e      	mov	lr, r3
 8000772:	4770      	bx	lr

08000774 <_fini>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	bf00      	nop
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr
