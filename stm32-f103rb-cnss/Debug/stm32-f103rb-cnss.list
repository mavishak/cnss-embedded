
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002874  08002874  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08002874  08002874  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002874  08002874  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200000d4  08002950  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  08002950  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ae8  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001525  00000000  00000000  00027be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  00029110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002118  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004489  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005937f  00000000  00000000  0002fd59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000890d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa4  00000000  00000000  00089154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	080024a0 	.word	0x080024a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	080024a0 	.word	0x080024a0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <alert_Handler>:
	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");

}

void *alert_Handler(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 8000186:	2303      	movs	r3, #3
 8000188:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800018a:	e002      	b.n	8000192 <alert_Handler+0x12>
		i--;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3b01      	subs	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d008      	beq.n	80001aa <alert_Handler+0x2a>
 8000198:	f000 f85a 	bl	8000250 <recordAlert>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d103      	bne.n	80001aa <alert_Handler+0x2a>
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <alert_Handler+0x38>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f0      	bne.n	800018c <alert_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80001aa:	f001 f867 	bl	800127c <TIMER4_disable>

	return NULL;
 80001ae:	2300      	movs	r3, #0

}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000478 	.word	0x20000478

080001bc <control_Handler>:

void *control_Handler(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 80001c2:	4b1e      	ldr	r3, [pc, #120]	; (800023c <control_Handler+0x80>)
 80001c4:	2203      	movs	r2, #3
 80001c6:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 80001c8:	2303      	movs	r3, #3
 80001ca:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001cc:	e002      	b.n	80001d4 <control_Handler+0x18>
		i--;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d008      	beq.n	80001ec <control_Handler+0x30>
 80001da:	f000 f8b9 	bl	8000350 <checkSwitchState>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d103      	bne.n	80001ec <control_Handler+0x30>
 80001e4:	4b16      	ldr	r3, [pc, #88]	; (8000240 <control_Handler+0x84>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d1f0      	bne.n	80001ce <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <control_Handler+0x80>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d003      	beq.n	80001fc <control_Handler+0x40>
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <control_Handler+0x80>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b02      	cmp	r3, #2
 80001fa:	d107      	bne.n	800020c <control_Handler+0x50>
		disable_sensor();
 80001fc:	f000 fe52 	bl	8000ea4 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 8000200:	f001 f82e 	bl	8001260 <TIMER3_disable>
		USART2_write((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <control_Handler+0x88>)
 8000206:	f001 fa69 	bl	80016dc <USART2_write>
 800020a:	e010      	b.n	800022e <control_Handler+0x72>
	}

	else if(state == ON){
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <control_Handler+0x80>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d105      	bne.n	8000220 <control_Handler+0x64>
		enable_sensor();
 8000214:	f000 fe3a 	bl	8000e8c <enable_sensor>
		USART2_write((uint8_t*)("\r\nON\r\n"));
 8000218:	480b      	ldr	r0, [pc, #44]	; (8000248 <control_Handler+0x8c>)
 800021a:	f001 fa5f 	bl	80016dc <USART2_write>
 800021e:	e006      	b.n	800022e <control_Handler+0x72>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 8000220:	f000 fe40 	bl	8000ea4 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 8000224:	f001 f81c 	bl	8001260 <TIMER3_disable>
		USART2_write((uint8_t*)("\r\nNON\r\n"));
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <control_Handler+0x90>)
 800022a:	f001 fa57 	bl	80016dc <USART2_write>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 800022e:	f001 f825 	bl	800127c <TIMER4_disable>

	return NULL;
 8000232:	2300      	movs	r3, #0

}
 8000234:	4618      	mov	r0, r3
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000479 	.word	0x20000479
 8000240:	20000478 	.word	0x20000478
 8000244:	080024c4 	.word	0x080024c4
 8000248:	080024d4 	.word	0x080024d4
 800024c:	080024dc 	.word	0x080024dc

08000250 <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In recordAlert()\r\n"); // for debugging
 8000254:	4835      	ldr	r0, [pc, #212]	; (800032c <recordAlert+0xdc>)
 8000256:	f001 fa41 	bl	80016dc <USART2_write>

	connection_closed = TRUE;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <recordAlert+0xe0>)
 800025c:	2201      	movs	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){
 8000260:	2106      	movs	r1, #6
 8000262:	2003      	movs	r0, #3
 8000264:	f000 f8f4 	bl	8000450 <reset>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d101      	bne.n	8000272 <recordAlert+0x22>
		return FALSE;
 800026e:	2300      	movs	r3, #0
 8000270:	e05a      	b.n	8000328 <recordAlert+0xd8>
	 }
	 TIMER4_delay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f001 f810 	bl	8001298 <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 8000278:	482e      	ldr	r0, [pc, #184]	; (8000334 <recordAlert+0xe4>)
 800027a:	f001 fa2f 	bl	80016dc <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 800027e:	2106      	movs	r1, #6
 8000280:	2002      	movs	r0, #2
 8000282:	f000 f929 	bl	80004d8 <setClientMode>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d101      	bne.n	8000290 <recordAlert+0x40>
		return FALSE;
 800028c:	2300      	movs	r3, #0
 800028e:	e04b      	b.n	8000328 <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 8000290:	4829      	ldr	r0, [pc, #164]	; (8000338 <recordAlert+0xe8>)
 8000292:	f001 fa23 	bl	80016dc <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,10)){
 8000296:	210a      	movs	r1, #10
 8000298:	2002      	movs	r0, #2
 800029a:	f000 f961 	bl	8000560 <joinAccessPoint>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d101      	bne.n	80002a8 <recordAlert+0x58>
		return FALSE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	e03f      	b.n	8000328 <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 80002a8:	4824      	ldr	r0, [pc, #144]	; (800033c <recordAlert+0xec>)
 80002aa:	f001 fa17 	bl	80016dc <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 80002ae:	231e      	movs	r3, #30
 80002b0:	2206      	movs	r2, #6
 80002b2:	2102      	movs	r1, #2
 80002b4:	2002      	movs	r0, #2
 80002b6:	f000 f9a9 	bl	800060c <connectFirebaseHost>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d101      	bne.n	80002c4 <recordAlert+0x74>
		return FALSE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	e031      	b.n	8000328 <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 80002c4:	481e      	ldr	r0, [pc, #120]	; (8000340 <recordAlert+0xf0>)
 80002c6:	f001 fa09 	bl	80016dc <USART2_write>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//USART2_write((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 80002ca:	f000 fa45 	bl	8000758 <createPostMsg>
	USART2_write((uint8_t*)"4\r\n");
 80002ce:	481d      	ldr	r0, [pc, #116]	; (8000344 <recordAlert+0xf4>)
 80002d0:	f001 fa04 	bl	80016dc <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 80002d4:	2328      	movs	r3, #40	; 0x28
 80002d6:	221e      	movs	r2, #30
 80002d8:	2102      	movs	r1, #2
 80002da:	2002      	movs	r0, #2
 80002dc:	f000 faaa 	bl	8000834 <sendRequest>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d109      	bne.n	80002fa <recordAlert+0xaa>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 80002e6:	2106      	movs	r1, #6
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 fbcb 	bl	8000a84 <closeConnection>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <recordAlert+0xe0>)
 80002f4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	e016      	b.n	8000328 <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 80002fa:	4813      	ldr	r0, [pc, #76]	; (8000348 <recordAlert+0xf8>)
 80002fc:	f001 f9ee 	bl	80016dc <USART2_write>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 8000300:	2078      	movs	r0, #120	; 0x78
 8000302:	f000 fb3f 	bl	8000984 <readResponse>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d109      	bne.n	8000320 <recordAlert+0xd0>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 800030c:	2106      	movs	r1, #6
 800030e:	2002      	movs	r0, #2
 8000310:	f000 fbb8 	bl	8000a84 <closeConnection>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <recordAlert+0xe0>)
 800031a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800031c:	2300      	movs	r3, #0
 800031e:	e003      	b.n	8000328 <recordAlert+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 8000320:	480a      	ldr	r0, [pc, #40]	; (800034c <recordAlert+0xfc>)
 8000322:	f001 f9db 	bl	80016dc <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 8000326:	2301      	movs	r3, #1

}
 8000328:	4618      	mov	r0, r3
 800032a:	bd80      	pop	{r7, pc}
 800032c:	080024e4 	.word	0x080024e4
 8000330:	20000478 	.word	0x20000478
 8000334:	080024f8 	.word	0x080024f8
 8000338:	080024fc 	.word	0x080024fc
 800033c:	08002500 	.word	0x08002500
 8000340:	08002504 	.word	0x08002504
 8000344:	08002508 	.word	0x08002508
 8000348:	0800250c 	.word	0x0800250c
 800034c:	08002510 	.word	0x08002510

08000350 <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 8000354:	4835      	ldr	r0, [pc, #212]	; (800042c <checkSwitchState+0xdc>)
 8000356:	f001 f9c1 	bl	80016dc <USART2_write>

	connection_closed = TRUE;//added 30.4.21
 800035a:	4b35      	ldr	r3, [pc, #212]	; (8000430 <checkSwitchState+0xe0>)
 800035c:	2201      	movs	r2, #1
 800035e:	701a      	strb	r2, [r3, #0]

	//Reset ESP8266
	if(!reset(3,6)){
 8000360:	2106      	movs	r1, #6
 8000362:	2003      	movs	r0, #3
 8000364:	f000 f874 	bl	8000450 <reset>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <checkSwitchState+0x22>
		return FALSE;
 800036e:	2300      	movs	r3, #0
 8000370:	e05a      	b.n	8000428 <checkSwitchState+0xd8>
	}
	TIMER4_delay(1);
 8000372:	2001      	movs	r0, #1
 8000374:	f000 ff90 	bl	8001298 <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 8000378:	482e      	ldr	r0, [pc, #184]	; (8000434 <checkSwitchState+0xe4>)
 800037a:	f001 f9af 	bl	80016dc <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 800037e:	2106      	movs	r1, #6
 8000380:	2002      	movs	r0, #2
 8000382:	f000 f8a9 	bl	80004d8 <setClientMode>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d101      	bne.n	8000390 <checkSwitchState+0x40>
		return FALSE;
 800038c:	2300      	movs	r3, #0
 800038e:	e04b      	b.n	8000428 <checkSwitchState+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 8000390:	4829      	ldr	r0, [pc, #164]	; (8000438 <checkSwitchState+0xe8>)
 8000392:	f001 f9a3 	bl	80016dc <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,10)){
 8000396:	210a      	movs	r1, #10
 8000398:	2002      	movs	r0, #2
 800039a:	f000 f8e1 	bl	8000560 <joinAccessPoint>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d101      	bne.n	80003a8 <checkSwitchState+0x58>
		return FALSE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	e03f      	b.n	8000428 <checkSwitchState+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 80003a8:	4824      	ldr	r0, [pc, #144]	; (800043c <checkSwitchState+0xec>)
 80003aa:	f001 f997 	bl	80016dc <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 80003ae:	231e      	movs	r3, #30
 80003b0:	2206      	movs	r2, #6
 80003b2:	2102      	movs	r1, #2
 80003b4:	2002      	movs	r0, #2
 80003b6:	f000 f929 	bl	800060c <connectFirebaseHost>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d101      	bne.n	80003c4 <checkSwitchState+0x74>
		return FALSE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	e031      	b.n	8000428 <checkSwitchState+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 80003c4:	481e      	ldr	r0, [pc, #120]	; (8000440 <checkSwitchState+0xf0>)
 80003c6:	f001 f989 	bl	80016dc <USART2_write>


	//Create HTTP request
	createGetMsg();
 80003ca:	f000 fa0b 	bl	80007e4 <createGetMsg>
	USART2_write((uint8_t*)"4\r\n");
 80003ce:	481d      	ldr	r0, [pc, #116]	; (8000444 <checkSwitchState+0xf4>)
 80003d0:	f001 f984 	bl	80016dc <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 80003d4:	2328      	movs	r3, #40	; 0x28
 80003d6:	221e      	movs	r2, #30
 80003d8:	2102      	movs	r1, #2
 80003da:	2002      	movs	r0, #2
 80003dc:	f000 fa2a 	bl	8000834 <sendRequest>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d109      	bne.n	80003fa <checkSwitchState+0xaa>
		connection_closed = closeConnection(2,6);
 80003e6:	2106      	movs	r1, #6
 80003e8:	2002      	movs	r0, #2
 80003ea:	f000 fb4b 	bl	8000a84 <closeConnection>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <checkSwitchState+0xe0>)
 80003f4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e016      	b.n	8000428 <checkSwitchState+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 80003fa:	4813      	ldr	r0, [pc, #76]	; (8000448 <checkSwitchState+0xf8>)
 80003fc:	f001 f96e 	bl	80016dc <USART2_write>

	//Read response
	if(!parseResponse(120)){//timeout set t0 3 minutes
 8000400:	2078      	movs	r0, #120	; 0x78
 8000402:	f000 faf3 	bl	80009ec <parseResponse>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d109      	bne.n	8000420 <checkSwitchState+0xd0>
		connection_closed = closeConnection(2,6);//added 30.4.21
 800040c:	2106      	movs	r1, #6
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fb38 	bl	8000a84 <closeConnection>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <checkSwitchState+0xe0>)
 800041a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800041c:	2300      	movs	r3, #0
 800041e:	e003      	b.n	8000428 <checkSwitchState+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 8000420:	480a      	ldr	r0, [pc, #40]	; (800044c <checkSwitchState+0xfc>)
 8000422:	f001 f95b 	bl	80016dc <USART2_write>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 8000426:	2301      	movs	r3, #1


}
 8000428:	4618      	mov	r0, r3
 800042a:	bd80      	pop	{r7, pc}
 800042c:	08002514 	.word	0x08002514
 8000430:	20000478 	.word	0x20000478
 8000434:	080024f8 	.word	0x080024f8
 8000438:	080024fc 	.word	0x080024fc
 800043c:	08002500 	.word	0x08002500
 8000440:	08002504 	.word	0x08002504
 8000444:	08002508 	.word	0x08002508
 8000448:	0800250c 	.word	0x0800250c
 800044c:	08002510 	.word	0x08002510

08000450 <reset>:
/*This function resets ESP8266 modem with AT+RST command,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.
 * !TODO This functionality does not work properly - needs fixing.*/
BOOL reset(uint32_t tries, uint32_t timeout){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <reset+0x78>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_RST);
 8000460:	481a      	ldr	r0, [pc, #104]	; (80004cc <reset+0x7c>)
 8000462:	f001 f9ed 	bl	8001840 <USART1_write>
	while(tries > 0){
 8000466:	e027      	b.n	80004b8 <reset+0x68>
		TIMER4_set_timeout(timeout);
 8000468:	6838      	ldr	r0, [r7, #0]
 800046a:	f000 ff75 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800046e:	e00e      	b.n	800048e <reset+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000470:	f001 f86e 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d009      	beq.n	800048e <reset+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800047a:	4915      	ldr	r1, [pc, #84]	; (80004d0 <reset+0x80>)
 800047c:	4815      	ldr	r0, [pc, #84]	; (80004d4 <reset+0x84>)
 800047e:	f001 fa67 	bl	8001950 <USART1_search_buffer_Rx>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <reset+0x78>)
 8000488:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800048a:	f001 f86b 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <reset+0x78>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d104      	bne.n	80004a0 <reset+0x50>
 8000496:	f000 ff71 	bl	800137c <TIMER4_timeout_done>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0e7      	beq.n	8000470 <reset+0x20>
			}
		}
		if(found == PASS){
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <reset+0x78>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d101      	bne.n	80004ac <reset+0x5c>
			return TRUE;
 80004a8:	2301      	movs	r3, #1
 80004aa:	e009      	b.n	80004c0 <reset+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_RST);
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <reset+0x7c>)
 80004b4:	f001 f9c4 	bl	8001840 <USART1_write>
	while(tries > 0){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1d4      	bne.n	8000468 <reset+0x18>
		}
	}
	return FALSE;
 80004be:	2300      	movs	r3, #0

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000006c 	.word	0x2000006c
 80004cc:	08002544 	.word	0x08002544
 80004d0:	08002534 	.word	0x08002534
 80004d4:	0800253c 	.word	0x0800253c

080004d8 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <setClientMode+0x78>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CWMODE);
 80004e8:	481a      	ldr	r0, [pc, #104]	; (8000554 <setClientMode+0x7c>)
 80004ea:	f001 f9a9 	bl	8001840 <USART1_write>
	while(tries > 0){
 80004ee:	e027      	b.n	8000540 <setClientMode+0x68>
		TIMER4_set_timeout(timeout);
 80004f0:	6838      	ldr	r0, [r7, #0]
 80004f2:	f000 ff31 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80004f6:	e00e      	b.n	8000516 <setClientMode+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 80004f8:	f001 f82a 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d009      	beq.n	8000516 <setClientMode+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 8000502:	4915      	ldr	r1, [pc, #84]	; (8000558 <setClientMode+0x80>)
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <setClientMode+0x84>)
 8000506:	f001 fa23 	bl	8001950 <USART1_search_buffer_Rx>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <setClientMode+0x78>)
 8000510:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000512:	f001 f827 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <setClientMode+0x78>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d104      	bne.n	8000528 <setClientMode+0x50>
 800051e:	f000 ff2d 	bl	800137c <TIMER4_timeout_done>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0e7      	beq.n	80004f8 <setClientMode+0x20>
			}
		}
		if(found == PASS){
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <setClientMode+0x78>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <setClientMode+0x5c>
			return TRUE;
 8000530:	2301      	movs	r3, #1
 8000532:	e009      	b.n	8000548 <setClientMode+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3b01      	subs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CWMODE);
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <setClientMode+0x7c>)
 800053c:	f001 f980 	bl	8001840 <USART1_write>
	while(tries > 0){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1d4      	bne.n	80004f0 <setClientMode+0x18>
		}
	}
	return FALSE;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000006c 	.word	0x2000006c
 8000554:	08002550 	.word	0x08002550
 8000558:	08002534 	.word	0x08002534
 800055c:	0800253c 	.word	0x0800253c

08000560 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800056a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056e:	2100      	movs	r1, #0
 8000570:	481f      	ldr	r0, [pc, #124]	; (80005f0 <joinAccessPoint+0x90>)
 8000572:	f001 fb62 	bl	8001c3a <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <joinAccessPoint+0x94>)
 8000578:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <joinAccessPoint+0x98>)
 800057a:	4920      	ldr	r1, [pc, #128]	; (80005fc <joinAccessPoint+0x9c>)
 800057c:	481c      	ldr	r0, [pc, #112]	; (80005f0 <joinAccessPoint+0x90>)
 800057e:	f001 fb65 	bl	8001c4c <siprintf>

	found = STANDBY;
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <joinAccessPoint+0xa0>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <joinAccessPoint+0x90>)
 800058a:	f001 f959 	bl	8001840 <USART1_write>
	while(tries > 0){
 800058e:	e027      	b.n	80005e0 <joinAccessPoint+0x80>
		TIMER4_set_timeout(timeout);
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f000 fee1 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000596:	e00e      	b.n	80005b6 <joinAccessPoint+0x56>
			if(USART1_NEW_LINE_FOUND_get()){
 8000598:	f000 ffda 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d009      	beq.n	80005b6 <joinAccessPoint+0x56>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80005a2:	4918      	ldr	r1, [pc, #96]	; (8000604 <joinAccessPoint+0xa4>)
 80005a4:	4818      	ldr	r0, [pc, #96]	; (8000608 <joinAccessPoint+0xa8>)
 80005a6:	f001 f9d3 	bl	8001950 <USART1_search_buffer_Rx>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <joinAccessPoint+0xa0>)
 80005b0:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80005b2:	f000 ffd7 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <joinAccessPoint+0xa0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d104      	bne.n	80005c8 <joinAccessPoint+0x68>
 80005be:	f000 fedd 	bl	800137c <TIMER4_timeout_done>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0e7      	beq.n	8000598 <joinAccessPoint+0x38>
			}
		}
		if(found == PASS){
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <joinAccessPoint+0xa0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <joinAccessPoint+0x74>
			return TRUE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e009      	b.n	80005e8 <joinAccessPoint+0x88>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)command);
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <joinAccessPoint+0x90>)
 80005dc:	f001 f930 	bl	8001840 <USART1_write>
	while(tries > 0){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1d4      	bne.n	8000590 <joinAccessPoint+0x30>
		}
	}
	return FALSE;
 80005e6:	2300      	movs	r3, #0

}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000f0 	.word	0x200000f0
 80005f4:	08002560 	.word	0x08002560
 80005f8:	0800256c 	.word	0x0800256c
 80005fc:	08002578 	.word	0x08002578
 8000600:	2000006c 	.word	0x2000006c
 8000604:	08002590 	.word	0x08002590
 8000608:	0800253c 	.word	0x0800253c

0800060c <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 800061a:	4b46      	ldr	r3, [pc, #280]	; (8000734 <connectFirebaseHost+0x128>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000620:	4845      	ldr	r0, [pc, #276]	; (8000738 <connectFirebaseHost+0x12c>)
 8000622:	f001 f90d 	bl	8001840 <USART1_write>
	while(_ssl_tries > 0){
 8000626:	e025      	b.n	8000674 <connectFirebaseHost+0x68>
		TIMER4_set_timeout(_ssl_timeout);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fe95 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800062e:	e00e      	b.n	800064e <connectFirebaseHost+0x42>
			if(USART1_NEW_LINE_FOUND_get()){
 8000630:	f000 ff8e 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d009      	beq.n	800064e <connectFirebaseHost+0x42>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800063a:	4940      	ldr	r1, [pc, #256]	; (800073c <connectFirebaseHost+0x130>)
 800063c:	4840      	ldr	r0, [pc, #256]	; (8000740 <connectFirebaseHost+0x134>)
 800063e:	f001 f987 	bl	8001950 <USART1_search_buffer_Rx>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <connectFirebaseHost+0x128>)
 8000648:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800064a:	f000 ff8b 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <connectFirebaseHost+0x128>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d104      	bne.n	8000660 <connectFirebaseHost+0x54>
 8000656:	f000 fe91 	bl	800137c <TIMER4_timeout_done>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0e7      	beq.n	8000630 <connectFirebaseHost+0x24>
			}
		}
		if(found == PASS){
 8000660:	4b34      	ldr	r3, [pc, #208]	; (8000734 <connectFirebaseHost+0x128>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <connectFirebaseHost+0x70>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3b01      	subs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 800066e:	4832      	ldr	r0, [pc, #200]	; (8000738 <connectFirebaseHost+0x12c>)
 8000670:	f001 f8e6 	bl	8001840 <USART1_write>
	while(_ssl_tries > 0){
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1d6      	bne.n	8000628 <connectFirebaseHost+0x1c>
 800067a:	e000      	b.n	800067e <connectFirebaseHost+0x72>
			break; //move on to next command
 800067c:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <connectFirebaseHost+0x128>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d003      	beq.n	800068e <connectFirebaseHost+0x82>
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <connectFirebaseHost+0x128>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d101      	bne.n	8000692 <connectFirebaseHost+0x86>
		return FALSE;
 800068e:	2300      	movs	r3, #0
 8000690:	e04b      	b.n	800072a <connectFirebaseHost+0x11e>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000696:	2100      	movs	r1, #0
 8000698:	482a      	ldr	r0, [pc, #168]	; (8000744 <connectFirebaseHost+0x138>)
 800069a:	f001 face 	bl	8001c3a <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <connectFirebaseHost+0x13c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <connectFirebaseHost+0x140>)
 80006a4:	492a      	ldr	r1, [pc, #168]	; (8000750 <connectFirebaseHost+0x144>)
 80006a6:	4827      	ldr	r0, [pc, #156]	; (8000744 <connectFirebaseHost+0x138>)
 80006a8:	f001 fad0 	bl	8001c4c <siprintf>

	found = STANDBY;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <connectFirebaseHost+0x128>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <connectFirebaseHost+0x138>)
 80006b4:	f001 f8c4 	bl	8001840 <USART1_write>
	while(_cipstart_tries > 0){
 80006b8:	e033      	b.n	8000722 <connectFirebaseHost+0x116>
		TIMER4_set_timeout(_cipstart_timeout);
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f000 fe4c 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006c0:	e01a      	b.n	80006f8 <connectFirebaseHost+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 80006c2:	f000 ff45 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d015      	beq.n	80006f8 <connectFirebaseHost+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80006cc:	491b      	ldr	r1, [pc, #108]	; (800073c <connectFirebaseHost+0x130>)
 80006ce:	481c      	ldr	r0, [pc, #112]	; (8000740 <connectFirebaseHost+0x134>)
 80006d0:	f001 f93e 	bl	8001950 <USART1_search_buffer_Rx>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <connectFirebaseHost+0x128>)
 80006da:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <connectFirebaseHost+0x128>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d107      	bne.n	80006f4 <connectFirebaseHost+0xe8>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 80006e4:	4915      	ldr	r1, [pc, #84]	; (800073c <connectFirebaseHost+0x130>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <connectFirebaseHost+0x148>)
 80006e8:	f001 f932 	bl	8001950 <USART1_search_buffer_Rx>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <connectFirebaseHost+0x128>)
 80006f2:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 80006f4:	f000 ff36 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <connectFirebaseHost+0x128>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d104      	bne.n	800070a <connectFirebaseHost+0xfe>
 8000700:	f000 fe3c 	bl	800137c <TIMER4_timeout_done>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0db      	beq.n	80006c2 <connectFirebaseHost+0xb6>
			}
		}
		if(found == PASS){
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <connectFirebaseHost+0x128>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <connectFirebaseHost+0x10a>
			return TRUE;
 8000712:	2301      	movs	r3, #1
 8000714:	e009      	b.n	800072a <connectFirebaseHost+0x11e>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3b01      	subs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)command);
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <connectFirebaseHost+0x138>)
 800071e:	f001 f88f 	bl	8001840 <USART1_write>
	while(_cipstart_tries > 0){
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1c8      	bne.n	80006ba <connectFirebaseHost+0xae>
		}
	}
	return FALSE;
 8000728:	2300      	movs	r3, #0



}
 800072a:	4618      	mov	r0, r3
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000006c 	.word	0x2000006c
 8000738:	08002598 	.word	0x08002598
 800073c:	08002534 	.word	0x08002534
 8000740:	0800253c 	.word	0x0800253c
 8000744:	200000f0 	.word	0x200000f0
 8000748:	20000058 	.word	0x20000058
 800074c:	20000000 	.word	0x20000000
 8000750:	080025b0 	.word	0x080025b0
 8000754:	080025d0 	.word	0x080025d0

08000758 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	2100      	movs	r1, #0
 8000762:	4817      	ldr	r0, [pc, #92]	; (80007c0 <createPostMsg+0x68>)
 8000764:	f001 fa69 	bl	8001c3a <memset>
	//sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <createPostMsg+0x68>)
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <createPostMsg+0x6c>)
 800076c:	4610      	mov	r0, r2
 800076e:	4619      	mov	r1, r3
 8000770:	235c      	movs	r3, #92	; 0x5c
 8000772:	461a      	mov	r2, r3
 8000774:	f001 fa56 	bl	8001c24 <memcpy>
	content_len = strlen((char*)content);
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <createPostMsg+0x68>)
 800077a:	f7ff fcf9 	bl	8000170 <strlen>
 800077e:	4602      	mov	r2, r0
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <createPostMsg+0x70>)
 8000782:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	2100      	movs	r1, #0
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <createPostMsg+0x74>)
 800078c:	f001 fa55 	bl	8001c3a <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <createPostMsg+0x70>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <createPostMsg+0x68>)
 8000796:	9202      	str	r2, [sp, #8]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <createPostMsg+0x78>)
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <createPostMsg+0x7c>)
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <createPostMsg+0x80>)
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <createPostMsg+0x84>)
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <createPostMsg+0x74>)
 80007a6:	f001 fa51 	bl	8001c4c <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <createPostMsg+0x74>)
 80007ac:	f7ff fce0 	bl	8000170 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	3b02      	subs	r3, #2
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <createPostMsg+0x88>)
 80007b6:	6013      	str	r3, [r2, #0]

}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200003f4 	.word	0x200003f4
 80007c4:	080025e4 	.word	0x080025e4
 80007c8:	20000474 	.word	0x20000474
 80007cc:	200001f0 	.word	0x200001f0
 80007d0:	20000000 	.word	0x20000000
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	2000005c 	.word	0x2000005c
 80007dc:	08002640 	.word	0x08002640
 80007e0:	200003f0 	.word	0x200003f0

080007e4 <createGetMsg>:

void createGetMsg(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80007ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ee:	2100      	movs	r1, #0
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <createGetMsg+0x38>)
 80007f2:	f001 fa22 	bl	8001c3a <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <createGetMsg+0x3c>)
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <createGetMsg+0x40>)
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <createGetMsg+0x44>)
 80007fe:	490b      	ldr	r1, [pc, #44]	; (800082c <createGetMsg+0x48>)
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <createGetMsg+0x38>)
 8000802:	f001 fa23 	bl	8001c4c <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <createGetMsg+0x38>)
 8000808:	f7ff fcb2 	bl	8000170 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	3b02      	subs	r3, #2
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <createGetMsg+0x4c>)
 8000812:	6013      	str	r3, [r2, #0]

}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001f0 	.word	0x200001f0
 8000820:	20000000 	.word	0x20000000
 8000824:	2000002c 	.word	0x2000002c
 8000828:	2000005c 	.word	0x2000005c
 800082c:	080026b8 	.word	0x080026b8
 8000830:	200003f0 	.word	0x200003f0

08000834 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000846:	2100      	movs	r1, #0
 8000848:	4844      	ldr	r0, [pc, #272]	; (800095c <sendRequest+0x128>)
 800084a:	f001 f9f6 	bl	8001c3a <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <sendRequest+0x12c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	4943      	ldr	r1, [pc, #268]	; (8000964 <sendRequest+0x130>)
 8000856:	4841      	ldr	r0, [pc, #260]	; (800095c <sendRequest+0x128>)
 8000858:	f001 f9f8 	bl	8001c4c <siprintf>

	found = STANDBY;
 800085c:	4b42      	ldr	r3, [pc, #264]	; (8000968 <sendRequest+0x134>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000862:	483e      	ldr	r0, [pc, #248]	; (800095c <sendRequest+0x128>)
 8000864:	f000 ffec 	bl	8001840 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000868:	e031      	b.n	80008ce <sendRequest+0x9a>
		TIMER4_set_timeout(_CIPSEND_timeout);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 fd74 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000870:	e01a      	b.n	80008a8 <sendRequest+0x74>
			if(USART1_NEW_LINE_FOUND_get()){
 8000872:	f000 fe6d 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d015      	beq.n	80008a8 <sendRequest+0x74>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 800087c:	493b      	ldr	r1, [pc, #236]	; (800096c <sendRequest+0x138>)
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <sendRequest+0x13c>)
 8000880:	f001 f866 	bl	8001950 <USART1_search_buffer_Rx>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <sendRequest+0x134>)
 800088a:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <sendRequest+0x134>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d107      	bne.n	80008a4 <sendRequest+0x70>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000894:	4937      	ldr	r1, [pc, #220]	; (8000974 <sendRequest+0x140>)
 8000896:	4836      	ldr	r0, [pc, #216]	; (8000970 <sendRequest+0x13c>)
 8000898:	f001 f85a 	bl	8001950 <USART1_search_buffer_Rx>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <sendRequest+0x134>)
 80008a2:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 80008a4:	f000 fe5e 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <sendRequest+0x134>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d104      	bne.n	80008ba <sendRequest+0x86>
 80008b0:	f000 fd64 	bl	800137c <TIMER4_timeout_done>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0db      	beq.n	8000872 <sendRequest+0x3e>
			}
		}
		if(found == PASS){
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <sendRequest+0x134>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d009      	beq.n	80008d6 <sendRequest+0xa2>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)command);
 80008c8:	4824      	ldr	r0, [pc, #144]	; (800095c <sendRequest+0x128>)
 80008ca:	f000 ffb9 	bl	8001840 <USART1_write>
	while(_CIPSEND_tries > 0){
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1ca      	bne.n	800086a <sendRequest+0x36>
 80008d4:	e000      	b.n	80008d8 <sendRequest+0xa4>
			break; //move on to next command
 80008d6:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <sendRequest+0x134>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d003      	beq.n	80008e8 <sendRequest+0xb4>
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <sendRequest+0x134>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d101      	bne.n	80008ec <sendRequest+0xb8>
		return FALSE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e032      	b.n	8000952 <sendRequest+0x11e>
	}


	/*Send HTTP request*/
	found = STANDBY;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <sendRequest+0x134>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)http);
 80008f2:	4821      	ldr	r0, [pc, #132]	; (8000978 <sendRequest+0x144>)
 80008f4:	f000 ffa4 	bl	8001840 <USART1_write>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 80008f8:	e027      	b.n	800094a <sendRequest+0x116>
		TIMER4_set_timeout(_SEND_OK_timeout);
 80008fa:	6838      	ldr	r0, [r7, #0]
 80008fc:	f000 fd2c 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000900:	e00e      	b.n	8000920 <sendRequest+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 8000902:	f000 fe25 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <sendRequest+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 800090c:	491b      	ldr	r1, [pc, #108]	; (800097c <sendRequest+0x148>)
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <sendRequest+0x14c>)
 8000910:	f001 f81e 	bl	8001950 <USART1_search_buffer_Rx>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <sendRequest+0x134>)
 800091a:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800091c:	f000 fe22 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <sendRequest+0x134>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d104      	bne.n	8000932 <sendRequest+0xfe>
 8000928:	f000 fd28 	bl	800137c <TIMER4_timeout_done>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0e7      	beq.n	8000902 <sendRequest+0xce>
			}
		}
		if(found == PASS){
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <sendRequest+0x134>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d101      	bne.n	800093e <sendRequest+0x10a>
			return TRUE;
 800093a:	2301      	movs	r3, #1
 800093c:	e009      	b.n	8000952 <sendRequest+0x11e>
		}
		else{
			_SEND_OK_tries--;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	3b01      	subs	r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)http);
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <sendRequest+0x144>)
 8000946:	f000 ff7b 	bl	8001840 <USART1_write>
	while(_SEND_OK_tries > 0){
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1d4      	bne.n	80008fa <sendRequest+0xc6>
		}
	}
	return FALSE;
 8000950:	2300      	movs	r3, #0

}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000f0 	.word	0x200000f0
 8000960:	200003f0 	.word	0x200003f0
 8000964:	080026fc 	.word	0x080026fc
 8000968:	2000006c 	.word	0x2000006c
 800096c:	08002534 	.word	0x08002534
 8000970:	08002710 	.word	0x08002710
 8000974:	08002714 	.word	0x08002714
 8000978:	200001f0 	.word	0x200001f0
 800097c:	08002590 	.word	0x08002590
 8000980:	08002720 	.word	0x08002720

08000984 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <readResponse+0x5c>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 fce0 	bl	8001358 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000998:	e00e      	b.n	80009b8 <readResponse+0x34>
		if(USART1_NEW_LINE_FOUND_get()){
 800099a:	f000 fdd9 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d009      	beq.n	80009b8 <readResponse+0x34>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <readResponse+0x60>)
 80009a6:	4810      	ldr	r0, [pc, #64]	; (80009e8 <readResponse+0x64>)
 80009a8:	f000 ffd2 	bl	8001950 <USART1_search_buffer_Rx>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <readResponse+0x5c>)
 80009b2:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 80009b4:	f000 fdd6 	bl	8001564 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <readResponse+0x5c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d104      	bne.n	80009ca <readResponse+0x46>
 80009c0:	f000 fcdc 	bl	800137c <TIMER4_timeout_done>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0e7      	beq.n	800099a <readResponse+0x16>
		}
	}
	if(found == PASS){
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <readResponse+0x5c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <readResponse+0x52>
		return TRUE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <readResponse+0x54>
	}
	else{
		return FALSE;
 80009d6:	2300      	movs	r3, #0
	}

}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000006c 	.word	0x2000006c
 80009e4:	08002590 	.word	0x08002590
 80009e8:	08002714 	.word	0x08002714

080009ec <parseResponse>:


// THIS NEEDS TO CHANGE NEED TO CHECK WETHER IT'S ON OR OFF for that we need to retreive the content.
BOOL parseResponse(uint32_t timeout){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <parseResponse+0x7c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
	state = NON;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <parseResponse+0x80>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fca9 	bl	8001358 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000a06:	e01b      	b.n	8000a40 <parseResponse+0x54>
		if(USART1_NEW_LINE_FOUND_get()){
 8000a08:	f000 fda2 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d016      	beq.n	8000a40 <parseResponse+0x54>
			state = USART1_check_state_buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <parseResponse+0x84>)
 8000a14:	4917      	ldr	r1, [pc, #92]	; (8000a74 <parseResponse+0x88>)
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <parseResponse+0x8c>)
 8000a18:	f000 fff2 	bl	8001a00 <USART1_check_state_buffer_Rx>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <parseResponse+0x80>)
 8000a22:	701a      	strb	r2, [r3, #0]
			if(state != NON){
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <parseResponse+0x80>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d007      	beq.n	8000a3c <parseResponse+0x50>
				found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000a2c:	4913      	ldr	r1, [pc, #76]	; (8000a7c <parseResponse+0x90>)
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <parseResponse+0x94>)
 8000a30:	f000 ff8e 	bl	8001950 <USART1_search_buffer_Rx>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <parseResponse+0x7c>)
 8000a3a:	701a      	strb	r2, [r3, #0]
			}
			USART1_NEW_LINE_READ_set();
 8000a3c:	f000 fd92 	bl	8001564 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <parseResponse+0x7c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d104      	bne.n	8000a52 <parseResponse+0x66>
 8000a48:	f000 fc98 	bl	800137c <TIMER4_timeout_done>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0da      	beq.n	8000a08 <parseResponse+0x1c>
		}
	}
	if(found == PASS){
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <parseResponse+0x7c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <parseResponse+0x72>
		return TRUE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <parseResponse+0x74>
	}
	else{
		return FALSE;
 8000a5e:	2300      	movs	r3, #0
	}

}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000006c 	.word	0x2000006c
 8000a6c:	20000479 	.word	0x20000479
 8000a70:	0800272c 	.word	0x0800272c
 8000a74:	08002738 	.word	0x08002738
 8000a78:	08002744 	.word	0x08002744
 8000a7c:	08002590 	.word	0x08002590
 8000a80:	08002714 	.word	0x08002714

08000a84 <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <closeConnection+0x78>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CIPCLOSE);
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <closeConnection+0x7c>)
 8000a96:	f000 fed3 	bl	8001840 <USART1_write>
	while(tries > 0){
 8000a9a:	e027      	b.n	8000aec <closeConnection+0x68>
		TIMER4_set_timeout(timeout);
 8000a9c:	6838      	ldr	r0, [r7, #0]
 8000a9e:	f000 fc5b 	bl	8001358 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000aa2:	e00e      	b.n	8000ac2 <closeConnection+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000aa4:	f000 fd54 	bl	8001550 <USART1_NEW_LINE_FOUND_get>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d009      	beq.n	8000ac2 <closeConnection+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000aae:	4915      	ldr	r1, [pc, #84]	; (8000b04 <closeConnection+0x80>)
 8000ab0:	4815      	ldr	r0, [pc, #84]	; (8000b08 <closeConnection+0x84>)
 8000ab2:	f000 ff4d 	bl	8001950 <USART1_search_buffer_Rx>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <closeConnection+0x78>)
 8000abc:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000abe:	f000 fd51 	bl	8001564 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <closeConnection+0x78>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d104      	bne.n	8000ad4 <closeConnection+0x50>
 8000aca:	f000 fc57 	bl	800137c <TIMER4_timeout_done>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0e7      	beq.n	8000aa4 <closeConnection+0x20>
			}
		}
		if(found == PASS){
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <closeConnection+0x78>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <closeConnection+0x5c>
			return TRUE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e009      	b.n	8000af4 <closeConnection+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CIPCLOSE);
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <closeConnection+0x7c>)
 8000ae8:	f000 feaa 	bl	8001840 <USART1_write>
	while(tries > 0){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1d4      	bne.n	8000a9c <closeConnection+0x18>
		}
	}
	return FALSE;
 8000af2:	2300      	movs	r3, #0

}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000006c 	.word	0x2000006c
 8000b00:	08002750 	.word	0x08002750
 8000b04:	08002534 	.word	0x08002534
 8000b08:	0800253c 	.word	0x0800253c

08000b0c <init_queue>:

static Queue queue;


void init_queue()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <init_queue+0x24>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <init_queue+0x24>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <init_queue+0x24>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	2000047c 	.word	0x2000047c

08000b34 <add_event>:


void add_event(Handler handler)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 8000b3c:	f000 f854 	bl	8000be8 <queue_isFull>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d118      	bne.n	8000b78 <add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <add_event+0x4c>)
 8000b48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <add_event+0x4c>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <add_event+0x4c>)
 8000b56:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8000b5c:	d807      	bhi.n	8000b6e <add_event+0x3a>
		queue.writeIndex++;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <add_event+0x4c>)
 8000b60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <add_event+0x4c>)
 8000b68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000b6c:	e005      	b.n	8000b7a <add_event+0x46>
	else
		queue.writeIndex = 0;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <add_event+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000b76:	e000      	b.n	8000b7a <add_event+0x46>
		return;
 8000b78:	bf00      	nop

}
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000047c 	.word	0x2000047c

08000b84 <do_event>:



void *do_event()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 8000b8a:	f000 f843 	bl	8000c14 <queue_isEmpty>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <do_event+0x14>
		return NULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e020      	b.n	8000bda <do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <do_event+0x60>)
 8000b9a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <do_event+0x60>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	4798      	blx	r3
 8000ba6:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <do_event+0x60>)
 8000baa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <do_event+0x60>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <do_event+0x60>)
 8000bb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8000bbe:	d807      	bhi.n	8000bd0 <do_event+0x4c>
      queue.readIndex++;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <do_event+0x60>)
 8000bc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <do_event+0x60>)
 8000bca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000bce:	e003      	b.n	8000bd8 <do_event+0x54>
   else
      queue.readIndex = 0;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <do_event+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000bd8:	687b      	ldr	r3, [r7, #4]

}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000047c 	.word	0x2000047c

08000be8 <queue_isFull>:


BOOL queue_isFull()
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <queue_isFull+0x28>)
 8000bee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <queue_isFull+0x28>)
 8000bf4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	2000047c 	.word	0x2000047c

08000c14 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <queue_isEmpty+0x24>)
 8000c1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <queue_isEmpty+0x24>)
 8000c20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c24:	429a      	cmp	r2, r3
 8000c26:	bf0c      	ite	eq
 8000c28:	2301      	moveq	r3, #1
 8000c2a:	2300      	movne	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000047c 	.word	0x2000047c

08000c3c <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <EXTI15_10_IRQHandler+0x24>)
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <EXTI15_10_IRQHandler+0x24>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <EXTI15_10_IRQHandler+0x24>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <EXTI15_10_IRQHandler+0x28>)
 8000c56:	f7ff ff6d 	bl	8000b34 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40010400 	.word	0x40010400
 8000c64:	08000c69 	.word	0x08000c69

08000c68 <interrupt_handler>:

void *interrupt_handler(void){
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <interrupt_handler+0x3c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <interrupt_handler+0x40>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <interrupt_handler+0x40>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <interrupt_handler+0x3c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e008      	b.n	8000c9a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <interrupt_handler+0x40>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <interrupt_handler+0x40>)
 8000c8e:	f023 0320 	bic.w	r3, r3, #32
 8000c92:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <interrupt_handler+0x3c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000c9a:	2300      	movs	r3, #0

}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	20000bd0 	.word	0x20000bd0
 8000ca8:	40010800 	.word	0x40010800

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4906      	ldr	r1, [pc, #24]	; (8000d28 <__NVIC_EnableIRQ+0x34>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db10      	blt.n	8000d60 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <__NVIC_DisableIRQ+0x40>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	3320      	adds	r3, #32
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0c      	blt.n	8000d9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_ClearPendingIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	3360      	adds	r3, #96	; 0x60
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <init_sensor_with_interrupt>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void init_sensor_with_interrupt(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <init_sensor_with_interrupt+0x7c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <init_sensor_with_interrupt+0x7c>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <init_sensor_with_interrupt+0x7c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <init_sensor_with_interrupt+0x7c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e22:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000e26:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e32:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <init_sensor_with_interrupt+0x80>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <init_sensor_with_interrupt+0x84>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <init_sensor_with_interrupt+0x84>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <init_sensor_with_interrupt+0x88>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <init_sensor_with_interrupt+0x88>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <init_sensor_with_interrupt+0x88>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <init_sensor_with_interrupt+0x88>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000e66:	2007      	movs	r0, #7
 8000e68:	f7ff ff20 	bl	8000cac <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200a      	movs	r0, #10
 8000e70:	f7ff ff9c 	bl	8000dac <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e74:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40010400 	.word	0x40010400

08000e8c <enable_sensor>:

void enable_sensor(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 8000e92:	200a      	movs	r0, #10
 8000e94:	f7ff ff6c 	bl	8000d70 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f7ff ff2b 	bl	8000cf4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e9e:	b662      	cpsie	i
	__enable_irq();

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <disable_sensor>:

void disable_sensor(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f7ff ff3e 	bl	8000d2c <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000eb0:	b662      	cpsie	i
	__enable_irq();

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <EXTI4_IRQHandler+0x2c>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <EXTI4_IRQHandler+0x2c>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6153      	str	r3, [r2, #20]
	if(TIMER3_timeout_done())
 8000ec8:	f000 fa34 	bl	8001334 <TIMER3_timeout_done>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <EXTI4_IRQHandler+0x26>
	{
		add_event(alert_Handler);
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <EXTI4_IRQHandler+0x30>)
 8000ed4:	f7ff fe2e 	bl	8000b34 <add_event>
		TIMER3_set_timeout(60); //60 seconds = 1 minute
 8000ed8:	203c      	movs	r0, #60	; 0x3c
 8000eda:	f000 fa19 	bl	8001310 <TIMER3_set_timeout>
	}

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010400 	.word	0x40010400
 8000ee8:	08000181 	.word	0x08000181

08000eec <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	USART2_init(); // for debugging
 8000ef0:	f000 fb44 	bl	800157c <USART2_init>

	init_queue();
 8000ef4:	f7ff fe0a 	bl	8000b0c <init_queue>
	init_sensor_with_interrupt(); // sensor interrupts are not inabled
 8000ef8:	f7ff ff82 	bl	8000e00 <init_sensor_with_interrupt>

	TIMER2_init(); // for monitoring switch state.
 8000efc:	f000 f8be 	bl	800107c <TIMER2_init>
	TIMER3_init(); // for sensor delay
 8000f00:	f000 f8fe 	bl	8001100 <TIMER3_init>
	TIMER4_init(); // for ESP8266 timeout
 8000f04:	f000 f938 	bl	8001178 <TIMER4_init>

	USART1_init(); // for ESP8266
 8000f08:	f000 fb6c 	bl	80015e4 <USART1_init>


	//init_i2c1();
	USART2_write((uint8_t*)("\r\n_______________\r\n"));//For test
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <main+0x34>)
 8000f0e:	f000 fbe5 	bl	80016dc <USART2_write>
	//enable_sensor(); // FOR TESTING

	while(1)
	{

		do_event();
 8000f12:	f7ff fe37 	bl	8000b84 <do_event>
		monitor_switch_state(120); // every 2 minutes
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f000 f830 	bl	8000f7c <monitor_switch_state>
		do_event();
 8000f1c:	e7f9      	b.n	8000f12 <main+0x26>
 8000f1e:	bf00      	nop
 8000f20:	080027f0 	.word	0x080027f0

08000f24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x50>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x16>
		heap_end = &end;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <_sbrk+0x50>)
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <_sbrk+0x54>)
 8000f38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <_sbrk+0x50>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <_sbrk+0x50>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	466a      	mov	r2, sp
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d907      	bls.n	8000f5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f4e:	f000 fe3f 	bl	8001bd0 <__errno>
 8000f52:	4602      	mov	r2, r0
 8000f54:	230c      	movs	r3, #12
 8000f56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	e006      	b.n	8000f6c <_sbrk+0x48>
	}

	heap_end += incr;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <_sbrk+0x50>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <_sbrk+0x50>)
 8000f68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000588 	.word	0x20000588
 8000f78:	20000bd8 	.word	0x20000bd8

08000f7c <monitor_switch_state>:
#include "timers.h"
#include "esp8266_Firebase.h"
#include "usart.h"
#include "event_queue.h"

void monitor_switch_state(uint32_t seconds){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	if(TIMER2_timeout_done()){
 8000f84:	f000 f9b2 	bl	80012ec <TIMER2_timeout_done>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <monitor_switch_state+0x1e>
		add_event(control_Handler);
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <monitor_switch_state+0x28>)
 8000f90:	f7ff fdd0 	bl	8000b34 <add_event>
		TIMER2_set_timeout(seconds);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f997 	bl	80012c8 <TIMER2_set_timeout>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	080001bd 	.word	0x080001bd

08000fa8 <__NVIC_SetPriorityGrouping>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4906      	ldr	r1, [pc, #24]	; (8001024 <__NVIC_EnableIRQ+0x34>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <TIMER2_init>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;


void TIMER2_init(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <TIMER2_init+0x7c>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <TIMER2_init+0x7c>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 800108c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001090:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80010a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80010d2:	2007      	movs	r0, #7
 80010d4:	f7ff ff68 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80010d8:	2100      	movs	r1, #0
 80010da:	201c      	movs	r0, #28
 80010dc:	f7ff ffa4 	bl	8001028 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 80010e0:	201c      	movs	r0, #28
 80010e2:	f7ff ff85 	bl	8000ff0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80010e6:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <TIMER2_init+0x80>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <TIMER2_init+0x80>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	2000058c 	.word	0x2000058c

08001100 <TIMER3_init>:

void TIMER3_init(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <TIMER3_init+0x6c>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <TIMER3_init+0x6c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <TIMER3_init+0x70>)
 8001112:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <TIMER3_init+0x70>)
 800111a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <TIMER3_init+0x70>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <TIMER3_init+0x70>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <TIMER3_init+0x70>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <TIMER3_init+0x70>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <TIMER3_init+0x70>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <TIMER3_init+0x70>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001146:	2007      	movs	r0, #7
 8001148:	f7ff ff2e 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800114c:	2100      	movs	r1, #0
 800114e:	201d      	movs	r0, #29
 8001150:	f7ff ff6a 	bl	8001028 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8001154:	201d      	movs	r0, #29
 8001156:	f7ff ff4b 	bl	8000ff0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800115a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <TIMER3_init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <TIMER3_init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40000400 	.word	0x40000400
 8001174:	20000594 	.word	0x20000594

08001178 <TIMER4_init>:

void TIMER4_init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <TIMER4_init+0x6c>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <TIMER4_init+0x6c>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <TIMER4_init+0x70>)
 800118a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <TIMER4_init+0x70>)
 8001192:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <TIMER4_init+0x70>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <TIMER4_init+0x70>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <TIMER4_init+0x70>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <TIMER4_init+0x70>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <TIMER4_init+0x70>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <TIMER4_init+0x70>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80011be:	2007      	movs	r0, #7
 80011c0:	f7ff fef2 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80011c4:	2100      	movs	r1, #0
 80011c6:	201e      	movs	r0, #30
 80011c8:	f7ff ff2e 	bl	8001028 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80011cc:	201e      	movs	r0, #30
 80011ce:	f7ff ff0f 	bl	8000ff0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011d2:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <TIMER4_init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <TIMER4_init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40000800 	.word	0x40000800
 80011ec:	2000059c 	.word	0x2000059c

080011f0 <TIMER2_enable>:


void TIMER2_enable(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <TIMER3_enable>:

void TIMER3_enable(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <TIMER3_enable+0x18>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <TIMER3_enable+0x18>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40000400 	.word	0x40000400

08001228 <TIMER4_enable>:

void TIMER4_enable(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <TIMER4_enable+0x18>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <TIMER4_enable+0x18>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40000800 	.word	0x40000800

08001244 <TIMER2_disable>:


void TIMER2_disable(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8001248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001252:	f023 0301 	bic.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <TIMER3_disable>:

void TIMER3_disable(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TIMER3_disable+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <TIMER3_disable+0x18>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40000400 	.word	0x40000400

0800127c <TIMER4_disable>:

void TIMER4_disable(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <TIMER4_disable+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <TIMER4_disable+0x18>)
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	6013      	str	r3, [r2, #0]

}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40000800 	.word	0x40000800

08001298 <TIMER4_delay>:
	TIMER3_disable();

}

void TIMER4_delay(uint32_t num_of_sec)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	TIMER4_enable();
 80012a0:	f7ff ffc2 	bl	8001228 <TIMER4_enable>

	timer4.countTicks = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <TIMER4_delay+0x2c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 80012aa:	bf00      	nop
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <TIMER4_delay+0x2c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d8fa      	bhi.n	80012ac <TIMER4_delay+0x14>

	TIMER4_disable();
 80012b6:	f7ff ffe1 	bl	800127c <TIMER4_disable>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000059c 	.word	0x2000059c

080012c8 <TIMER2_set_timeout>:


void TIMER2_set_timeout(uint32_t num_of_sec)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	timer2.targetTick = num_of_sec;
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <TIMER2_set_timeout+0x20>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6053      	str	r3, [r2, #4]
	timer2.countTicks = 0;
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <TIMER2_set_timeout+0x20>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
	TIMER2_enable();
 80012dc:	f7ff ff88 	bl	80011f0 <TIMER2_enable>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000058c 	.word	0x2000058c

080012ec <TIMER2_timeout_done>:

BOOL TIMER2_timeout_done(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <TIMER2_timeout_done+0x20>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <TIMER2_timeout_done+0x20>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d303      	bcc.n	8001304 <TIMER2_timeout_done+0x18>

		TIMER2_disable();
 80012fc:	f7ff ffa2 	bl	8001244 <TIMER2_disable>
		return TRUE;
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <TIMER2_timeout_done+0x1a>
	}
	return FALSE;
 8001304:	2300      	movs	r3, #0

}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000058c 	.word	0x2000058c

08001310 <TIMER3_set_timeout>:


void TIMER3_set_timeout(uint32_t num_of_sec)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <TIMER3_set_timeout+0x20>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6053      	str	r3, [r2, #4]
	timer3.countTicks = 0;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <TIMER3_set_timeout+0x20>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
	TIMER3_enable();
 8001324:	f7ff ff72 	bl	800120c <TIMER3_enable>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000594 	.word	0x20000594

08001334 <TIMER3_timeout_done>:

BOOL TIMER3_timeout_done(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <TIMER3_timeout_done+0x20>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <TIMER3_timeout_done+0x20>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d303      	bcc.n	800134c <TIMER3_timeout_done+0x18>

		TIMER3_disable();
 8001344:	f7ff ff8c 	bl	8001260 <TIMER3_disable>
		return TRUE;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <TIMER3_timeout_done+0x1a>
	}
	return FALSE;
 800134c:	2300      	movs	r3, #0

}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000594 	.word	0x20000594

08001358 <TIMER4_set_timeout>:


void TIMER4_set_timeout(uint32_t num_of_seconds)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	timer4.targetTick = num_of_seconds;
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <TIMER4_set_timeout+0x20>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6053      	str	r3, [r2, #4]
	timer4.countTicks = 0;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <TIMER4_set_timeout+0x20>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
	TIMER4_enable();
 800136c:	f7ff ff5c 	bl	8001228 <TIMER4_enable>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000059c 	.word	0x2000059c

0800137c <TIMER4_timeout_done>:

BOOL TIMER4_timeout_done(void){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

	if(timer4.countTicks >= timer4.targetTick){
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <TIMER4_timeout_done+0x20>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <TIMER4_timeout_done+0x20>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d303      	bcc.n	8001394 <TIMER4_timeout_done+0x18>

		TIMER4_disable();
 800138c:	f7ff ff76 	bl	800127c <TIMER4_disable>
		return TRUE;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <TIMER4_timeout_done+0x1a>
	}
	return FALSE;
 8001394:	2300      	movs	r3, #0

}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000059c 	.word	0x2000059c

080013a0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 80013a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d115      	bne.n	80013de <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~(0x0001);
 80013b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <TIM2_IRQHandler+0x48>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <TIM2_IRQHandler+0x48>)
 80013ca:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer2.countTicks == MAX_COUNT){
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <TIM2_IRQHandler+0x48>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <TIM2_IRQHandler+0x3e>
			timer2.countTicks = 0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <TIM2_IRQHandler+0x48>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER2\r\n"));//For test


}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000058c 	.word	0x2000058c

080013ec <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <TIM3_IRQHandler+0x40>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d113      	bne.n	8001424 <TIM3_IRQHandler+0x38>
	{
		TIM3->SR &= ~(0x0001);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <TIM3_IRQHandler+0x40>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <TIM3_IRQHandler+0x40>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <TIM3_IRQHandler+0x44>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <TIM3_IRQHandler+0x44>)
 8001410:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer3.countTicks == MAX_COUNT){
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <TIM3_IRQHandler+0x44>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <TIM3_IRQHandler+0x38>
			timer3.countTicks = 0;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <TIM3_IRQHandler+0x44>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER3\r\n"));//For test


}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40000400 	.word	0x40000400
 8001430:	20000594 	.word	0x20000594

08001434 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <TIM4_IRQHandler+0x40>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d113      	bne.n	800146c <TIM4_IRQHandler+0x38>
	{
		TIM4->SR &= ~(0x0001);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <TIM4_IRQHandler+0x40>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <TIM4_IRQHandler+0x40>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <TIM4_IRQHandler+0x44>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <TIM4_IRQHandler+0x44>)
 8001458:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer4.countTicks == MAX_COUNT){
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <TIM4_IRQHandler+0x44>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001462:	4293      	cmp	r3, r2
 8001464:	d102      	bne.n	800146c <TIM4_IRQHandler+0x38>
			timer4.countTicks = 0;
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <TIM4_IRQHandler+0x44>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
		}

	}
	// USART2_write((uint8_t*)("\r\nTIMER4\r\n"));//For test

}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40000800 	.word	0x40000800
 8001478:	2000059c 	.word	0x2000059c

0800147c <__NVIC_SetPriorityGrouping>:
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <USART1_NEW_LINE_FOUND_get>:


static BOOL USART1_NEW_LINE_FOUND; // This variable flags a new line in USART1 Rx
static BOOL USART1_NEW_LINE_READ; // This variable needs to be set when new line in USART1 Rx is read

BOOL USART1_NEW_LINE_FOUND_get(void){
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return USART1_NEW_LINE_FOUND;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <USART1_NEW_LINE_FOUND_get+0x10>)
 8001556:	781b      	ldrb	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000bbd 	.word	0x20000bbd

08001564 <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	USART1_NEW_LINE_READ = TRUE;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <USART1_NEW_LINE_READ_set+0x14>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000bbe 	.word	0x20000bbe

0800157c <USART2_init>:

static uint8_t *START;  // for search UART2_write_line
static uint8_t *END;  // for search


void USART2_init(){
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

	/*This program works when TeraTerm speed is set to 9600 and USART_BRR is set to 0x34D.*/

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <USART2_init+0x5c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <USART2_init+0x5c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <USART2_init+0x60>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <USART2_init+0x60>)
 8001592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001596:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <USART2_init+0x60>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <USART2_init+0x60>)
 800159e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80015a2:	6013      	str	r3, [r2, #0]


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <USART2_init+0x5c>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <USART2_init+0x5c>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <USART2_init+0x64>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <USART2_init+0x64>)
 80015b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ba:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <USART2_init+0x64>)
 80015be:	f240 324d 	movw	r2, #845	; 0x34d
 80015c2:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <USART2_init+0x64>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <USART2_init+0x64>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	40004400 	.word	0x40004400

080015e4 <USART1_init>:


void USART1_init(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <USART1_init+0xac>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <USART1_init+0xac>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <USART1_init+0xb0>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <USART1_init+0xb0>)
 80015fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015fe:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <USART1_init+0xb0>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a23      	ldr	r2, [pc, #140]	; (8001694 <USART1_init+0xb0>)
 8001606:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800160a:	6053      	str	r3, [r2, #4]


	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <USART1_init+0xb0>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <USART1_init+0xb0>)
 8001612:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001616:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <USART1_init+0xb0>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <USART1_init+0xb0>)
 800161e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001622:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <USART1_init+0xb0>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <USART1_init+0xb0>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <USART1_init+0xac>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a16      	ldr	r2, [pc, #88]	; (8001690 <USART1_init+0xac>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <USART1_init+0xb4>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <USART1_init+0xb4>)
 8001642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001646:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <USART1_init+0xb4>)
 800164a:	2245      	movs	r2, #69	; 0x45
 800164c:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <USART1_init+0xb4>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <USART1_init+0xb4>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <USART1_init+0xb4>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <USART1_init+0xb4>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001666:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <USART1_init+0xb4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <USART1_init+0xb4>)
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001674:	2007      	movs	r0, #7
 8001676:	f7ff ff01 	bl	800147c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800167a:	2100      	movs	r1, #0
 800167c:	2025      	movs	r0, #37	; 0x25
 800167e:	f7ff ff3d 	bl	80014fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8001682:	2025      	movs	r0, #37	; 0x25
 8001684:	f7ff ff1e 	bl	80014c4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001688:	b662      	cpsie	i
	__enable_irq();

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	40010800 	.word	0x40010800
 8001698:	40013800 	.word	0x40013800

0800169c <USART2_set_buffer_Tx>:


void USART2_set_buffer_Tx(uint8_t *msg){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80016a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a8:	2100      	movs	r1, #0
 80016aa:	480b      	ldr	r0, [pc, #44]	; (80016d8 <USART2_set_buffer_Tx+0x3c>)
 80016ac:	f000 fac5 	bl	8001c3a <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4809      	ldr	r0, [pc, #36]	; (80016d8 <USART2_set_buffer_Tx+0x3c>)
 80016b4:	f000 faea 	bl	8001c8c <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7fe fd59 	bl	8000170 <strlen>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <USART2_set_buffer_Tx+0x3c>)
 80016c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <USART2_set_buffer_Tx+0x3c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200005a4 	.word	0x200005a4

080016dc <USART2_write>:


void USART2_write(uint8_t* msg){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]


	USART2_set_buffer_Tx(msg);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffd9 	bl	800169c <USART2_set_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80016ea:	e014      	b.n	8001716 <USART2_write+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80016ec:	bf00      	nop
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <USART2_write+0x70>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <USART2_write+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <USART2_write+0x74>)
 80016fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <USART2_write+0x74>)
 8001702:	5cd2      	ldrb	r2, [r2, r3]
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <USART2_write+0x70>)
 8001706:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <USART2_write+0x74>)
 800170a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800170e:	3301      	adds	r3, #1
 8001710:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <USART2_write+0x74>)
 8001712:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <USART2_write+0x74>)
 8001718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <USART2_write+0x74>)
 800171e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001722:	429a      	cmp	r2, r3
 8001724:	d3e2      	bcc.n	80016ec <USART2_write+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001726:	bf00      	nop
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <USART2_write+0x70>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001730:	2b40      	cmp	r3, #64	; 0x40
 8001732:	d1f9      	bne.n	8001728 <USART2_write+0x4c>
	usart2.write_index = 0;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <USART2_write+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <USART2_write+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40004400 	.word	0x40004400
 8001750:	200005a4 	.word	0x200005a4

08001754 <USART2_write_line>:


void USART2_write_line(uint8_t *start, uint8_t *end){
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	2100      	movs	r1, #0
 8001764:	4833      	ldr	r0, [pc, #204]	; (8001834 <USART2_write_line+0xe0>)
 8001766:	f000 fa68 	bl	8001c3a <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001774:	3301      	adds	r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0c      	bge.n	8001794 <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <USART2_write_line+0xe0>)
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <USART2_write_line+0xe4>)
 800177e:	4614      	mov	r4, r2
 8001780:	461d      	mov	r5, r3
 8001782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 800178a:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <USART2_write_line+0xe0>)
 800178c:	2213      	movs	r2, #19
 800178e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001792:	e01a      	b.n	80017ca <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <USART2_write_line+0xe0>)
 80017a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(start < end){
 80017a6:	e00c      	b.n	80017c2 <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7819      	ldrb	r1, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <USART2_write_line+0xe0>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	460a      	mov	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
			start++;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
			i++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
		while(start < end){
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3ee      	bcc.n	80017a8 <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <USART2_write_line+0xe0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	while(usart2.write_index < usart2.Tx_len)
 80017d2:	e014      	b.n	80017fe <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80017d4:	bf00      	nop
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <USART2_write_line+0xe8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f9      	beq.n	80017d6 <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <USART2_write_line+0xe0>)
 80017e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <USART2_write_line+0xe0>)
 80017ea:	5cd2      	ldrb	r2, [r2, r3]
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <USART2_write_line+0xe8>)
 80017ee:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <USART2_write_line+0xe0>)
 80017f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <USART2_write_line+0xe0>)
 80017fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <USART2_write_line+0xe0>)
 8001800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <USART2_write_line+0xe0>)
 8001806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800180a:	429a      	cmp	r2, r3
 800180c:	d3e2      	bcc.n	80017d4 <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800180e:	bf00      	nop
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <USART2_write_line+0xe8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001818:	2b40      	cmp	r3, #64	; 0x40
 800181a:	d1f9      	bne.n	8001810 <USART2_write_line+0xbc>
	usart2.write_index = 0;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <USART2_write_line+0xe0>)
 800181e:	2200      	movs	r2, #0
 8001820:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <USART2_write_line+0xe0>)
 8001826:	2200      	movs	r2, #0
 8001828:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	200005a4 	.word	0x200005a4
 8001838:	08002804 	.word	0x08002804
 800183c:	40004400 	.word	0x40004400

08001840 <USART1_write>:


void USART1_write(uint8_t *command){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	USART1_set_buffer_Tx(command);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f841 	bl	80018d0 <USART1_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART1_set_buffer_Rx();
 800184e:	f000 f85f 	bl	8001910 <USART1_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	USART1_NEW_LINE_FOUND = FALSE;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <USART1_write+0x80>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
	USART1_NEW_LINE_READ = TRUE;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <USART1_write+0x84>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 800185e:	e014      	b.n	800188a <USART1_write+0x4a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001860:	bf00      	nop
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <USART1_write+0x88>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f9      	beq.n	8001862 <USART1_write+0x22>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <USART1_write+0x8c>)
 8001870:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <USART1_write+0x8c>)
 8001876:	5cd2      	ldrb	r2, [r2, r3]
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <USART1_write+0x88>)
 800187a:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <USART1_write+0x8c>)
 800187e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001882:	3301      	adds	r3, #1
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <USART1_write+0x8c>)
 8001886:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <USART1_write+0x8c>)
 800188c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <USART1_write+0x8c>)
 8001892:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001896:	429a      	cmp	r2, r3
 8001898:	d3e2      	bcc.n	8001860 <USART1_write+0x20>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800189a:	bf00      	nop
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <USART1_write+0x88>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	2b40      	cmp	r3, #64	; 0x40
 80018a6:	d1f9      	bne.n	800189c <USART1_write+0x5c>
	usart1.write_index = 0;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <USART1_write+0x8c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <USART1_write+0x8c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000bbd 	.word	0x20000bbd
 80018c4:	20000bbe 	.word	0x20000bbe
 80018c8:	40013800 	.word	0x40013800
 80018cc:	200007ac 	.word	0x200007ac

080018d0 <USART1_set_buffer_Tx>:


void USART1_set_buffer_Tx(uint8_t *command){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	2100      	movs	r1, #0
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <USART1_set_buffer_Tx+0x3c>)
 80018e0:	f000 f9ab 	bl	8001c3a <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4809      	ldr	r0, [pc, #36]	; (800190c <USART1_set_buffer_Tx+0x3c>)
 80018e8:	f000 f9d0 	bl	8001c8c <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7fe fc3f 	bl	8000170 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <USART1_set_buffer_Tx+0x3c>)
 80018f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <USART1_set_buffer_Tx+0x3c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200007ac 	.word	0x200007ac

08001910 <USART1_set_buffer_Rx>:


void USART1_set_buffer_Rx(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001918:	2100      	movs	r1, #0
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <USART1_set_buffer_Rx+0x30>)
 800191c:	f000 f98d 	bl	8001c3a <memset>
	usart1.Rx_len = 0;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <USART1_set_buffer_Rx+0x34>)
 8001922:	2200      	movs	r2, #0
 8001924:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <USART1_set_buffer_Rx+0x34>)
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <USART1_set_buffer_Rx+0x38>)
 8001932:	4a03      	ldr	r2, [pc, #12]	; (8001940 <USART1_set_buffer_Rx+0x30>)
 8001934:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <USART1_set_buffer_Rx+0x3c>)
 8001938:	4a01      	ldr	r2, [pc, #4]	; (8001940 <USART1_set_buffer_Rx+0x30>)
 800193a:	601a      	str	r2, [r3, #0]

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200009ac 	.word	0x200009ac
 8001944:	200007ac 	.word	0x200007ac
 8001948:	20000bc0 	.word	0x20000bc0
 800194c:	20000bc4 	.word	0x20000bc4

08001950 <USART1_search_buffer_Rx>:


STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <USART1_search_buffer_Rx+0x9c>)
 800195c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001960:	3301      	adds	r3, #1
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	d236      	bcs.n	80019d6 <USART1_search_buffer_Rx+0x86>

		START = END;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <USART1_search_buffer_Rx+0xa0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <USART1_search_buffer_Rx+0xa4>)
 800196e:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <USART1_search_buffer_Rx+0x9c>)
 8001972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <USART1_search_buffer_Rx+0xa8>)
 8001978:	4413      	add	r3, r2
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <USART1_search_buffer_Rx+0xa0>)
 800197c:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	481d      	ldr	r0, [pc, #116]	; (80019f8 <USART1_search_buffer_Rx+0xa8>)
 8001982:	f000 f98b 	bl	8001c9c <strstr>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <USART1_search_buffer_Rx+0xa4>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <USART1_search_buffer_Rx+0xa0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff fedc 	bl	8001754 <USART2_write_line>
			return (uint32_t)PASS;
 800199c:	2300      	movs	r3, #0
 800199e:	e021      	b.n	80019e4 <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	4815      	ldr	r0, [pc, #84]	; (80019f8 <USART1_search_buffer_Rx+0xa8>)
 80019a4:	f000 f97a 	bl	8001c9c <strstr>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <USART1_search_buffer_Rx+0xa4>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <USART1_search_buffer_Rx+0xa0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f7ff fecb 	bl	8001754 <USART2_write_line>
			return (uint32_t)FAIL;
 80019be:	2302      	movs	r3, #2
 80019c0:	e010      	b.n	80019e4 <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <USART1_search_buffer_Rx+0xa4>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <USART1_search_buffer_Rx+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff fec1 	bl	8001754 <USART2_write_line>
			return (uint32_t)STANDBY;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e006      	b.n	80019e4 <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <USART1_search_buffer_Rx+0xac>)
 80019d8:	f7ff fe80 	bl	80016dc <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <USART1_search_buffer_Rx+0xa8>)
 80019de:	f7ff fe7d 	bl	80016dc <USART2_write>
		return (uint32_t)FAIL;
 80019e2:	2302      	movs	r3, #2
	}

}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200007ac 	.word	0x200007ac
 80019f0:	20000bc4 	.word	0x20000bc4
 80019f4:	20000bc0 	.word	0x20000bc0
 80019f8:	200009ac 	.word	0x200009ac
 80019fc:	08002818 	.word	0x08002818

08001a00 <USART1_check_state_buffer_Rx>:


SWITCH_STATE USART1_check_state_buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <USART1_check_state_buffer_Rx+0xb8>)
 8001a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a12:	3301      	adds	r3, #1
 8001a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a18:	d242      	bcs.n	8001aa0 <USART1_check_state_buffer_Rx+0xa0>

		START = END;
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <USART1_check_state_buffer_Rx+0xbc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <USART1_check_state_buffer_Rx+0xc0>)
 8001a20:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <USART1_check_state_buffer_Rx+0xb8>)
 8001a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <USART1_check_state_buffer_Rx+0xbc>)
 8001a2e:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	4824      	ldr	r0, [pc, #144]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001a34:	f000 f932 	bl	8001c9c <strstr>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <USART1_check_state_buffer_Rx+0x52>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); //write response to screen
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <USART1_check_state_buffer_Rx+0xc0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <USART1_check_state_buffer_Rx+0xbc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff fe83 	bl	8001754 <USART2_write_line>
			return (uint32_t)ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02d      	b.n	8001aae <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	481b      	ldr	r0, [pc, #108]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001a56:	f000 f921 	bl	8001c9c <strstr>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <USART1_check_state_buffer_Rx+0x74>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <USART1_check_state_buffer_Rx+0xc0>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <USART1_check_state_buffer_Rx+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff fe72 	bl	8001754 <USART2_write_line>
			return (uint32_t)OFF;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e01c      	b.n	8001aae <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001a78:	f000 f910 	bl	8001c9c <strstr>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <USART1_check_state_buffer_Rx+0x96>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <USART1_check_state_buffer_Rx+0xc0>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <USART1_check_state_buffer_Rx+0xbc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	f7ff fe61 	bl	8001754 <USART2_write_line>
			return (uint32_t)NO_PATH;
 8001a92:	2302      	movs	r3, #2
 8001a94:	e00b      	b.n	8001aae <USART1_check_state_buffer_Rx+0xae>
		}
		else{
			USART2_write((uint8_t*)usart1.Rx);//for debuging
 8001a96:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001a98:	f7ff fe20 	bl	80016dc <USART2_write>
			return (uint32_t)NON;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e006      	b.n	8001aae <USART1_check_state_buffer_Rx+0xae>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8001aa0:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <USART1_check_state_buffer_Rx+0xc8>)
 8001aa2:	f7ff fe1b 	bl	80016dc <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <USART1_check_state_buffer_Rx+0xc4>)
 8001aa8:	f7ff fe18 	bl	80016dc <USART2_write>
		return (uint32_t)NO_PATH;
 8001aac:	2302      	movs	r3, #2
	}

}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200007ac 	.word	0x200007ac
 8001abc:	20000bc4 	.word	0x20000bc4
 8001ac0:	20000bc0 	.word	0x20000bc0
 8001ac4:	200009ac 	.word	0x200009ac
 8001ac8:	08002818 	.word	0x08002818

08001acc <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <USART1_IRQHandler+0x9c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d141      	bne.n	8001b60 <USART1_IRQHandler+0x94>

		c = USART1->DR; // clear RXNE bit
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <USART1_IRQHandler+0x9c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <USART1_IRQHandler+0xa0>)
 8001ae4:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001ae8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001aec:	3301      	adds	r3, #1
 8001aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af2:	d303      	bcc.n	8001afc <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001afe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001b02:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <USART1_IRQHandler+0xa0>)
 8001b04:	7811      	ldrb	r1, [r2, #0]
 8001b06:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001b12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001b1a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <USART1_IRQHandler+0xa4>)
 8001b28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && USART1_NEW_LINE_READ){
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <USART1_IRQHandler+0xa0>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b0a      	cmp	r3, #10
 8001b32:	d10a      	bne.n	8001b4a <USART1_IRQHandler+0x7e>
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <USART1_IRQHandler+0xa8>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <USART1_IRQHandler+0x7e>
			USART1_NEW_LINE_FOUND = TRUE;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <USART1_IRQHandler+0xac>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ = FALSE;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <USART1_IRQHandler+0xa8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]


	}


}
 8001b48:	e00a      	b.n	8001b60 <USART1_IRQHandler+0x94>
		else if(c != (uint8_t)'\n' && USART1_NEW_LINE_READ){
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <USART1_IRQHandler+0xa0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b0a      	cmp	r3, #10
 8001b50:	d006      	beq.n	8001b60 <USART1_IRQHandler+0x94>
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <USART1_IRQHandler+0xa8>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <USART1_IRQHandler+0x94>
			USART1_NEW_LINE_FOUND = FALSE;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <USART1_IRQHandler+0xac>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	20000bbc 	.word	0x20000bbc
 8001b70:	200007ac 	.word	0x200007ac
 8001b74:	20000bbe 	.word	0x20000bbe
 8001b78:	20000bbd 	.word	0x20000bbd

08001b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ba6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001baa:	f000 f817 	bl	8001bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7ff f99d 	bl	8000eec <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   r0, =_estack
 8001bb4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001bc0:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 8001bc4:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001bc8:	20000bd8 	.word	0x20000bd8

08001bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC1_2_IRQHandler>
	...

08001bd0 <__errno>:
 8001bd0:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <__errno+0x8>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000070 	.word	0x20000070

08001bdc <__libc_init_array>:
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	2500      	movs	r5, #0
 8001be0:	4e0c      	ldr	r6, [pc, #48]	; (8001c14 <__libc_init_array+0x38>)
 8001be2:	4c0d      	ldr	r4, [pc, #52]	; (8001c18 <__libc_init_array+0x3c>)
 8001be4:	1ba4      	subs	r4, r4, r6
 8001be6:	10a4      	asrs	r4, r4, #2
 8001be8:	42a5      	cmp	r5, r4
 8001bea:	d109      	bne.n	8001c00 <__libc_init_array+0x24>
 8001bec:	f000 fc58 	bl	80024a0 <_init>
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	4e0a      	ldr	r6, [pc, #40]	; (8001c1c <__libc_init_array+0x40>)
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <__libc_init_array+0x44>)
 8001bf6:	1ba4      	subs	r4, r4, r6
 8001bf8:	10a4      	asrs	r4, r4, #2
 8001bfa:	42a5      	cmp	r5, r4
 8001bfc:	d105      	bne.n	8001c0a <__libc_init_array+0x2e>
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
 8001c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c04:	4798      	blx	r3
 8001c06:	3501      	adds	r5, #1
 8001c08:	e7ee      	b.n	8001be8 <__libc_init_array+0xc>
 8001c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c0e:	4798      	blx	r3
 8001c10:	3501      	adds	r5, #1
 8001c12:	e7f2      	b.n	8001bfa <__libc_init_array+0x1e>
 8001c14:	08002874 	.word	0x08002874
 8001c18:	08002874 	.word	0x08002874
 8001c1c:	08002874 	.word	0x08002874
 8001c20:	08002878 	.word	0x08002878

08001c24 <memcpy>:
 8001c24:	b510      	push	{r4, lr}
 8001c26:	1e43      	subs	r3, r0, #1
 8001c28:	440a      	add	r2, r1
 8001c2a:	4291      	cmp	r1, r2
 8001c2c:	d100      	bne.n	8001c30 <memcpy+0xc>
 8001c2e:	bd10      	pop	{r4, pc}
 8001c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c38:	e7f7      	b.n	8001c2a <memcpy+0x6>

08001c3a <memset>:
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4402      	add	r2, r0
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d100      	bne.n	8001c44 <memset+0xa>
 8001c42:	4770      	bx	lr
 8001c44:	f803 1b01 	strb.w	r1, [r3], #1
 8001c48:	e7f9      	b.n	8001c3e <memset+0x4>
	...

08001c4c <siprintf>:
 8001c4c:	b40e      	push	{r1, r2, r3}
 8001c4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c52:	b500      	push	{lr}
 8001c54:	b09c      	sub	sp, #112	; 0x70
 8001c56:	ab1d      	add	r3, sp, #116	; 0x74
 8001c58:	9002      	str	r0, [sp, #8]
 8001c5a:	9006      	str	r0, [sp, #24]
 8001c5c:	9107      	str	r1, [sp, #28]
 8001c5e:	9104      	str	r1, [sp, #16]
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <siprintf+0x38>)
 8001c62:	4909      	ldr	r1, [pc, #36]	; (8001c88 <siprintf+0x3c>)
 8001c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c68:	9105      	str	r1, [sp, #20]
 8001c6a:	6800      	ldr	r0, [r0, #0]
 8001c6c:	a902      	add	r1, sp, #8
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f000 f888 	bl	8001d84 <_svfiprintf_r>
 8001c74:	2200      	movs	r2, #0
 8001c76:	9b02      	ldr	r3, [sp, #8]
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	b01c      	add	sp, #112	; 0x70
 8001c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c80:	b003      	add	sp, #12
 8001c82:	4770      	bx	lr
 8001c84:	20000070 	.word	0x20000070
 8001c88:	ffff0208 	.word	0xffff0208

08001c8c <strcpy>:
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c92:	f803 2b01 	strb.w	r2, [r3], #1
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	d1f9      	bne.n	8001c8e <strcpy+0x2>
 8001c9a:	4770      	bx	lr

08001c9c <strstr>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	7803      	ldrb	r3, [r0, #0]
 8001ca0:	b17b      	cbz	r3, 8001cc2 <strstr+0x26>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	7823      	ldrb	r3, [r4, #0]
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	1c66      	adds	r6, r4, #1
 8001caa:	b17b      	cbz	r3, 8001ccc <strstr+0x30>
 8001cac:	1e4a      	subs	r2, r1, #1
 8001cae:	1e63      	subs	r3, r4, #1
 8001cb0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001cb4:	b14d      	cbz	r5, 8001cca <strstr+0x2e>
 8001cb6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001cba:	4634      	mov	r4, r6
 8001cbc:	42af      	cmp	r7, r5
 8001cbe:	d0f7      	beq.n	8001cb0 <strstr+0x14>
 8001cc0:	e7f0      	b.n	8001ca4 <strstr+0x8>
 8001cc2:	780b      	ldrb	r3, [r1, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf18      	it	ne
 8001cc8:	2000      	movne	r0, #0
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	e7fc      	b.n	8001cca <strstr+0x2e>

08001cd0 <__ssputs_r>:
 8001cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd4:	688e      	ldr	r6, [r1, #8]
 8001cd6:	4682      	mov	sl, r0
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	460c      	mov	r4, r1
 8001cdc:	4690      	mov	r8, r2
 8001cde:	4699      	mov	r9, r3
 8001ce0:	d837      	bhi.n	8001d52 <__ssputs_r+0x82>
 8001ce2:	898a      	ldrh	r2, [r1, #12]
 8001ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ce8:	d031      	beq.n	8001d4e <__ssputs_r+0x7e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	6825      	ldr	r5, [r4, #0]
 8001cee:	6909      	ldr	r1, [r1, #16]
 8001cf0:	1a6f      	subs	r7, r5, r1
 8001cf2:	6965      	ldr	r5, [r4, #20]
 8001cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001cf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001cfc:	f109 0301 	add.w	r3, r9, #1
 8001d00:	443b      	add	r3, r7
 8001d02:	429d      	cmp	r5, r3
 8001d04:	bf38      	it	cc
 8001d06:	461d      	movcc	r5, r3
 8001d08:	0553      	lsls	r3, r2, #21
 8001d0a:	d530      	bpl.n	8001d6e <__ssputs_r+0x9e>
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f000 fb2d 	bl	800236c <_malloc_r>
 8001d12:	4606      	mov	r6, r0
 8001d14:	b950      	cbnz	r0, 8001d2c <__ssputs_r+0x5c>
 8001d16:	230c      	movs	r3, #12
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f8ca 3000 	str.w	r3, [sl]
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d26:	81a3      	strh	r3, [r4, #12]
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	463a      	mov	r2, r7
 8001d2e:	6921      	ldr	r1, [r4, #16]
 8001d30:	f7ff ff78 	bl	8001c24 <memcpy>
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3e:	81a3      	strh	r3, [r4, #12]
 8001d40:	6126      	str	r6, [r4, #16]
 8001d42:	443e      	add	r6, r7
 8001d44:	6026      	str	r6, [r4, #0]
 8001d46:	464e      	mov	r6, r9
 8001d48:	6165      	str	r5, [r4, #20]
 8001d4a:	1bed      	subs	r5, r5, r7
 8001d4c:	60a5      	str	r5, [r4, #8]
 8001d4e:	454e      	cmp	r6, r9
 8001d50:	d900      	bls.n	8001d54 <__ssputs_r+0x84>
 8001d52:	464e      	mov	r6, r9
 8001d54:	4632      	mov	r2, r6
 8001d56:	4641      	mov	r1, r8
 8001d58:	6820      	ldr	r0, [r4, #0]
 8001d5a:	f000 faa1 	bl	80022a0 <memmove>
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	2000      	movs	r0, #0
 8001d62:	1b9b      	subs	r3, r3, r6
 8001d64:	60a3      	str	r3, [r4, #8]
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	441e      	add	r6, r3
 8001d6a:	6026      	str	r6, [r4, #0]
 8001d6c:	e7dc      	b.n	8001d28 <__ssputs_r+0x58>
 8001d6e:	462a      	mov	r2, r5
 8001d70:	f000 fb56 	bl	8002420 <_realloc_r>
 8001d74:	4606      	mov	r6, r0
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d1e2      	bne.n	8001d40 <__ssputs_r+0x70>
 8001d7a:	6921      	ldr	r1, [r4, #16]
 8001d7c:	4650      	mov	r0, sl
 8001d7e:	f000 faa9 	bl	80022d4 <_free_r>
 8001d82:	e7c8      	b.n	8001d16 <__ssputs_r+0x46>

08001d84 <_svfiprintf_r>:
 8001d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d88:	461d      	mov	r5, r3
 8001d8a:	898b      	ldrh	r3, [r1, #12]
 8001d8c:	b09d      	sub	sp, #116	; 0x74
 8001d8e:	061f      	lsls	r7, r3, #24
 8001d90:	4680      	mov	r8, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4616      	mov	r6, r2
 8001d96:	d50f      	bpl.n	8001db8 <_svfiprintf_r+0x34>
 8001d98:	690b      	ldr	r3, [r1, #16]
 8001d9a:	b96b      	cbnz	r3, 8001db8 <_svfiprintf_r+0x34>
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	f000 fae5 	bl	800236c <_malloc_r>
 8001da2:	6020      	str	r0, [r4, #0]
 8001da4:	6120      	str	r0, [r4, #16]
 8001da6:	b928      	cbnz	r0, 8001db4 <_svfiprintf_r+0x30>
 8001da8:	230c      	movs	r3, #12
 8001daa:	f8c8 3000 	str.w	r3, [r8]
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	e0c8      	b.n	8001f46 <_svfiprintf_r+0x1c2>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	6163      	str	r3, [r4, #20]
 8001db8:	2300      	movs	r3, #0
 8001dba:	9309      	str	r3, [sp, #36]	; 0x24
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001dc2:	2330      	movs	r3, #48	; 0x30
 8001dc4:	f04f 0b01 	mov.w	fp, #1
 8001dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001dcc:	9503      	str	r5, [sp, #12]
 8001dce:	4637      	mov	r7, r6
 8001dd0:	463d      	mov	r5, r7
 8001dd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001dd6:	b10b      	cbz	r3, 8001ddc <_svfiprintf_r+0x58>
 8001dd8:	2b25      	cmp	r3, #37	; 0x25
 8001dda:	d13e      	bne.n	8001e5a <_svfiprintf_r+0xd6>
 8001ddc:	ebb7 0a06 	subs.w	sl, r7, r6
 8001de0:	d00b      	beq.n	8001dfa <_svfiprintf_r+0x76>
 8001de2:	4653      	mov	r3, sl
 8001de4:	4632      	mov	r2, r6
 8001de6:	4621      	mov	r1, r4
 8001de8:	4640      	mov	r0, r8
 8001dea:	f7ff ff71 	bl	8001cd0 <__ssputs_r>
 8001dee:	3001      	adds	r0, #1
 8001df0:	f000 80a4 	beq.w	8001f3c <_svfiprintf_r+0x1b8>
 8001df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df6:	4453      	add	r3, sl
 8001df8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dfa:	783b      	ldrb	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 809d 	beq.w	8001f3c <_svfiprintf_r+0x1b8>
 8001e02:	2300      	movs	r3, #0
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e0c:	9304      	str	r3, [sp, #16]
 8001e0e:	9307      	str	r3, [sp, #28]
 8001e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e14:	931a      	str	r3, [sp, #104]	; 0x68
 8001e16:	462f      	mov	r7, r5
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001e1e:	4850      	ldr	r0, [pc, #320]	; (8001f60 <_svfiprintf_r+0x1dc>)
 8001e20:	f000 fa30 	bl	8002284 <memchr>
 8001e24:	9b04      	ldr	r3, [sp, #16]
 8001e26:	b9d0      	cbnz	r0, 8001e5e <_svfiprintf_r+0xda>
 8001e28:	06d9      	lsls	r1, r3, #27
 8001e2a:	bf44      	itt	mi
 8001e2c:	2220      	movmi	r2, #32
 8001e2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e32:	071a      	lsls	r2, r3, #28
 8001e34:	bf44      	itt	mi
 8001e36:	222b      	movmi	r2, #43	; 0x2b
 8001e38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e3c:	782a      	ldrb	r2, [r5, #0]
 8001e3e:	2a2a      	cmp	r2, #42	; 0x2a
 8001e40:	d015      	beq.n	8001e6e <_svfiprintf_r+0xea>
 8001e42:	462f      	mov	r7, r5
 8001e44:	2000      	movs	r0, #0
 8001e46:	250a      	movs	r5, #10
 8001e48:	9a07      	ldr	r2, [sp, #28]
 8001e4a:	4639      	mov	r1, r7
 8001e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e50:	3b30      	subs	r3, #48	; 0x30
 8001e52:	2b09      	cmp	r3, #9
 8001e54:	d94d      	bls.n	8001ef2 <_svfiprintf_r+0x16e>
 8001e56:	b1b8      	cbz	r0, 8001e88 <_svfiprintf_r+0x104>
 8001e58:	e00f      	b.n	8001e7a <_svfiprintf_r+0xf6>
 8001e5a:	462f      	mov	r7, r5
 8001e5c:	e7b8      	b.n	8001dd0 <_svfiprintf_r+0x4c>
 8001e5e:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <_svfiprintf_r+0x1dc>)
 8001e60:	463d      	mov	r5, r7
 8001e62:	1a80      	subs	r0, r0, r2
 8001e64:	fa0b f000 	lsl.w	r0, fp, r0
 8001e68:	4318      	orrs	r0, r3
 8001e6a:	9004      	str	r0, [sp, #16]
 8001e6c:	e7d3      	b.n	8001e16 <_svfiprintf_r+0x92>
 8001e6e:	9a03      	ldr	r2, [sp, #12]
 8001e70:	1d11      	adds	r1, r2, #4
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	9103      	str	r1, [sp, #12]
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	db01      	blt.n	8001e7e <_svfiprintf_r+0xfa>
 8001e7a:	9207      	str	r2, [sp, #28]
 8001e7c:	e004      	b.n	8001e88 <_svfiprintf_r+0x104>
 8001e7e:	4252      	negs	r2, r2
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	9207      	str	r2, [sp, #28]
 8001e86:	9304      	str	r3, [sp, #16]
 8001e88:	783b      	ldrb	r3, [r7, #0]
 8001e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8001e8c:	d10c      	bne.n	8001ea8 <_svfiprintf_r+0x124>
 8001e8e:	787b      	ldrb	r3, [r7, #1]
 8001e90:	2b2a      	cmp	r3, #42	; 0x2a
 8001e92:	d133      	bne.n	8001efc <_svfiprintf_r+0x178>
 8001e94:	9b03      	ldr	r3, [sp, #12]
 8001e96:	3702      	adds	r7, #2
 8001e98:	1d1a      	adds	r2, r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	9203      	str	r2, [sp, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bfb8      	it	lt
 8001ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ea6:	9305      	str	r3, [sp, #20]
 8001ea8:	4d2e      	ldr	r5, [pc, #184]	; (8001f64 <_svfiprintf_r+0x1e0>)
 8001eaa:	2203      	movs	r2, #3
 8001eac:	7839      	ldrb	r1, [r7, #0]
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f000 f9e8 	bl	8002284 <memchr>
 8001eb4:	b138      	cbz	r0, 8001ec6 <_svfiprintf_r+0x142>
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	1b40      	subs	r0, r0, r5
 8001eba:	fa03 f000 	lsl.w	r0, r3, r0
 8001ebe:	9b04      	ldr	r3, [sp, #16]
 8001ec0:	3701      	adds	r7, #1
 8001ec2:	4303      	orrs	r3, r0
 8001ec4:	9304      	str	r3, [sp, #16]
 8001ec6:	7839      	ldrb	r1, [r7, #0]
 8001ec8:	2206      	movs	r2, #6
 8001eca:	4827      	ldr	r0, [pc, #156]	; (8001f68 <_svfiprintf_r+0x1e4>)
 8001ecc:	1c7e      	adds	r6, r7, #1
 8001ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ed2:	f000 f9d7 	bl	8002284 <memchr>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d038      	beq.n	8001f4c <_svfiprintf_r+0x1c8>
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <_svfiprintf_r+0x1e8>)
 8001edc:	bb13      	cbnz	r3, 8001f24 <_svfiprintf_r+0x1a0>
 8001ede:	9b03      	ldr	r3, [sp, #12]
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	f023 0307 	bic.w	r3, r3, #7
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eec:	444b      	add	r3, r9
 8001eee:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef0:	e76d      	b.n	8001dce <_svfiprintf_r+0x4a>
 8001ef2:	fb05 3202 	mla	r2, r5, r2, r3
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	460f      	mov	r7, r1
 8001efa:	e7a6      	b.n	8001e4a <_svfiprintf_r+0xc6>
 8001efc:	2300      	movs	r3, #0
 8001efe:	250a      	movs	r5, #10
 8001f00:	4619      	mov	r1, r3
 8001f02:	3701      	adds	r7, #1
 8001f04:	9305      	str	r3, [sp, #20]
 8001f06:	4638      	mov	r0, r7
 8001f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f0c:	3a30      	subs	r2, #48	; 0x30
 8001f0e:	2a09      	cmp	r2, #9
 8001f10:	d903      	bls.n	8001f1a <_svfiprintf_r+0x196>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0c8      	beq.n	8001ea8 <_svfiprintf_r+0x124>
 8001f16:	9105      	str	r1, [sp, #20]
 8001f18:	e7c6      	b.n	8001ea8 <_svfiprintf_r+0x124>
 8001f1a:	fb05 2101 	mla	r1, r5, r1, r2
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4607      	mov	r7, r0
 8001f22:	e7f0      	b.n	8001f06 <_svfiprintf_r+0x182>
 8001f24:	ab03      	add	r3, sp, #12
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	4622      	mov	r2, r4
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_svfiprintf_r+0x1ec>)
 8001f2c:	a904      	add	r1, sp, #16
 8001f2e:	4640      	mov	r0, r8
 8001f30:	f3af 8000 	nop.w
 8001f34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f38:	4681      	mov	r9, r0
 8001f3a:	d1d6      	bne.n	8001eea <_svfiprintf_r+0x166>
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	065b      	lsls	r3, r3, #25
 8001f40:	f53f af35 	bmi.w	8001dae <_svfiprintf_r+0x2a>
 8001f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f46:	b01d      	add	sp, #116	; 0x74
 8001f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f4c:	ab03      	add	r3, sp, #12
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4622      	mov	r2, r4
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_svfiprintf_r+0x1ec>)
 8001f54:	a904      	add	r1, sp, #16
 8001f56:	4640      	mov	r0, r8
 8001f58:	f000 f882 	bl	8002060 <_printf_i>
 8001f5c:	e7ea      	b.n	8001f34 <_svfiprintf_r+0x1b0>
 8001f5e:	bf00      	nop
 8001f60:	0800283f 	.word	0x0800283f
 8001f64:	08002845 	.word	0x08002845
 8001f68:	08002849 	.word	0x08002849
 8001f6c:	00000000 	.word	0x00000000
 8001f70:	08001cd1 	.word	0x08001cd1

08001f74 <_printf_common>:
 8001f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f78:	4691      	mov	r9, r2
 8001f7a:	461f      	mov	r7, r3
 8001f7c:	688a      	ldr	r2, [r1, #8]
 8001f7e:	690b      	ldr	r3, [r1, #16]
 8001f80:	4606      	mov	r6, r0
 8001f82:	4293      	cmp	r3, r2
 8001f84:	bfb8      	it	lt
 8001f86:	4613      	movlt	r3, r2
 8001f88:	f8c9 3000 	str.w	r3, [r9]
 8001f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f90:	460c      	mov	r4, r1
 8001f92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f96:	b112      	cbz	r2, 8001f9e <_printf_common+0x2a>
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f8c9 3000 	str.w	r3, [r9]
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	0699      	lsls	r1, r3, #26
 8001fa2:	bf42      	ittt	mi
 8001fa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001fa8:	3302      	addmi	r3, #2
 8001faa:	f8c9 3000 	strmi.w	r3, [r9]
 8001fae:	6825      	ldr	r5, [r4, #0]
 8001fb0:	f015 0506 	ands.w	r5, r5, #6
 8001fb4:	d107      	bne.n	8001fc6 <_printf_common+0x52>
 8001fb6:	f104 0a19 	add.w	sl, r4, #25
 8001fba:	68e3      	ldr	r3, [r4, #12]
 8001fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	42ab      	cmp	r3, r5
 8001fc4:	dc29      	bgt.n	800201a <_printf_common+0xa6>
 8001fc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	3300      	adds	r3, #0
 8001fce:	bf18      	it	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	0692      	lsls	r2, r2, #26
 8001fd4:	d42e      	bmi.n	8002034 <_printf_common+0xc0>
 8001fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fda:	4639      	mov	r1, r7
 8001fdc:	4630      	mov	r0, r6
 8001fde:	47c0      	blx	r8
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	d021      	beq.n	8002028 <_printf_common+0xb4>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	68e5      	ldr	r5, [r4, #12]
 8001fe8:	f003 0306 	and.w	r3, r3, #6
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	bf18      	it	ne
 8001ff0:	2500      	movne	r5, #0
 8001ff2:	f8d9 2000 	ldr.w	r2, [r9]
 8001ff6:	f04f 0900 	mov.w	r9, #0
 8001ffa:	bf08      	it	eq
 8001ffc:	1aad      	subeq	r5, r5, r2
 8001ffe:	68a3      	ldr	r3, [r4, #8]
 8002000:	6922      	ldr	r2, [r4, #16]
 8002002:	bf08      	it	eq
 8002004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002008:	4293      	cmp	r3, r2
 800200a:	bfc4      	itt	gt
 800200c:	1a9b      	subgt	r3, r3, r2
 800200e:	18ed      	addgt	r5, r5, r3
 8002010:	341a      	adds	r4, #26
 8002012:	454d      	cmp	r5, r9
 8002014:	d11a      	bne.n	800204c <_printf_common+0xd8>
 8002016:	2000      	movs	r0, #0
 8002018:	e008      	b.n	800202c <_printf_common+0xb8>
 800201a:	2301      	movs	r3, #1
 800201c:	4652      	mov	r2, sl
 800201e:	4639      	mov	r1, r7
 8002020:	4630      	mov	r0, r6
 8002022:	47c0      	blx	r8
 8002024:	3001      	adds	r0, #1
 8002026:	d103      	bne.n	8002030 <_printf_common+0xbc>
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002030:	3501      	adds	r5, #1
 8002032:	e7c2      	b.n	8001fba <_printf_common+0x46>
 8002034:	2030      	movs	r0, #48	; 0x30
 8002036:	18e1      	adds	r1, r4, r3
 8002038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002042:	4422      	add	r2, r4
 8002044:	3302      	adds	r3, #2
 8002046:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800204a:	e7c4      	b.n	8001fd6 <_printf_common+0x62>
 800204c:	2301      	movs	r3, #1
 800204e:	4622      	mov	r2, r4
 8002050:	4639      	mov	r1, r7
 8002052:	4630      	mov	r0, r6
 8002054:	47c0      	blx	r8
 8002056:	3001      	adds	r0, #1
 8002058:	d0e6      	beq.n	8002028 <_printf_common+0xb4>
 800205a:	f109 0901 	add.w	r9, r9, #1
 800205e:	e7d8      	b.n	8002012 <_printf_common+0x9e>

08002060 <_printf_i>:
 8002060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002064:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002068:	460c      	mov	r4, r1
 800206a:	7e09      	ldrb	r1, [r1, #24]
 800206c:	b085      	sub	sp, #20
 800206e:	296e      	cmp	r1, #110	; 0x6e
 8002070:	4617      	mov	r7, r2
 8002072:	4606      	mov	r6, r0
 8002074:	4698      	mov	r8, r3
 8002076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002078:	f000 80b3 	beq.w	80021e2 <_printf_i+0x182>
 800207c:	d822      	bhi.n	80020c4 <_printf_i+0x64>
 800207e:	2963      	cmp	r1, #99	; 0x63
 8002080:	d036      	beq.n	80020f0 <_printf_i+0x90>
 8002082:	d80a      	bhi.n	800209a <_printf_i+0x3a>
 8002084:	2900      	cmp	r1, #0
 8002086:	f000 80b9 	beq.w	80021fc <_printf_i+0x19c>
 800208a:	2958      	cmp	r1, #88	; 0x58
 800208c:	f000 8083 	beq.w	8002196 <_printf_i+0x136>
 8002090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002094:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002098:	e032      	b.n	8002100 <_printf_i+0xa0>
 800209a:	2964      	cmp	r1, #100	; 0x64
 800209c:	d001      	beq.n	80020a2 <_printf_i+0x42>
 800209e:	2969      	cmp	r1, #105	; 0x69
 80020a0:	d1f6      	bne.n	8002090 <_printf_i+0x30>
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	0605      	lsls	r5, r0, #24
 80020a8:	f103 0104 	add.w	r1, r3, #4
 80020ac:	d52a      	bpl.n	8002104 <_printf_i+0xa4>
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da03      	bge.n	80020be <_printf_i+0x5e>
 80020b6:	222d      	movs	r2, #45	; 0x2d
 80020b8:	425b      	negs	r3, r3
 80020ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80020be:	486f      	ldr	r0, [pc, #444]	; (800227c <_printf_i+0x21c>)
 80020c0:	220a      	movs	r2, #10
 80020c2:	e039      	b.n	8002138 <_printf_i+0xd8>
 80020c4:	2973      	cmp	r1, #115	; 0x73
 80020c6:	f000 809d 	beq.w	8002204 <_printf_i+0x1a4>
 80020ca:	d808      	bhi.n	80020de <_printf_i+0x7e>
 80020cc:	296f      	cmp	r1, #111	; 0x6f
 80020ce:	d020      	beq.n	8002112 <_printf_i+0xb2>
 80020d0:	2970      	cmp	r1, #112	; 0x70
 80020d2:	d1dd      	bne.n	8002090 <_printf_i+0x30>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	6023      	str	r3, [r4, #0]
 80020dc:	e003      	b.n	80020e6 <_printf_i+0x86>
 80020de:	2975      	cmp	r1, #117	; 0x75
 80020e0:	d017      	beq.n	8002112 <_printf_i+0xb2>
 80020e2:	2978      	cmp	r1, #120	; 0x78
 80020e4:	d1d4      	bne.n	8002090 <_printf_i+0x30>
 80020e6:	2378      	movs	r3, #120	; 0x78
 80020e8:	4865      	ldr	r0, [pc, #404]	; (8002280 <_printf_i+0x220>)
 80020ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020ee:	e055      	b.n	800219c <_printf_i+0x13c>
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020f6:	1d19      	adds	r1, r3, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6011      	str	r1, [r2, #0]
 80020fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002100:	2301      	movs	r3, #1
 8002102:	e08c      	b.n	800221e <_printf_i+0x1be>
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800210a:	6011      	str	r1, [r2, #0]
 800210c:	bf18      	it	ne
 800210e:	b21b      	sxthne	r3, r3
 8002110:	e7cf      	b.n	80020b2 <_printf_i+0x52>
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	6825      	ldr	r5, [r4, #0]
 8002116:	1d18      	adds	r0, r3, #4
 8002118:	6010      	str	r0, [r2, #0]
 800211a:	0628      	lsls	r0, r5, #24
 800211c:	d501      	bpl.n	8002122 <_printf_i+0xc2>
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e002      	b.n	8002128 <_printf_i+0xc8>
 8002122:	0668      	lsls	r0, r5, #25
 8002124:	d5fb      	bpl.n	800211e <_printf_i+0xbe>
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	296f      	cmp	r1, #111	; 0x6f
 800212a:	bf14      	ite	ne
 800212c:	220a      	movne	r2, #10
 800212e:	2208      	moveq	r2, #8
 8002130:	4852      	ldr	r0, [pc, #328]	; (800227c <_printf_i+0x21c>)
 8002132:	2100      	movs	r1, #0
 8002134:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002138:	6865      	ldr	r5, [r4, #4]
 800213a:	2d00      	cmp	r5, #0
 800213c:	60a5      	str	r5, [r4, #8]
 800213e:	f2c0 8095 	blt.w	800226c <_printf_i+0x20c>
 8002142:	6821      	ldr	r1, [r4, #0]
 8002144:	f021 0104 	bic.w	r1, r1, #4
 8002148:	6021      	str	r1, [r4, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d13d      	bne.n	80021ca <_printf_i+0x16a>
 800214e:	2d00      	cmp	r5, #0
 8002150:	f040 808e 	bne.w	8002270 <_printf_i+0x210>
 8002154:	4665      	mov	r5, ip
 8002156:	2a08      	cmp	r2, #8
 8002158:	d10b      	bne.n	8002172 <_printf_i+0x112>
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	07db      	lsls	r3, r3, #31
 800215e:	d508      	bpl.n	8002172 <_printf_i+0x112>
 8002160:	6923      	ldr	r3, [r4, #16]
 8002162:	6862      	ldr	r2, [r4, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	bfde      	ittt	le
 8002168:	2330      	movle	r3, #48	; 0x30
 800216a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800216e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002172:	ebac 0305 	sub.w	r3, ip, r5
 8002176:	6123      	str	r3, [r4, #16]
 8002178:	f8cd 8000 	str.w	r8, [sp]
 800217c:	463b      	mov	r3, r7
 800217e:	aa03      	add	r2, sp, #12
 8002180:	4621      	mov	r1, r4
 8002182:	4630      	mov	r0, r6
 8002184:	f7ff fef6 	bl	8001f74 <_printf_common>
 8002188:	3001      	adds	r0, #1
 800218a:	d14d      	bne.n	8002228 <_printf_i+0x1c8>
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	b005      	add	sp, #20
 8002192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002196:	4839      	ldr	r0, [pc, #228]	; (800227c <_printf_i+0x21c>)
 8002198:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	6821      	ldr	r1, [r4, #0]
 80021a0:	1d1d      	adds	r5, r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6015      	str	r5, [r2, #0]
 80021a6:	060a      	lsls	r2, r1, #24
 80021a8:	d50b      	bpl.n	80021c2 <_printf_i+0x162>
 80021aa:	07ca      	lsls	r2, r1, #31
 80021ac:	bf44      	itt	mi
 80021ae:	f041 0120 	orrmi.w	r1, r1, #32
 80021b2:	6021      	strmi	r1, [r4, #0]
 80021b4:	b91b      	cbnz	r3, 80021be <_printf_i+0x15e>
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	f022 0220 	bic.w	r2, r2, #32
 80021bc:	6022      	str	r2, [r4, #0]
 80021be:	2210      	movs	r2, #16
 80021c0:	e7b7      	b.n	8002132 <_printf_i+0xd2>
 80021c2:	064d      	lsls	r5, r1, #25
 80021c4:	bf48      	it	mi
 80021c6:	b29b      	uxthmi	r3, r3
 80021c8:	e7ef      	b.n	80021aa <_printf_i+0x14a>
 80021ca:	4665      	mov	r5, ip
 80021cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80021d0:	fb02 3311 	mls	r3, r2, r1, r3
 80021d4:	5cc3      	ldrb	r3, [r0, r3]
 80021d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80021da:	460b      	mov	r3, r1
 80021dc:	2900      	cmp	r1, #0
 80021de:	d1f5      	bne.n	80021cc <_printf_i+0x16c>
 80021e0:	e7b9      	b.n	8002156 <_printf_i+0xf6>
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	6825      	ldr	r5, [r4, #0]
 80021e6:	1d18      	adds	r0, r3, #4
 80021e8:	6961      	ldr	r1, [r4, #20]
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	0628      	lsls	r0, r5, #24
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	d501      	bpl.n	80021f6 <_printf_i+0x196>
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	e002      	b.n	80021fc <_printf_i+0x19c>
 80021f6:	066a      	lsls	r2, r5, #25
 80021f8:	d5fb      	bpl.n	80021f2 <_printf_i+0x192>
 80021fa:	8019      	strh	r1, [r3, #0]
 80021fc:	2300      	movs	r3, #0
 80021fe:	4665      	mov	r5, ip
 8002200:	6123      	str	r3, [r4, #16]
 8002202:	e7b9      	b.n	8002178 <_printf_i+0x118>
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	1d19      	adds	r1, r3, #4
 8002208:	6011      	str	r1, [r2, #0]
 800220a:	681d      	ldr	r5, [r3, #0]
 800220c:	6862      	ldr	r2, [r4, #4]
 800220e:	2100      	movs	r1, #0
 8002210:	4628      	mov	r0, r5
 8002212:	f000 f837 	bl	8002284 <memchr>
 8002216:	b108      	cbz	r0, 800221c <_printf_i+0x1bc>
 8002218:	1b40      	subs	r0, r0, r5
 800221a:	6060      	str	r0, [r4, #4]
 800221c:	6863      	ldr	r3, [r4, #4]
 800221e:	6123      	str	r3, [r4, #16]
 8002220:	2300      	movs	r3, #0
 8002222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002226:	e7a7      	b.n	8002178 <_printf_i+0x118>
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	462a      	mov	r2, r5
 800222c:	4639      	mov	r1, r7
 800222e:	4630      	mov	r0, r6
 8002230:	47c0      	blx	r8
 8002232:	3001      	adds	r0, #1
 8002234:	d0aa      	beq.n	800218c <_printf_i+0x12c>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	079b      	lsls	r3, r3, #30
 800223a:	d413      	bmi.n	8002264 <_printf_i+0x204>
 800223c:	68e0      	ldr	r0, [r4, #12]
 800223e:	9b03      	ldr	r3, [sp, #12]
 8002240:	4298      	cmp	r0, r3
 8002242:	bfb8      	it	lt
 8002244:	4618      	movlt	r0, r3
 8002246:	e7a3      	b.n	8002190 <_printf_i+0x130>
 8002248:	2301      	movs	r3, #1
 800224a:	464a      	mov	r2, r9
 800224c:	4639      	mov	r1, r7
 800224e:	4630      	mov	r0, r6
 8002250:	47c0      	blx	r8
 8002252:	3001      	adds	r0, #1
 8002254:	d09a      	beq.n	800218c <_printf_i+0x12c>
 8002256:	3501      	adds	r5, #1
 8002258:	68e3      	ldr	r3, [r4, #12]
 800225a:	9a03      	ldr	r2, [sp, #12]
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	42ab      	cmp	r3, r5
 8002260:	dcf2      	bgt.n	8002248 <_printf_i+0x1e8>
 8002262:	e7eb      	b.n	800223c <_printf_i+0x1dc>
 8002264:	2500      	movs	r5, #0
 8002266:	f104 0919 	add.w	r9, r4, #25
 800226a:	e7f5      	b.n	8002258 <_printf_i+0x1f8>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ac      	bne.n	80021ca <_printf_i+0x16a>
 8002270:	7803      	ldrb	r3, [r0, #0]
 8002272:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002276:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800227a:	e76c      	b.n	8002156 <_printf_i+0xf6>
 800227c:	08002850 	.word	0x08002850
 8002280:	08002861 	.word	0x08002861

08002284 <memchr>:
 8002284:	b510      	push	{r4, lr}
 8002286:	b2c9      	uxtb	r1, r1
 8002288:	4402      	add	r2, r0
 800228a:	4290      	cmp	r0, r2
 800228c:	4603      	mov	r3, r0
 800228e:	d101      	bne.n	8002294 <memchr+0x10>
 8002290:	2300      	movs	r3, #0
 8002292:	e003      	b.n	800229c <memchr+0x18>
 8002294:	781c      	ldrb	r4, [r3, #0]
 8002296:	3001      	adds	r0, #1
 8002298:	428c      	cmp	r4, r1
 800229a:	d1f6      	bne.n	800228a <memchr+0x6>
 800229c:	4618      	mov	r0, r3
 800229e:	bd10      	pop	{r4, pc}

080022a0 <memmove>:
 80022a0:	4288      	cmp	r0, r1
 80022a2:	b510      	push	{r4, lr}
 80022a4:	eb01 0302 	add.w	r3, r1, r2
 80022a8:	d807      	bhi.n	80022ba <memmove+0x1a>
 80022aa:	1e42      	subs	r2, r0, #1
 80022ac:	4299      	cmp	r1, r3
 80022ae:	d00a      	beq.n	80022c6 <memmove+0x26>
 80022b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80022b8:	e7f8      	b.n	80022ac <memmove+0xc>
 80022ba:	4283      	cmp	r3, r0
 80022bc:	d9f5      	bls.n	80022aa <memmove+0xa>
 80022be:	1881      	adds	r1, r0, r2
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	42d3      	cmn	r3, r2
 80022c4:	d100      	bne.n	80022c8 <memmove+0x28>
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80022cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80022d0:	e7f7      	b.n	80022c2 <memmove+0x22>
	...

080022d4 <_free_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4605      	mov	r5, r0
 80022d8:	2900      	cmp	r1, #0
 80022da:	d043      	beq.n	8002364 <_free_r+0x90>
 80022dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e0:	1f0c      	subs	r4, r1, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bfb8      	it	lt
 80022e6:	18e4      	addlt	r4, r4, r3
 80022e8:	f000 f8d0 	bl	800248c <__malloc_lock>
 80022ec:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <_free_r+0x94>)
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	4610      	mov	r0, r2
 80022f2:	b933      	cbnz	r3, 8002302 <_free_r+0x2e>
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	6014      	str	r4, [r2, #0]
 80022f8:	4628      	mov	r0, r5
 80022fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022fe:	f000 b8c6 	b.w	800248e <__malloc_unlock>
 8002302:	42a3      	cmp	r3, r4
 8002304:	d90b      	bls.n	800231e <_free_r+0x4a>
 8002306:	6821      	ldr	r1, [r4, #0]
 8002308:	1862      	adds	r2, r4, r1
 800230a:	4293      	cmp	r3, r2
 800230c:	bf01      	itttt	eq
 800230e:	681a      	ldreq	r2, [r3, #0]
 8002310:	685b      	ldreq	r3, [r3, #4]
 8002312:	1852      	addeq	r2, r2, r1
 8002314:	6022      	streq	r2, [r4, #0]
 8002316:	6063      	str	r3, [r4, #4]
 8002318:	6004      	str	r4, [r0, #0]
 800231a:	e7ed      	b.n	80022f8 <_free_r+0x24>
 800231c:	4613      	mov	r3, r2
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	b10a      	cbz	r2, 8002326 <_free_r+0x52>
 8002322:	42a2      	cmp	r2, r4
 8002324:	d9fa      	bls.n	800231c <_free_r+0x48>
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	1858      	adds	r0, r3, r1
 800232a:	42a0      	cmp	r0, r4
 800232c:	d10b      	bne.n	8002346 <_free_r+0x72>
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	4401      	add	r1, r0
 8002332:	1858      	adds	r0, r3, r1
 8002334:	4282      	cmp	r2, r0
 8002336:	6019      	str	r1, [r3, #0]
 8002338:	d1de      	bne.n	80022f8 <_free_r+0x24>
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6852      	ldr	r2, [r2, #4]
 800233e:	4401      	add	r1, r0
 8002340:	6019      	str	r1, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	e7d8      	b.n	80022f8 <_free_r+0x24>
 8002346:	d902      	bls.n	800234e <_free_r+0x7a>
 8002348:	230c      	movs	r3, #12
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	e7d4      	b.n	80022f8 <_free_r+0x24>
 800234e:	6820      	ldr	r0, [r4, #0]
 8002350:	1821      	adds	r1, r4, r0
 8002352:	428a      	cmp	r2, r1
 8002354:	bf01      	itttt	eq
 8002356:	6811      	ldreq	r1, [r2, #0]
 8002358:	6852      	ldreq	r2, [r2, #4]
 800235a:	1809      	addeq	r1, r1, r0
 800235c:	6021      	streq	r1, [r4, #0]
 800235e:	6062      	str	r2, [r4, #4]
 8002360:	605c      	str	r4, [r3, #4]
 8002362:	e7c9      	b.n	80022f8 <_free_r+0x24>
 8002364:	bd38      	pop	{r3, r4, r5, pc}
 8002366:	bf00      	nop
 8002368:	20000bc8 	.word	0x20000bc8

0800236c <_malloc_r>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	1ccd      	adds	r5, r1, #3
 8002370:	f025 0503 	bic.w	r5, r5, #3
 8002374:	3508      	adds	r5, #8
 8002376:	2d0c      	cmp	r5, #12
 8002378:	bf38      	it	cc
 800237a:	250c      	movcc	r5, #12
 800237c:	2d00      	cmp	r5, #0
 800237e:	4606      	mov	r6, r0
 8002380:	db01      	blt.n	8002386 <_malloc_r+0x1a>
 8002382:	42a9      	cmp	r1, r5
 8002384:	d903      	bls.n	800238e <_malloc_r+0x22>
 8002386:	230c      	movs	r3, #12
 8002388:	6033      	str	r3, [r6, #0]
 800238a:	2000      	movs	r0, #0
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	f000 f87d 	bl	800248c <__malloc_lock>
 8002392:	4a21      	ldr	r2, [pc, #132]	; (8002418 <_malloc_r+0xac>)
 8002394:	6814      	ldr	r4, [r2, #0]
 8002396:	4621      	mov	r1, r4
 8002398:	b991      	cbnz	r1, 80023c0 <_malloc_r+0x54>
 800239a:	4c20      	ldr	r4, [pc, #128]	; (800241c <_malloc_r+0xb0>)
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	b91b      	cbnz	r3, 80023a8 <_malloc_r+0x3c>
 80023a0:	4630      	mov	r0, r6
 80023a2:	f000 f863 	bl	800246c <_sbrk_r>
 80023a6:	6020      	str	r0, [r4, #0]
 80023a8:	4629      	mov	r1, r5
 80023aa:	4630      	mov	r0, r6
 80023ac:	f000 f85e 	bl	800246c <_sbrk_r>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d124      	bne.n	80023fe <_malloc_r+0x92>
 80023b4:	230c      	movs	r3, #12
 80023b6:	4630      	mov	r0, r6
 80023b8:	6033      	str	r3, [r6, #0]
 80023ba:	f000 f868 	bl	800248e <__malloc_unlock>
 80023be:	e7e4      	b.n	800238a <_malloc_r+0x1e>
 80023c0:	680b      	ldr	r3, [r1, #0]
 80023c2:	1b5b      	subs	r3, r3, r5
 80023c4:	d418      	bmi.n	80023f8 <_malloc_r+0x8c>
 80023c6:	2b0b      	cmp	r3, #11
 80023c8:	d90f      	bls.n	80023ea <_malloc_r+0x7e>
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	18cc      	adds	r4, r1, r3
 80023ce:	50cd      	str	r5, [r1, r3]
 80023d0:	4630      	mov	r0, r6
 80023d2:	f000 f85c 	bl	800248e <__malloc_unlock>
 80023d6:	f104 000b 	add.w	r0, r4, #11
 80023da:	1d23      	adds	r3, r4, #4
 80023dc:	f020 0007 	bic.w	r0, r0, #7
 80023e0:	1ac3      	subs	r3, r0, r3
 80023e2:	d0d3      	beq.n	800238c <_malloc_r+0x20>
 80023e4:	425a      	negs	r2, r3
 80023e6:	50e2      	str	r2, [r4, r3]
 80023e8:	e7d0      	b.n	800238c <_malloc_r+0x20>
 80023ea:	684b      	ldr	r3, [r1, #4]
 80023ec:	428c      	cmp	r4, r1
 80023ee:	bf16      	itet	ne
 80023f0:	6063      	strne	r3, [r4, #4]
 80023f2:	6013      	streq	r3, [r2, #0]
 80023f4:	460c      	movne	r4, r1
 80023f6:	e7eb      	b.n	80023d0 <_malloc_r+0x64>
 80023f8:	460c      	mov	r4, r1
 80023fa:	6849      	ldr	r1, [r1, #4]
 80023fc:	e7cc      	b.n	8002398 <_malloc_r+0x2c>
 80023fe:	1cc4      	adds	r4, r0, #3
 8002400:	f024 0403 	bic.w	r4, r4, #3
 8002404:	42a0      	cmp	r0, r4
 8002406:	d005      	beq.n	8002414 <_malloc_r+0xa8>
 8002408:	1a21      	subs	r1, r4, r0
 800240a:	4630      	mov	r0, r6
 800240c:	f000 f82e 	bl	800246c <_sbrk_r>
 8002410:	3001      	adds	r0, #1
 8002412:	d0cf      	beq.n	80023b4 <_malloc_r+0x48>
 8002414:	6025      	str	r5, [r4, #0]
 8002416:	e7db      	b.n	80023d0 <_malloc_r+0x64>
 8002418:	20000bc8 	.word	0x20000bc8
 800241c:	20000bcc 	.word	0x20000bcc

08002420 <_realloc_r>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	4607      	mov	r7, r0
 8002424:	4614      	mov	r4, r2
 8002426:	460e      	mov	r6, r1
 8002428:	b921      	cbnz	r1, 8002434 <_realloc_r+0x14>
 800242a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800242e:	4611      	mov	r1, r2
 8002430:	f7ff bf9c 	b.w	800236c <_malloc_r>
 8002434:	b922      	cbnz	r2, 8002440 <_realloc_r+0x20>
 8002436:	f7ff ff4d 	bl	80022d4 <_free_r>
 800243a:	4625      	mov	r5, r4
 800243c:	4628      	mov	r0, r5
 800243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002440:	f000 f826 	bl	8002490 <_malloc_usable_size_r>
 8002444:	42a0      	cmp	r0, r4
 8002446:	d20f      	bcs.n	8002468 <_realloc_r+0x48>
 8002448:	4621      	mov	r1, r4
 800244a:	4638      	mov	r0, r7
 800244c:	f7ff ff8e 	bl	800236c <_malloc_r>
 8002450:	4605      	mov	r5, r0
 8002452:	2800      	cmp	r0, #0
 8002454:	d0f2      	beq.n	800243c <_realloc_r+0x1c>
 8002456:	4631      	mov	r1, r6
 8002458:	4622      	mov	r2, r4
 800245a:	f7ff fbe3 	bl	8001c24 <memcpy>
 800245e:	4631      	mov	r1, r6
 8002460:	4638      	mov	r0, r7
 8002462:	f7ff ff37 	bl	80022d4 <_free_r>
 8002466:	e7e9      	b.n	800243c <_realloc_r+0x1c>
 8002468:	4635      	mov	r5, r6
 800246a:	e7e7      	b.n	800243c <_realloc_r+0x1c>

0800246c <_sbrk_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	2300      	movs	r3, #0
 8002470:	4c05      	ldr	r4, [pc, #20]	; (8002488 <_sbrk_r+0x1c>)
 8002472:	4605      	mov	r5, r0
 8002474:	4608      	mov	r0, r1
 8002476:	6023      	str	r3, [r4, #0]
 8002478:	f7fe fd54 	bl	8000f24 <_sbrk>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_sbrk_r+0x1a>
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	b103      	cbz	r3, 8002486 <_sbrk_r+0x1a>
 8002484:	602b      	str	r3, [r5, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	20000bd4 	.word	0x20000bd4

0800248c <__malloc_lock>:
 800248c:	4770      	bx	lr

0800248e <__malloc_unlock>:
 800248e:	4770      	bx	lr

08002490 <_malloc_usable_size_r>:
 8002490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002494:	1f18      	subs	r0, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	bfbc      	itt	lt
 800249a:	580b      	ldrlt	r3, [r1, r0]
 800249c:	18c0      	addlt	r0, r0, r3
 800249e:	4770      	bx	lr

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
