
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000000  08000470  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08000470  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030dd  00000000  00000000  00010499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008a3  00000000  00000000  00013576  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000148  00000000  00000000  00013e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00013f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000628  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a4e  00000000  00000000  00014690  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000575e3  00000000  00000000  000160de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006d6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  0006d73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d0 	.word	0x080003d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d0 	.word	0x080003d0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:

}


void toggle_led()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200000a4 	.word	0x200000a4
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <EXTI4_IRQHandler+0x1c>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <EXTI4_IRQHandler+0x1c>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2(); //This chould be executed using the event_queue
 80001d8:	f000 f868 	bl	80002ac <write_usart2>

}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40010400 	.word	0x40010400

080001e4 <main>:




int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2();
 80001e8:	f000 f80e 	bl	8000208 <init_usart2>
	set_usart2_buffer_Tx((uint8_t*)MSG);
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x14>)
 80001ee:	f000 f83f 	bl	8000270 <set_usart2_buffer_Tx>
	while(1)
	{
		write_usart2();//Used only when Testing USART2 without sensor
 80001f2:	f000 f85b 	bl	80002ac <write_usart2>
 80001f6:	e7fc      	b.n	80001f2 <main+0xe>
 80001f8:	080003e8 	.word	0x080003e8

080001fc <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr

08000208 <init_usart2>:

/*This dunctions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *		This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <init_usart2+0x5c>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a14      	ldr	r2, [pc, #80]	; (8000264 <init_usart2+0x5c>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <init_usart2+0x60>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <init_usart2+0x60>)
 800021e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <init_usart2+0x60>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <init_usart2+0x60>)
 800022a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800022e:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <init_usart2+0x5c>)
 8000232:	69db      	ldr	r3, [r3, #28]
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <init_usart2+0x5c>)
 8000236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023a:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <init_usart2+0x64>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <init_usart2+0x64>)
 8000242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000246:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <init_usart2+0x64>)
 800024a:	f240 324d 	movw	r2, #845	; 0x34d
 800024e:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <init_usart2+0x64>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <init_usart2+0x64>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800
 800026c:	40004400 	.word	0x40004400

08000270 <set_usart2_buffer_Tx>:
	__enable_irq();
}

/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000278:	2280      	movs	r2, #128	; 0x80
 800027a:	2100      	movs	r1, #0
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <set_usart2_buffer_Tx+0x38>)
 800027e:	f000 f897 	bl	80003b0 <memset>
	if(BUFF_SIZE - (strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <set_usart2_buffer_Tx+0x38>)
 8000286:	f000 f89b 	bl	80003c0 <strcpy>
	}

	usart2.Tx_len = strlen((char*)msg);
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f7ff ff70 	bl	8000170 <strlen>
 8000290:	4602      	mov	r2, r0
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <set_usart2_buffer_Tx+0x38>)
 8000294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	usart2.write_index = 0;
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <set_usart2_buffer_Tx+0x38>)
 800029a:	2200      	movs	r2, #0
 800029c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000001c 	.word	0x2000001c

080002ac <write_usart2>:

/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0


	while(usart2.write_index < usart2.Tx_len)
 80002b0:	e014      	b.n	80002dc <write_usart2+0x30>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transferd (TXE != 1)(see RM 27.6.1)
 80002b2:	bf00      	nop
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <write_usart2+0x60>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0f9      	beq.n	80002b4 <write_usart2+0x8>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <write_usart2+0x64>)
 80002c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002c6:	4a12      	ldr	r2, [pc, #72]	; (8000310 <write_usart2+0x64>)
 80002c8:	5cd2      	ldrb	r2, [r2, r3]
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <write_usart2+0x60>)
 80002cc:	605a      	str	r2, [r3, #4]
		//USART2->DR = (uint8_t)('U' & 0xFF); //for testing
		usart2.write_index++;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <write_usart2+0x64>)
 80002d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <write_usart2+0x64>)
 80002d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	while(usart2.write_index < usart2.Tx_len)
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <write_usart2+0x64>)
 80002de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <write_usart2+0x64>)
 80002e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d3e2      	bcc.n	80002b2 <write_usart2+0x6>
	}
	usart2.write_index = 0;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <write_usart2+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmition is complete TC=1 (see RM 27.6.1)
 80002f4:	bf00      	nop
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <write_usart2+0x60>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002fe:	2b40      	cmp	r3, #64	; 0x40
 8000300:	d1f9      	bne.n	80002f6 <write_usart2+0x4a>

}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40004400 	.word	0x40004400
 8000310:	2000001c 	.word	0x2000001c

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff4d 	bl	80001e4 <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	200000a8 	.word	0x200000a8

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	2500      	movs	r5, #0
 800036c:	4e0c      	ldr	r6, [pc, #48]	; (80003a0 <__libc_init_array+0x38>)
 800036e:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 8000370:	1ba4      	subs	r4, r4, r6
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	42a5      	cmp	r5, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	f000 f82a 	bl	80003d0 <_init>
 800037c:	2500      	movs	r5, #0
 800037e:	4e0a      	ldr	r6, [pc, #40]	; (80003a8 <__libc_init_array+0x40>)
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <__libc_init_array+0x44>)
 8000382:	1ba4      	subs	r4, r4, r6
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	42a5      	cmp	r5, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000390:	4798      	blx	r3
 8000392:	3501      	adds	r5, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800039a:	4798      	blx	r3
 800039c:	3501      	adds	r5, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	08000468 	.word	0x08000468
 80003a4:	08000468 	.word	0x08000468
 80003a8:	08000468 	.word	0x08000468
 80003ac:	0800046c 	.word	0x0800046c

080003b0 <memset>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	4402      	add	r2, r0
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d100      	bne.n	80003ba <memset+0xa>
 80003b8:	4770      	bx	lr
 80003ba:	f803 1b01 	strb.w	r1, [r3], #1
 80003be:	e7f9      	b.n	80003b4 <memset+0x4>

080003c0 <strcpy>:
 80003c0:	4603      	mov	r3, r0
 80003c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80003c6:	f803 2b01 	strb.w	r2, [r3], #1
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d1f9      	bne.n	80003c2 <strcpy+0x2>
 80003ce:	4770      	bx	lr

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
