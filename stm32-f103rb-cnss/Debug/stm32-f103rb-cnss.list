
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800120c  0800120c  0001120c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f4  080013f4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080013f4  080013f4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f4  080013f4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080013fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  200000a0  0800149c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800149c  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045c7  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000caf  00000000  00000000  00024690  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00025340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000158  00000000  00000000  00025500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010c90  00000000  00000000  00025658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000027f7  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058e54  00000000  00000000  00038adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008c8  00000000  00000000  000919b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a0 	.word	0x200000a0
 800014c:	00000000 	.word	0x00000000
 8000150:	080011f4 	.word	0x080011f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a4 	.word	0x200000a4
 800016c:	080011f4 	.word	0x080011f4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <TestWifiConnection>:
//see: https://openweathermap.org/current
static uint8_t api[] = "api.openweathermap.org" ;
static uint8_t api_key[] = "4e622e19669401cd85da98eb2c3852f5" ;


void TestWifiConnection(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	// before useing this function init_usart1(); and  init_usart2(); must be executed

	//Reset ESP8266
	write_usart1((uint8_t*)AT_RST);
 8000184:	4867      	ldr	r0, [pc, #412]	; (8000324 <TestWifiConnection+0x1a4>)
 8000186:	f000 fac9 	bl	800071c <write_usart1>

	while(!found){
 800018a:	e006      	b.n	800019a <TestWifiConnection+0x1a>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)"NON");
 800018c:	4966      	ldr	r1, [pc, #408]	; (8000328 <TestWifiConnection+0x1a8>)
 800018e:	4867      	ldr	r0, [pc, #412]	; (800032c <TestWifiConnection+0x1ac>)
 8000190:	f000 fb36 	bl	8000800 <search_usart1_buffer_Rx>
 8000194:	4602      	mov	r2, r0
 8000196:	4b66      	ldr	r3, [pc, #408]	; (8000330 <TestWifiConnection+0x1b0>)
 8000198:	601a      	str	r2, [r3, #0]
	while(!found){
 800019a:	4b65      	ldr	r3, [pc, #404]	; (8000330 <TestWifiConnection+0x1b0>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f4      	beq.n	800018c <TestWifiConnection+0xc>
	}
	//write_usart2((uint8_t*)"AT_RST PASSED\r\n");
	found = FALSE;
 80001a2:	4b63      	ldr	r3, [pc, #396]	; (8000330 <TestWifiConnection+0x1b0>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	//Mode
	write_usart1((uint8_t*)AT_CWMODE);
 80001a8:	4862      	ldr	r0, [pc, #392]	; (8000334 <TestWifiConnection+0x1b4>)
 80001aa:	f000 fab7 	bl	800071c <write_usart1>
	while(!found){
 80001ae:	e006      	b.n	80001be <TestWifiConnection+0x3e>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)"NON");
 80001b0:	495d      	ldr	r1, [pc, #372]	; (8000328 <TestWifiConnection+0x1a8>)
 80001b2:	485e      	ldr	r0, [pc, #376]	; (800032c <TestWifiConnection+0x1ac>)
 80001b4:	f000 fb24 	bl	8000800 <search_usart1_buffer_Rx>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b5d      	ldr	r3, [pc, #372]	; (8000330 <TestWifiConnection+0x1b0>)
 80001bc:	601a      	str	r2, [r3, #0]
	while(!found){
 80001be:	4b5c      	ldr	r3, [pc, #368]	; (8000330 <TestWifiConnection+0x1b0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d0f4      	beq.n	80001b0 <TestWifiConnection+0x30>
	}
	found = FALSE;
 80001c6:	4b5a      	ldr	r3, [pc, #360]	; (8000330 <TestWifiConnection+0x1b0>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

	//AT Command
	write_usart1((uint8_t*)AT_COMMAND); // WRITE TEST COMAND
 80001cc:	485a      	ldr	r0, [pc, #360]	; (8000338 <TestWifiConnection+0x1b8>)
 80001ce:	f000 faa5 	bl	800071c <write_usart1>
	while(!found){
 80001d2:	e006      	b.n	80001e2 <TestWifiConnection+0x62>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80001d4:	4959      	ldr	r1, [pc, #356]	; (800033c <TestWifiConnection+0x1bc>)
 80001d6:	4855      	ldr	r0, [pc, #340]	; (800032c <TestWifiConnection+0x1ac>)
 80001d8:	f000 fb12 	bl	8000800 <search_usart1_buffer_Rx>
 80001dc:	4602      	mov	r2, r0
 80001de:	4b54      	ldr	r3, [pc, #336]	; (8000330 <TestWifiConnection+0x1b0>)
 80001e0:	601a      	str	r2, [r3, #0]
	while(!found){
 80001e2:	4b53      	ldr	r3, [pc, #332]	; (8000330 <TestWifiConnection+0x1b0>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f4      	beq.n	80001d4 <TestWifiConnection+0x54>
	}
	found = FALSE;
 80001ea:	4b51      	ldr	r3, [pc, #324]	; (8000330 <TestWifiConnection+0x1b0>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]

	//Join access point
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	2100      	movs	r1, #0
 80001f4:	4852      	ldr	r0, [pc, #328]	; (8000340 <TestWifiConnection+0x1c0>)
 80001f6:	f000 fbc1 	bl	800097c <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 80001fa:	4b52      	ldr	r3, [pc, #328]	; (8000344 <TestWifiConnection+0x1c4>)
 80001fc:	4a52      	ldr	r2, [pc, #328]	; (8000348 <TestWifiConnection+0x1c8>)
 80001fe:	4953      	ldr	r1, [pc, #332]	; (800034c <TestWifiConnection+0x1cc>)
 8000200:	484f      	ldr	r0, [pc, #316]	; (8000340 <TestWifiConnection+0x1c0>)
 8000202:	f000 fbc3 	bl	800098c <siprintf>

	write_usart1((uint8_t*)command);
 8000206:	484e      	ldr	r0, [pc, #312]	; (8000340 <TestWifiConnection+0x1c0>)
 8000208:	f000 fa88 	bl	800071c <write_usart1>

	while(!found){
 800020c:	e006      	b.n	800021c <TestWifiConnection+0x9c>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 800020e:	4950      	ldr	r1, [pc, #320]	; (8000350 <TestWifiConnection+0x1d0>)
 8000210:	4846      	ldr	r0, [pc, #280]	; (800032c <TestWifiConnection+0x1ac>)
 8000212:	f000 faf5 	bl	8000800 <search_usart1_buffer_Rx>
 8000216:	4602      	mov	r2, r0
 8000218:	4b45      	ldr	r3, [pc, #276]	; (8000330 <TestWifiConnection+0x1b0>)
 800021a:	601a      	str	r2, [r3, #0]
	while(!found){
 800021c:	4b44      	ldr	r3, [pc, #272]	; (8000330 <TestWifiConnection+0x1b0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f4      	beq.n	800020e <TestWifiConnection+0x8e>
	}
	//write_usart2((uint8_t*)"AT_CWJAP PASSED\r\n");
	found = FALSE;
 8000224:	4b42      	ldr	r3, [pc, #264]	; (8000330 <TestWifiConnection+0x1b0>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]


	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect to API
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800022a:	2280      	movs	r2, #128	; 0x80
 800022c:	2100      	movs	r1, #0
 800022e:	4844      	ldr	r0, [pc, #272]	; (8000340 <TestWifiConnection+0x1c0>)
 8000230:	f000 fba4 	bl	800097c <memset>
	sprintf((char*)command, "AT+CIPSTART=\"TCP\",\"%s\",80\r\n",api);
 8000234:	4a47      	ldr	r2, [pc, #284]	; (8000354 <TestWifiConnection+0x1d4>)
 8000236:	4948      	ldr	r1, [pc, #288]	; (8000358 <TestWifiConnection+0x1d8>)
 8000238:	4841      	ldr	r0, [pc, #260]	; (8000340 <TestWifiConnection+0x1c0>)
 800023a:	f000 fba7 	bl	800098c <siprintf>

	//write_usart2((uint8_t*)command); // test
	write_usart1((uint8_t*)command);
 800023e:	4840      	ldr	r0, [pc, #256]	; (8000340 <TestWifiConnection+0x1c0>)
 8000240:	f000 fa6c 	bl	800071c <write_usart1>

	while(!found){
 8000244:	e00d      	b.n	8000262 <TestWifiConnection+0xe2>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 8000246:	4942      	ldr	r1, [pc, #264]	; (8000350 <TestWifiConnection+0x1d0>)
 8000248:	4838      	ldr	r0, [pc, #224]	; (800032c <TestWifiConnection+0x1ac>)
 800024a:	f000 fad9 	bl	8000800 <search_usart1_buffer_Rx>
 800024e:	4602      	mov	r2, r0
 8000250:	4b37      	ldr	r3, [pc, #220]	; (8000330 <TestWifiConnection+0x1b0>)
 8000252:	601a      	str	r2, [r3, #0]
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ALREADY_CONNECTED);
 8000254:	4941      	ldr	r1, [pc, #260]	; (800035c <TestWifiConnection+0x1dc>)
 8000256:	4835      	ldr	r0, [pc, #212]	; (800032c <TestWifiConnection+0x1ac>)
 8000258:	f000 fad2 	bl	8000800 <search_usart1_buffer_Rx>
 800025c:	4602      	mov	r2, r0
 800025e:	4b34      	ldr	r3, [pc, #208]	; (8000330 <TestWifiConnection+0x1b0>)
 8000260:	601a      	str	r2, [r3, #0]
	while(!found){
 8000262:	4b33      	ldr	r3, [pc, #204]	; (8000330 <TestWifiConnection+0x1b0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0ed      	beq.n	8000246 <TestWifiConnection+0xc6>
	}
	//write_usart2((uint8_t*)"AT+CIPSTART PASSED\r\n");
	found = FALSE;
 800026a:	4b31      	ldr	r3, [pc, #196]	; (8000330 <TestWifiConnection+0x1b0>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]


	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000274:	2100      	movs	r1, #0
 8000276:	483a      	ldr	r0, [pc, #232]	; (8000360 <TestWifiConnection+0x1e0>)
 8000278:	f000 fb80 	bl	800097c <memset>
	sprintf((char*)http,("GET /data/2.5/weather?q=London,uk&appid=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n"),api_key,api); // HTTP/1.0- Allow only one request
 800027c:	4b35      	ldr	r3, [pc, #212]	; (8000354 <TestWifiConnection+0x1d4>)
 800027e:	4a39      	ldr	r2, [pc, #228]	; (8000364 <TestWifiConnection+0x1e4>)
 8000280:	4939      	ldr	r1, [pc, #228]	; (8000368 <TestWifiConnection+0x1e8>)
 8000282:	4837      	ldr	r0, [pc, #220]	; (8000360 <TestWifiConnection+0x1e0>)
 8000284:	f000 fb82 	bl	800098c <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000288:	4835      	ldr	r0, [pc, #212]	; (8000360 <TestWifiConnection+0x1e0>)
 800028a:	f7ff ff71 	bl	8000170 <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	3b02      	subs	r3, #2
 8000292:	4a36      	ldr	r2, [pc, #216]	; (800036c <TestWifiConnection+0x1ec>)
 8000294:	6013      	str	r3, [r2, #0]

	//Send number of data bytes
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	2100      	movs	r1, #0
 800029a:	4829      	ldr	r0, [pc, #164]	; (8000340 <TestWifiConnection+0x1c0>)
 800029c:	f000 fb6e 	bl	800097c <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 80002a0:	4b32      	ldr	r3, [pc, #200]	; (800036c <TestWifiConnection+0x1ec>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	4932      	ldr	r1, [pc, #200]	; (8000370 <TestWifiConnection+0x1f0>)
 80002a8:	4825      	ldr	r0, [pc, #148]	; (8000340 <TestWifiConnection+0x1c0>)
 80002aa:	f000 fb6f 	bl	800098c <siprintf>


	//write_usart2((uint8_t*)command); // test
	write_usart1((uint8_t*)command);
 80002ae:	4824      	ldr	r0, [pc, #144]	; (8000340 <TestWifiConnection+0x1c0>)
 80002b0:	f000 fa34 	bl	800071c <write_usart1>

	while(!found){
 80002b4:	e006      	b.n	80002c4 <TestWifiConnection+0x144>
		found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 80002b6:	4921      	ldr	r1, [pc, #132]	; (800033c <TestWifiConnection+0x1bc>)
 80002b8:	482e      	ldr	r0, [pc, #184]	; (8000374 <TestWifiConnection+0x1f4>)
 80002ba:	f000 faa1 	bl	8000800 <search_usart1_buffer_Rx>
 80002be:	4602      	mov	r2, r0
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <TestWifiConnection+0x1b0>)
 80002c2:	601a      	str	r2, [r3, #0]
	while(!found){
 80002c4:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <TestWifiConnection+0x1b0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f4      	beq.n	80002b6 <TestWifiConnection+0x136>
	}
	found = FALSE;
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <TestWifiConnection+0x1b0>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]

	write_usart1((uint8_t*)http);
 80002d2:	4823      	ldr	r0, [pc, #140]	; (8000360 <TestWifiConnection+0x1e0>)
 80002d4:	f000 fa22 	bl	800071c <write_usart1>

	while(!found){
 80002d8:	e006      	b.n	80002e8 <TestWifiConnection+0x168>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL); //We counting on the appearance of OK in the HTTP response (we wont see the full response)
 80002da:	491d      	ldr	r1, [pc, #116]	; (8000350 <TestWifiConnection+0x1d0>)
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <TestWifiConnection+0x1ac>)
 80002de:	f000 fa8f 	bl	8000800 <search_usart1_buffer_Rx>
 80002e2:	4602      	mov	r2, r0
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <TestWifiConnection+0x1b0>)
 80002e6:	601a      	str	r2, [r3, #0]
	while(!found){
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <TestWifiConnection+0x1b0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f4      	beq.n	80002da <TestWifiConnection+0x15a>
	}
	found = FALSE;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <TestWifiConnection+0x1b0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]

	//Close TCP connection
	write_usart1((uint8_t*)AT_CIPCLOSE);
 80002f6:	4820      	ldr	r0, [pc, #128]	; (8000378 <TestWifiConnection+0x1f8>)
 80002f8:	f000 fa10 	bl	800071c <write_usart1>
	while(!found){
 80002fc:	e006      	b.n	800030c <TestWifiConnection+0x18c>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)"NON");
 80002fe:	490a      	ldr	r1, [pc, #40]	; (8000328 <TestWifiConnection+0x1a8>)
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <TestWifiConnection+0x1ac>)
 8000302:	f000 fa7d 	bl	8000800 <search_usart1_buffer_Rx>
 8000306:	4602      	mov	r2, r0
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <TestWifiConnection+0x1b0>)
 800030a:	601a      	str	r2, [r3, #0]
	while(!found){
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <TestWifiConnection+0x1b0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f4      	beq.n	80002fe <TestWifiConnection+0x17e>
	}
	write_usart2((uint8_t*)"AT_CIPCLOSE PASSED\r\n");
 8000314:	4819      	ldr	r0, [pc, #100]	; (800037c <TestWifiConnection+0x1fc>)
 8000316:	f000 f9c5 	bl	80006a4 <write_usart2>
	found = FALSE;
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <TestWifiConnection+0x1b0>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]


}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	0800120c 	.word	0x0800120c
 8000328:	08001218 	.word	0x08001218
 800032c:	0800121c 	.word	0x0800121c
 8000330:	200000bc 	.word	0x200000bc
 8000334:	08001224 	.word	0x08001224
 8000338:	08001234 	.word	0x08001234
 800033c:	0800123c 	.word	0x0800123c
 8000340:	200000c0 	.word	0x200000c0
 8000344:	08001244 	.word	0x08001244
 8000348:	08001250 	.word	0x08001250
 800034c:	08001258 	.word	0x08001258
 8000350:	08001270 	.word	0x08001270
 8000354:	20000000 	.word	0x20000000
 8000358:	08001278 	.word	0x08001278
 800035c:	08001294 	.word	0x08001294
 8000360:	20000140 	.word	0x20000140
 8000364:	20000018 	.word	0x20000018
 8000368:	080012a8 	.word	0x080012a8
 800036c:	20000240 	.word	0x20000240
 8000370:	080012ec 	.word	0x080012ec
 8000374:	08001300 	.word	0x08001300
 8000378:	08001304 	.word	0x08001304
 800037c:	08001314 	.word	0x08001314

08000380 <toggle_led>:

}


void toggle_led()
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <toggle_led+0x3c>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d109      	bne.n	80003a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <toggle_led+0x40>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <toggle_led+0x40>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <toggle_led+0x3c>)
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800039e:	e008      	b.n	80003b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <toggle_led+0x40>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <toggle_led+0x40>)
 80003a6:	f023 0320 	bic.w	r3, r3, #32
 80003aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <toggle_led+0x3c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	2000086c 	.word	0x2000086c
 80003c0:	40010800 	.word	0x40010800

080003c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <EXTI4_IRQHandler+0x20>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <EXTI4_IRQHandler+0x20>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80003d4:	f7ff ffd4 	bl	8000380 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <EXTI4_IRQHandler+0x24>)
 80003da:	f000 f963 	bl	80006a4 <write_usart2>

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010400 	.word	0x40010400
 80003e8:	0800132c 	.word	0x0800132c

080003ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/



int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80003f0:	f000 f8a6 	bl	8000540 <init_usart2>
	init_usart1(); // for ESP8266
 80003f4:	f000 f8d8 	bl	80005a8 <init_usart1>
	//write_usart2((uint8_t*)AT_COMMAND);

	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 80003f8:	4802      	ldr	r0, [pc, #8]	; (8000404 <main+0x18>)
 80003fa:	f000 f953 	bl	80006a4 <write_usart2>
	*/
	/*TEST :~)*/

	//!write_usart2((uint8_t*)"b4 ESPinit()\r\n");//TEST :~)

	TestWifiConnection(); //THE FUNCTION NAME HAS NOTHING TO DO WITH IT"S CONTENT...! :)~
 80003fe:	f7ff febf 	bl	8000180 <TestWifiConnection>

	while(1)
 8000402:	e7fe      	b.n	8000402 <main+0x16>
 8000404:	080013ac 	.word	0x080013ac

08000408 <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <_sbrk+0x50>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d102      	bne.n	800042a <_sbrk+0x16>
		heap_end = &end;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <_sbrk+0x50>)
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <_sbrk+0x54>)
 8000428:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <_sbrk+0x50>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <_sbrk+0x50>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	466a      	mov	r2, sp
 800043a:	4293      	cmp	r3, r2
 800043c:	d907      	bls.n	800044e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800043e:	f000 fa73 	bl	8000928 <__errno>
 8000442:	4602      	mov	r2, r0
 8000444:	230c      	movs	r3, #12
 8000446:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
 800044c:	e006      	b.n	800045c <_sbrk+0x48>
	}

	heap_end += incr;
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <_sbrk+0x50>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	4a03      	ldr	r2, [pc, #12]	; (8000464 <_sbrk+0x50>)
 8000458:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800045a:	68fb      	ldr	r3, [r7, #12]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000244 	.word	0x20000244
 8000468:	20000878 	.word	0x20000878

0800046c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f003 0307 	and.w	r3, r3, #7
 800047a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800049c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <__NVIC_SetPriorityGrouping+0x44>)
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	60d3      	str	r3, [r2, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db0b      	blt.n	80004de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	f003 021f 	and.w	r2, r3, #31
 80004cc:	4906      	ldr	r1, [pc, #24]	; (80004e8 <__NVIC_EnableIRQ+0x34>)
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	095b      	lsrs	r3, r3, #5
 80004d4:	2001      	movs	r0, #1
 80004d6:	fa00 f202 	lsl.w	r2, r0, r2
 80004da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000e100 	.word	0xe000e100

080004ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	db0a      	blt.n	8000516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	b2da      	uxtb	r2, r3
 8000504:	490c      	ldr	r1, [pc, #48]	; (8000538 <__NVIC_SetPriority+0x4c>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	0112      	lsls	r2, r2, #4
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	440b      	add	r3, r1
 8000510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000514:	e00a      	b.n	800052c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <__NVIC_SetPriority+0x50>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	3b04      	subs	r3, #4
 8000524:	0112      	lsls	r2, r2, #4
 8000526:	b2d2      	uxtb	r2, r2
 8000528:	440b      	add	r3, r1
 800052a:	761a      	strb	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <init_usart2+0x5c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <init_usart2+0x5c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <init_usart2+0x60>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <init_usart2+0x60>)
 8000556:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800055a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <init_usart2+0x60>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <init_usart2+0x60>)
 8000562:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000566:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <init_usart2+0x5c>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4a0b      	ldr	r2, [pc, #44]	; (800059c <init_usart2+0x5c>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <init_usart2+0x64>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <init_usart2+0x64>)
 800057a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800057e:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <init_usart2+0x64>)
 8000582:	f240 324d 	movw	r2, #845	; 0x34d
 8000586:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <init_usart2+0x64>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <init_usart2+0x64>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40004400 	.word	0x40004400

080005a8 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <init_usart1+0xb0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <init_usart1+0xb0>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <init_usart1+0xb4>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <init_usart1+0xb4>)
 80005be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005c2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <init_usart1+0xb4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a24      	ldr	r2, [pc, #144]	; (800065c <init_usart1+0xb4>)
 80005ca:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005ce:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <init_usart1+0xb4>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <init_usart1+0xb4>)
 80005d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005da:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <init_usart1+0xb4>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	4a1e      	ldr	r2, [pc, #120]	; (800065c <init_usart1+0xb4>)
 80005e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e6:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <init_usart1+0xb4>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <init_usart1+0xb4>)
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f2:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <init_usart1+0xb0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <init_usart1+0xb0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <init_usart1+0xb8>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <init_usart1+0xb8>)
 8000606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800060a:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <init_usart1+0xb8>)
 800060e:	2245      	movs	r2, #69	; 0x45
 8000610:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <init_usart1+0xb8>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <init_usart1+0xb8>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 800061e:	f000 f8d9 	bl	80007d4 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <init_usart1+0xb8>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <init_usart1+0xb8>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062e:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <init_usart1+0xb8>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <init_usart1+0xb8>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800063c:	2007      	movs	r0, #7
 800063e:	f7ff ff15 	bl	800046c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000642:	2100      	movs	r1, #0
 8000644:	2025      	movs	r0, #37	; 0x25
 8000646:	f7ff ff51 	bl	80004ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 800064a:	2025      	movs	r0, #37	; 0x25
 800064c:	f7ff ff32 	bl	80004b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000650:	b662      	cpsie	i
	__enable_irq();

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800
 8000660:	40013800 	.word	0x40013800

08000664 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	2100      	movs	r1, #0
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <set_usart2_buffer_Tx+0x3c>)
 8000674:	f000 f982 	bl	800097c <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <set_usart2_buffer_Tx+0x3c>)
 800067c:	f000 f9a6 	bl	80009cc <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fd75 	bl	8000170 <strlen>
 8000686:	4602      	mov	r2, r0
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <set_usart2_buffer_Tx+0x3c>)
 800068a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <set_usart2_buffer_Tx+0x3c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000248 	.word	0x20000248

080006a4 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffd9 	bl	8000664 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80006b2:	e014      	b.n	80006de <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80006b4:	bf00      	nop
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <write_usart2+0x70>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f9      	beq.n	80006b6 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <write_usart2+0x74>)
 80006c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <write_usart2+0x74>)
 80006ca:	5cd2      	ldrb	r2, [r2, r3]
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <write_usart2+0x70>)
 80006ce:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <write_usart2+0x74>)
 80006d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <write_usart2+0x74>)
 80006da:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <write_usart2+0x74>)
 80006e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <write_usart2+0x74>)
 80006e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3e2      	bcc.n	80006b4 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80006ee:	bf00      	nop
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <write_usart2+0x70>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f8:	2b40      	cmp	r3, #64	; 0x40
 80006fa:	d1f9      	bne.n	80006f0 <write_usart2+0x4c>
	usart2.write_index = 0;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <write_usart2+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <write_usart2+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	20000248 	.word	0x20000248

0800071c <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f835 	bl	8000794 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 800072a:	e014      	b.n	8000756 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 800072c:	bf00      	nop
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <write_usart1+0x70>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <write_usart1+0x74>)
 800073c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <write_usart1+0x74>)
 8000742:	5cd2      	ldrb	r2, [r2, r3]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <write_usart1+0x70>)
 8000746:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <write_usart1+0x74>)
 800074a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800074e:	3301      	adds	r3, #1
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <write_usart1+0x74>)
 8000752:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <write_usart1+0x74>)
 8000758:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <write_usart1+0x74>)
 800075e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000762:	429a      	cmp	r2, r3
 8000764:	d3e2      	bcc.n	800072c <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000766:	bf00      	nop
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <write_usart1+0x70>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d1f9      	bne.n	8000768 <write_usart1+0x4c>
	usart1.write_index = 0;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <write_usart1+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <write_usart1+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40013800 	.word	0x40013800
 8000790:	20000450 	.word	0x20000450

08000794 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	2100      	movs	r1, #0
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <set_usart1_buffer_Tx+0x3c>)
 80007a4:	f000 f8ea 	bl	800097c <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <set_usart1_buffer_Tx+0x3c>)
 80007ac:	f000 f90e 	bl	80009cc <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fcdd 	bl	8000170 <strlen>
 80007b6:	4602      	mov	r2, r0
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <set_usart1_buffer_Tx+0x3c>)
 80007ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <set_usart1_buffer_Tx+0x3c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000450 	.word	0x20000450

080007d4 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	2100      	movs	r1, #0
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <set_usart1_buffer_Rx+0x24>)
 80007e0:	f000 f8cc 	bl	800097c <memset>
	usart1.Rx_len = 0;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <set_usart1_buffer_Rx+0x28>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <set_usart1_buffer_Rx+0x28>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000650 	.word	0x20000650
 80007fc:	20000450 	.word	0x20000450

08000800 <search_usart1_buffer_Rx>:


uint32_t search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <search_usart1_buffer_Rx+0x60>)
 800080c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000810:	3301      	adds	r3, #1
 8000812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000816:	d21d      	bcs.n	8000854 <search_usart1_buffer_Rx+0x54>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <search_usart1_buffer_Rx+0x64>)
 800081c:	f000 f8de 	bl	80009dc <strstr>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <search_usart1_buffer_Rx+0x64>)
 8000828:	f7ff ff3c 	bl	80006a4 <write_usart2>
			set_usart1_buffer_Rx();
 800082c:	f7ff ffd2 	bl	80007d4 <set_usart1_buffer_Rx>
			return (uint32_t)1; //TRUE
 8000830:	2301      	movs	r3, #1
 8000832:	e010      	b.n	8000856 <search_usart1_buffer_Rx+0x56>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8000834:	6839      	ldr	r1, [r7, #0]
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <search_usart1_buffer_Rx+0x64>)
 8000838:	f000 f8d0 	bl	80009dc <strstr>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <search_usart1_buffer_Rx+0x64>)
 8000844:	f7ff ff2e 	bl	80006a4 <write_usart2>
			set_usart1_buffer_Rx();
 8000848:	f7ff ffc4 	bl	80007d4 <set_usart1_buffer_Rx>
			return (uint32_t)0; //FALSE
 800084c:	2300      	movs	r3, #0
 800084e:	e002      	b.n	8000856 <search_usart1_buffer_Rx+0x56>
		}
		else{
			//set_usart1_buffer_Rx();//I added!
			return (uint32_t)0; //FALSE
 8000850:	2300      	movs	r3, #0
 8000852:	e000      	b.n	8000856 <search_usart1_buffer_Rx+0x56>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start chaeck from end??*/
		return (uint32_t)0; //FALSE
 8000854:	2300      	movs	r3, #0
	}

}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000450 	.word	0x20000450
 8000864:	20000650 	.word	0x20000650

08000868 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <USART1_IRQHandler+0x60>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b20      	cmp	r3, #32
 8000876:	d123      	bne.n	80008c0 <USART1_IRQHandler+0x58>

		c = USART1->DR; //This clear RXNE bit
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <USART1_IRQHandler+0x60>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <USART1_IRQHandler+0x64>)
 8000880:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <USART1_IRQHandler+0x68>)
 8000884:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000888:	3301      	adds	r3, #1
 800088a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088e:	d217      	bcs.n	80008c0 <USART1_IRQHandler+0x58>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <USART1_IRQHandler+0x68>)
 8000892:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <USART1_IRQHandler+0x64>)
 8000898:	7811      	ldrb	r1, [r2, #0]
 800089a:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <USART1_IRQHandler+0x68>)
 800089c:	4413      	add	r3, r2
 800089e:	460a      	mov	r2, r1
 80008a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
			usart1.read_index++;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <USART1_IRQHandler+0x68>)
 80008a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <USART1_IRQHandler+0x68>)
 80008ae:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
			usart1.Rx_len++;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <USART1_IRQHandler+0x68>)
 80008b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <USART1_IRQHandler+0x68>)
 80008bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			//!TODO: Restart index
		}
	}


}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40013800 	.word	0x40013800
 80008cc:	20000860 	.word	0x20000860
 80008d0:	20000450 	.word	0x20000450

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490e      	ldr	r1, [pc, #56]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0b      	ldr	r4, [pc, #44]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008fe:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000902:	f000 f817 	bl	8000934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fd71 	bl	80003ec <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000918:	080013fc 	.word	0x080013fc
  ldr r2, =_sbss
 800091c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000920:	20000874 	.word	0x20000874

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <__errno>:
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <__errno+0x8>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2000003c 	.word	0x2000003c

08000934 <__libc_init_array>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	2500      	movs	r5, #0
 8000938:	4e0c      	ldr	r6, [pc, #48]	; (800096c <__libc_init_array+0x38>)
 800093a:	4c0d      	ldr	r4, [pc, #52]	; (8000970 <__libc_init_array+0x3c>)
 800093c:	1ba4      	subs	r4, r4, r6
 800093e:	10a4      	asrs	r4, r4, #2
 8000940:	42a5      	cmp	r5, r4
 8000942:	d109      	bne.n	8000958 <__libc_init_array+0x24>
 8000944:	f000 fc56 	bl	80011f4 <_init>
 8000948:	2500      	movs	r5, #0
 800094a:	4e0a      	ldr	r6, [pc, #40]	; (8000974 <__libc_init_array+0x40>)
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <__libc_init_array+0x44>)
 800094e:	1ba4      	subs	r4, r4, r6
 8000950:	10a4      	asrs	r4, r4, #2
 8000952:	42a5      	cmp	r5, r4
 8000954:	d105      	bne.n	8000962 <__libc_init_array+0x2e>
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095c:	4798      	blx	r3
 800095e:	3501      	adds	r5, #1
 8000960:	e7ee      	b.n	8000940 <__libc_init_array+0xc>
 8000962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000966:	4798      	blx	r3
 8000968:	3501      	adds	r5, #1
 800096a:	e7f2      	b.n	8000952 <__libc_init_array+0x1e>
 800096c:	080013f4 	.word	0x080013f4
 8000970:	080013f4 	.word	0x080013f4
 8000974:	080013f4 	.word	0x080013f4
 8000978:	080013f8 	.word	0x080013f8

0800097c <memset>:
 800097c:	4603      	mov	r3, r0
 800097e:	4402      	add	r2, r0
 8000980:	4293      	cmp	r3, r2
 8000982:	d100      	bne.n	8000986 <memset+0xa>
 8000984:	4770      	bx	lr
 8000986:	f803 1b01 	strb.w	r1, [r3], #1
 800098a:	e7f9      	b.n	8000980 <memset+0x4>

0800098c <siprintf>:
 800098c:	b40e      	push	{r1, r2, r3}
 800098e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000992:	b500      	push	{lr}
 8000994:	b09c      	sub	sp, #112	; 0x70
 8000996:	ab1d      	add	r3, sp, #116	; 0x74
 8000998:	9002      	str	r0, [sp, #8]
 800099a:	9006      	str	r0, [sp, #24]
 800099c:	9107      	str	r1, [sp, #28]
 800099e:	9104      	str	r1, [sp, #16]
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <siprintf+0x38>)
 80009a2:	4909      	ldr	r1, [pc, #36]	; (80009c8 <siprintf+0x3c>)
 80009a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009a8:	9105      	str	r1, [sp, #20]
 80009aa:	6800      	ldr	r0, [r0, #0]
 80009ac:	a902      	add	r1, sp, #8
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	f000 f888 	bl	8000ac4 <_svfiprintf_r>
 80009b4:	2200      	movs	r2, #0
 80009b6:	9b02      	ldr	r3, [sp, #8]
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	b01c      	add	sp, #112	; 0x70
 80009bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80009c0:	b003      	add	sp, #12
 80009c2:	4770      	bx	lr
 80009c4:	2000003c 	.word	0x2000003c
 80009c8:	ffff0208 	.word	0xffff0208

080009cc <strcpy>:
 80009cc:	4603      	mov	r3, r0
 80009ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80009d2:	f803 2b01 	strb.w	r2, [r3], #1
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d1f9      	bne.n	80009ce <strcpy+0x2>
 80009da:	4770      	bx	lr

080009dc <strstr>:
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	7803      	ldrb	r3, [r0, #0]
 80009e0:	b17b      	cbz	r3, 8000a02 <strstr+0x26>
 80009e2:	4604      	mov	r4, r0
 80009e4:	7823      	ldrb	r3, [r4, #0]
 80009e6:	4620      	mov	r0, r4
 80009e8:	1c66      	adds	r6, r4, #1
 80009ea:	b17b      	cbz	r3, 8000a0c <strstr+0x30>
 80009ec:	1e4a      	subs	r2, r1, #1
 80009ee:	1e63      	subs	r3, r4, #1
 80009f0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80009f4:	b14d      	cbz	r5, 8000a0a <strstr+0x2e>
 80009f6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80009fa:	4634      	mov	r4, r6
 80009fc:	42af      	cmp	r7, r5
 80009fe:	d0f7      	beq.n	80009f0 <strstr+0x14>
 8000a00:	e7f0      	b.n	80009e4 <strstr+0x8>
 8000a02:	780b      	ldrb	r3, [r1, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf18      	it	ne
 8000a08:	2000      	movne	r0, #0
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	e7fc      	b.n	8000a0a <strstr+0x2e>

08000a10 <__ssputs_r>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	688e      	ldr	r6, [r1, #8]
 8000a16:	4682      	mov	sl, r0
 8000a18:	429e      	cmp	r6, r3
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	4690      	mov	r8, r2
 8000a1e:	4699      	mov	r9, r3
 8000a20:	d837      	bhi.n	8000a92 <__ssputs_r+0x82>
 8000a22:	898a      	ldrh	r2, [r1, #12]
 8000a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a28:	d031      	beq.n	8000a8e <__ssputs_r+0x7e>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	6825      	ldr	r5, [r4, #0]
 8000a2e:	6909      	ldr	r1, [r1, #16]
 8000a30:	1a6f      	subs	r7, r5, r1
 8000a32:	6965      	ldr	r5, [r4, #20]
 8000a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a38:	fb95 f5f3 	sdiv	r5, r5, r3
 8000a3c:	f109 0301 	add.w	r3, r9, #1
 8000a40:	443b      	add	r3, r7
 8000a42:	429d      	cmp	r5, r3
 8000a44:	bf38      	it	cc
 8000a46:	461d      	movcc	r5, r3
 8000a48:	0553      	lsls	r3, r2, #21
 8000a4a:	d530      	bpl.n	8000aae <__ssputs_r+0x9e>
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	f000 fb37 	bl	80010c0 <_malloc_r>
 8000a52:	4606      	mov	r6, r0
 8000a54:	b950      	cbnz	r0, 8000a6c <__ssputs_r+0x5c>
 8000a56:	230c      	movs	r3, #12
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f8ca 3000 	str.w	r3, [sl]
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a66:	81a3      	strh	r3, [r4, #12]
 8000a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6c:	463a      	mov	r2, r7
 8000a6e:	6921      	ldr	r1, [r4, #16]
 8000a70:	f000 fab6 	bl	8000fe0 <memcpy>
 8000a74:	89a3      	ldrh	r3, [r4, #12]
 8000a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	6126      	str	r6, [r4, #16]
 8000a82:	443e      	add	r6, r7
 8000a84:	6026      	str	r6, [r4, #0]
 8000a86:	464e      	mov	r6, r9
 8000a88:	6165      	str	r5, [r4, #20]
 8000a8a:	1bed      	subs	r5, r5, r7
 8000a8c:	60a5      	str	r5, [r4, #8]
 8000a8e:	454e      	cmp	r6, r9
 8000a90:	d900      	bls.n	8000a94 <__ssputs_r+0x84>
 8000a92:	464e      	mov	r6, r9
 8000a94:	4632      	mov	r2, r6
 8000a96:	4641      	mov	r1, r8
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	f000 faac 	bl	8000ff6 <memmove>
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	1b9b      	subs	r3, r3, r6
 8000aa4:	60a3      	str	r3, [r4, #8]
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	441e      	add	r6, r3
 8000aaa:	6026      	str	r6, [r4, #0]
 8000aac:	e7dc      	b.n	8000a68 <__ssputs_r+0x58>
 8000aae:	462a      	mov	r2, r5
 8000ab0:	f000 fb60 	bl	8001174 <_realloc_r>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1e2      	bne.n	8000a80 <__ssputs_r+0x70>
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	4650      	mov	r0, sl
 8000abe:	f000 fab3 	bl	8001028 <_free_r>
 8000ac2:	e7c8      	b.n	8000a56 <__ssputs_r+0x46>

08000ac4 <_svfiprintf_r>:
 8000ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ac8:	461d      	mov	r5, r3
 8000aca:	898b      	ldrh	r3, [r1, #12]
 8000acc:	b09d      	sub	sp, #116	; 0x74
 8000ace:	061f      	lsls	r7, r3, #24
 8000ad0:	4680      	mov	r8, r0
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	4616      	mov	r6, r2
 8000ad6:	d50f      	bpl.n	8000af8 <_svfiprintf_r+0x34>
 8000ad8:	690b      	ldr	r3, [r1, #16]
 8000ada:	b96b      	cbnz	r3, 8000af8 <_svfiprintf_r+0x34>
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	f000 faef 	bl	80010c0 <_malloc_r>
 8000ae2:	6020      	str	r0, [r4, #0]
 8000ae4:	6120      	str	r0, [r4, #16]
 8000ae6:	b928      	cbnz	r0, 8000af4 <_svfiprintf_r+0x30>
 8000ae8:	230c      	movs	r3, #12
 8000aea:	f8c8 3000 	str.w	r3, [r8]
 8000aee:	f04f 30ff 	mov.w	r0, #4294967295
 8000af2:	e0c8      	b.n	8000c86 <_svfiprintf_r+0x1c2>
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	6163      	str	r3, [r4, #20]
 8000af8:	2300      	movs	r3, #0
 8000afa:	9309      	str	r3, [sp, #36]	; 0x24
 8000afc:	2320      	movs	r3, #32
 8000afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b02:	2330      	movs	r3, #48	; 0x30
 8000b04:	f04f 0b01 	mov.w	fp, #1
 8000b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b0c:	9503      	str	r5, [sp, #12]
 8000b0e:	4637      	mov	r7, r6
 8000b10:	463d      	mov	r5, r7
 8000b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000b16:	b10b      	cbz	r3, 8000b1c <_svfiprintf_r+0x58>
 8000b18:	2b25      	cmp	r3, #37	; 0x25
 8000b1a:	d13e      	bne.n	8000b9a <_svfiprintf_r+0xd6>
 8000b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8000b20:	d00b      	beq.n	8000b3a <_svfiprintf_r+0x76>
 8000b22:	4653      	mov	r3, sl
 8000b24:	4632      	mov	r2, r6
 8000b26:	4621      	mov	r1, r4
 8000b28:	4640      	mov	r0, r8
 8000b2a:	f7ff ff71 	bl	8000a10 <__ssputs_r>
 8000b2e:	3001      	adds	r0, #1
 8000b30:	f000 80a4 	beq.w	8000c7c <_svfiprintf_r+0x1b8>
 8000b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b36:	4453      	add	r3, sl
 8000b38:	9309      	str	r3, [sp, #36]	; 0x24
 8000b3a:	783b      	ldrb	r3, [r7, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 809d 	beq.w	8000c7c <_svfiprintf_r+0x1b8>
 8000b42:	2300      	movs	r3, #0
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	9307      	str	r3, [sp, #28]
 8000b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b54:	931a      	str	r3, [sp, #104]	; 0x68
 8000b56:	462f      	mov	r7, r5
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000b5e:	4850      	ldr	r0, [pc, #320]	; (8000ca0 <_svfiprintf_r+0x1dc>)
 8000b60:	f000 fa30 	bl	8000fc4 <memchr>
 8000b64:	9b04      	ldr	r3, [sp, #16]
 8000b66:	b9d0      	cbnz	r0, 8000b9e <_svfiprintf_r+0xda>
 8000b68:	06d9      	lsls	r1, r3, #27
 8000b6a:	bf44      	itt	mi
 8000b6c:	2220      	movmi	r2, #32
 8000b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000b72:	071a      	lsls	r2, r3, #28
 8000b74:	bf44      	itt	mi
 8000b76:	222b      	movmi	r2, #43	; 0x2b
 8000b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000b7c:	782a      	ldrb	r2, [r5, #0]
 8000b7e:	2a2a      	cmp	r2, #42	; 0x2a
 8000b80:	d015      	beq.n	8000bae <_svfiprintf_r+0xea>
 8000b82:	462f      	mov	r7, r5
 8000b84:	2000      	movs	r0, #0
 8000b86:	250a      	movs	r5, #10
 8000b88:	9a07      	ldr	r2, [sp, #28]
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b90:	3b30      	subs	r3, #48	; 0x30
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	d94d      	bls.n	8000c32 <_svfiprintf_r+0x16e>
 8000b96:	b1b8      	cbz	r0, 8000bc8 <_svfiprintf_r+0x104>
 8000b98:	e00f      	b.n	8000bba <_svfiprintf_r+0xf6>
 8000b9a:	462f      	mov	r7, r5
 8000b9c:	e7b8      	b.n	8000b10 <_svfiprintf_r+0x4c>
 8000b9e:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <_svfiprintf_r+0x1dc>)
 8000ba0:	463d      	mov	r5, r7
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	fa0b f000 	lsl.w	r0, fp, r0
 8000ba8:	4318      	orrs	r0, r3
 8000baa:	9004      	str	r0, [sp, #16]
 8000bac:	e7d3      	b.n	8000b56 <_svfiprintf_r+0x92>
 8000bae:	9a03      	ldr	r2, [sp, #12]
 8000bb0:	1d11      	adds	r1, r2, #4
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	9103      	str	r1, [sp, #12]
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	db01      	blt.n	8000bbe <_svfiprintf_r+0xfa>
 8000bba:	9207      	str	r2, [sp, #28]
 8000bbc:	e004      	b.n	8000bc8 <_svfiprintf_r+0x104>
 8000bbe:	4252      	negs	r2, r2
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	9207      	str	r2, [sp, #28]
 8000bc6:	9304      	str	r3, [sp, #16]
 8000bc8:	783b      	ldrb	r3, [r7, #0]
 8000bca:	2b2e      	cmp	r3, #46	; 0x2e
 8000bcc:	d10c      	bne.n	8000be8 <_svfiprintf_r+0x124>
 8000bce:	787b      	ldrb	r3, [r7, #1]
 8000bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8000bd2:	d133      	bne.n	8000c3c <_svfiprintf_r+0x178>
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	3702      	adds	r7, #2
 8000bd8:	1d1a      	adds	r2, r3, #4
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	9203      	str	r2, [sp, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bfb8      	it	lt
 8000be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	4d2e      	ldr	r5, [pc, #184]	; (8000ca4 <_svfiprintf_r+0x1e0>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	7839      	ldrb	r1, [r7, #0]
 8000bee:	4628      	mov	r0, r5
 8000bf0:	f000 f9e8 	bl	8000fc4 <memchr>
 8000bf4:	b138      	cbz	r0, 8000c06 <_svfiprintf_r+0x142>
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	1b40      	subs	r0, r0, r5
 8000bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8000bfe:	9b04      	ldr	r3, [sp, #16]
 8000c00:	3701      	adds	r7, #1
 8000c02:	4303      	orrs	r3, r0
 8000c04:	9304      	str	r3, [sp, #16]
 8000c06:	7839      	ldrb	r1, [r7, #0]
 8000c08:	2206      	movs	r2, #6
 8000c0a:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <_svfiprintf_r+0x1e4>)
 8000c0c:	1c7e      	adds	r6, r7, #1
 8000c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c12:	f000 f9d7 	bl	8000fc4 <memchr>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d038      	beq.n	8000c8c <_svfiprintf_r+0x1c8>
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <_svfiprintf_r+0x1e8>)
 8000c1c:	bb13      	cbnz	r3, 8000c64 <_svfiprintf_r+0x1a0>
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	3307      	adds	r3, #7
 8000c22:	f023 0307 	bic.w	r3, r3, #7
 8000c26:	3308      	adds	r3, #8
 8000c28:	9303      	str	r3, [sp, #12]
 8000c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c2c:	444b      	add	r3, r9
 8000c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c30:	e76d      	b.n	8000b0e <_svfiprintf_r+0x4a>
 8000c32:	fb05 3202 	mla	r2, r5, r2, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	460f      	mov	r7, r1
 8000c3a:	e7a6      	b.n	8000b8a <_svfiprintf_r+0xc6>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	250a      	movs	r5, #10
 8000c40:	4619      	mov	r1, r3
 8000c42:	3701      	adds	r7, #1
 8000c44:	9305      	str	r3, [sp, #20]
 8000c46:	4638      	mov	r0, r7
 8000c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c4c:	3a30      	subs	r2, #48	; 0x30
 8000c4e:	2a09      	cmp	r2, #9
 8000c50:	d903      	bls.n	8000c5a <_svfiprintf_r+0x196>
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0c8      	beq.n	8000be8 <_svfiprintf_r+0x124>
 8000c56:	9105      	str	r1, [sp, #20]
 8000c58:	e7c6      	b.n	8000be8 <_svfiprintf_r+0x124>
 8000c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8000c5e:	2301      	movs	r3, #1
 8000c60:	4607      	mov	r7, r0
 8000c62:	e7f0      	b.n	8000c46 <_svfiprintf_r+0x182>
 8000c64:	ab03      	add	r3, sp, #12
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4622      	mov	r2, r4
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_svfiprintf_r+0x1ec>)
 8000c6c:	a904      	add	r1, sp, #16
 8000c6e:	4640      	mov	r0, r8
 8000c70:	f3af 8000 	nop.w
 8000c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000c78:	4681      	mov	r9, r0
 8000c7a:	d1d6      	bne.n	8000c2a <_svfiprintf_r+0x166>
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	065b      	lsls	r3, r3, #25
 8000c80:	f53f af35 	bmi.w	8000aee <_svfiprintf_r+0x2a>
 8000c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c86:	b01d      	add	sp, #116	; 0x74
 8000c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8c:	ab03      	add	r3, sp, #12
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	4622      	mov	r2, r4
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_svfiprintf_r+0x1ec>)
 8000c94:	a904      	add	r1, sp, #16
 8000c96:	4640      	mov	r0, r8
 8000c98:	f000 f882 	bl	8000da0 <_printf_i>
 8000c9c:	e7ea      	b.n	8000c74 <_svfiprintf_r+0x1b0>
 8000c9e:	bf00      	nop
 8000ca0:	080013c0 	.word	0x080013c0
 8000ca4:	080013c6 	.word	0x080013c6
 8000ca8:	080013ca 	.word	0x080013ca
 8000cac:	00000000 	.word	0x00000000
 8000cb0:	08000a11 	.word	0x08000a11

08000cb4 <_printf_common>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	4691      	mov	r9, r2
 8000cba:	461f      	mov	r7, r3
 8000cbc:	688a      	ldr	r2, [r1, #8]
 8000cbe:	690b      	ldr	r3, [r1, #16]
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	bfb8      	it	lt
 8000cc6:	4613      	movlt	r3, r2
 8000cc8:	f8c9 3000 	str.w	r3, [r9]
 8000ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cd0:	460c      	mov	r4, r1
 8000cd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cd6:	b112      	cbz	r2, 8000cde <_printf_common+0x2a>
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f8c9 3000 	str.w	r3, [r9]
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	0699      	lsls	r1, r3, #26
 8000ce2:	bf42      	ittt	mi
 8000ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000ce8:	3302      	addmi	r3, #2
 8000cea:	f8c9 3000 	strmi.w	r3, [r9]
 8000cee:	6825      	ldr	r5, [r4, #0]
 8000cf0:	f015 0506 	ands.w	r5, r5, #6
 8000cf4:	d107      	bne.n	8000d06 <_printf_common+0x52>
 8000cf6:	f104 0a19 	add.w	sl, r4, #25
 8000cfa:	68e3      	ldr	r3, [r4, #12]
 8000cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8000d00:	1a9b      	subs	r3, r3, r2
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	dc29      	bgt.n	8000d5a <_printf_common+0xa6>
 8000d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	3300      	adds	r3, #0
 8000d0e:	bf18      	it	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	0692      	lsls	r2, r2, #26
 8000d14:	d42e      	bmi.n	8000d74 <_printf_common+0xc0>
 8000d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	47c0      	blx	r8
 8000d20:	3001      	adds	r0, #1
 8000d22:	d021      	beq.n	8000d68 <_printf_common+0xb4>
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	68e5      	ldr	r5, [r4, #12]
 8000d28:	f003 0306 	and.w	r3, r3, #6
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	bf18      	it	ne
 8000d30:	2500      	movne	r5, #0
 8000d32:	f8d9 2000 	ldr.w	r2, [r9]
 8000d36:	f04f 0900 	mov.w	r9, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	1aad      	subeq	r5, r5, r2
 8000d3e:	68a3      	ldr	r3, [r4, #8]
 8000d40:	6922      	ldr	r2, [r4, #16]
 8000d42:	bf08      	it	eq
 8000d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	bfc4      	itt	gt
 8000d4c:	1a9b      	subgt	r3, r3, r2
 8000d4e:	18ed      	addgt	r5, r5, r3
 8000d50:	341a      	adds	r4, #26
 8000d52:	454d      	cmp	r5, r9
 8000d54:	d11a      	bne.n	8000d8c <_printf_common+0xd8>
 8000d56:	2000      	movs	r0, #0
 8000d58:	e008      	b.n	8000d6c <_printf_common+0xb8>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	4652      	mov	r2, sl
 8000d5e:	4639      	mov	r1, r7
 8000d60:	4630      	mov	r0, r6
 8000d62:	47c0      	blx	r8
 8000d64:	3001      	adds	r0, #1
 8000d66:	d103      	bne.n	8000d70 <_printf_common+0xbc>
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d70:	3501      	adds	r5, #1
 8000d72:	e7c2      	b.n	8000cfa <_printf_common+0x46>
 8000d74:	2030      	movs	r0, #48	; 0x30
 8000d76:	18e1      	adds	r1, r4, r3
 8000d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d82:	4422      	add	r2, r4
 8000d84:	3302      	adds	r3, #2
 8000d86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d8a:	e7c4      	b.n	8000d16 <_printf_common+0x62>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4622      	mov	r2, r4
 8000d90:	4639      	mov	r1, r7
 8000d92:	4630      	mov	r0, r6
 8000d94:	47c0      	blx	r8
 8000d96:	3001      	adds	r0, #1
 8000d98:	d0e6      	beq.n	8000d68 <_printf_common+0xb4>
 8000d9a:	f109 0901 	add.w	r9, r9, #1
 8000d9e:	e7d8      	b.n	8000d52 <_printf_common+0x9e>

08000da0 <_printf_i>:
 8000da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000da4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000da8:	460c      	mov	r4, r1
 8000daa:	7e09      	ldrb	r1, [r1, #24]
 8000dac:	b085      	sub	sp, #20
 8000dae:	296e      	cmp	r1, #110	; 0x6e
 8000db0:	4617      	mov	r7, r2
 8000db2:	4606      	mov	r6, r0
 8000db4:	4698      	mov	r8, r3
 8000db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000db8:	f000 80b3 	beq.w	8000f22 <_printf_i+0x182>
 8000dbc:	d822      	bhi.n	8000e04 <_printf_i+0x64>
 8000dbe:	2963      	cmp	r1, #99	; 0x63
 8000dc0:	d036      	beq.n	8000e30 <_printf_i+0x90>
 8000dc2:	d80a      	bhi.n	8000dda <_printf_i+0x3a>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	f000 80b9 	beq.w	8000f3c <_printf_i+0x19c>
 8000dca:	2958      	cmp	r1, #88	; 0x58
 8000dcc:	f000 8083 	beq.w	8000ed6 <_printf_i+0x136>
 8000dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000dd8:	e032      	b.n	8000e40 <_printf_i+0xa0>
 8000dda:	2964      	cmp	r1, #100	; 0x64
 8000ddc:	d001      	beq.n	8000de2 <_printf_i+0x42>
 8000dde:	2969      	cmp	r1, #105	; 0x69
 8000de0:	d1f6      	bne.n	8000dd0 <_printf_i+0x30>
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	0605      	lsls	r5, r0, #24
 8000de8:	f103 0104 	add.w	r1, r3, #4
 8000dec:	d52a      	bpl.n	8000e44 <_printf_i+0xa4>
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6011      	str	r1, [r2, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da03      	bge.n	8000dfe <_printf_i+0x5e>
 8000df6:	222d      	movs	r2, #45	; 0x2d
 8000df8:	425b      	negs	r3, r3
 8000dfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000dfe:	486f      	ldr	r0, [pc, #444]	; (8000fbc <_printf_i+0x21c>)
 8000e00:	220a      	movs	r2, #10
 8000e02:	e039      	b.n	8000e78 <_printf_i+0xd8>
 8000e04:	2973      	cmp	r1, #115	; 0x73
 8000e06:	f000 809d 	beq.w	8000f44 <_printf_i+0x1a4>
 8000e0a:	d808      	bhi.n	8000e1e <_printf_i+0x7e>
 8000e0c:	296f      	cmp	r1, #111	; 0x6f
 8000e0e:	d020      	beq.n	8000e52 <_printf_i+0xb2>
 8000e10:	2970      	cmp	r1, #112	; 0x70
 8000e12:	d1dd      	bne.n	8000dd0 <_printf_i+0x30>
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6023      	str	r3, [r4, #0]
 8000e1c:	e003      	b.n	8000e26 <_printf_i+0x86>
 8000e1e:	2975      	cmp	r1, #117	; 0x75
 8000e20:	d017      	beq.n	8000e52 <_printf_i+0xb2>
 8000e22:	2978      	cmp	r1, #120	; 0x78
 8000e24:	d1d4      	bne.n	8000dd0 <_printf_i+0x30>
 8000e26:	2378      	movs	r3, #120	; 0x78
 8000e28:	4865      	ldr	r0, [pc, #404]	; (8000fc0 <_printf_i+0x220>)
 8000e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000e2e:	e055      	b.n	8000edc <_printf_i+0x13c>
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e36:	1d19      	adds	r1, r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6011      	str	r1, [r2, #0]
 8000e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e40:	2301      	movs	r3, #1
 8000e42:	e08c      	b.n	8000f5e <_printf_i+0x1be>
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e4a:	6011      	str	r1, [r2, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	b21b      	sxthne	r3, r3
 8000e50:	e7cf      	b.n	8000df2 <_printf_i+0x52>
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	6825      	ldr	r5, [r4, #0]
 8000e56:	1d18      	adds	r0, r3, #4
 8000e58:	6010      	str	r0, [r2, #0]
 8000e5a:	0628      	lsls	r0, r5, #24
 8000e5c:	d501      	bpl.n	8000e62 <_printf_i+0xc2>
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	e002      	b.n	8000e68 <_printf_i+0xc8>
 8000e62:	0668      	lsls	r0, r5, #25
 8000e64:	d5fb      	bpl.n	8000e5e <_printf_i+0xbe>
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	296f      	cmp	r1, #111	; 0x6f
 8000e6a:	bf14      	ite	ne
 8000e6c:	220a      	movne	r2, #10
 8000e6e:	2208      	moveq	r2, #8
 8000e70:	4852      	ldr	r0, [pc, #328]	; (8000fbc <_printf_i+0x21c>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e78:	6865      	ldr	r5, [r4, #4]
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	60a5      	str	r5, [r4, #8]
 8000e7e:	f2c0 8095 	blt.w	8000fac <_printf_i+0x20c>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	f021 0104 	bic.w	r1, r1, #4
 8000e88:	6021      	str	r1, [r4, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d13d      	bne.n	8000f0a <_printf_i+0x16a>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f040 808e 	bne.w	8000fb0 <_printf_i+0x210>
 8000e94:	4665      	mov	r5, ip
 8000e96:	2a08      	cmp	r2, #8
 8000e98:	d10b      	bne.n	8000eb2 <_printf_i+0x112>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	07db      	lsls	r3, r3, #31
 8000e9e:	d508      	bpl.n	8000eb2 <_printf_i+0x112>
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	6862      	ldr	r2, [r4, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	bfde      	ittt	le
 8000ea8:	2330      	movle	r3, #48	; 0x30
 8000eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000eae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000eb2:	ebac 0305 	sub.w	r3, ip, r5
 8000eb6:	6123      	str	r3, [r4, #16]
 8000eb8:	f8cd 8000 	str.w	r8, [sp]
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	aa03      	add	r2, sp, #12
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f7ff fef6 	bl	8000cb4 <_printf_common>
 8000ec8:	3001      	adds	r0, #1
 8000eca:	d14d      	bne.n	8000f68 <_printf_i+0x1c8>
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	b005      	add	sp, #20
 8000ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ed6:	4839      	ldr	r0, [pc, #228]	; (8000fbc <_printf_i+0x21c>)
 8000ed8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	6821      	ldr	r1, [r4, #0]
 8000ee0:	1d1d      	adds	r5, r3, #4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6015      	str	r5, [r2, #0]
 8000ee6:	060a      	lsls	r2, r1, #24
 8000ee8:	d50b      	bpl.n	8000f02 <_printf_i+0x162>
 8000eea:	07ca      	lsls	r2, r1, #31
 8000eec:	bf44      	itt	mi
 8000eee:	f041 0120 	orrmi.w	r1, r1, #32
 8000ef2:	6021      	strmi	r1, [r4, #0]
 8000ef4:	b91b      	cbnz	r3, 8000efe <_printf_i+0x15e>
 8000ef6:	6822      	ldr	r2, [r4, #0]
 8000ef8:	f022 0220 	bic.w	r2, r2, #32
 8000efc:	6022      	str	r2, [r4, #0]
 8000efe:	2210      	movs	r2, #16
 8000f00:	e7b7      	b.n	8000e72 <_printf_i+0xd2>
 8000f02:	064d      	lsls	r5, r1, #25
 8000f04:	bf48      	it	mi
 8000f06:	b29b      	uxthmi	r3, r3
 8000f08:	e7ef      	b.n	8000eea <_printf_i+0x14a>
 8000f0a:	4665      	mov	r5, ip
 8000f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f10:	fb02 3311 	mls	r3, r2, r1, r3
 8000f14:	5cc3      	ldrb	r3, [r0, r3]
 8000f16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	d1f5      	bne.n	8000f0c <_printf_i+0x16c>
 8000f20:	e7b9      	b.n	8000e96 <_printf_i+0xf6>
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	6825      	ldr	r5, [r4, #0]
 8000f26:	1d18      	adds	r0, r3, #4
 8000f28:	6961      	ldr	r1, [r4, #20]
 8000f2a:	6010      	str	r0, [r2, #0]
 8000f2c:	0628      	lsls	r0, r5, #24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	d501      	bpl.n	8000f36 <_printf_i+0x196>
 8000f32:	6019      	str	r1, [r3, #0]
 8000f34:	e002      	b.n	8000f3c <_printf_i+0x19c>
 8000f36:	066a      	lsls	r2, r5, #25
 8000f38:	d5fb      	bpl.n	8000f32 <_printf_i+0x192>
 8000f3a:	8019      	strh	r1, [r3, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4665      	mov	r5, ip
 8000f40:	6123      	str	r3, [r4, #16]
 8000f42:	e7b9      	b.n	8000eb8 <_printf_i+0x118>
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	1d19      	adds	r1, r3, #4
 8000f48:	6011      	str	r1, [r2, #0]
 8000f4a:	681d      	ldr	r5, [r3, #0]
 8000f4c:	6862      	ldr	r2, [r4, #4]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4628      	mov	r0, r5
 8000f52:	f000 f837 	bl	8000fc4 <memchr>
 8000f56:	b108      	cbz	r0, 8000f5c <_printf_i+0x1bc>
 8000f58:	1b40      	subs	r0, r0, r5
 8000f5a:	6060      	str	r0, [r4, #4]
 8000f5c:	6863      	ldr	r3, [r4, #4]
 8000f5e:	6123      	str	r3, [r4, #16]
 8000f60:	2300      	movs	r3, #0
 8000f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f66:	e7a7      	b.n	8000eb8 <_printf_i+0x118>
 8000f68:	6923      	ldr	r3, [r4, #16]
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	4630      	mov	r0, r6
 8000f70:	47c0      	blx	r8
 8000f72:	3001      	adds	r0, #1
 8000f74:	d0aa      	beq.n	8000ecc <_printf_i+0x12c>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	079b      	lsls	r3, r3, #30
 8000f7a:	d413      	bmi.n	8000fa4 <_printf_i+0x204>
 8000f7c:	68e0      	ldr	r0, [r4, #12]
 8000f7e:	9b03      	ldr	r3, [sp, #12]
 8000f80:	4298      	cmp	r0, r3
 8000f82:	bfb8      	it	lt
 8000f84:	4618      	movlt	r0, r3
 8000f86:	e7a3      	b.n	8000ed0 <_printf_i+0x130>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	464a      	mov	r2, r9
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	4630      	mov	r0, r6
 8000f90:	47c0      	blx	r8
 8000f92:	3001      	adds	r0, #1
 8000f94:	d09a      	beq.n	8000ecc <_printf_i+0x12c>
 8000f96:	3501      	adds	r5, #1
 8000f98:	68e3      	ldr	r3, [r4, #12]
 8000f9a:	9a03      	ldr	r2, [sp, #12]
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	42ab      	cmp	r3, r5
 8000fa0:	dcf2      	bgt.n	8000f88 <_printf_i+0x1e8>
 8000fa2:	e7eb      	b.n	8000f7c <_printf_i+0x1dc>
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	f104 0919 	add.w	r9, r4, #25
 8000faa:	e7f5      	b.n	8000f98 <_printf_i+0x1f8>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ac      	bne.n	8000f0a <_printf_i+0x16a>
 8000fb0:	7803      	ldrb	r3, [r0, #0]
 8000fb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fba:	e76c      	b.n	8000e96 <_printf_i+0xf6>
 8000fbc:	080013d1 	.word	0x080013d1
 8000fc0:	080013e2 	.word	0x080013e2

08000fc4 <memchr>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	b2c9      	uxtb	r1, r1
 8000fc8:	4402      	add	r2, r0
 8000fca:	4290      	cmp	r0, r2
 8000fcc:	4603      	mov	r3, r0
 8000fce:	d101      	bne.n	8000fd4 <memchr+0x10>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e003      	b.n	8000fdc <memchr+0x18>
 8000fd4:	781c      	ldrb	r4, [r3, #0]
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	428c      	cmp	r4, r1
 8000fda:	d1f6      	bne.n	8000fca <memchr+0x6>
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <memcpy>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	1e43      	subs	r3, r0, #1
 8000fe4:	440a      	add	r2, r1
 8000fe6:	4291      	cmp	r1, r2
 8000fe8:	d100      	bne.n	8000fec <memcpy+0xc>
 8000fea:	bd10      	pop	{r4, pc}
 8000fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ff4:	e7f7      	b.n	8000fe6 <memcpy+0x6>

08000ff6 <memmove>:
 8000ff6:	4288      	cmp	r0, r1
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	eb01 0302 	add.w	r3, r1, r2
 8000ffe:	d807      	bhi.n	8001010 <memmove+0x1a>
 8001000:	1e42      	subs	r2, r0, #1
 8001002:	4299      	cmp	r1, r3
 8001004:	d00a      	beq.n	800101c <memmove+0x26>
 8001006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800100a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800100e:	e7f8      	b.n	8001002 <memmove+0xc>
 8001010:	4283      	cmp	r3, r0
 8001012:	d9f5      	bls.n	8001000 <memmove+0xa>
 8001014:	1881      	adds	r1, r0, r2
 8001016:	1ad2      	subs	r2, r2, r3
 8001018:	42d3      	cmn	r3, r2
 800101a:	d100      	bne.n	800101e <memmove+0x28>
 800101c:	bd10      	pop	{r4, pc}
 800101e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001022:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001026:	e7f7      	b.n	8001018 <memmove+0x22>

08001028 <_free_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4605      	mov	r5, r0
 800102c:	2900      	cmp	r1, #0
 800102e:	d043      	beq.n	80010b8 <_free_r+0x90>
 8001030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001034:	1f0c      	subs	r4, r1, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	bfb8      	it	lt
 800103a:	18e4      	addlt	r4, r4, r3
 800103c:	f000 f8d0 	bl	80011e0 <__malloc_lock>
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <_free_r+0x94>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	4610      	mov	r0, r2
 8001046:	b933      	cbnz	r3, 8001056 <_free_r+0x2e>
 8001048:	6063      	str	r3, [r4, #4]
 800104a:	6014      	str	r4, [r2, #0]
 800104c:	4628      	mov	r0, r5
 800104e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001052:	f000 b8c6 	b.w	80011e2 <__malloc_unlock>
 8001056:	42a3      	cmp	r3, r4
 8001058:	d90b      	bls.n	8001072 <_free_r+0x4a>
 800105a:	6821      	ldr	r1, [r4, #0]
 800105c:	1862      	adds	r2, r4, r1
 800105e:	4293      	cmp	r3, r2
 8001060:	bf01      	itttt	eq
 8001062:	681a      	ldreq	r2, [r3, #0]
 8001064:	685b      	ldreq	r3, [r3, #4]
 8001066:	1852      	addeq	r2, r2, r1
 8001068:	6022      	streq	r2, [r4, #0]
 800106a:	6063      	str	r3, [r4, #4]
 800106c:	6004      	str	r4, [r0, #0]
 800106e:	e7ed      	b.n	800104c <_free_r+0x24>
 8001070:	4613      	mov	r3, r2
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	b10a      	cbz	r2, 800107a <_free_r+0x52>
 8001076:	42a2      	cmp	r2, r4
 8001078:	d9fa      	bls.n	8001070 <_free_r+0x48>
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	1858      	adds	r0, r3, r1
 800107e:	42a0      	cmp	r0, r4
 8001080:	d10b      	bne.n	800109a <_free_r+0x72>
 8001082:	6820      	ldr	r0, [r4, #0]
 8001084:	4401      	add	r1, r0
 8001086:	1858      	adds	r0, r3, r1
 8001088:	4282      	cmp	r2, r0
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	d1de      	bne.n	800104c <_free_r+0x24>
 800108e:	6810      	ldr	r0, [r2, #0]
 8001090:	6852      	ldr	r2, [r2, #4]
 8001092:	4401      	add	r1, r0
 8001094:	6019      	str	r1, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	e7d8      	b.n	800104c <_free_r+0x24>
 800109a:	d902      	bls.n	80010a2 <_free_r+0x7a>
 800109c:	230c      	movs	r3, #12
 800109e:	602b      	str	r3, [r5, #0]
 80010a0:	e7d4      	b.n	800104c <_free_r+0x24>
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	1821      	adds	r1, r4, r0
 80010a6:	428a      	cmp	r2, r1
 80010a8:	bf01      	itttt	eq
 80010aa:	6811      	ldreq	r1, [r2, #0]
 80010ac:	6852      	ldreq	r2, [r2, #4]
 80010ae:	1809      	addeq	r1, r1, r0
 80010b0:	6021      	streq	r1, [r4, #0]
 80010b2:	6062      	str	r2, [r4, #4]
 80010b4:	605c      	str	r4, [r3, #4]
 80010b6:	e7c9      	b.n	800104c <_free_r+0x24>
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	20000864 	.word	0x20000864

080010c0 <_malloc_r>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	1ccd      	adds	r5, r1, #3
 80010c4:	f025 0503 	bic.w	r5, r5, #3
 80010c8:	3508      	adds	r5, #8
 80010ca:	2d0c      	cmp	r5, #12
 80010cc:	bf38      	it	cc
 80010ce:	250c      	movcc	r5, #12
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	4606      	mov	r6, r0
 80010d4:	db01      	blt.n	80010da <_malloc_r+0x1a>
 80010d6:	42a9      	cmp	r1, r5
 80010d8:	d903      	bls.n	80010e2 <_malloc_r+0x22>
 80010da:	230c      	movs	r3, #12
 80010dc:	6033      	str	r3, [r6, #0]
 80010de:	2000      	movs	r0, #0
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	f000 f87d 	bl	80011e0 <__malloc_lock>
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <_malloc_r+0xac>)
 80010e8:	6814      	ldr	r4, [r2, #0]
 80010ea:	4621      	mov	r1, r4
 80010ec:	b991      	cbnz	r1, 8001114 <_malloc_r+0x54>
 80010ee:	4c20      	ldr	r4, [pc, #128]	; (8001170 <_malloc_r+0xb0>)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	b91b      	cbnz	r3, 80010fc <_malloc_r+0x3c>
 80010f4:	4630      	mov	r0, r6
 80010f6:	f000 f863 	bl	80011c0 <_sbrk_r>
 80010fa:	6020      	str	r0, [r4, #0]
 80010fc:	4629      	mov	r1, r5
 80010fe:	4630      	mov	r0, r6
 8001100:	f000 f85e 	bl	80011c0 <_sbrk_r>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d124      	bne.n	8001152 <_malloc_r+0x92>
 8001108:	230c      	movs	r3, #12
 800110a:	4630      	mov	r0, r6
 800110c:	6033      	str	r3, [r6, #0]
 800110e:	f000 f868 	bl	80011e2 <__malloc_unlock>
 8001112:	e7e4      	b.n	80010de <_malloc_r+0x1e>
 8001114:	680b      	ldr	r3, [r1, #0]
 8001116:	1b5b      	subs	r3, r3, r5
 8001118:	d418      	bmi.n	800114c <_malloc_r+0x8c>
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d90f      	bls.n	800113e <_malloc_r+0x7e>
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	18cc      	adds	r4, r1, r3
 8001122:	50cd      	str	r5, [r1, r3]
 8001124:	4630      	mov	r0, r6
 8001126:	f000 f85c 	bl	80011e2 <__malloc_unlock>
 800112a:	f104 000b 	add.w	r0, r4, #11
 800112e:	1d23      	adds	r3, r4, #4
 8001130:	f020 0007 	bic.w	r0, r0, #7
 8001134:	1ac3      	subs	r3, r0, r3
 8001136:	d0d3      	beq.n	80010e0 <_malloc_r+0x20>
 8001138:	425a      	negs	r2, r3
 800113a:	50e2      	str	r2, [r4, r3]
 800113c:	e7d0      	b.n	80010e0 <_malloc_r+0x20>
 800113e:	684b      	ldr	r3, [r1, #4]
 8001140:	428c      	cmp	r4, r1
 8001142:	bf16      	itet	ne
 8001144:	6063      	strne	r3, [r4, #4]
 8001146:	6013      	streq	r3, [r2, #0]
 8001148:	460c      	movne	r4, r1
 800114a:	e7eb      	b.n	8001124 <_malloc_r+0x64>
 800114c:	460c      	mov	r4, r1
 800114e:	6849      	ldr	r1, [r1, #4]
 8001150:	e7cc      	b.n	80010ec <_malloc_r+0x2c>
 8001152:	1cc4      	adds	r4, r0, #3
 8001154:	f024 0403 	bic.w	r4, r4, #3
 8001158:	42a0      	cmp	r0, r4
 800115a:	d005      	beq.n	8001168 <_malloc_r+0xa8>
 800115c:	1a21      	subs	r1, r4, r0
 800115e:	4630      	mov	r0, r6
 8001160:	f000 f82e 	bl	80011c0 <_sbrk_r>
 8001164:	3001      	adds	r0, #1
 8001166:	d0cf      	beq.n	8001108 <_malloc_r+0x48>
 8001168:	6025      	str	r5, [r4, #0]
 800116a:	e7db      	b.n	8001124 <_malloc_r+0x64>
 800116c:	20000864 	.word	0x20000864
 8001170:	20000868 	.word	0x20000868

08001174 <_realloc_r>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	4607      	mov	r7, r0
 8001178:	4614      	mov	r4, r2
 800117a:	460e      	mov	r6, r1
 800117c:	b921      	cbnz	r1, 8001188 <_realloc_r+0x14>
 800117e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001182:	4611      	mov	r1, r2
 8001184:	f7ff bf9c 	b.w	80010c0 <_malloc_r>
 8001188:	b922      	cbnz	r2, 8001194 <_realloc_r+0x20>
 800118a:	f7ff ff4d 	bl	8001028 <_free_r>
 800118e:	4625      	mov	r5, r4
 8001190:	4628      	mov	r0, r5
 8001192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001194:	f000 f826 	bl	80011e4 <_malloc_usable_size_r>
 8001198:	42a0      	cmp	r0, r4
 800119a:	d20f      	bcs.n	80011bc <_realloc_r+0x48>
 800119c:	4621      	mov	r1, r4
 800119e:	4638      	mov	r0, r7
 80011a0:	f7ff ff8e 	bl	80010c0 <_malloc_r>
 80011a4:	4605      	mov	r5, r0
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d0f2      	beq.n	8001190 <_realloc_r+0x1c>
 80011aa:	4631      	mov	r1, r6
 80011ac:	4622      	mov	r2, r4
 80011ae:	f7ff ff17 	bl	8000fe0 <memcpy>
 80011b2:	4631      	mov	r1, r6
 80011b4:	4638      	mov	r0, r7
 80011b6:	f7ff ff37 	bl	8001028 <_free_r>
 80011ba:	e7e9      	b.n	8001190 <_realloc_r+0x1c>
 80011bc:	4635      	mov	r5, r6
 80011be:	e7e7      	b.n	8001190 <_realloc_r+0x1c>

080011c0 <_sbrk_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	2300      	movs	r3, #0
 80011c4:	4c05      	ldr	r4, [pc, #20]	; (80011dc <_sbrk_r+0x1c>)
 80011c6:	4605      	mov	r5, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	f7ff f922 	bl	8000414 <_sbrk>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_sbrk_r+0x1a>
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	b103      	cbz	r3, 80011da <_sbrk_r+0x1a>
 80011d8:	602b      	str	r3, [r5, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	20000870 	.word	0x20000870

080011e0 <__malloc_lock>:
 80011e0:	4770      	bx	lr

080011e2 <__malloc_unlock>:
 80011e2:	4770      	bx	lr

080011e4 <_malloc_usable_size_r>:
 80011e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e8:	1f18      	subs	r0, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfbc      	itt	lt
 80011ee:	580b      	ldrlt	r3, [r1, r0]
 80011f0:	18c0      	addlt	r0, r0, r3
 80011f2:	4770      	bx	lr

080011f4 <_init>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr

08001200 <_fini>:
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	bf00      	nop
 8001204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001206:	bc08      	pop	{r3}
 8001208:	469e      	mov	lr, r3
 800120a:	4770      	bx	lr
