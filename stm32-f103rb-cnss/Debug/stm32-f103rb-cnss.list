
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fcc  08001fcc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08001fcc  08001fcc  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fcc  08001fcc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08001fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  200000d0  080020a4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  080020a4  00020b84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e93  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000130f  00000000  00000000  00026f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000318  00000000  00000000  000282a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  000285b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001efc  00000000  00000000  00028848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003bc5  00000000  00000000  0002a744  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000592d3  00000000  00000000  0002e309  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000875dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc0  00000000  00000000  00087658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d0 	.word	0x200000d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08001cdc 	.word	0x08001cdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d4 	.word	0x200000d4
 800016c:	08001cdc 	.word	0x08001cdc

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <setImagePath>:
static uint8_t image_path[PATH_SIZE];

static BOOL connection_closed;//added 30.4.21


void setImagePath(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	2100      	movs	r1, #0
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <setImagePath+0x24>)
 800018a:	f001 f96b 	bl	8001464 <memset>
	sprintf((char*)image_path, "image/path");
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <setImagePath+0x24>)
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <setImagePath+0x28>)
 8000192:	ca07      	ldmia	r2, {r0, r1, r2}
 8000194:	c303      	stmia	r3!, {r0, r1}
 8000196:	801a      	strh	r2, [r3, #0]
 8000198:	3302      	adds	r3, #2
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000474 	.word	0x20000474
 80001a8:	08001cf4 	.word	0x08001cf4

080001ac <alert_Handler>:

void *alert_Handler(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 80001b2:	2303      	movs	r3, #3
 80001b4:	607b      	str	r3, [r7, #4]
	//while(i > 0 && !recordAlert() ){ //original line (until 30.4.21)
	while(i > 0  && !recordAlert() && connection_closed){ //added 30.4.21
 80001b6:	e002      	b.n	80001be <alert_Handler+0x12>
		i--;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){ //added 30.4.21
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d008      	beq.n	80001d6 <alert_Handler+0x2a>
 80001c4:	f000 f80e 	bl	80001e4 <recordAlert>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d103      	bne.n	80001d6 <alert_Handler+0x2a>
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <alert_Handler+0x34>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d1f0      	bne.n	80001b8 <alert_Handler+0xc>
	}
	return NULL;
 80001d6:	2300      	movs	r3, #0


}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200004f4 	.word	0x200004f4

080001e4 <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	connection_closed = TRUE;//added 30.4.21
 80001e8:	4b2f      	ldr	r3, [pc, #188]	; (80002a8 <recordAlert+0xc4>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 80001ee:	2106      	movs	r1, #6
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f869 	bl	80002c8 <setClientMode>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d101      	bne.n	8000200 <recordAlert+0x1c>
		return FALSE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	e050      	b.n	80002a2 <recordAlert+0xbe>
	}
	write_usart2((uint8_t*)"1\r\n");
 8000200:	482a      	ldr	r0, [pc, #168]	; (80002ac <recordAlert+0xc8>)
 8000202:	f000 ffa1 	bl	8001148 <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 8000206:	2106      	movs	r1, #6
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f897 	bl	800033c <joinAccessPoint>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d101      	bne.n	8000218 <recordAlert+0x34>
		return FALSE;
 8000214:	2300      	movs	r3, #0
 8000216:	e044      	b.n	80002a2 <recordAlert+0xbe>
	}
	write_usart2((uint8_t*)"2\r\n");
 8000218:	4825      	ldr	r0, [pc, #148]	; (80002b0 <recordAlert+0xcc>)
 800021a:	f000 ff95 	bl	8001148 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 800021e:	2314      	movs	r3, #20
 8000220:	2206      	movs	r2, #6
 8000222:	2103      	movs	r1, #3
 8000224:	2003      	movs	r0, #3
 8000226:	f000 f8d5 	bl	80003d4 <connectFirebaseHost>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d101      	bne.n	8000234 <recordAlert+0x50>
		return FALSE;
 8000230:	2300      	movs	r3, #0
 8000232:	e036      	b.n	80002a2 <recordAlert+0xbe>
	}
	write_usart2((uint8_t*)"3\r\n");
 8000234:	481f      	ldr	r0, [pc, #124]	; (80002b4 <recordAlert+0xd0>)
 8000236:	f000 ff87 	bl	8001148 <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 800023a:	f7ff ffa1 	bl	8000180 <setImagePath>
	write_usart2((uint8_t*)"4\r\n");
 800023e:	481e      	ldr	r0, [pc, #120]	; (80002b8 <recordAlert+0xd4>)
 8000240:	f000 ff82 	bl	8001148 <write_usart2>

	//Create HTTP request
	createPostMsg();
 8000244:	f000 f958 	bl	80004f8 <createPostMsg>
	write_usart2((uint8_t*)"5\r\n");
 8000248:	481c      	ldr	r0, [pc, #112]	; (80002bc <recordAlert+0xd8>)
 800024a:	f000 ff7d 	bl	8001148 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 800024e:	233c      	movs	r3, #60	; 0x3c
 8000250:	221e      	movs	r2, #30
 8000252:	2103      	movs	r1, #3
 8000254:	2003      	movs	r0, #3
 8000256:	f000 f993 	bl	8000580 <sendRequest>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <recordAlert+0x90>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 8000260:	2103      	movs	r1, #3
 8000262:	2003      	movs	r0, #3
 8000264:	f000 fa4c 	bl	8000700 <closeCunnection>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <recordAlert+0xc4>)
 800026e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000270:	2300      	movs	r3, #0
 8000272:	e016      	b.n	80002a2 <recordAlert+0xbe>
	}
	write_usart2((uint8_t*)"6\r\n");
 8000274:	4812      	ldr	r0, [pc, #72]	; (80002c0 <recordAlert+0xdc>)
 8000276:	f000 ff67 	bl	8001148 <write_usart2>

	//Read response
	if(!readResponse(180)){//timeout set t0 3 minutes
 800027a:	20b4      	movs	r0, #180	; 0xb4
 800027c:	f000 fa14 	bl	80006a8 <readResponse>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d109      	bne.n	800029a <recordAlert+0xb6>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 8000286:	2103      	movs	r1, #3
 8000288:	2003      	movs	r0, #3
 800028a:	f000 fa39 	bl	8000700 <closeCunnection>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <recordAlert+0xc4>)
 8000294:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000296:	2300      	movs	r3, #0
 8000298:	e003      	b.n	80002a2 <recordAlert+0xbe>
	}

	write_usart2((uint8_t*)"7\r\n");
 800029a:	480a      	ldr	r0, [pc, #40]	; (80002c4 <recordAlert+0xe0>)
 800029c:	f000 ff54 	bl	8001148 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"8\r\n");

	return TRUE;
 80002a0:	2301      	movs	r3, #1

}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200004f4 	.word	0x200004f4
 80002ac:	08001d00 	.word	0x08001d00
 80002b0:	08001d04 	.word	0x08001d04
 80002b4:	08001d08 	.word	0x08001d08
 80002b8:	08001d0c 	.word	0x08001d0c
 80002bc:	08001d10 	.word	0x08001d10
 80002c0:	08001d14 	.word	0x08001d14
 80002c4:	08001d18 	.word	0x08001d18

080002c8 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <setClientMode+0x64>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 80002d8:	4815      	ldr	r0, [pc, #84]	; (8000330 <setClientMode+0x68>)
 80002da:	f000 ff71 	bl	80011c0 <write_usart1>
	while(tries > 0){
 80002de:	e01d      	b.n	800031c <setClientMode+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80002e0:	4914      	ldr	r1, [pc, #80]	; (8000334 <setClientMode+0x6c>)
 80002e2:	4815      	ldr	r0, [pc, #84]	; (8000338 <setClientMode+0x70>)
 80002e4:	f000 ffde 	bl	80012a4 <search_usart1_buffer_Rx>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <setClientMode+0x64>)
 80002ee:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <setClientMode+0x64>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d105      	bne.n	8000304 <setClientMode+0x3c>
 80002f8:	6838      	ldr	r0, [r7, #0]
 80002fa:	f000 fd37 	bl	8000d6c <timeout_with_timer4>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0ed      	beq.n	80002e0 <setClientMode+0x18>
		}
		if(found == PASS){
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <setClientMode+0x64>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d101      	bne.n	8000310 <setClientMode+0x48>
			return TRUE;
 800030c:	2301      	movs	r3, #1
 800030e:	e009      	b.n	8000324 <setClientMode+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <setClientMode+0x68>)
 8000318:	f000 ff52 	bl	80011c0 <write_usart1>
	while(tries > 0){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1e6      	bne.n	80002f0 <setClientMode+0x28>
		}
	}
	return FALSE;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000006b 	.word	0x2000006b
 8000330:	08001d40 	.word	0x08001d40
 8000334:	08001d24 	.word	0x08001d24
 8000338:	08001d2c 	.word	0x08001d2c

0800033c <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800034a:	2100      	movs	r1, #0
 800034c:	481a      	ldr	r0, [pc, #104]	; (80003b8 <joinAccessPoint+0x7c>)
 800034e:	f001 f889 	bl	8001464 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <joinAccessPoint+0x80>)
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <joinAccessPoint+0x84>)
 8000356:	491b      	ldr	r1, [pc, #108]	; (80003c4 <joinAccessPoint+0x88>)
 8000358:	4817      	ldr	r0, [pc, #92]	; (80003b8 <joinAccessPoint+0x7c>)
 800035a:	f001 f88b 	bl	8001474 <siprintf>

	found = STANDBY;
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <joinAccessPoint+0x8c>)
 8000360:	2201      	movs	r2, #1
 8000362:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000364:	4814      	ldr	r0, [pc, #80]	; (80003b8 <joinAccessPoint+0x7c>)
 8000366:	f000 ff2b 	bl	80011c0 <write_usart1>
	while(tries > 0){
 800036a:	e01d      	b.n	80003a8 <joinAccessPoint+0x6c>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 800036c:	4917      	ldr	r1, [pc, #92]	; (80003cc <joinAccessPoint+0x90>)
 800036e:	4818      	ldr	r0, [pc, #96]	; (80003d0 <joinAccessPoint+0x94>)
 8000370:	f000 ff98 	bl	80012a4 <search_usart1_buffer_Rx>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <joinAccessPoint+0x8c>)
 800037a:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <joinAccessPoint+0x8c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d105      	bne.n	8000390 <joinAccessPoint+0x54>
 8000384:	6838      	ldr	r0, [r7, #0]
 8000386:	f000 fcf1 	bl	8000d6c <timeout_with_timer4>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0ed      	beq.n	800036c <joinAccessPoint+0x30>
		}
		if(found == PASS){
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <joinAccessPoint+0x8c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d101      	bne.n	800039c <joinAccessPoint+0x60>
			return TRUE;
 8000398:	2301      	movs	r3, #1
 800039a:	e009      	b.n	80003b0 <joinAccessPoint+0x74>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3b01      	subs	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <joinAccessPoint+0x7c>)
 80003a4:	f000 ff0c 	bl	80011c0 <write_usart1>
	while(tries > 0){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1e6      	bne.n	800037c <joinAccessPoint+0x40>
		}
	}
	return FALSE;
 80003ae:	2300      	movs	r3, #0

}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200000ec 	.word	0x200000ec
 80003bc:	08001d50 	.word	0x08001d50
 80003c0:	08001d5c 	.word	0x08001d5c
 80003c4:	08001d64 	.word	0x08001d64
 80003c8:	2000006b 	.word	0x2000006b
 80003cc:	08001d7c 	.word	0x08001d7c
 80003d0:	08001d2c 	.word	0x08001d2c

080003d4 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
 80003e0:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 80003e2:	4b3c      	ldr	r3, [pc, #240]	; (80004d4 <connectFirebaseHost+0x100>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 80003e8:	483b      	ldr	r0, [pc, #236]	; (80004d8 <connectFirebaseHost+0x104>)
 80003ea:	f000 fee9 	bl	80011c0 <write_usart1>
	while(_ssl_tries > 0){
 80003ee:	e01b      	b.n	8000428 <connectFirebaseHost+0x54>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80003f0:	493a      	ldr	r1, [pc, #232]	; (80004dc <connectFirebaseHost+0x108>)
 80003f2:	483b      	ldr	r0, [pc, #236]	; (80004e0 <connectFirebaseHost+0x10c>)
 80003f4:	f000 ff56 	bl	80012a4 <search_usart1_buffer_Rx>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b35      	ldr	r3, [pc, #212]	; (80004d4 <connectFirebaseHost+0x100>)
 80003fe:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <connectFirebaseHost+0x100>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d105      	bne.n	8000414 <connectFirebaseHost+0x40>
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 fcaf 	bl	8000d6c <timeout_with_timer4>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0ed      	beq.n	80003f0 <connectFirebaseHost+0x1c>
		}
		if(found == PASS){
 8000414:	4b2f      	ldr	r3, [pc, #188]	; (80004d4 <connectFirebaseHost+0x100>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d009      	beq.n	8000430 <connectFirebaseHost+0x5c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3b01      	subs	r3, #1
 8000420:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <connectFirebaseHost+0x104>)
 8000424:	f000 fecc 	bl	80011c0 <write_usart1>
	while(_ssl_tries > 0){
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1e8      	bne.n	8000400 <connectFirebaseHost+0x2c>
 800042e:	e000      	b.n	8000432 <connectFirebaseHost+0x5e>
			break; //move on to next command
 8000430:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <connectFirebaseHost+0x100>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b02      	cmp	r3, #2
 8000438:	d003      	beq.n	8000442 <connectFirebaseHost+0x6e>
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <connectFirebaseHost+0x100>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d101      	bne.n	8000446 <connectFirebaseHost+0x72>
		return FALSE;
 8000442:	2300      	movs	r3, #0
 8000444:	e041      	b.n	80004ca <connectFirebaseHost+0xf6>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800044a:	2100      	movs	r1, #0
 800044c:	4825      	ldr	r0, [pc, #148]	; (80004e4 <connectFirebaseHost+0x110>)
 800044e:	f001 f809 	bl	8001464 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <connectFirebaseHost+0x114>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a25      	ldr	r2, [pc, #148]	; (80004ec <connectFirebaseHost+0x118>)
 8000458:	4925      	ldr	r1, [pc, #148]	; (80004f0 <connectFirebaseHost+0x11c>)
 800045a:	4822      	ldr	r0, [pc, #136]	; (80004e4 <connectFirebaseHost+0x110>)
 800045c:	f001 f80a 	bl	8001474 <siprintf>

	found = STANDBY;
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <connectFirebaseHost+0x100>)
 8000462:	2201      	movs	r2, #1
 8000464:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000466:	481f      	ldr	r0, [pc, #124]	; (80004e4 <connectFirebaseHost+0x110>)
 8000468:	f000 feaa 	bl	80011c0 <write_usart1>
	while(_cipstart_tries > 0){
 800046c:	e029      	b.n	80004c2 <connectFirebaseHost+0xee>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800046e:	491b      	ldr	r1, [pc, #108]	; (80004dc <connectFirebaseHost+0x108>)
 8000470:	481b      	ldr	r0, [pc, #108]	; (80004e0 <connectFirebaseHost+0x10c>)
 8000472:	f000 ff17 	bl	80012a4 <search_usart1_buffer_Rx>
 8000476:	4603      	mov	r3, r0
 8000478:	461a      	mov	r2, r3
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <connectFirebaseHost+0x100>)
 800047c:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <connectFirebaseHost+0x100>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d107      	bne.n	8000496 <connectFirebaseHost+0xc2>
				found = search_usart1_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);//NO IDEA WHY THIS IS SO CRITICAL BUT IT IS!
 8000486:	4915      	ldr	r1, [pc, #84]	; (80004dc <connectFirebaseHost+0x108>)
 8000488:	481a      	ldr	r0, [pc, #104]	; (80004f4 <connectFirebaseHost+0x120>)
 800048a:	f000 ff0b 	bl	80012a4 <search_usart1_buffer_Rx>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <connectFirebaseHost+0x100>)
 8000494:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <connectFirebaseHost+0x100>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <connectFirebaseHost+0xd6>
 800049e:	6838      	ldr	r0, [r7, #0]
 80004a0:	f000 fc64 	bl	8000d6c <timeout_with_timer4>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0e1      	beq.n	800046e <connectFirebaseHost+0x9a>
			}
		}
		if(found == PASS){
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <connectFirebaseHost+0x100>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d101      	bne.n	80004b6 <connectFirebaseHost+0xe2>
			return TRUE;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e009      	b.n	80004ca <connectFirebaseHost+0xf6>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 80004bc:	4809      	ldr	r0, [pc, #36]	; (80004e4 <connectFirebaseHost+0x110>)
 80004be:	f000 fe7f 	bl	80011c0 <write_usart1>
	while(_cipstart_tries > 0){
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1e6      	bne.n	8000496 <connectFirebaseHost+0xc2>
		}
	}
	return FALSE;
 80004c8:	2300      	movs	r3, #0



}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000006b 	.word	0x2000006b
 80004d8:	08001d84 	.word	0x08001d84
 80004dc:	08001d24 	.word	0x08001d24
 80004e0:	08001d2c 	.word	0x08001d2c
 80004e4:	200000ec 	.word	0x200000ec
 80004e8:	2000002c 	.word	0x2000002c
 80004ec:	20000000 	.word	0x20000000
 80004f0:	08001d9c 	.word	0x08001d9c
 80004f4:	08001dbc 	.word	0x08001dbc

080004f8 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	2100      	movs	r1, #0
 8000502:	4815      	ldr	r0, [pc, #84]	; (8000558 <createPostMsg+0x60>)
 8000504:	f000 ffae 	bl	8001464 <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <createPostMsg+0x64>)
 800050a:	4915      	ldr	r1, [pc, #84]	; (8000560 <createPostMsg+0x68>)
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <createPostMsg+0x60>)
 800050e:	f000 ffb1 	bl	8001474 <siprintf>
	content_len = strlen((char*)content);
 8000512:	4811      	ldr	r0, [pc, #68]	; (8000558 <createPostMsg+0x60>)
 8000514:	f7ff fe2c 	bl	8000170 <strlen>
 8000518:	4602      	mov	r2, r0
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <createPostMsg+0x6c>)
 800051c:	601a      	str	r2, [r3, #0]
	//content_len = strlen("{\"image_path\": \"\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}") + strlen((char*)image_path);


	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 800051e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000522:	2100      	movs	r1, #0
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <createPostMsg+0x70>)
 8000526:	f000 ff9d 	bl	8001464 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <createPostMsg+0x6c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <createPostMsg+0x60>)
 8000530:	9202      	str	r2, [sp, #8]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <createPostMsg+0x74>)
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <createPostMsg+0x78>)
 800053a:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <createPostMsg+0x7c>)
 800053c:	490e      	ldr	r1, [pc, #56]	; (8000578 <createPostMsg+0x80>)
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <createPostMsg+0x70>)
 8000540:	f000 ff98 	bl	8001474 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <createPostMsg+0x70>)
 8000546:	f7ff fe13 	bl	8000170 <strlen>
 800054a:	4603      	mov	r3, r0
 800054c:	3b02      	subs	r3, #2
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <createPostMsg+0x84>)
 8000550:	6013      	str	r3, [r2, #0]

}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200003f0 	.word	0x200003f0
 800055c:	20000474 	.word	0x20000474
 8000560:	08001dd0 	.word	0x08001dd0
 8000564:	20000470 	.word	0x20000470
 8000568:	200001ec 	.word	0x200001ec
 800056c:	20000000 	.word	0x20000000
 8000570:	20000030 	.word	0x20000030
 8000574:	2000005c 	.word	0x2000005c
 8000578:	08001e24 	.word	0x08001e24
 800057c:	200003ec 	.word	0x200003ec

08000580 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800058e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000592:	2100      	movs	r1, #0
 8000594:	483a      	ldr	r0, [pc, #232]	; (8000680 <sendRequest+0x100>)
 8000596:	f000 ff65 	bl	8001464 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <sendRequest+0x104>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4939      	ldr	r1, [pc, #228]	; (8000688 <sendRequest+0x108>)
 80005a2:	4837      	ldr	r0, [pc, #220]	; (8000680 <sendRequest+0x100>)
 80005a4:	f000 ff66 	bl	8001474 <siprintf>

	found = STANDBY;
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <sendRequest+0x10c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80005ae:	4834      	ldr	r0, [pc, #208]	; (8000680 <sendRequest+0x100>)
 80005b0:	f000 fe06 	bl	80011c0 <write_usart1>
	while(_CIPSEND_tries > 0){
 80005b4:	e027      	b.n	8000606 <sendRequest+0x86>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 80005b6:	4936      	ldr	r1, [pc, #216]	; (8000690 <sendRequest+0x110>)
 80005b8:	4836      	ldr	r0, [pc, #216]	; (8000694 <sendRequest+0x114>)
 80005ba:	f000 fe73 	bl	80012a4 <search_usart1_buffer_Rx>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <sendRequest+0x10c>)
 80005c4:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <sendRequest+0x10c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d107      	bne.n	80005de <sendRequest+0x5e>
				found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 80005ce:	4932      	ldr	r1, [pc, #200]	; (8000698 <sendRequest+0x118>)
 80005d0:	4830      	ldr	r0, [pc, #192]	; (8000694 <sendRequest+0x114>)
 80005d2:	f000 fe67 	bl	80012a4 <search_usart1_buffer_Rx>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b2c      	ldr	r3, [pc, #176]	; (800068c <sendRequest+0x10c>)
 80005dc:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <sendRequest+0x10c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d105      	bne.n	80005f2 <sendRequest+0x72>
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 fbc0 	bl	8000d6c <timeout_with_timer4>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0e1      	beq.n	80005b6 <sendRequest+0x36>
			}
		}
		if(found == PASS){
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <sendRequest+0x10c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d009      	beq.n	800060e <sendRequest+0x8e>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 8000600:	481f      	ldr	r0, [pc, #124]	; (8000680 <sendRequest+0x100>)
 8000602:	f000 fddd 	bl	80011c0 <write_usart1>
	while(_CIPSEND_tries > 0){
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1e8      	bne.n	80005de <sendRequest+0x5e>
 800060c:	e000      	b.n	8000610 <sendRequest+0x90>
			break; //move on to next command
 800060e:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <sendRequest+0x10c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d003      	beq.n	8000620 <sendRequest+0xa0>
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <sendRequest+0x10c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d101      	bne.n	8000624 <sendRequest+0xa4>
		return FALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	e028      	b.n	8000676 <sendRequest+0xf6>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <sendRequest+0x10c>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <sendRequest+0x11c>)
 800062c:	f000 fdc8 	bl	80011c0 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000630:	e01d      	b.n	800066e <sendRequest+0xee>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000632:	491b      	ldr	r1, [pc, #108]	; (80006a0 <sendRequest+0x120>)
 8000634:	481b      	ldr	r0, [pc, #108]	; (80006a4 <sendRequest+0x124>)
 8000636:	f000 fe35 	bl	80012a4 <search_usart1_buffer_Rx>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <sendRequest+0x10c>)
 8000640:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <sendRequest+0x10c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d105      	bne.n	8000656 <sendRequest+0xd6>
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f000 fb8e 	bl	8000d6c <timeout_with_timer4>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0ed      	beq.n	8000632 <sendRequest+0xb2>
		}
		if(found == PASS){
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <sendRequest+0x10c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <sendRequest+0xe2>
			return TRUE;
 800065e:	2301      	movs	r3, #1
 8000660:	e009      	b.n	8000676 <sendRequest+0xf6>
		}
		else{
			_SEND_OK_tries--;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3b01      	subs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <sendRequest+0x11c>)
 800066a:	f000 fda9 	bl	80011c0 <write_usart1>
	while(_SEND_OK_tries > 0){
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e6      	bne.n	8000642 <sendRequest+0xc2>
		}
	}
	return FALSE;
 8000674:	2300      	movs	r3, #0

}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000ec 	.word	0x200000ec
 8000684:	200003ec 	.word	0x200003ec
 8000688:	08001e9c 	.word	0x08001e9c
 800068c:	2000006b 	.word	0x2000006b
 8000690:	08001d24 	.word	0x08001d24
 8000694:	08001eb0 	.word	0x08001eb0
 8000698:	08001eb4 	.word	0x08001eb4
 800069c:	200001ec 	.word	0x200001ec
 80006a0:	08001d7c 	.word	0x08001d7c
 80006a4:	08001ec0 	.word	0x08001ec0

080006a8 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <readResponse+0x4c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80006b6:	e007      	b.n	80006c8 <readResponse+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80006b8:	490f      	ldr	r1, [pc, #60]	; (80006f8 <readResponse+0x50>)
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <readResponse+0x54>)
 80006bc:	f000 fdf2 	bl	80012a4 <search_usart1_buffer_Rx>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <readResponse+0x4c>)
 80006c6:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <readResponse+0x4c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d105      	bne.n	80006dc <readResponse+0x34>
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 fb4b 	bl	8000d6c <timeout_with_timer4>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0ed      	beq.n	80006b8 <readResponse+0x10>
	}
	if(found == PASS){
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <readResponse+0x4c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <readResponse+0x40>
		return TRUE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <readResponse+0x42>
	}
	else{
		return FALSE;
 80006e8:	2300      	movs	r3, #0
	}

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000006b 	.word	0x2000006b
 80006f8:	08001d7c 	.word	0x08001d7c
 80006fc:	08001eb4 	.word	0x08001eb4

08000700 <closeCunnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeCunnection(uint32_t tries, uint32_t timeout){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <closeCunnection+0x64>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 8000710:	4815      	ldr	r0, [pc, #84]	; (8000768 <closeCunnection+0x68>)
 8000712:	f000 fd55 	bl	80011c0 <write_usart1>
	while(tries > 0){
 8000716:	e01d      	b.n	8000754 <closeCunnection+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000718:	4914      	ldr	r1, [pc, #80]	; (800076c <closeCunnection+0x6c>)
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <closeCunnection+0x70>)
 800071c:	f000 fdc2 	bl	80012a4 <search_usart1_buffer_Rx>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <closeCunnection+0x64>)
 8000726:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <closeCunnection+0x64>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d105      	bne.n	800073c <closeCunnection+0x3c>
 8000730:	6838      	ldr	r0, [r7, #0]
 8000732:	f000 fb1b 	bl	8000d6c <timeout_with_timer4>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0ed      	beq.n	8000718 <closeCunnection+0x18>
		}
		if(found == PASS){
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <closeCunnection+0x64>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <closeCunnection+0x48>
			return TRUE;
 8000744:	2301      	movs	r3, #1
 8000746:	e009      	b.n	800075c <closeCunnection+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <closeCunnection+0x68>)
 8000750:	f000 fd36 	bl	80011c0 <write_usart1>
	while(tries > 0){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1e6      	bne.n	8000728 <closeCunnection+0x28>
		}
	}
	return FALSE;
 800075a:	2300      	movs	r3, #0

}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000006b 	.word	0x2000006b
 8000768:	08001ecc 	.word	0x08001ecc
 800076c:	08001d24 	.word	0x08001d24
 8000770:	08001d2c 	.word	0x08001d2c

08000774 <init_queue>:

static Queue queue;


void init_queue()
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <init_queue+0x20>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
	queue.readIndex = 0;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <init_queue+0x20>)
 8000780:	2200      	movs	r2, #0
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
	queue.accept = GO;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <init_queue+0x20>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	200004f8 	.word	0x200004f8

08000798 <add_event>:


void add_event(Handler handler)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 80007a0:	f000 f844 	bl	800082c <queue_isFull>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d113      	bne.n	80007d2 <add_event+0x3a>
		//write_usart2((uint8_t*)("\r\n<-queue is full->\r\n"));
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <add_event+0x44>)
 80007ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ae:	490b      	ldr	r1, [pc, #44]	; (80007dc <add_event+0x44>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE-1)) //changed from  < QUEUE_SIZE
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <add_event+0x44>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d805      	bhi.n	80007ca <add_event+0x32>
		queue.writeIndex++;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <add_event+0x44>)
 80007c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <add_event+0x44>)
 80007c6:	6293      	str	r3, [r2, #40]	; 0x28
 80007c8:	e004      	b.n	80007d4 <add_event+0x3c>
	else
		queue.writeIndex = 0;
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <add_event+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
 80007d0:	e000      	b.n	80007d4 <add_event+0x3c>
		return;
 80007d2:	bf00      	nop

	//write_usart2((uint8_t*)("\r\n<-queue add event->\r\n"));

}
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200004f8 	.word	0x200004f8

080007e0 <do_event>:


void *do_event()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 80007e6:	f000 f83f 	bl	8000868 <queue_isEmpty>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <do_event+0x14>
		//write_usart2((uint8_t*)("\r\n<-queue is empty->\r\n"));
		return NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	e014      	b.n	800081e <do_event+0x3e>
	}

   res = queue.eq[queue.readIndex].handler();
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <do_event+0x48>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <do_event+0x48>)
 80007fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fe:	4798      	blx	r3
 8000800:	6078      	str	r0, [r7, #4]

   if(queue.readIndex < (QUEUE_SIZE - 1))//changed from < QUEUE_SIZE
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <do_event+0x48>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	2b08      	cmp	r3, #8
 8000808:	d805      	bhi.n	8000816 <do_event+0x36>
      queue.readIndex++;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <do_event+0x48>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	3301      	adds	r3, #1
 8000810:	4a05      	ldr	r2, [pc, #20]	; (8000828 <do_event+0x48>)
 8000812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000814:	e002      	b.n	800081c <do_event+0x3c>
   else
      queue.readIndex = 0;
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <do_event+0x48>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c

   //write_usart2((uint8_t*)("\r\n<-queue do event->\r\n"));

   return res;
 800081c:	687b      	ldr	r3, [r7, #4]

}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200004f8 	.word	0x200004f8

0800082c <queue_isFull>:


BOOL queue_isFull()
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <queue_isFull+0x34>)
 8000832:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <queue_isFull+0x34>)
 8000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000838:	1c59      	adds	r1, r3, #1
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <queue_isFull+0x38>)
 800083c:	fba3 2301 	umull	r2, r3, r3, r1
 8000840:	08da      	lsrs	r2, r3, #3
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	1aca      	subs	r2, r1, r3
 800084c:	4290      	cmp	r0, r2
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200004f8 	.word	0x200004f8
 8000864:	cccccccd 	.word	0xcccccccd

08000868 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <queue_isEmpty+0x20>)
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <queue_isEmpty+0x20>)
 8000872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000874:	429a      	cmp	r2, r3
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	200004f8 	.word	0x200004f8

0800088c <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <EXTI15_10_IRQHandler+0x24>)
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <EXTI15_10_IRQHandler+0x24>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <EXTI15_10_IRQHandler+0x24>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <EXTI15_10_IRQHandler+0x28>)
 80008a6:	f7ff ff77 	bl	8000798 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	080008b9 	.word	0x080008b9

080008b8 <interrupt_handler>:

void *interrupt_handler(void){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

	if(state == OFF)
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <interrupt_handler+0x3c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d109      	bne.n	80008d8 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <interrupt_handler+0x40>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <interrupt_handler+0x40>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	60d3      	str	r3, [r2, #12]
		state=ON;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <interrupt_handler+0x3c>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e008      	b.n	80008ea <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <interrupt_handler+0x40>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <interrupt_handler+0x40>)
 80008de:	f023 0320 	bic.w	r3, r3, #32
 80008e2:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <interrupt_handler+0x3c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 80008ea:	2300      	movs	r3, #0

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000b7c 	.word	0x20000b7c
 80008f8:	40010800 	.word	0x40010800

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <__NVIC_EnableIRQ+0x34>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <init_sensor_with_interrupt>:
/*
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 */
void init_sensor_with_interrupt(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <init_sensor_with_interrupt+0x80>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <init_sensor_with_interrupt+0x80>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <init_sensor_with_interrupt+0x80>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <init_sensor_with_interrupt+0x80>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 80009f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80009f6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 80009fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a02:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <init_sensor_with_interrupt+0x84>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <init_sensor_with_interrupt+0x88>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <init_sensor_with_interrupt+0x88>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <init_sensor_with_interrupt+0x8c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <init_sensor_with_interrupt+0x8c>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register - to anable full button press before reacting ((see reference manual 10.3.3)
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <init_sensor_with_interrupt+0x8c>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <init_sensor_with_interrupt+0x8c>)
 8000a30:	f043 0310 	orr.w	r3, r3, #16
 8000a34:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000a36:	2007      	movs	r0, #7
 8000a38:	f7ff ff60 	bl	80008fc <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f7ff ff9c 	bl	800097c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn); //enable handler
 8000a44:	200a      	movs	r0, #10
 8000a46:	f7ff ff7d 	bl	8000944 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4a:	b662      	cpsie	i
	__enable_irq();

	/*~~~______________~~~*/

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	40010400 	.word	0x40010400

08000a60 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(timeout_done_timer3())//added 1.5.21 (in timers.c)
 8000a64:	f000 f9ba 	bl	8000ddc <timeout_done_timer3>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00c      	beq.n	8000a88 <EXTI4_IRQHandler+0x28>
	{
		EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <EXTI4_IRQHandler+0x2c>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <EXTI4_IRQHandler+0x2c>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	6153      	str	r3, [r2, #20]
		add_event(alert_Handler);
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <EXTI4_IRQHandler+0x30>)
 8000a7c:	f7ff fe8c 	bl	8000798 <add_event>
		set_timeout_timer3(60000);//60000 Milliseconds = 1 minute//added 1.5.21 (in timers.c)
 8000a80:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000a84:	f000 f996 	bl	8000db4 <set_timeout_timer3>

	//toggle_led(); //This is temporary for testing.
	//write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue


}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010400 	.word	0x40010400
 8000a90:	080001ad 	.word	0x080001ad

08000a94 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	/*FOR TESTING*/
	init_queue();
 8000a98:	f7ff fe6c 	bl	8000774 <init_queue>
	//init_interrupt();
	/*FOR TESTING*/

	init_usart2(); // for debugging
 8000a9c:	f000 faa2 	bl	8000fe4 <init_usart2>

//
//	init_queue();
	init_sensor_with_interrupt();
 8000aa0:	f7ff ff96 	bl	80009d0 <init_sensor_with_interrupt>
//	//init_sensor_led_response();
//
	//init_timer2();//for testing i2c

	init_timer3();//for sensor delay
 8000aa4:	f000 f8a2 	bl	8000bec <init_timer3>
	init_timer4();//for ESP8266 timeout
 8000aa8:	f000 f8e6 	bl	8000c78 <init_timer4>

	init_usart1(); // for ESP8266
 8000aac:	f000 face 	bl	800104c <init_usart1>
	//else{
	//	write_usart2((uint8_t*)(":(\r\n"));
	//}

	//init_i2c1();
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <main+0x28>)
 8000ab2:	f000 fb49 	bl	8001148 <write_usart2>
//		}
//		delay_with_timer2(500);//0.5 second
		/*Testing I2C with camera module*/

		/*FOR TESTING*/
		do_event();
 8000ab6:	f7ff fe93 	bl	80007e0 <do_event>
 8000aba:	e7fc      	b.n	8000ab6 <main+0x22>
 8000abc:	08001f6c 	.word	0x08001f6c

08000ac0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x16>
		heap_end = &end;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <_sbrk+0x50>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <_sbrk+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <_sbrk+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <_sbrk+0x50>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	466a      	mov	r2, sp
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d907      	bls.n	8000afa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000aea:	f000 fc91 	bl	8001410 <__errno>
 8000aee:	4602      	mov	r2, r0
 8000af0:	230c      	movs	r3, #12
 8000af2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	e006      	b.n	8000b08 <_sbrk+0x48>
	}

	heap_end += incr;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <_sbrk+0x50>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <_sbrk+0x50>)
 8000b04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000052c 	.word	0x2000052c
 8000b14:	20000b88 	.word	0x20000b88

08000b18 <__NVIC_SetPriorityGrouping>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <init_timer3>:
	timer2.timeout = FALSE;

}

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <init_timer3+0x7c>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <init_timer3+0x7c>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <init_timer3+0x80>)
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <init_timer3+0x80>)
 8000c04:	2250      	movs	r2, #80	; 0x50
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <init_timer3+0x80>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <init_timer3+0x80>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <init_timer3+0x80>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <init_timer3+0x80>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <init_timer3+0x80>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <init_timer3+0x80>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f7ff ff72 	bl	8000b18 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000c34:	2100      	movs	r1, #0
 8000c36:	201d      	movs	r0, #29
 8000c38:	f7ff ffae 	bl	8000b98 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8000c3c:	201d      	movs	r0, #29
 8000c3e:	f7ff ff8f 	bl	8000b60 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c42:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <init_timer3+0x84>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
	timer3.timeout_count = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <init_timer3+0x84>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
	timer3.delay = FALSE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <init_timer3+0x84>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	721a      	strb	r2, [r3, #8]
	timer3.timeout = FALSE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <init_timer3+0x84>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	725a      	strb	r2, [r3, #9]

	num_of_millis_timer3 = 0;//added 1.5.21
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <init_timer3+0x88>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	2000053c 	.word	0x2000053c
 8000c74:	20000554 	.word	0x20000554

08000c78 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <init_timer4+0x78>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <init_timer4+0x78>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <init_timer4+0x7c>)
 8000c8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <init_timer4+0x7c>)
 8000c92:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <init_timer4+0x7c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <init_timer4+0x7c>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <init_timer4+0x7c>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <init_timer4+0x7c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <init_timer4+0x7c>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <init_timer4+0x7c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f7ff ff2a 	bl	8000b18 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	201e      	movs	r0, #30
 8000cc8:	f7ff ff66 	bl	8000b98 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 8000ccc:	201e      	movs	r0, #30
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cd2:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <init_timer4+0x80>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
	timer4.timeout_count = 0;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <init_timer4+0x80>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
	timer4.delay = FALSE;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <init_timer4+0x80>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	721a      	strb	r2, [r3, #8]
	timer4.timeout = FALSE;
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <init_timer4+0x80>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	725a      	strb	r2, [r3, #9]
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40000800 	.word	0x40000800
 8000cf8:	20000548 	.word	0x20000548

08000cfc <enable_timer3>:
{
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
}

void enable_timer3(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <enable_timer3+0x18>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <enable_timer3+0x18>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40000400 	.word	0x40000400

08000d18 <enable_timer4>:

void enable_timer4(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <enable_timer4+0x18>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <enable_timer4+0x18>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40000800 	.word	0x40000800

08000d34 <disable_timer3>:
{
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
}

void disable_timer3(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <disable_timer3+0x18>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <disable_timer3+0x18>)
 8000d3e:	f023 0301 	bic.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40000400 	.word	0x40000400

08000d50 <disable_timer4>:

void disable_timer4(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <disable_timer4+0x18>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <disable_timer4+0x18>)
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	6013      	str	r3, [r2, #0]

}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40000800 	.word	0x40000800

08000d6c <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000d74:	f7ff ffd0 	bl	8000d18 <enable_timer4>

	timer4.timeout = TRUE;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <timeout_with_timer4+0x44>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	725a      	strb	r2, [r3, #9]
	if(timer4.timeout_count >= num_of_sec){
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <timeout_with_timer4+0x44>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d80d      	bhi.n	8000da4 <timeout_with_timer4+0x38>
		if(!timer4.delay){
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <timeout_with_timer4+0x44>)
 8000d8a:	7a1b      	ldrb	r3, [r3, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <timeout_with_timer4+0x28>
			disable_timer4();
 8000d90:	f7ff ffde 	bl	8000d50 <disable_timer4>
		}
		timer4.timeout = FALSE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <timeout_with_timer4+0x44>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	725a      	strb	r2, [r3, #9]
		timer4.timeout_count = 0;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <timeout_with_timer4+0x44>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <timeout_with_timer4+0x3a>
	}
	else{
		return FALSE;
 8000da4:	2300      	movs	r3, #0
	}
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000548 	.word	0x20000548

08000db4 <set_timeout_timer3>:

//added 1.5.21
void set_timeout_timer3(uint32_t num_of_millis)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	enable_timer3();
 8000dbc:	f7ff ff9e 	bl	8000cfc <enable_timer3>

	timer3.timeout = TRUE;
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <set_timeout_timer3+0x20>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	725a      	strb	r2, [r3, #9]
	num_of_millis_timer3 = num_of_millis;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <set_timeout_timer3+0x24>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000053c 	.word	0x2000053c
 8000dd8:	20000554 	.word	0x20000554

08000ddc <timeout_done_timer3>:

BOOL timeout_done_timer3(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

	if(timer3.timeout_count >= num_of_millis_timer3){
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <timeout_done_timer3+0x38>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <timeout_done_timer3+0x3c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d310      	bcc.n	8000e0e <timeout_done_timer3+0x32>
			if(!timer3.delay){
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <timeout_done_timer3+0x38>)
 8000dee:	7a1b      	ldrb	r3, [r3, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <timeout_done_timer3+0x1c>
				disable_timer3();
 8000df4:	f7ff ff9e 	bl	8000d34 <disable_timer3>
			}
			timer3.timeout = FALSE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <timeout_done_timer3+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	725a      	strb	r2, [r3, #9]
			timer3.timeout_count = 0;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <timeout_done_timer3+0x38>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
			num_of_millis_timer3 = 0;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <timeout_done_timer3+0x3c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
			return TRUE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <timeout_done_timer3+0x34>
		}
		else{
			return FALSE;
 8000e0e:	2300      	movs	r3, #0
		}
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000053c 	.word	0x2000053c
 8000e18:	20000554 	.word	0x20000554

08000e1c <TIM2_IRQHandler>:
//added 1.5.21
void TIM2_IRQHandler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d119      	bne.n	8000e62 <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d104      	bne.n	8000e40 <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e3e:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e42:	7a5b      	ldrb	r3, [r3, #9]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d104      	bne.n	8000e52 <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <TIM2_IRQHandler+0x50>)
 8000e50:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6113      	str	r3, [r2, #16]
	}
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000530 	.word	0x20000530

08000e70 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <TIM3_IRQHandler+0x48>)
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d117      	bne.n	8000eb0 <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000e82:	7a1b      	ldrb	r3, [r3, #8]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d104      	bne.n	8000e92 <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000e90:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000e94:	7a5b      	ldrb	r3, [r3, #9]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d104      	bne.n	8000ea4 <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <TIM3_IRQHandler+0x4c>)
 8000ea2:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <TIM3_IRQHandler+0x48>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <TIM3_IRQHandler+0x48>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	2000053c 	.word	0x2000053c

08000ec0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <TIM4_IRQHandler+0x48>)
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d117      	bne.n	8000f00 <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000ed2:	7a1b      	ldrb	r3, [r3, #8]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d104      	bne.n	8000ee2 <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000ee0:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000ee4:	7a5b      	ldrb	r3, [r3, #9]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d104      	bne.n	8000ef4 <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <TIM4_IRQHandler+0x4c>)
 8000ef2:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <TIM4_IRQHandler+0x48>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <TIM4_IRQHandler+0x48>)
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	6113      	str	r3, [r2, #16]
	}
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40000800 	.word	0x40000800
 8000f0c:	20000548 	.word	0x20000548

08000f10 <__NVIC_SetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4906      	ldr	r1, [pc, #24]	; (8000f8c <__NVIC_EnableIRQ+0x34>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <init_usart2+0x5c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <init_usart2+0x5c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <init_usart2+0x60>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <init_usart2+0x60>)
 8000ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ffe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <init_usart2+0x60>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <init_usart2+0x60>)
 8001006:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800100a:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <init_usart2+0x5c>)
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <init_usart2+0x5c>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <init_usart2+0x64>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <init_usart2+0x64>)
 800101e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001022:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <init_usart2+0x64>)
 8001026:	f240 324d 	movw	r2, #845	; 0x34d
 800102a:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <init_usart2+0x64>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <init_usart2+0x64>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800
 8001048:	40004400 	.word	0x40004400

0800104c <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <init_usart1+0xb0>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <init_usart1+0xb0>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <init_usart1+0xb4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <init_usart1+0xb4>)
 8001062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001066:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <init_usart1+0xb4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <init_usart1+0xb4>)
 800106e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001072:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <init_usart1+0xb4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <init_usart1+0xb4>)
 800107a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800107e:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <init_usart1+0xb4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <init_usart1+0xb4>)
 8001086:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800108a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <init_usart1+0xb4>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <init_usart1+0xb4>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <init_usart1+0xb0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <init_usart1+0xb0>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <init_usart1+0xb8>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <init_usart1+0xb8>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <init_usart1+0xb8>)
 80010b2:	2245      	movs	r2, #69	; 0x45
 80010b4:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <init_usart1+0xb8>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <init_usart1+0xb8>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 80010c2:	f000 f8d9 	bl	8001278 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <init_usart1+0xb8>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <init_usart1+0xb8>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80010d2:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <init_usart1+0xb8>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <init_usart1+0xb8>)
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80010e0:	2007      	movs	r0, #7
 80010e2:	f7ff ff15 	bl	8000f10 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80010e6:	2100      	movs	r1, #0
 80010e8:	2025      	movs	r0, #37	; 0x25
 80010ea:	f7ff ff51 	bl	8000f90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 80010ee:	2025      	movs	r0, #37	; 0x25
 80010f0:	f7ff ff32 	bl	8000f58 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80010f4:	b662      	cpsie	i
	__enable_irq();

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800
 8001104:	40013800 	.word	0x40013800

08001108 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	2100      	movs	r1, #0
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <set_usart2_buffer_Tx+0x3c>)
 8001118:	f000 f9a4 	bl	8001464 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <set_usart2_buffer_Tx+0x3c>)
 8001120:	f000 f9c8 	bl	80014b4 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff f823 	bl	8000170 <strlen>
 800112a:	4602      	mov	r2, r0
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <set_usart2_buffer_Tx+0x3c>)
 800112e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <set_usart2_buffer_Tx+0x3c>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000558 	.word	0x20000558

08001148 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffd9 	bl	8001108 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 8001156:	e014      	b.n	8001182 <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001158:	bf00      	nop
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <write_usart2+0x70>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f9      	beq.n	800115a <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <write_usart2+0x74>)
 8001168:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <write_usart2+0x74>)
 800116e:	5cd2      	ldrb	r2, [r2, r3]
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <write_usart2+0x70>)
 8001172:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <write_usart2+0x74>)
 8001176:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800117a:	3301      	adds	r3, #1
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <write_usart2+0x74>)
 800117e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <write_usart2+0x74>)
 8001184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <write_usart2+0x74>)
 800118a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800118e:	429a      	cmp	r2, r3
 8001190:	d3e2      	bcc.n	8001158 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001192:	bf00      	nop
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <write_usart2+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d1f9      	bne.n	8001194 <write_usart2+0x4c>
	usart2.write_index = 0;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <write_usart2+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <write_usart2+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	20000558 	.word	0x20000558

080011c0 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f835 	bl	8001238 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 80011ce:	e014      	b.n	80011fa <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80011d0:	bf00      	nop
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <write_usart1+0x70>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <write_usart1+0x74>)
 80011e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <write_usart1+0x74>)
 80011e6:	5cd2      	ldrb	r2, [r2, r3]
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <write_usart1+0x70>)
 80011ea:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <write_usart1+0x74>)
 80011ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <write_usart1+0x74>)
 80011f6:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <write_usart1+0x74>)
 80011fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <write_usart1+0x74>)
 8001202:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001206:	429a      	cmp	r2, r3
 8001208:	d3e2      	bcc.n	80011d0 <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800120a:	bf00      	nop
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <write_usart1+0x70>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001214:	2b40      	cmp	r3, #64	; 0x40
 8001216:	d1f9      	bne.n	800120c <write_usart1+0x4c>
	usart1.write_index = 0;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <write_usart1+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <write_usart1+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013800 	.word	0x40013800
 8001234:	20000760 	.word	0x20000760

08001238 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001244:	2100      	movs	r1, #0
 8001246:	480b      	ldr	r0, [pc, #44]	; (8001274 <set_usart1_buffer_Tx+0x3c>)
 8001248:	f000 f90c 	bl	8001464 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <set_usart1_buffer_Tx+0x3c>)
 8001250:	f000 f930 	bl	80014b4 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7fe ff8b 	bl	8000170 <strlen>
 800125a:	4602      	mov	r2, r0
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <set_usart1_buffer_Tx+0x3c>)
 800125e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <set_usart1_buffer_Tx+0x3c>)
 8001264:	2200      	movs	r2, #0
 8001266:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000760 	.word	0x20000760

08001278 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800127c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001280:	2100      	movs	r1, #0
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <set_usart1_buffer_Rx+0x24>)
 8001284:	f000 f8ee 	bl	8001464 <memset>
	usart1.Rx_len = 0;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <set_usart1_buffer_Rx+0x28>)
 800128a:	2200      	movs	r2, #0
 800128c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <set_usart1_buffer_Rx+0x28>)
 8001292:	2200      	movs	r2, #0
 8001294:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000960 	.word	0x20000960
 80012a0:	20000760 	.word	0x20000760

080012a4 <search_usart1_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <search_usart1_buffer_Rx+0x7c>)
 80012b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80012b4:	3301      	adds	r3, #1
 80012b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ba:	d223      	bcs.n	8001304 <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 80012c0:	f000 f900 	bl	80014c4 <strstr>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 80012ca:	4816      	ldr	r0, [pc, #88]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 80012cc:	f7ff ff3c 	bl	8001148 <write_usart2>
			set_usart1_buffer_Rx();
 80012d0:	f7ff ffd2 	bl	8001278 <set_usart1_buffer_Rx>
			return (uint32_t)PASS;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e01e      	b.n	8001316 <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 80012dc:	f000 f8f2 	bl	80014c4 <strstr>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 80012e6:	480f      	ldr	r0, [pc, #60]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 80012e8:	f7ff ff2e 	bl	8001148 <write_usart2>
			set_usart1_buffer_Rx();
 80012ec:	f7ff ffc4 	bl	8001278 <set_usart1_buffer_Rx>
			return (uint32_t)FAIL;
 80012f0:	2302      	movs	r3, #2
 80012f2:	e010      	b.n	8001316 <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 80012f4:	480b      	ldr	r0, [pc, #44]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 80012f6:	f7ff ff27 	bl	8001148 <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <search_usart1_buffer_Rx+0x84>)
 80012fc:	f7ff ff24 	bl	8001148 <write_usart2>
			return (uint32_t)STANDBY;
 8001300:	2301      	movs	r3, #1
 8001302:	e008      	b.n	8001316 <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <search_usart1_buffer_Rx+0x88>)
 8001306:	f7ff ff1f 	bl	8001148 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <search_usart1_buffer_Rx+0x80>)
 800130c:	f7ff ff1c 	bl	8001148 <write_usart2>
		set_usart1_buffer_Rx();
 8001310:	f7ff ffb2 	bl	8001278 <set_usart1_buffer_Rx>
		return (uint32_t)STANDBY;
 8001314:	2301      	movs	r3, #1
	}

}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000760 	.word	0x20000760
 8001324:	20000960 	.word	0x20000960
 8001328:	08001f80 	.word	0x08001f80
 800132c:	08001f84 	.word	0x08001f84

08001330 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <USART1_IRQHandler+0x80>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b20      	cmp	r3, #32
 800133e:	d132      	bne.n	80013a6 <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <USART1_IRQHandler+0x80>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <USART1_IRQHandler+0x84>)
 8001348:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <USART1_IRQHandler+0x88>)
 800134c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001350:	3301      	adds	r3, #1
 8001352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001356:	d20a      	bcs.n	800136e <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <USART1_IRQHandler+0x88>)
 800135a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <USART1_IRQHandler+0x84>)
 8001360:	7811      	ldrb	r1, [r2, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <USART1_IRQHandler+0x88>)
 8001364:	4413      	add	r3, r2
 8001366:	460a      	mov	r2, r1
 8001368:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800136c:	e00d      	b.n	800138a <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <USART1_IRQHandler+0x88>)
 8001370:	2200      	movs	r2, #0
 8001372:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <USART1_IRQHandler+0x88>)
 8001378:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <USART1_IRQHandler+0x84>)
 800137e:	7811      	ldrb	r1, [r2, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <USART1_IRQHandler+0x88>)
 8001382:	4413      	add	r3, r2
 8001384:	460a      	mov	r2, r1
 8001386:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <USART1_IRQHandler+0x88>)
 800138c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001390:	3301      	adds	r3, #1
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <USART1_IRQHandler+0x88>)
 8001394:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <USART1_IRQHandler+0x88>)
 800139a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800139e:	3301      	adds	r3, #1
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <USART1_IRQHandler+0x88>)
 80013a2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40013800 	.word	0x40013800
 80013b4:	20000b70 	.word	0x20000b70
 80013b8:	20000760 	.word	0x20000760

080013bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013e6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80013ea:	f000 f817 	bl	800141c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7ff fb51 	bl	8000a94 <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   r0, =_estack
 80013f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001400:	08001fd4 	.word	0x08001fd4
  ldr r2, =_sbss
 8001404:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001408:	20000b84 	.word	0x20000b84

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <__errno>:
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <__errno+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000006c 	.word	0x2000006c

0800141c <__libc_init_array>:
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	2500      	movs	r5, #0
 8001420:	4e0c      	ldr	r6, [pc, #48]	; (8001454 <__libc_init_array+0x38>)
 8001422:	4c0d      	ldr	r4, [pc, #52]	; (8001458 <__libc_init_array+0x3c>)
 8001424:	1ba4      	subs	r4, r4, r6
 8001426:	10a4      	asrs	r4, r4, #2
 8001428:	42a5      	cmp	r5, r4
 800142a:	d109      	bne.n	8001440 <__libc_init_array+0x24>
 800142c:	f000 fc56 	bl	8001cdc <_init>
 8001430:	2500      	movs	r5, #0
 8001432:	4e0a      	ldr	r6, [pc, #40]	; (800145c <__libc_init_array+0x40>)
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <__libc_init_array+0x44>)
 8001436:	1ba4      	subs	r4, r4, r6
 8001438:	10a4      	asrs	r4, r4, #2
 800143a:	42a5      	cmp	r5, r4
 800143c:	d105      	bne.n	800144a <__libc_init_array+0x2e>
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001444:	4798      	blx	r3
 8001446:	3501      	adds	r5, #1
 8001448:	e7ee      	b.n	8001428 <__libc_init_array+0xc>
 800144a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144e:	4798      	blx	r3
 8001450:	3501      	adds	r5, #1
 8001452:	e7f2      	b.n	800143a <__libc_init_array+0x1e>
 8001454:	08001fcc 	.word	0x08001fcc
 8001458:	08001fcc 	.word	0x08001fcc
 800145c:	08001fcc 	.word	0x08001fcc
 8001460:	08001fd0 	.word	0x08001fd0

08001464 <memset>:
 8001464:	4603      	mov	r3, r0
 8001466:	4402      	add	r2, r0
 8001468:	4293      	cmp	r3, r2
 800146a:	d100      	bne.n	800146e <memset+0xa>
 800146c:	4770      	bx	lr
 800146e:	f803 1b01 	strb.w	r1, [r3], #1
 8001472:	e7f9      	b.n	8001468 <memset+0x4>

08001474 <siprintf>:
 8001474:	b40e      	push	{r1, r2, r3}
 8001476:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800147a:	b500      	push	{lr}
 800147c:	b09c      	sub	sp, #112	; 0x70
 800147e:	ab1d      	add	r3, sp, #116	; 0x74
 8001480:	9002      	str	r0, [sp, #8]
 8001482:	9006      	str	r0, [sp, #24]
 8001484:	9107      	str	r1, [sp, #28]
 8001486:	9104      	str	r1, [sp, #16]
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <siprintf+0x38>)
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <siprintf+0x3c>)
 800148c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001490:	9105      	str	r1, [sp, #20]
 8001492:	6800      	ldr	r0, [r0, #0]
 8001494:	a902      	add	r1, sp, #8
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f000 f888 	bl	80015ac <_svfiprintf_r>
 800149c:	2200      	movs	r2, #0
 800149e:	9b02      	ldr	r3, [sp, #8]
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	b01c      	add	sp, #112	; 0x70
 80014a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80014a8:	b003      	add	sp, #12
 80014aa:	4770      	bx	lr
 80014ac:	2000006c 	.word	0x2000006c
 80014b0:	ffff0208 	.word	0xffff0208

080014b4 <strcpy>:
 80014b4:	4603      	mov	r3, r0
 80014b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014ba:	f803 2b01 	strb.w	r2, [r3], #1
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d1f9      	bne.n	80014b6 <strcpy+0x2>
 80014c2:	4770      	bx	lr

080014c4 <strstr>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	7803      	ldrb	r3, [r0, #0]
 80014c8:	b17b      	cbz	r3, 80014ea <strstr+0x26>
 80014ca:	4604      	mov	r4, r0
 80014cc:	7823      	ldrb	r3, [r4, #0]
 80014ce:	4620      	mov	r0, r4
 80014d0:	1c66      	adds	r6, r4, #1
 80014d2:	b17b      	cbz	r3, 80014f4 <strstr+0x30>
 80014d4:	1e4a      	subs	r2, r1, #1
 80014d6:	1e63      	subs	r3, r4, #1
 80014d8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80014dc:	b14d      	cbz	r5, 80014f2 <strstr+0x2e>
 80014de:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80014e2:	4634      	mov	r4, r6
 80014e4:	42af      	cmp	r7, r5
 80014e6:	d0f7      	beq.n	80014d8 <strstr+0x14>
 80014e8:	e7f0      	b.n	80014cc <strstr+0x8>
 80014ea:	780b      	ldrb	r3, [r1, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf18      	it	ne
 80014f0:	2000      	movne	r0, #0
 80014f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f4:	4618      	mov	r0, r3
 80014f6:	e7fc      	b.n	80014f2 <strstr+0x2e>

080014f8 <__ssputs_r>:
 80014f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014fc:	688e      	ldr	r6, [r1, #8]
 80014fe:	4682      	mov	sl, r0
 8001500:	429e      	cmp	r6, r3
 8001502:	460c      	mov	r4, r1
 8001504:	4690      	mov	r8, r2
 8001506:	4699      	mov	r9, r3
 8001508:	d837      	bhi.n	800157a <__ssputs_r+0x82>
 800150a:	898a      	ldrh	r2, [r1, #12]
 800150c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001510:	d031      	beq.n	8001576 <__ssputs_r+0x7e>
 8001512:	2302      	movs	r3, #2
 8001514:	6825      	ldr	r5, [r4, #0]
 8001516:	6909      	ldr	r1, [r1, #16]
 8001518:	1a6f      	subs	r7, r5, r1
 800151a:	6965      	ldr	r5, [r4, #20]
 800151c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001520:	fb95 f5f3 	sdiv	r5, r5, r3
 8001524:	f109 0301 	add.w	r3, r9, #1
 8001528:	443b      	add	r3, r7
 800152a:	429d      	cmp	r5, r3
 800152c:	bf38      	it	cc
 800152e:	461d      	movcc	r5, r3
 8001530:	0553      	lsls	r3, r2, #21
 8001532:	d530      	bpl.n	8001596 <__ssputs_r+0x9e>
 8001534:	4629      	mov	r1, r5
 8001536:	f000 fb37 	bl	8001ba8 <_malloc_r>
 800153a:	4606      	mov	r6, r0
 800153c:	b950      	cbnz	r0, 8001554 <__ssputs_r+0x5c>
 800153e:	230c      	movs	r3, #12
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f8ca 3000 	str.w	r3, [sl]
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154e:	81a3      	strh	r3, [r4, #12]
 8001550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001554:	463a      	mov	r2, r7
 8001556:	6921      	ldr	r1, [r4, #16]
 8001558:	f000 fab6 	bl	8001ac8 <memcpy>
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001566:	81a3      	strh	r3, [r4, #12]
 8001568:	6126      	str	r6, [r4, #16]
 800156a:	443e      	add	r6, r7
 800156c:	6026      	str	r6, [r4, #0]
 800156e:	464e      	mov	r6, r9
 8001570:	6165      	str	r5, [r4, #20]
 8001572:	1bed      	subs	r5, r5, r7
 8001574:	60a5      	str	r5, [r4, #8]
 8001576:	454e      	cmp	r6, r9
 8001578:	d900      	bls.n	800157c <__ssputs_r+0x84>
 800157a:	464e      	mov	r6, r9
 800157c:	4632      	mov	r2, r6
 800157e:	4641      	mov	r1, r8
 8001580:	6820      	ldr	r0, [r4, #0]
 8001582:	f000 faac 	bl	8001ade <memmove>
 8001586:	68a3      	ldr	r3, [r4, #8]
 8001588:	2000      	movs	r0, #0
 800158a:	1b9b      	subs	r3, r3, r6
 800158c:	60a3      	str	r3, [r4, #8]
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	441e      	add	r6, r3
 8001592:	6026      	str	r6, [r4, #0]
 8001594:	e7dc      	b.n	8001550 <__ssputs_r+0x58>
 8001596:	462a      	mov	r2, r5
 8001598:	f000 fb60 	bl	8001c5c <_realloc_r>
 800159c:	4606      	mov	r6, r0
 800159e:	2800      	cmp	r0, #0
 80015a0:	d1e2      	bne.n	8001568 <__ssputs_r+0x70>
 80015a2:	6921      	ldr	r1, [r4, #16]
 80015a4:	4650      	mov	r0, sl
 80015a6:	f000 fab3 	bl	8001b10 <_free_r>
 80015aa:	e7c8      	b.n	800153e <__ssputs_r+0x46>

080015ac <_svfiprintf_r>:
 80015ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015b0:	461d      	mov	r5, r3
 80015b2:	898b      	ldrh	r3, [r1, #12]
 80015b4:	b09d      	sub	sp, #116	; 0x74
 80015b6:	061f      	lsls	r7, r3, #24
 80015b8:	4680      	mov	r8, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4616      	mov	r6, r2
 80015be:	d50f      	bpl.n	80015e0 <_svfiprintf_r+0x34>
 80015c0:	690b      	ldr	r3, [r1, #16]
 80015c2:	b96b      	cbnz	r3, 80015e0 <_svfiprintf_r+0x34>
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	f000 faef 	bl	8001ba8 <_malloc_r>
 80015ca:	6020      	str	r0, [r4, #0]
 80015cc:	6120      	str	r0, [r4, #16]
 80015ce:	b928      	cbnz	r0, 80015dc <_svfiprintf_r+0x30>
 80015d0:	230c      	movs	r3, #12
 80015d2:	f8c8 3000 	str.w	r3, [r8]
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	e0c8      	b.n	800176e <_svfiprintf_r+0x1c2>
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	6163      	str	r3, [r4, #20]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	2320      	movs	r3, #32
 80015e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015ea:	2330      	movs	r3, #48	; 0x30
 80015ec:	f04f 0b01 	mov.w	fp, #1
 80015f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015f4:	9503      	str	r5, [sp, #12]
 80015f6:	4637      	mov	r7, r6
 80015f8:	463d      	mov	r5, r7
 80015fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80015fe:	b10b      	cbz	r3, 8001604 <_svfiprintf_r+0x58>
 8001600:	2b25      	cmp	r3, #37	; 0x25
 8001602:	d13e      	bne.n	8001682 <_svfiprintf_r+0xd6>
 8001604:	ebb7 0a06 	subs.w	sl, r7, r6
 8001608:	d00b      	beq.n	8001622 <_svfiprintf_r+0x76>
 800160a:	4653      	mov	r3, sl
 800160c:	4632      	mov	r2, r6
 800160e:	4621      	mov	r1, r4
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff ff71 	bl	80014f8 <__ssputs_r>
 8001616:	3001      	adds	r0, #1
 8001618:	f000 80a4 	beq.w	8001764 <_svfiprintf_r+0x1b8>
 800161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161e:	4453      	add	r3, sl
 8001620:	9309      	str	r3, [sp, #36]	; 0x24
 8001622:	783b      	ldrb	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 809d 	beq.w	8001764 <_svfiprintf_r+0x1b8>
 800162a:	2300      	movs	r3, #0
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	9307      	str	r3, [sp, #28]
 8001638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800163c:	931a      	str	r3, [sp, #104]	; 0x68
 800163e:	462f      	mov	r7, r5
 8001640:	2205      	movs	r2, #5
 8001642:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001646:	4850      	ldr	r0, [pc, #320]	; (8001788 <_svfiprintf_r+0x1dc>)
 8001648:	f000 fa30 	bl	8001aac <memchr>
 800164c:	9b04      	ldr	r3, [sp, #16]
 800164e:	b9d0      	cbnz	r0, 8001686 <_svfiprintf_r+0xda>
 8001650:	06d9      	lsls	r1, r3, #27
 8001652:	bf44      	itt	mi
 8001654:	2220      	movmi	r2, #32
 8001656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800165a:	071a      	lsls	r2, r3, #28
 800165c:	bf44      	itt	mi
 800165e:	222b      	movmi	r2, #43	; 0x2b
 8001660:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001664:	782a      	ldrb	r2, [r5, #0]
 8001666:	2a2a      	cmp	r2, #42	; 0x2a
 8001668:	d015      	beq.n	8001696 <_svfiprintf_r+0xea>
 800166a:	462f      	mov	r7, r5
 800166c:	2000      	movs	r0, #0
 800166e:	250a      	movs	r5, #10
 8001670:	9a07      	ldr	r2, [sp, #28]
 8001672:	4639      	mov	r1, r7
 8001674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001678:	3b30      	subs	r3, #48	; 0x30
 800167a:	2b09      	cmp	r3, #9
 800167c:	d94d      	bls.n	800171a <_svfiprintf_r+0x16e>
 800167e:	b1b8      	cbz	r0, 80016b0 <_svfiprintf_r+0x104>
 8001680:	e00f      	b.n	80016a2 <_svfiprintf_r+0xf6>
 8001682:	462f      	mov	r7, r5
 8001684:	e7b8      	b.n	80015f8 <_svfiprintf_r+0x4c>
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <_svfiprintf_r+0x1dc>)
 8001688:	463d      	mov	r5, r7
 800168a:	1a80      	subs	r0, r0, r2
 800168c:	fa0b f000 	lsl.w	r0, fp, r0
 8001690:	4318      	orrs	r0, r3
 8001692:	9004      	str	r0, [sp, #16]
 8001694:	e7d3      	b.n	800163e <_svfiprintf_r+0x92>
 8001696:	9a03      	ldr	r2, [sp, #12]
 8001698:	1d11      	adds	r1, r2, #4
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	9103      	str	r1, [sp, #12]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	db01      	blt.n	80016a6 <_svfiprintf_r+0xfa>
 80016a2:	9207      	str	r2, [sp, #28]
 80016a4:	e004      	b.n	80016b0 <_svfiprintf_r+0x104>
 80016a6:	4252      	negs	r2, r2
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	9207      	str	r2, [sp, #28]
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	783b      	ldrb	r3, [r7, #0]
 80016b2:	2b2e      	cmp	r3, #46	; 0x2e
 80016b4:	d10c      	bne.n	80016d0 <_svfiprintf_r+0x124>
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ba:	d133      	bne.n	8001724 <_svfiprintf_r+0x178>
 80016bc:	9b03      	ldr	r3, [sp, #12]
 80016be:	3702      	adds	r7, #2
 80016c0:	1d1a      	adds	r2, r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	9203      	str	r2, [sp, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bfb8      	it	lt
 80016ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80016ce:	9305      	str	r3, [sp, #20]
 80016d0:	4d2e      	ldr	r5, [pc, #184]	; (800178c <_svfiprintf_r+0x1e0>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	7839      	ldrb	r1, [r7, #0]
 80016d6:	4628      	mov	r0, r5
 80016d8:	f000 f9e8 	bl	8001aac <memchr>
 80016dc:	b138      	cbz	r0, 80016ee <_svfiprintf_r+0x142>
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	fa03 f000 	lsl.w	r0, r3, r0
 80016e6:	9b04      	ldr	r3, [sp, #16]
 80016e8:	3701      	adds	r7, #1
 80016ea:	4303      	orrs	r3, r0
 80016ec:	9304      	str	r3, [sp, #16]
 80016ee:	7839      	ldrb	r1, [r7, #0]
 80016f0:	2206      	movs	r2, #6
 80016f2:	4827      	ldr	r0, [pc, #156]	; (8001790 <_svfiprintf_r+0x1e4>)
 80016f4:	1c7e      	adds	r6, r7, #1
 80016f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016fa:	f000 f9d7 	bl	8001aac <memchr>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d038      	beq.n	8001774 <_svfiprintf_r+0x1c8>
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <_svfiprintf_r+0x1e8>)
 8001704:	bb13      	cbnz	r3, 800174c <_svfiprintf_r+0x1a0>
 8001706:	9b03      	ldr	r3, [sp, #12]
 8001708:	3307      	adds	r3, #7
 800170a:	f023 0307 	bic.w	r3, r3, #7
 800170e:	3308      	adds	r3, #8
 8001710:	9303      	str	r3, [sp, #12]
 8001712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001714:	444b      	add	r3, r9
 8001716:	9309      	str	r3, [sp, #36]	; 0x24
 8001718:	e76d      	b.n	80015f6 <_svfiprintf_r+0x4a>
 800171a:	fb05 3202 	mla	r2, r5, r2, r3
 800171e:	2001      	movs	r0, #1
 8001720:	460f      	mov	r7, r1
 8001722:	e7a6      	b.n	8001672 <_svfiprintf_r+0xc6>
 8001724:	2300      	movs	r3, #0
 8001726:	250a      	movs	r5, #10
 8001728:	4619      	mov	r1, r3
 800172a:	3701      	adds	r7, #1
 800172c:	9305      	str	r3, [sp, #20]
 800172e:	4638      	mov	r0, r7
 8001730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001734:	3a30      	subs	r2, #48	; 0x30
 8001736:	2a09      	cmp	r2, #9
 8001738:	d903      	bls.n	8001742 <_svfiprintf_r+0x196>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0c8      	beq.n	80016d0 <_svfiprintf_r+0x124>
 800173e:	9105      	str	r1, [sp, #20]
 8001740:	e7c6      	b.n	80016d0 <_svfiprintf_r+0x124>
 8001742:	fb05 2101 	mla	r1, r5, r1, r2
 8001746:	2301      	movs	r3, #1
 8001748:	4607      	mov	r7, r0
 800174a:	e7f0      	b.n	800172e <_svfiprintf_r+0x182>
 800174c:	ab03      	add	r3, sp, #12
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4622      	mov	r2, r4
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_svfiprintf_r+0x1ec>)
 8001754:	a904      	add	r1, sp, #16
 8001756:	4640      	mov	r0, r8
 8001758:	f3af 8000 	nop.w
 800175c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001760:	4681      	mov	r9, r0
 8001762:	d1d6      	bne.n	8001712 <_svfiprintf_r+0x166>
 8001764:	89a3      	ldrh	r3, [r4, #12]
 8001766:	065b      	lsls	r3, r3, #25
 8001768:	f53f af35 	bmi.w	80015d6 <_svfiprintf_r+0x2a>
 800176c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800176e:	b01d      	add	sp, #116	; 0x74
 8001770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001774:	ab03      	add	r3, sp, #12
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4622      	mov	r2, r4
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_svfiprintf_r+0x1ec>)
 800177c:	a904      	add	r1, sp, #16
 800177e:	4640      	mov	r0, r8
 8001780:	f000 f882 	bl	8001888 <_printf_i>
 8001784:	e7ea      	b.n	800175c <_svfiprintf_r+0x1b0>
 8001786:	bf00      	nop
 8001788:	08001f98 	.word	0x08001f98
 800178c:	08001f9e 	.word	0x08001f9e
 8001790:	08001fa2 	.word	0x08001fa2
 8001794:	00000000 	.word	0x00000000
 8001798:	080014f9 	.word	0x080014f9

0800179c <_printf_common>:
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a0:	4691      	mov	r9, r2
 80017a2:	461f      	mov	r7, r3
 80017a4:	688a      	ldr	r2, [r1, #8]
 80017a6:	690b      	ldr	r3, [r1, #16]
 80017a8:	4606      	mov	r6, r0
 80017aa:	4293      	cmp	r3, r2
 80017ac:	bfb8      	it	lt
 80017ae:	4613      	movlt	r3, r2
 80017b0:	f8c9 3000 	str.w	r3, [r9]
 80017b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017b8:	460c      	mov	r4, r1
 80017ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017be:	b112      	cbz	r2, 80017c6 <_printf_common+0x2a>
 80017c0:	3301      	adds	r3, #1
 80017c2:	f8c9 3000 	str.w	r3, [r9]
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	0699      	lsls	r1, r3, #26
 80017ca:	bf42      	ittt	mi
 80017cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80017d0:	3302      	addmi	r3, #2
 80017d2:	f8c9 3000 	strmi.w	r3, [r9]
 80017d6:	6825      	ldr	r5, [r4, #0]
 80017d8:	f015 0506 	ands.w	r5, r5, #6
 80017dc:	d107      	bne.n	80017ee <_printf_common+0x52>
 80017de:	f104 0a19 	add.w	sl, r4, #25
 80017e2:	68e3      	ldr	r3, [r4, #12]
 80017e4:	f8d9 2000 	ldr.w	r2, [r9]
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	42ab      	cmp	r3, r5
 80017ec:	dc29      	bgt.n	8001842 <_printf_common+0xa6>
 80017ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80017f2:	6822      	ldr	r2, [r4, #0]
 80017f4:	3300      	adds	r3, #0
 80017f6:	bf18      	it	ne
 80017f8:	2301      	movne	r3, #1
 80017fa:	0692      	lsls	r2, r2, #26
 80017fc:	d42e      	bmi.n	800185c <_printf_common+0xc0>
 80017fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001802:	4639      	mov	r1, r7
 8001804:	4630      	mov	r0, r6
 8001806:	47c0      	blx	r8
 8001808:	3001      	adds	r0, #1
 800180a:	d021      	beq.n	8001850 <_printf_common+0xb4>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	68e5      	ldr	r5, [r4, #12]
 8001810:	f003 0306 	and.w	r3, r3, #6
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf18      	it	ne
 8001818:	2500      	movne	r5, #0
 800181a:	f8d9 2000 	ldr.w	r2, [r9]
 800181e:	f04f 0900 	mov.w	r9, #0
 8001822:	bf08      	it	eq
 8001824:	1aad      	subeq	r5, r5, r2
 8001826:	68a3      	ldr	r3, [r4, #8]
 8001828:	6922      	ldr	r2, [r4, #16]
 800182a:	bf08      	it	eq
 800182c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001830:	4293      	cmp	r3, r2
 8001832:	bfc4      	itt	gt
 8001834:	1a9b      	subgt	r3, r3, r2
 8001836:	18ed      	addgt	r5, r5, r3
 8001838:	341a      	adds	r4, #26
 800183a:	454d      	cmp	r5, r9
 800183c:	d11a      	bne.n	8001874 <_printf_common+0xd8>
 800183e:	2000      	movs	r0, #0
 8001840:	e008      	b.n	8001854 <_printf_common+0xb8>
 8001842:	2301      	movs	r3, #1
 8001844:	4652      	mov	r2, sl
 8001846:	4639      	mov	r1, r7
 8001848:	4630      	mov	r0, r6
 800184a:	47c0      	blx	r8
 800184c:	3001      	adds	r0, #1
 800184e:	d103      	bne.n	8001858 <_printf_common+0xbc>
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001858:	3501      	adds	r5, #1
 800185a:	e7c2      	b.n	80017e2 <_printf_common+0x46>
 800185c:	2030      	movs	r0, #48	; 0x30
 800185e:	18e1      	adds	r1, r4, r3
 8001860:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800186a:	4422      	add	r2, r4
 800186c:	3302      	adds	r3, #2
 800186e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001872:	e7c4      	b.n	80017fe <_printf_common+0x62>
 8001874:	2301      	movs	r3, #1
 8001876:	4622      	mov	r2, r4
 8001878:	4639      	mov	r1, r7
 800187a:	4630      	mov	r0, r6
 800187c:	47c0      	blx	r8
 800187e:	3001      	adds	r0, #1
 8001880:	d0e6      	beq.n	8001850 <_printf_common+0xb4>
 8001882:	f109 0901 	add.w	r9, r9, #1
 8001886:	e7d8      	b.n	800183a <_printf_common+0x9e>

08001888 <_printf_i>:
 8001888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800188c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001890:	460c      	mov	r4, r1
 8001892:	7e09      	ldrb	r1, [r1, #24]
 8001894:	b085      	sub	sp, #20
 8001896:	296e      	cmp	r1, #110	; 0x6e
 8001898:	4617      	mov	r7, r2
 800189a:	4606      	mov	r6, r0
 800189c:	4698      	mov	r8, r3
 800189e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018a0:	f000 80b3 	beq.w	8001a0a <_printf_i+0x182>
 80018a4:	d822      	bhi.n	80018ec <_printf_i+0x64>
 80018a6:	2963      	cmp	r1, #99	; 0x63
 80018a8:	d036      	beq.n	8001918 <_printf_i+0x90>
 80018aa:	d80a      	bhi.n	80018c2 <_printf_i+0x3a>
 80018ac:	2900      	cmp	r1, #0
 80018ae:	f000 80b9 	beq.w	8001a24 <_printf_i+0x19c>
 80018b2:	2958      	cmp	r1, #88	; 0x58
 80018b4:	f000 8083 	beq.w	80019be <_printf_i+0x136>
 80018b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80018c0:	e032      	b.n	8001928 <_printf_i+0xa0>
 80018c2:	2964      	cmp	r1, #100	; 0x64
 80018c4:	d001      	beq.n	80018ca <_printf_i+0x42>
 80018c6:	2969      	cmp	r1, #105	; 0x69
 80018c8:	d1f6      	bne.n	80018b8 <_printf_i+0x30>
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	0605      	lsls	r5, r0, #24
 80018d0:	f103 0104 	add.w	r1, r3, #4
 80018d4:	d52a      	bpl.n	800192c <_printf_i+0xa4>
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6011      	str	r1, [r2, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da03      	bge.n	80018e6 <_printf_i+0x5e>
 80018de:	222d      	movs	r2, #45	; 0x2d
 80018e0:	425b      	negs	r3, r3
 80018e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80018e6:	486f      	ldr	r0, [pc, #444]	; (8001aa4 <_printf_i+0x21c>)
 80018e8:	220a      	movs	r2, #10
 80018ea:	e039      	b.n	8001960 <_printf_i+0xd8>
 80018ec:	2973      	cmp	r1, #115	; 0x73
 80018ee:	f000 809d 	beq.w	8001a2c <_printf_i+0x1a4>
 80018f2:	d808      	bhi.n	8001906 <_printf_i+0x7e>
 80018f4:	296f      	cmp	r1, #111	; 0x6f
 80018f6:	d020      	beq.n	800193a <_printf_i+0xb2>
 80018f8:	2970      	cmp	r1, #112	; 0x70
 80018fa:	d1dd      	bne.n	80018b8 <_printf_i+0x30>
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	6023      	str	r3, [r4, #0]
 8001904:	e003      	b.n	800190e <_printf_i+0x86>
 8001906:	2975      	cmp	r1, #117	; 0x75
 8001908:	d017      	beq.n	800193a <_printf_i+0xb2>
 800190a:	2978      	cmp	r1, #120	; 0x78
 800190c:	d1d4      	bne.n	80018b8 <_printf_i+0x30>
 800190e:	2378      	movs	r3, #120	; 0x78
 8001910:	4865      	ldr	r0, [pc, #404]	; (8001aa8 <_printf_i+0x220>)
 8001912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001916:	e055      	b.n	80019c4 <_printf_i+0x13c>
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800191e:	1d19      	adds	r1, r3, #4
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6011      	str	r1, [r2, #0]
 8001924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001928:	2301      	movs	r3, #1
 800192a:	e08c      	b.n	8001a46 <_printf_i+0x1be>
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001932:	6011      	str	r1, [r2, #0]
 8001934:	bf18      	it	ne
 8001936:	b21b      	sxthne	r3, r3
 8001938:	e7cf      	b.n	80018da <_printf_i+0x52>
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	6825      	ldr	r5, [r4, #0]
 800193e:	1d18      	adds	r0, r3, #4
 8001940:	6010      	str	r0, [r2, #0]
 8001942:	0628      	lsls	r0, r5, #24
 8001944:	d501      	bpl.n	800194a <_printf_i+0xc2>
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e002      	b.n	8001950 <_printf_i+0xc8>
 800194a:	0668      	lsls	r0, r5, #25
 800194c:	d5fb      	bpl.n	8001946 <_printf_i+0xbe>
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	296f      	cmp	r1, #111	; 0x6f
 8001952:	bf14      	ite	ne
 8001954:	220a      	movne	r2, #10
 8001956:	2208      	moveq	r2, #8
 8001958:	4852      	ldr	r0, [pc, #328]	; (8001aa4 <_printf_i+0x21c>)
 800195a:	2100      	movs	r1, #0
 800195c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001960:	6865      	ldr	r5, [r4, #4]
 8001962:	2d00      	cmp	r5, #0
 8001964:	60a5      	str	r5, [r4, #8]
 8001966:	f2c0 8095 	blt.w	8001a94 <_printf_i+0x20c>
 800196a:	6821      	ldr	r1, [r4, #0]
 800196c:	f021 0104 	bic.w	r1, r1, #4
 8001970:	6021      	str	r1, [r4, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d13d      	bne.n	80019f2 <_printf_i+0x16a>
 8001976:	2d00      	cmp	r5, #0
 8001978:	f040 808e 	bne.w	8001a98 <_printf_i+0x210>
 800197c:	4665      	mov	r5, ip
 800197e:	2a08      	cmp	r2, #8
 8001980:	d10b      	bne.n	800199a <_printf_i+0x112>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	07db      	lsls	r3, r3, #31
 8001986:	d508      	bpl.n	800199a <_printf_i+0x112>
 8001988:	6923      	ldr	r3, [r4, #16]
 800198a:	6862      	ldr	r2, [r4, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	bfde      	ittt	le
 8001990:	2330      	movle	r3, #48	; 0x30
 8001992:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001996:	f105 35ff 	addle.w	r5, r5, #4294967295
 800199a:	ebac 0305 	sub.w	r3, ip, r5
 800199e:	6123      	str	r3, [r4, #16]
 80019a0:	f8cd 8000 	str.w	r8, [sp]
 80019a4:	463b      	mov	r3, r7
 80019a6:	aa03      	add	r2, sp, #12
 80019a8:	4621      	mov	r1, r4
 80019aa:	4630      	mov	r0, r6
 80019ac:	f7ff fef6 	bl	800179c <_printf_common>
 80019b0:	3001      	adds	r0, #1
 80019b2:	d14d      	bne.n	8001a50 <_printf_i+0x1c8>
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	b005      	add	sp, #20
 80019ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019be:	4839      	ldr	r0, [pc, #228]	; (8001aa4 <_printf_i+0x21c>)
 80019c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80019c4:	6813      	ldr	r3, [r2, #0]
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	1d1d      	adds	r5, r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6015      	str	r5, [r2, #0]
 80019ce:	060a      	lsls	r2, r1, #24
 80019d0:	d50b      	bpl.n	80019ea <_printf_i+0x162>
 80019d2:	07ca      	lsls	r2, r1, #31
 80019d4:	bf44      	itt	mi
 80019d6:	f041 0120 	orrmi.w	r1, r1, #32
 80019da:	6021      	strmi	r1, [r4, #0]
 80019dc:	b91b      	cbnz	r3, 80019e6 <_printf_i+0x15e>
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	f022 0220 	bic.w	r2, r2, #32
 80019e4:	6022      	str	r2, [r4, #0]
 80019e6:	2210      	movs	r2, #16
 80019e8:	e7b7      	b.n	800195a <_printf_i+0xd2>
 80019ea:	064d      	lsls	r5, r1, #25
 80019ec:	bf48      	it	mi
 80019ee:	b29b      	uxthmi	r3, r3
 80019f0:	e7ef      	b.n	80019d2 <_printf_i+0x14a>
 80019f2:	4665      	mov	r5, ip
 80019f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019f8:	fb02 3311 	mls	r3, r2, r1, r3
 80019fc:	5cc3      	ldrb	r3, [r0, r3]
 80019fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001a02:	460b      	mov	r3, r1
 8001a04:	2900      	cmp	r1, #0
 8001a06:	d1f5      	bne.n	80019f4 <_printf_i+0x16c>
 8001a08:	e7b9      	b.n	800197e <_printf_i+0xf6>
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	6825      	ldr	r5, [r4, #0]
 8001a0e:	1d18      	adds	r0, r3, #4
 8001a10:	6961      	ldr	r1, [r4, #20]
 8001a12:	6010      	str	r0, [r2, #0]
 8001a14:	0628      	lsls	r0, r5, #24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	d501      	bpl.n	8001a1e <_printf_i+0x196>
 8001a1a:	6019      	str	r1, [r3, #0]
 8001a1c:	e002      	b.n	8001a24 <_printf_i+0x19c>
 8001a1e:	066a      	lsls	r2, r5, #25
 8001a20:	d5fb      	bpl.n	8001a1a <_printf_i+0x192>
 8001a22:	8019      	strh	r1, [r3, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	4665      	mov	r5, ip
 8001a28:	6123      	str	r3, [r4, #16]
 8001a2a:	e7b9      	b.n	80019a0 <_printf_i+0x118>
 8001a2c:	6813      	ldr	r3, [r2, #0]
 8001a2e:	1d19      	adds	r1, r3, #4
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	681d      	ldr	r5, [r3, #0]
 8001a34:	6862      	ldr	r2, [r4, #4]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 f837 	bl	8001aac <memchr>
 8001a3e:	b108      	cbz	r0, 8001a44 <_printf_i+0x1bc>
 8001a40:	1b40      	subs	r0, r0, r5
 8001a42:	6060      	str	r0, [r4, #4]
 8001a44:	6863      	ldr	r3, [r4, #4]
 8001a46:	6123      	str	r3, [r4, #16]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a4e:	e7a7      	b.n	80019a0 <_printf_i+0x118>
 8001a50:	6923      	ldr	r3, [r4, #16]
 8001a52:	462a      	mov	r2, r5
 8001a54:	4639      	mov	r1, r7
 8001a56:	4630      	mov	r0, r6
 8001a58:	47c0      	blx	r8
 8001a5a:	3001      	adds	r0, #1
 8001a5c:	d0aa      	beq.n	80019b4 <_printf_i+0x12c>
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	079b      	lsls	r3, r3, #30
 8001a62:	d413      	bmi.n	8001a8c <_printf_i+0x204>
 8001a64:	68e0      	ldr	r0, [r4, #12]
 8001a66:	9b03      	ldr	r3, [sp, #12]
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	bfb8      	it	lt
 8001a6c:	4618      	movlt	r0, r3
 8001a6e:	e7a3      	b.n	80019b8 <_printf_i+0x130>
 8001a70:	2301      	movs	r3, #1
 8001a72:	464a      	mov	r2, r9
 8001a74:	4639      	mov	r1, r7
 8001a76:	4630      	mov	r0, r6
 8001a78:	47c0      	blx	r8
 8001a7a:	3001      	adds	r0, #1
 8001a7c:	d09a      	beq.n	80019b4 <_printf_i+0x12c>
 8001a7e:	3501      	adds	r5, #1
 8001a80:	68e3      	ldr	r3, [r4, #12]
 8001a82:	9a03      	ldr	r2, [sp, #12]
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	42ab      	cmp	r3, r5
 8001a88:	dcf2      	bgt.n	8001a70 <_printf_i+0x1e8>
 8001a8a:	e7eb      	b.n	8001a64 <_printf_i+0x1dc>
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	f104 0919 	add.w	r9, r4, #25
 8001a92:	e7f5      	b.n	8001a80 <_printf_i+0x1f8>
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ac      	bne.n	80019f2 <_printf_i+0x16a>
 8001a98:	7803      	ldrb	r3, [r0, #0]
 8001a9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aa2:	e76c      	b.n	800197e <_printf_i+0xf6>
 8001aa4:	08001fa9 	.word	0x08001fa9
 8001aa8:	08001fba 	.word	0x08001fba

08001aac <memchr>:
 8001aac:	b510      	push	{r4, lr}
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	4402      	add	r2, r0
 8001ab2:	4290      	cmp	r0, r2
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	d101      	bne.n	8001abc <memchr+0x10>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e003      	b.n	8001ac4 <memchr+0x18>
 8001abc:	781c      	ldrb	r4, [r3, #0]
 8001abe:	3001      	adds	r0, #1
 8001ac0:	428c      	cmp	r4, r1
 8001ac2:	d1f6      	bne.n	8001ab2 <memchr+0x6>
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd10      	pop	{r4, pc}

08001ac8 <memcpy>:
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	1e43      	subs	r3, r0, #1
 8001acc:	440a      	add	r2, r1
 8001ace:	4291      	cmp	r1, r2
 8001ad0:	d100      	bne.n	8001ad4 <memcpy+0xc>
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001adc:	e7f7      	b.n	8001ace <memcpy+0x6>

08001ade <memmove>:
 8001ade:	4288      	cmp	r0, r1
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	eb01 0302 	add.w	r3, r1, r2
 8001ae6:	d807      	bhi.n	8001af8 <memmove+0x1a>
 8001ae8:	1e42      	subs	r2, r0, #1
 8001aea:	4299      	cmp	r1, r3
 8001aec:	d00a      	beq.n	8001b04 <memmove+0x26>
 8001aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001af2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001af6:	e7f8      	b.n	8001aea <memmove+0xc>
 8001af8:	4283      	cmp	r3, r0
 8001afa:	d9f5      	bls.n	8001ae8 <memmove+0xa>
 8001afc:	1881      	adds	r1, r0, r2
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	42d3      	cmn	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memmove+0x28>
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001b0e:	e7f7      	b.n	8001b00 <memmove+0x22>

08001b10 <_free_r>:
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4605      	mov	r5, r0
 8001b14:	2900      	cmp	r1, #0
 8001b16:	d043      	beq.n	8001ba0 <_free_r+0x90>
 8001b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b1c:	1f0c      	subs	r4, r1, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfb8      	it	lt
 8001b22:	18e4      	addlt	r4, r4, r3
 8001b24:	f000 f8d0 	bl	8001cc8 <__malloc_lock>
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <_free_r+0x94>)
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	b933      	cbnz	r3, 8001b3e <_free_r+0x2e>
 8001b30:	6063      	str	r3, [r4, #4]
 8001b32:	6014      	str	r4, [r2, #0]
 8001b34:	4628      	mov	r0, r5
 8001b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b3a:	f000 b8c6 	b.w	8001cca <__malloc_unlock>
 8001b3e:	42a3      	cmp	r3, r4
 8001b40:	d90b      	bls.n	8001b5a <_free_r+0x4a>
 8001b42:	6821      	ldr	r1, [r4, #0]
 8001b44:	1862      	adds	r2, r4, r1
 8001b46:	4293      	cmp	r3, r2
 8001b48:	bf01      	itttt	eq
 8001b4a:	681a      	ldreq	r2, [r3, #0]
 8001b4c:	685b      	ldreq	r3, [r3, #4]
 8001b4e:	1852      	addeq	r2, r2, r1
 8001b50:	6022      	streq	r2, [r4, #0]
 8001b52:	6063      	str	r3, [r4, #4]
 8001b54:	6004      	str	r4, [r0, #0]
 8001b56:	e7ed      	b.n	8001b34 <_free_r+0x24>
 8001b58:	4613      	mov	r3, r2
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	b10a      	cbz	r2, 8001b62 <_free_r+0x52>
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	d9fa      	bls.n	8001b58 <_free_r+0x48>
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	1858      	adds	r0, r3, r1
 8001b66:	42a0      	cmp	r0, r4
 8001b68:	d10b      	bne.n	8001b82 <_free_r+0x72>
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	4401      	add	r1, r0
 8001b6e:	1858      	adds	r0, r3, r1
 8001b70:	4282      	cmp	r2, r0
 8001b72:	6019      	str	r1, [r3, #0]
 8001b74:	d1de      	bne.n	8001b34 <_free_r+0x24>
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	6852      	ldr	r2, [r2, #4]
 8001b7a:	4401      	add	r1, r0
 8001b7c:	6019      	str	r1, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	e7d8      	b.n	8001b34 <_free_r+0x24>
 8001b82:	d902      	bls.n	8001b8a <_free_r+0x7a>
 8001b84:	230c      	movs	r3, #12
 8001b86:	602b      	str	r3, [r5, #0]
 8001b88:	e7d4      	b.n	8001b34 <_free_r+0x24>
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	1821      	adds	r1, r4, r0
 8001b8e:	428a      	cmp	r2, r1
 8001b90:	bf01      	itttt	eq
 8001b92:	6811      	ldreq	r1, [r2, #0]
 8001b94:	6852      	ldreq	r2, [r2, #4]
 8001b96:	1809      	addeq	r1, r1, r0
 8001b98:	6021      	streq	r1, [r4, #0]
 8001b9a:	6062      	str	r2, [r4, #4]
 8001b9c:	605c      	str	r4, [r3, #4]
 8001b9e:	e7c9      	b.n	8001b34 <_free_r+0x24>
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000b74 	.word	0x20000b74

08001ba8 <_malloc_r>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	1ccd      	adds	r5, r1, #3
 8001bac:	f025 0503 	bic.w	r5, r5, #3
 8001bb0:	3508      	adds	r5, #8
 8001bb2:	2d0c      	cmp	r5, #12
 8001bb4:	bf38      	it	cc
 8001bb6:	250c      	movcc	r5, #12
 8001bb8:	2d00      	cmp	r5, #0
 8001bba:	4606      	mov	r6, r0
 8001bbc:	db01      	blt.n	8001bc2 <_malloc_r+0x1a>
 8001bbe:	42a9      	cmp	r1, r5
 8001bc0:	d903      	bls.n	8001bca <_malloc_r+0x22>
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	6033      	str	r3, [r6, #0]
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	f000 f87d 	bl	8001cc8 <__malloc_lock>
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <_malloc_r+0xac>)
 8001bd0:	6814      	ldr	r4, [r2, #0]
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	b991      	cbnz	r1, 8001bfc <_malloc_r+0x54>
 8001bd6:	4c20      	ldr	r4, [pc, #128]	; (8001c58 <_malloc_r+0xb0>)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	b91b      	cbnz	r3, 8001be4 <_malloc_r+0x3c>
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f000 f863 	bl	8001ca8 <_sbrk_r>
 8001be2:	6020      	str	r0, [r4, #0]
 8001be4:	4629      	mov	r1, r5
 8001be6:	4630      	mov	r0, r6
 8001be8:	f000 f85e 	bl	8001ca8 <_sbrk_r>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d124      	bne.n	8001c3a <_malloc_r+0x92>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	6033      	str	r3, [r6, #0]
 8001bf6:	f000 f868 	bl	8001cca <__malloc_unlock>
 8001bfa:	e7e4      	b.n	8001bc6 <_malloc_r+0x1e>
 8001bfc:	680b      	ldr	r3, [r1, #0]
 8001bfe:	1b5b      	subs	r3, r3, r5
 8001c00:	d418      	bmi.n	8001c34 <_malloc_r+0x8c>
 8001c02:	2b0b      	cmp	r3, #11
 8001c04:	d90f      	bls.n	8001c26 <_malloc_r+0x7e>
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	18cc      	adds	r4, r1, r3
 8001c0a:	50cd      	str	r5, [r1, r3]
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f000 f85c 	bl	8001cca <__malloc_unlock>
 8001c12:	f104 000b 	add.w	r0, r4, #11
 8001c16:	1d23      	adds	r3, r4, #4
 8001c18:	f020 0007 	bic.w	r0, r0, #7
 8001c1c:	1ac3      	subs	r3, r0, r3
 8001c1e:	d0d3      	beq.n	8001bc8 <_malloc_r+0x20>
 8001c20:	425a      	negs	r2, r3
 8001c22:	50e2      	str	r2, [r4, r3]
 8001c24:	e7d0      	b.n	8001bc8 <_malloc_r+0x20>
 8001c26:	684b      	ldr	r3, [r1, #4]
 8001c28:	428c      	cmp	r4, r1
 8001c2a:	bf16      	itet	ne
 8001c2c:	6063      	strne	r3, [r4, #4]
 8001c2e:	6013      	streq	r3, [r2, #0]
 8001c30:	460c      	movne	r4, r1
 8001c32:	e7eb      	b.n	8001c0c <_malloc_r+0x64>
 8001c34:	460c      	mov	r4, r1
 8001c36:	6849      	ldr	r1, [r1, #4]
 8001c38:	e7cc      	b.n	8001bd4 <_malloc_r+0x2c>
 8001c3a:	1cc4      	adds	r4, r0, #3
 8001c3c:	f024 0403 	bic.w	r4, r4, #3
 8001c40:	42a0      	cmp	r0, r4
 8001c42:	d005      	beq.n	8001c50 <_malloc_r+0xa8>
 8001c44:	1a21      	subs	r1, r4, r0
 8001c46:	4630      	mov	r0, r6
 8001c48:	f000 f82e 	bl	8001ca8 <_sbrk_r>
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	d0cf      	beq.n	8001bf0 <_malloc_r+0x48>
 8001c50:	6025      	str	r5, [r4, #0]
 8001c52:	e7db      	b.n	8001c0c <_malloc_r+0x64>
 8001c54:	20000b74 	.word	0x20000b74
 8001c58:	20000b78 	.word	0x20000b78

08001c5c <_realloc_r>:
 8001c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5e:	4607      	mov	r7, r0
 8001c60:	4614      	mov	r4, r2
 8001c62:	460e      	mov	r6, r1
 8001c64:	b921      	cbnz	r1, 8001c70 <_realloc_r+0x14>
 8001c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	f7ff bf9c 	b.w	8001ba8 <_malloc_r>
 8001c70:	b922      	cbnz	r2, 8001c7c <_realloc_r+0x20>
 8001c72:	f7ff ff4d 	bl	8001b10 <_free_r>
 8001c76:	4625      	mov	r5, r4
 8001c78:	4628      	mov	r0, r5
 8001c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7c:	f000 f826 	bl	8001ccc <_malloc_usable_size_r>
 8001c80:	42a0      	cmp	r0, r4
 8001c82:	d20f      	bcs.n	8001ca4 <_realloc_r+0x48>
 8001c84:	4621      	mov	r1, r4
 8001c86:	4638      	mov	r0, r7
 8001c88:	f7ff ff8e 	bl	8001ba8 <_malloc_r>
 8001c8c:	4605      	mov	r5, r0
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d0f2      	beq.n	8001c78 <_realloc_r+0x1c>
 8001c92:	4631      	mov	r1, r6
 8001c94:	4622      	mov	r2, r4
 8001c96:	f7ff ff17 	bl	8001ac8 <memcpy>
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f7ff ff37 	bl	8001b10 <_free_r>
 8001ca2:	e7e9      	b.n	8001c78 <_realloc_r+0x1c>
 8001ca4:	4635      	mov	r5, r6
 8001ca6:	e7e7      	b.n	8001c78 <_realloc_r+0x1c>

08001ca8 <_sbrk_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	2300      	movs	r3, #0
 8001cac:	4c05      	ldr	r4, [pc, #20]	; (8001cc4 <_sbrk_r+0x1c>)
 8001cae:	4605      	mov	r5, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	f7fe ff04 	bl	8000ac0 <_sbrk>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_sbrk_r+0x1a>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_sbrk_r+0x1a>
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	20000b80 	.word	0x20000b80

08001cc8 <__malloc_lock>:
 8001cc8:	4770      	bx	lr

08001cca <__malloc_unlock>:
 8001cca:	4770      	bx	lr

08001ccc <_malloc_usable_size_r>:
 8001ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cd0:	1f18      	subs	r0, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bfbc      	itt	lt
 8001cd6:	580b      	ldrlt	r3, [r1, r0]
 8001cd8:	18c0      	addlt	r0, r0, r3
 8001cda:	4770      	bx	lr

08001cdc <_init>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	bf00      	nop
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr

08001ce8 <_fini>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr
