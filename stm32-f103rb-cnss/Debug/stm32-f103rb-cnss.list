
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000644  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000774  08000774  00010774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000814  08000814  0001081c  2**0
                  CONTENTS
  4 .ARM          00000000  08000814  08000814  0001081c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000814  0800081c  0001081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000814  08000814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000818  08000818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000000  0800081c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800081c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001081c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003212  00000000  00000000  00010845  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000914  00000000  00000000  00013a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  00014370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  000144d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000628  00000000  00000000  000145e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ac6  00000000  00000000  00014c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057656  00000000  00000000  000166d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006dd2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000464  00000000  00000000  0006dda8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800075c 	.word	0x0800075c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800075c 	.word	0x0800075c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:

}


void toggle_led()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001b5 	.word	0x200001b5
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 f943 	bl	8000464 <write_usart2>

}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	08000774 	.word	0x08000774

080001ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/



int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80001f2:	f000 f887 	bl	8000304 <init_usart2>
	init_usart1(); // for ESP8266
 80001f6:	f000 f8b9 	bl	800036c <init_usart1>
	//write_usart2((uint8_t*)AT_COMMAND);
	write_usart1((uint8_t*)AT_COMMAND); // WRITE TEST COMAND
 80001fa:	4807      	ldr	r0, [pc, #28]	; (8000218 <main+0x2c>)
 80001fc:	f000 f96e 	bl	80004dc <write_usart1>
	// WE EXPECT TO SEE IN SCREEN (TERA TERM ERROR OR OK) OR WORSE... ;)
	while(1)
	{
		//write_usart2((uint8_t*)MSG);//Used only when Testing USART2 without sensor
		//read_usart1();
		uint32_t found = search_usart1_buffer_Rx((uint8_t *)AT_OK);
 8000200:	4806      	ldr	r0, [pc, #24]	; (800021c <main+0x30>)
 8000202:	f000 f9e5 	bl	80005d0 <search_usart1_buffer_Rx>
 8000206:	6078      	str	r0, [r7, #4]
		if(found)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f8      	beq.n	8000200 <main+0x14>
		{
			write_usart2((uint8_t*)"TEST PASSED\r\n");
 800020e:	4804      	ldr	r0, [pc, #16]	; (8000220 <main+0x34>)
 8000210:	f000 f928 	bl	8000464 <write_usart2>
	{
 8000214:	e7f4      	b.n	8000200 <main+0x14>
 8000216:	bf00      	nop
 8000218:	080007f4 	.word	0x080007f4
 800021c:	080007fc 	.word	0x080007fc
 8000220:	08000804 	.word	0x08000804

08000224 <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0

}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f003 0307 	and.w	r3, r3, #7
 800023e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <__NVIC_SetPriorityGrouping+0x44>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800025c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000262:	4a04      	ldr	r2, [pc, #16]	; (8000274 <__NVIC_SetPriorityGrouping+0x44>)
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	60d3      	str	r3, [r2, #12]
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	db0b      	blt.n	80002a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 021f 	and.w	r2, r3, #31
 8000290:	4906      	ldr	r1, [pc, #24]	; (80002ac <__NVIC_EnableIRQ+0x34>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	; (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	; (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <init_usart2>:

/*This dunctions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <init_usart2+0x5c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <init_usart2+0x5c>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <init_usart2+0x60>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a12      	ldr	r2, [pc, #72]	; (8000364 <init_usart2+0x60>)
 800031a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <init_usart2+0x60>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0f      	ldr	r2, [pc, #60]	; (8000364 <init_usart2+0x60>)
 8000326:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800032a:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <init_usart2+0x5c>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <init_usart2+0x5c>)
 8000332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000336:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <init_usart2+0x64>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <init_usart2+0x64>)
 800033e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000342:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <init_usart2+0x64>)
 8000346:	f240 324d 	movw	r2, #845	; 0x34d
 800034a:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <init_usart2+0x64>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <init_usart2+0x64>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010800 	.word	0x40010800
 8000368:	40004400 	.word	0x40004400

0800036c <init_usart1>:

/* Usart1 will be use for communication with esp8266.
 * Generally,
 * By default, Rx interrupts will be enabled in our program
 * If you want to use Tx, call function Write_Uart1() that will send your msg and than enable Rx again */
void init_usart1(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)"In init_usart1\r\n");//TESTING

	//Can enable only Tx or Rx Each time (In Arduino we couldn't we can't remeber why)?? Only one at a time because they use the same data register

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000370:	4b2a      	ldr	r3, [pc, #168]	; (800041c <init_usart1+0xb0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a29      	ldr	r2, [pc, #164]	; (800041c <init_usart1+0xb0>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <init_usart1+0xb4>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a27      	ldr	r2, [pc, #156]	; (8000420 <init_usart1+0xb4>)
 8000382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000386:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <init_usart1+0xb4>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a24      	ldr	r2, [pc, #144]	; (8000420 <init_usart1+0xb4>)
 800038e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000392:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <init_usart1+0xb4>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a21      	ldr	r2, [pc, #132]	; (8000420 <init_usart1+0xb4>)
 800039a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800039e:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <init_usart1+0xb4>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <init_usart1+0xb4>)
 80003a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003aa:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <init_usart1+0xb4>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <init_usart1+0xb4>)
 80003b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b6:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <init_usart1+0xb0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a17      	ldr	r2, [pc, #92]	; (800041c <init_usart1+0xb0>)
 80003be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c2:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed??

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <init_usart1+0xb8>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a16      	ldr	r2, [pc, #88]	; (8000424 <init_usart1+0xb8>)
 80003ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ce:	60d3      	str	r3, [r2, #12]
	 * place. Configure the DMA register as explained in multibuffer communication.
	 * WE DONT THINK WE NEED IT.
	 */

	/*Set Baude Rate for USART1 115200 // !X9600 bpsX!*/
	USART1->BRR = 0x45; //0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <init_usart1+0xb8>)
 80003d2:	2245      	movs	r2, #69	; 0x45
 80003d4:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <init_usart1+0xb8>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <init_usart1+0xb8>)
 80003dc:	f043 0308 	orr.w	r3, r3, #8
 80003e0:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 80003e2:	f000 f8d5 	bl	8000590 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <init_usart1+0xb8>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <init_usart1+0xb8>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f2:	b672      	cpsid	i

	//write_usart2((uint8_t*)"End of init_usart1 - #1\r\n");

	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <init_usart1+0xb8>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <init_usart1+0xb8>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000400:	2007      	movs	r0, #7
 8000402:	f7ff ff15 	bl	8000230 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000406:	2100      	movs	r1, #0
 8000408:	2025      	movs	r0, #37	; 0x25
 800040a:	f7ff ff51 	bl	80002b0 <__NVIC_SetPriority>

	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 800040e:	2025      	movs	r0, #37	; 0x25
 8000410:	f7ff ff32 	bl	8000278 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000414:	b662      	cpsie	i
	//USART1->SR &= ~(0x00000020);
	//NVIC_ClearPendingIRQ(USART1_IRQn);
	__enable_irq();

	//write_usart2((uint8_t*)"End of init_usart1 - #2\r\n");
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800
 8000424:	40013800 	.word	0x40013800

08000428 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	2100      	movs	r1, #0
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <set_usart2_buffer_Tx+0x38>)
 8000436:	f000 f967 	bl	8000708 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	4808      	ldr	r0, [pc, #32]	; (8000460 <set_usart2_buffer_Tx+0x38>)
 800043e:	f000 f96b 	bl	8000718 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff fe94 	bl	8000170 <strlen>
 8000448:	4602      	mov	r2, r0
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <set_usart2_buffer_Tx+0x38>)
 800044c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	usart2.write_index = 0;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <set_usart2_buffer_Tx+0x38>)
 8000452:	2200      	movs	r2, #0
 8000454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000001c 	.word	0x2000001c

08000464 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff ffdb 	bl	8000428 <set_usart2_buffer_Tx>

	//USART2->SR &= ~(0x00000040); //WE DON"T THINK THIS WILL HELP.. TC IS CLEARED AUTUMATICALLY BY WRTING TO DR.
	while(usart2.write_index < usart2.Tx_len)
 8000472:	e014      	b.n	800049e <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000474:	bf00      	nop
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <write_usart2+0x70>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <write_usart2+0x74>)
 8000484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <write_usart2+0x74>)
 800048a:	5cd2      	ldrb	r2, [r2, r3]
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <write_usart2+0x70>)
 800048e:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <write_usart2+0x74>)
 8000492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000496:	3301      	adds	r3, #1
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <write_usart2+0x74>)
 800049a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	while(usart2.write_index < usart2.Tx_len)
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <write_usart2+0x74>)
 80004a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <write_usart2+0x74>)
 80004a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d3e2      	bcc.n	8000474 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80004ae:	bf00      	nop
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <write_usart2+0x70>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004b8:	2b40      	cmp	r3, #64	; 0x40
 80004ba:	d1f9      	bne.n	80004b0 <write_usart2+0x4c>
	usart2.write_index = 0;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <write_usart2+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	usart2.Tx_len = 0;
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <write_usart2+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40004400 	.word	0x40004400
 80004d8:	2000001c 	.word	0x2000001c

080004dc <write_usart1>:

/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	/*Enable Tx*/
	//USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)

	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f835 	bl	8000554 <set_usart1_buffer_Tx>

	/*Send command*/
	//USART1->SR &= ~(0x00000040); //WE DON"T THINK THIS WILL HELP.. TC IS CLEARED AUTUMATICALLY BY WRTING TO DR.
	while(usart1.write_index < usart1.Tx_len)
 80004ea:	e014      	b.n	8000516 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80004ec:	bf00      	nop
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <write_usart1+0x70>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <write_usart1+0x74>)
 80004fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <write_usart1+0x74>)
 8000502:	5cd2      	ldrb	r2, [r2, r3]
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <write_usart1+0x70>)
 8000506:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <write_usart1+0x74>)
 800050a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800050e:	3301      	adds	r3, #1
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <write_usart1+0x74>)
 8000512:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	while(usart1.write_index < usart1.Tx_len)
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <write_usart1+0x74>)
 8000518:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <write_usart1+0x74>)
 800051e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000522:	429a      	cmp	r2, r3
 8000524:	d3e2      	bcc.n	80004ec <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000526:	bf00      	nop
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <write_usart1+0x70>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000530:	2b40      	cmp	r3, #64	; 0x40
 8000532:	d1f9      	bne.n	8000528 <write_usart1+0x4c>
	usart1.write_index = 0;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <write_usart1+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	usart1.Tx_len = 0;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <write_usart1+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	/*Enable Rx*/
	//USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)

	///*Enable Rx interrupts?...*/

}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40013800 	.word	0x40013800
 8000550:	200000a4 	.word	0x200000a4

08000554 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	2100      	movs	r1, #0
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <set_usart1_buffer_Tx+0x38>)
 8000562:	f000 f8d1 	bl	8000708 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <set_usart1_buffer_Tx+0x38>)
 800056a:	f000 f8d5 	bl	8000718 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff fdfe 	bl	8000170 <strlen>
 8000574:	4602      	mov	r2, r0
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <set_usart1_buffer_Tx+0x38>)
 8000578:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
	usart1.write_index = 0;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <set_usart1_buffer_Tx+0x38>)
 800057e:	2200      	movs	r2, #0
 8000580:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200000a4 	.word	0x200000a4

08000590 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	2100      	movs	r1, #0
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <set_usart1_buffer_Rx+0x24>)
 800059a:	f000 f8b5 	bl	8000708 <memset>
	usart1.Rx_len = 0;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <set_usart1_buffer_Rx+0x28>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	usart1.read_index = 0;
 80005a6:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <set_usart1_buffer_Rx+0x28>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000124 	.word	0x20000124
 80005b8:	200000a4 	.word	0x200000a4

080005bc <read_usart1>:

/*Debug function- USART2 must be initialised*/
void read_usart1(){ //THIS IS NO GOOD! ANOTHER INTERRUPT CAN ACCUR IN THE MIDDLE
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)usart1.Rx); //write response to screen
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <read_usart1+0x10>)
 80005c2:	f7ff ff4f 	bl	8000464 <write_usart2>

	/*Read character until '\r\n'*/

	//than check response (in different function)
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000124 	.word	0x20000124

080005d0 <search_usart1_buffer_Rx>:

uint32_t search_usart1_buffer_Rx(uint8_t *response){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if(strstr((const char*)usart1.Rx , (const char*)response)){
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <search_usart1_buffer_Rx+0x2c>)
 80005dc:	f000 f8a4 	bl	8000728 <strstr>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <search_usart1_buffer_Rx+0x22>
		read_usart1();
 80005e6:	f7ff ffe9 	bl	80005bc <read_usart1>
		set_usart1_buffer_Rx();
 80005ea:	f7ff ffd1 	bl	8000590 <set_usart1_buffer_Rx>
		return (uint32_t)1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <search_usart1_buffer_Rx+0x24>
	}
	else{
		return (uint32_t)0;
 80005f2:	2300      	movs	r3, #0
	}
	/*!TODO: when usart1.Rx buffer is overflow*/

}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000124 	.word	0x20000124

08000600 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <USART1_IRQHandler+0x60>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	2b20      	cmp	r3, #32
 800060e:	d122      	bne.n	8000656 <USART1_IRQHandler+0x56>

		c = USART1->DR; //This clear RXNE bit
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <USART1_IRQHandler+0x60>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <USART1_IRQHandler+0x64>)
 8000618:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <USART1_IRQHandler+0x68>)
 800061c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000620:	3301      	adds	r3, #1
 8000622:	2b7f      	cmp	r3, #127	; 0x7f
 8000624:	d817      	bhi.n	8000656 <USART1_IRQHandler+0x56>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <USART1_IRQHandler+0x68>)
 8000628:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <USART1_IRQHandler+0x64>)
 800062e:	7811      	ldrb	r1, [r2, #0]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <USART1_IRQHandler+0x68>)
 8000632:	4413      	add	r3, r2
 8000634:	460a      	mov	r2, r1
 8000636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			usart1.read_index++;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <USART1_IRQHandler+0x68>)
 800063c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000640:	3301      	adds	r3, #1
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <USART1_IRQHandler+0x68>)
 8000644:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			usart1.Rx_len++;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <USART1_IRQHandler+0x68>)
 800064a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800064e:	3301      	adds	r3, #1
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <USART1_IRQHandler+0x68>)
 8000652:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	write_usart2((uint8_t*)"\r\n");
	write_usart2((uint8_t*)"End USART1_IRQHandler\r\n");
	*/


}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40013800 	.word	0x40013800
 8000664:	200001b4 	.word	0x200001b4
 8000668:	200000a4 	.word	0x200000a4

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000696:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 f811 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fda5 	bl	80001ec <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006b0:	0800081c 	.word	0x0800081c
  ldr r2, =_sbss
 80006b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006b8:	200001b8 	.word	0x200001b8

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2500      	movs	r5, #0
 80006c4:	4e0c      	ldr	r6, [pc, #48]	; (80006f8 <__libc_init_array+0x38>)
 80006c6:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c8:	1ba4      	subs	r4, r4, r6
 80006ca:	10a4      	asrs	r4, r4, #2
 80006cc:	42a5      	cmp	r5, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	f000 f844 	bl	800075c <_init>
 80006d4:	2500      	movs	r5, #0
 80006d6:	4e0a      	ldr	r6, [pc, #40]	; (8000700 <__libc_init_array+0x40>)
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <__libc_init_array+0x44>)
 80006da:	1ba4      	subs	r4, r4, r6
 80006dc:	10a4      	asrs	r4, r4, #2
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e8:	4798      	blx	r3
 80006ea:	3501      	adds	r5, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006f2:	4798      	blx	r3
 80006f4:	3501      	adds	r5, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08000814 	.word	0x08000814
 80006fc:	08000814 	.word	0x08000814
 8000700:	08000814 	.word	0x08000814
 8000704:	08000818 	.word	0x08000818

08000708 <memset>:
 8000708:	4603      	mov	r3, r0
 800070a:	4402      	add	r2, r0
 800070c:	4293      	cmp	r3, r2
 800070e:	d100      	bne.n	8000712 <memset+0xa>
 8000710:	4770      	bx	lr
 8000712:	f803 1b01 	strb.w	r1, [r3], #1
 8000716:	e7f9      	b.n	800070c <memset+0x4>

08000718 <strcpy>:
 8000718:	4603      	mov	r3, r0
 800071a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800071e:	f803 2b01 	strb.w	r2, [r3], #1
 8000722:	2a00      	cmp	r2, #0
 8000724:	d1f9      	bne.n	800071a <strcpy+0x2>
 8000726:	4770      	bx	lr

08000728 <strstr>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	7803      	ldrb	r3, [r0, #0]
 800072c:	b17b      	cbz	r3, 800074e <strstr+0x26>
 800072e:	4604      	mov	r4, r0
 8000730:	7823      	ldrb	r3, [r4, #0]
 8000732:	4620      	mov	r0, r4
 8000734:	1c66      	adds	r6, r4, #1
 8000736:	b17b      	cbz	r3, 8000758 <strstr+0x30>
 8000738:	1e4a      	subs	r2, r1, #1
 800073a:	1e63      	subs	r3, r4, #1
 800073c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8000740:	b14d      	cbz	r5, 8000756 <strstr+0x2e>
 8000742:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000746:	4634      	mov	r4, r6
 8000748:	42af      	cmp	r7, r5
 800074a:	d0f7      	beq.n	800073c <strstr+0x14>
 800074c:	e7f0      	b.n	8000730 <strstr+0x8>
 800074e:	780b      	ldrb	r3, [r1, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf18      	it	ne
 8000754:	2000      	movne	r0, #0
 8000756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000758:	4618      	mov	r0, r3
 800075a:	e7fc      	b.n	8000756 <strstr+0x2e>

0800075c <_init>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	bf00      	nop
 8000760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000762:	bc08      	pop	{r3}
 8000764:	469e      	mov	lr, r3
 8000766:	4770      	bx	lr

08000768 <_fini>:
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	bf00      	nop
 800076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800076e:	bc08      	pop	{r3}
 8000770:	469e      	mov	lr, r3
 8000772:	4770      	bx	lr
