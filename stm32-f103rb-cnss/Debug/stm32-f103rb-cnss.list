
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000182c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ccc  08001ccc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08001ccc  08001ccc  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ccc  08001ccc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ccc  08001ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cd0  08001cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08001cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  200000d0  08001da4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08001da4  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b03  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fb9  00000000  00000000  00025bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002b0  00000000  00000000  00026bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000238  00000000  00000000  00026e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010f46  00000000  00000000  000270a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000032e8  00000000  00000000  00037fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059188  00000000  00000000  0003b2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00094456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c68  00000000  00000000  000944d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d0 	.word	0x200000d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08001944 	.word	0x08001944

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d4 	.word	0x200000d4
 800016c:	08001944 	.word	0x08001944

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <setImagePath>:
//static uint32_t tries = 0;
//static uint32_t timeout = 0;



void setImagePath(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	2100      	movs	r1, #0
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <setImagePath+0x24>)
 800018a:	f000 ff9f 	bl	80010cc <memset>
	sprintf((char*)image_path, "image/path");
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <setImagePath+0x24>)
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <setImagePath+0x28>)
 8000192:	ca07      	ldmia	r2, {r0, r1, r2}
 8000194:	c303      	stmia	r3!, {r0, r1}
 8000196:	801a      	strh	r2, [r3, #0]
 8000198:	3302      	adds	r3, #2
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000474 	.word	0x20000474
 80001a8:	0800195c 	.word	0x0800195c

080001ac <recordAlert>:


/*This function sends an alert to realtime DB in containig the time of the alert firebase
 * before useing this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,3)){
 80001b0:	2103      	movs	r1, #3
 80001b2:	2003      	movs	r0, #3
 80001b4:	f000 f860 	bl	8000278 <setClientMode>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <recordAlert+0x16>
		return FALSE;
 80001be:	2300      	movs	r3, #0
 80001c0:	e047      	b.n	8000252 <recordAlert+0xa6>
	}
	write_usart2((uint8_t*)"1\r\n");
 80001c2:	4825      	ldr	r0, [pc, #148]	; (8000258 <recordAlert+0xac>)
 80001c4:	f000 fdf4 	bl	8000db0 <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,3)){
 80001c8:	2103      	movs	r1, #3
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 f88e 	bl	80002ec <joinAccessPoint>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d101      	bne.n	80001da <recordAlert+0x2e>
		return FALSE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	e03b      	b.n	8000252 <recordAlert+0xa6>
	}
	write_usart2((uint8_t*)"2\r\n");
 80001da:	4820      	ldr	r0, [pc, #128]	; (800025c <recordAlert+0xb0>)
 80001dc:	f000 fde8 	bl	8000db0 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,3,6)){
 80001e0:	2306      	movs	r3, #6
 80001e2:	2203      	movs	r2, #3
 80001e4:	2103      	movs	r1, #3
 80001e6:	2003      	movs	r0, #3
 80001e8:	f000 f8cc 	bl	8000384 <connectFirebaseHost>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d101      	bne.n	80001f6 <recordAlert+0x4a>
		return FALSE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	e02d      	b.n	8000252 <recordAlert+0xa6>
	}
	write_usart2((uint8_t*)"3\r\n");
 80001f6:	481a      	ldr	r0, [pc, #104]	; (8000260 <recordAlert+0xb4>)
 80001f8:	f000 fdda 	bl	8000db0 <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 80001fc:	f7ff ffc0 	bl	8000180 <setImagePath>
	write_usart2((uint8_t*)"4\r\n");
 8000200:	4818      	ldr	r0, [pc, #96]	; (8000264 <recordAlert+0xb8>)
 8000202:	f000 fdd5 	bl	8000db0 <write_usart2>

	//Create HTTP request
	createPostMsg();
 8000206:	f000 f951 	bl	80004ac <createPostMsg>
	write_usart2((uint8_t*)"5\r\n");
 800020a:	4817      	ldr	r0, [pc, #92]	; (8000268 <recordAlert+0xbc>)
 800020c:	f000 fdd0 	bl	8000db0 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 8000210:	233c      	movs	r3, #60	; 0x3c
 8000212:	221e      	movs	r2, #30
 8000214:	2103      	movs	r1, #3
 8000216:	2003      	movs	r0, #3
 8000218:	f000 f98c 	bl	8000534 <sendRequest>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d101      	bne.n	8000226 <recordAlert+0x7a>
		return FALSE;
 8000222:	2300      	movs	r3, #0
 8000224:	e015      	b.n	8000252 <recordAlert+0xa6>
	}
	write_usart2((uint8_t*)"6\r\n");
 8000226:	4811      	ldr	r0, [pc, #68]	; (800026c <recordAlert+0xc0>)
 8000228:	f000 fdc2 	bl	8000db0 <write_usart2>

	//Read response
	if(!readResponse(180)){//timeout set t0 3 minutes
 800022c:	20b4      	movs	r0, #180	; 0xb4
 800022e:	f000 fa15 	bl	800065c <readResponse>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d101      	bne.n	800023c <recordAlert+0x90>
		return FALSE;
 8000238:	2300      	movs	r3, #0
 800023a:	e00a      	b.n	8000252 <recordAlert+0xa6>
	}

	write_usart2((uint8_t*)"7\r\n");
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <recordAlert+0xc4>)
 800023e:	f000 fdb7 	bl	8000db0 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	closeCunnection(3,3);
 8000242:	2103      	movs	r1, #3
 8000244:	2003      	movs	r0, #3
 8000246:	f000 fa35 	bl	80006b4 <closeCunnection>
	write_usart2((uint8_t*)"8\r\n");
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <recordAlert+0xc8>)
 800024c:	f000 fdb0 	bl	8000db0 <write_usart2>

	return TRUE;
 8000250:	2301      	movs	r3, #1

}
 8000252:	4618      	mov	r0, r3
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	08001968 	.word	0x08001968
 800025c:	0800196c 	.word	0x0800196c
 8000260:	08001970 	.word	0x08001970
 8000264:	08001974 	.word	0x08001974
 8000268:	08001978 	.word	0x08001978
 800026c:	0800197c 	.word	0x0800197c
 8000270:	08001980 	.word	0x08001980
 8000274:	08001984 	.word	0x08001984

08000278 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <setClientMode+0x64>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 8000288:	4815      	ldr	r0, [pc, #84]	; (80002e0 <setClientMode+0x68>)
 800028a:	f000 fdcd 	bl	8000e28 <write_usart1>
	while(tries > 0){
 800028e:	e01d      	b.n	80002cc <setClientMode+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000290:	4914      	ldr	r1, [pc, #80]	; (80002e4 <setClientMode+0x6c>)
 8000292:	4815      	ldr	r0, [pc, #84]	; (80002e8 <setClientMode+0x70>)
 8000294:	f000 fe3a 	bl	8000f0c <search_usart1_buffer_Rx>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <setClientMode+0x64>)
 800029e:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <setClientMode+0x64>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d105      	bne.n	80002b4 <setClientMode+0x3c>
 80002a8:	6838      	ldr	r0, [r7, #0]
 80002aa:	f000 fbc7 	bl	8000a3c <timeout_with_timer4>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0ed      	beq.n	8000290 <setClientMode+0x18>
		}
		if(found == PASS){
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <setClientMode+0x64>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d101      	bne.n	80002c0 <setClientMode+0x48>
			return TRUE;
 80002bc:	2301      	movs	r3, #1
 80002be:	e009      	b.n	80002d4 <setClientMode+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3b01      	subs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 80002c6:	4806      	ldr	r0, [pc, #24]	; (80002e0 <setClientMode+0x68>)
 80002c8:	f000 fdae 	bl	8000e28 <write_usart1>
	while(tries > 0){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1e6      	bne.n	80002a0 <setClientMode+0x28>
		}
	}
	return FALSE;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000006b 	.word	0x2000006b
 80002e0:	080019ac 	.word	0x080019ac
 80002e4:	08001990 	.word	0x08001990
 80002e8:	08001998 	.word	0x08001998

080002ec <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80002f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fa:	2100      	movs	r1, #0
 80002fc:	481a      	ldr	r0, [pc, #104]	; (8000368 <joinAccessPoint+0x7c>)
 80002fe:	f000 fee5 	bl	80010cc <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 8000302:	4b1a      	ldr	r3, [pc, #104]	; (800036c <joinAccessPoint+0x80>)
 8000304:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <joinAccessPoint+0x84>)
 8000306:	491b      	ldr	r1, [pc, #108]	; (8000374 <joinAccessPoint+0x88>)
 8000308:	4817      	ldr	r0, [pc, #92]	; (8000368 <joinAccessPoint+0x7c>)
 800030a:	f000 fee7 	bl	80010dc <siprintf>

	found = STANDBY;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <joinAccessPoint+0x8c>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000314:	4814      	ldr	r0, [pc, #80]	; (8000368 <joinAccessPoint+0x7c>)
 8000316:	f000 fd87 	bl	8000e28 <write_usart1>
	while(tries > 0){
 800031a:	e01d      	b.n	8000358 <joinAccessPoint+0x6c>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 800031c:	4917      	ldr	r1, [pc, #92]	; (800037c <joinAccessPoint+0x90>)
 800031e:	4818      	ldr	r0, [pc, #96]	; (8000380 <joinAccessPoint+0x94>)
 8000320:	f000 fdf4 	bl	8000f0c <search_usart1_buffer_Rx>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <joinAccessPoint+0x8c>)
 800032a:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <joinAccessPoint+0x8c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d105      	bne.n	8000340 <joinAccessPoint+0x54>
 8000334:	6838      	ldr	r0, [r7, #0]
 8000336:	f000 fb81 	bl	8000a3c <timeout_with_timer4>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0ed      	beq.n	800031c <joinAccessPoint+0x30>
		}
		if(found == PASS){
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <joinAccessPoint+0x8c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <joinAccessPoint+0x60>
			return TRUE;
 8000348:	2301      	movs	r3, #1
 800034a:	e009      	b.n	8000360 <joinAccessPoint+0x74>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3b01      	subs	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <joinAccessPoint+0x7c>)
 8000354:	f000 fd68 	bl	8000e28 <write_usart1>
	while(tries > 0){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1e6      	bne.n	800032c <joinAccessPoint+0x40>
		}
	}
	return FALSE;
 800035e:	2300      	movs	r3, #0

}
 8000360:	4618      	mov	r0, r3
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200000ec 	.word	0x200000ec
 800036c:	080019bc 	.word	0x080019bc
 8000370:	080019c8 	.word	0x080019c8
 8000374:	080019d4 	.word	0x080019d4
 8000378:	2000006b 	.word	0x2000006b
 800037c:	080019ec 	.word	0x080019ec
 8000380:	08001998 	.word	0x08001998

08000384 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 8000392:	4b3c      	ldr	r3, [pc, #240]	; (8000484 <connectFirebaseHost+0x100>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000398:	483b      	ldr	r0, [pc, #236]	; (8000488 <connectFirebaseHost+0x104>)
 800039a:	f000 fd45 	bl	8000e28 <write_usart1>
	while(_ssl_tries > 0){
 800039e:	e01b      	b.n	80003d8 <connectFirebaseHost+0x54>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80003a0:	493a      	ldr	r1, [pc, #232]	; (800048c <connectFirebaseHost+0x108>)
 80003a2:	483b      	ldr	r0, [pc, #236]	; (8000490 <connectFirebaseHost+0x10c>)
 80003a4:	f000 fdb2 	bl	8000f0c <search_usart1_buffer_Rx>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b35      	ldr	r3, [pc, #212]	; (8000484 <connectFirebaseHost+0x100>)
 80003ae:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <connectFirebaseHost+0x100>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d105      	bne.n	80003c4 <connectFirebaseHost+0x40>
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 fb3f 	bl	8000a3c <timeout_with_timer4>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0ed      	beq.n	80003a0 <connectFirebaseHost+0x1c>
		}
		if(found == PASS){
 80003c4:	4b2f      	ldr	r3, [pc, #188]	; (8000484 <connectFirebaseHost+0x100>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d009      	beq.n	80003e0 <connectFirebaseHost+0x5c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 80003d2:	482d      	ldr	r0, [pc, #180]	; (8000488 <connectFirebaseHost+0x104>)
 80003d4:	f000 fd28 	bl	8000e28 <write_usart1>
	while(_ssl_tries > 0){
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1e8      	bne.n	80003b0 <connectFirebaseHost+0x2c>
 80003de:	e000      	b.n	80003e2 <connectFirebaseHost+0x5e>
			break; //move on to next command
 80003e0:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <connectFirebaseHost+0x100>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d003      	beq.n	80003f2 <connectFirebaseHost+0x6e>
 80003ea:	4b26      	ldr	r3, [pc, #152]	; (8000484 <connectFirebaseHost+0x100>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d101      	bne.n	80003f6 <connectFirebaseHost+0x72>
		return FALSE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	e041      	b.n	800047a <connectFirebaseHost+0xf6>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80003f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fa:	2100      	movs	r1, #0
 80003fc:	4825      	ldr	r0, [pc, #148]	; (8000494 <connectFirebaseHost+0x110>)
 80003fe:	f000 fe65 	bl	80010cc <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <connectFirebaseHost+0x114>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a25      	ldr	r2, [pc, #148]	; (800049c <connectFirebaseHost+0x118>)
 8000408:	4925      	ldr	r1, [pc, #148]	; (80004a0 <connectFirebaseHost+0x11c>)
 800040a:	4822      	ldr	r0, [pc, #136]	; (8000494 <connectFirebaseHost+0x110>)
 800040c:	f000 fe66 	bl	80010dc <siprintf>

	found = STANDBY;
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <connectFirebaseHost+0x100>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000416:	481f      	ldr	r0, [pc, #124]	; (8000494 <connectFirebaseHost+0x110>)
 8000418:	f000 fd06 	bl	8000e28 <write_usart1>
	while(_cipstart_tries > 0){
 800041c:	e029      	b.n	8000472 <connectFirebaseHost+0xee>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 800041e:	4921      	ldr	r1, [pc, #132]	; (80004a4 <connectFirebaseHost+0x120>)
 8000420:	481b      	ldr	r0, [pc, #108]	; (8000490 <connectFirebaseHost+0x10c>)
 8000422:	f000 fd73 	bl	8000f0c <search_usart1_buffer_Rx>
 8000426:	4603      	mov	r3, r0
 8000428:	461a      	mov	r2, r3
 800042a:	4b16      	ldr	r3, [pc, #88]	; (8000484 <connectFirebaseHost+0x100>)
 800042c:	701a      	strb	r2, [r3, #0]
			if(found!= PASS){
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <connectFirebaseHost+0x100>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d007      	beq.n	8000446 <connectFirebaseHost+0xc2>
				found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ALREADY_CONNECTED);//NO IDEA WHY THIS IS SO CRITICAL BUT IT IS!
 8000436:	491c      	ldr	r1, [pc, #112]	; (80004a8 <connectFirebaseHost+0x124>)
 8000438:	4815      	ldr	r0, [pc, #84]	; (8000490 <connectFirebaseHost+0x10c>)
 800043a:	f000 fd67 	bl	8000f0c <search_usart1_buffer_Rx>
 800043e:	4603      	mov	r3, r0
 8000440:	461a      	mov	r2, r3
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <connectFirebaseHost+0x100>)
 8000444:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <connectFirebaseHost+0x100>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d105      	bne.n	800045a <connectFirebaseHost+0xd6>
 800044e:	6838      	ldr	r0, [r7, #0]
 8000450:	f000 faf4 	bl	8000a3c <timeout_with_timer4>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0e1      	beq.n	800041e <connectFirebaseHost+0x9a>
			}
		}
		if(found == PASS){
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <connectFirebaseHost+0x100>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d101      	bne.n	8000466 <connectFirebaseHost+0xe2>
			return TRUE;
 8000462:	2301      	movs	r3, #1
 8000464:	e009      	b.n	800047a <connectFirebaseHost+0xf6>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3b01      	subs	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <connectFirebaseHost+0x110>)
 800046e:	f000 fcdb 	bl	8000e28 <write_usart1>
	while(_cipstart_tries > 0){
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1e6      	bne.n	8000446 <connectFirebaseHost+0xc2>
		}
	}
	return FALSE;
 8000478:	2300      	movs	r3, #0



}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000006b 	.word	0x2000006b
 8000488:	080019f4 	.word	0x080019f4
 800048c:	08001990 	.word	0x08001990
 8000490:	08001998 	.word	0x08001998
 8000494:	200000ec 	.word	0x200000ec
 8000498:	20000058 	.word	0x20000058
 800049c:	20000000 	.word	0x20000000
 80004a0:	08001a0c 	.word	0x08001a0c
 80004a4:	080019ec 	.word	0x080019ec
 80004a8:	08001a2c 	.word	0x08001a2c

080004ac <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	2100      	movs	r1, #0
 80004b6:	4815      	ldr	r0, [pc, #84]	; (800050c <createPostMsg+0x60>)
 80004b8:	f000 fe08 	bl	80010cc <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <createPostMsg+0x64>)
 80004be:	4915      	ldr	r1, [pc, #84]	; (8000514 <createPostMsg+0x68>)
 80004c0:	4812      	ldr	r0, [pc, #72]	; (800050c <createPostMsg+0x60>)
 80004c2:	f000 fe0b 	bl	80010dc <siprintf>
	content_len = strlen((char*)content);
 80004c6:	4811      	ldr	r0, [pc, #68]	; (800050c <createPostMsg+0x60>)
 80004c8:	f7ff fe52 	bl	8000170 <strlen>
 80004cc:	4602      	mov	r2, r0
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <createPostMsg+0x6c>)
 80004d0:	601a      	str	r2, [r3, #0]
	//content_len = strlen("{\"image_path\": \"\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}") + strlen((char*)image_path);


	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80004d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004d6:	2100      	movs	r1, #0
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <createPostMsg+0x70>)
 80004da:	f000 fdf7 	bl	80010cc <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <createPostMsg+0x6c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <createPostMsg+0x60>)
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <createPostMsg+0x74>)
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <createPostMsg+0x78>)
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <createPostMsg+0x7c>)
 80004f0:	490e      	ldr	r1, [pc, #56]	; (800052c <createPostMsg+0x80>)
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <createPostMsg+0x70>)
 80004f4:	f000 fdf2 	bl	80010dc <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <createPostMsg+0x70>)
 80004fa:	f7ff fe39 	bl	8000170 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	3b02      	subs	r3, #2
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <createPostMsg+0x84>)
 8000504:	6013      	str	r3, [r2, #0]

}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200003f0 	.word	0x200003f0
 8000510:	20000474 	.word	0x20000474
 8000514:	08001a40 	.word	0x08001a40
 8000518:	20000470 	.word	0x20000470
 800051c:	200001ec 	.word	0x200001ec
 8000520:	20000000 	.word	0x20000000
 8000524:	2000002c 	.word	0x2000002c
 8000528:	2000005c 	.word	0x2000005c
 800052c:	08001a94 	.word	0x08001a94
 8000530:	200003ec 	.word	0x200003ec

08000534 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000546:	2100      	movs	r1, #0
 8000548:	483a      	ldr	r0, [pc, #232]	; (8000634 <sendRequest+0x100>)
 800054a:	f000 fdbf 	bl	80010cc <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800054e:	4b3a      	ldr	r3, [pc, #232]	; (8000638 <sendRequest+0x104>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4939      	ldr	r1, [pc, #228]	; (800063c <sendRequest+0x108>)
 8000556:	4837      	ldr	r0, [pc, #220]	; (8000634 <sendRequest+0x100>)
 8000558:	f000 fdc0 	bl	80010dc <siprintf>

	found = STANDBY;
 800055c:	4b38      	ldr	r3, [pc, #224]	; (8000640 <sendRequest+0x10c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000562:	4834      	ldr	r0, [pc, #208]	; (8000634 <sendRequest+0x100>)
 8000564:	f000 fc60 	bl	8000e28 <write_usart1>
	while(_CIPSEND_tries > 0){
 8000568:	e027      	b.n	80005ba <sendRequest+0x86>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 800056a:	4936      	ldr	r1, [pc, #216]	; (8000644 <sendRequest+0x110>)
 800056c:	4836      	ldr	r0, [pc, #216]	; (8000648 <sendRequest+0x114>)
 800056e:	f000 fccd 	bl	8000f0c <search_usart1_buffer_Rx>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <sendRequest+0x10c>)
 8000578:	701a      	strb	r2, [r3, #0]
			if(found != PASS){
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <sendRequest+0x10c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d007      	beq.n	8000592 <sendRequest+0x5e>
				found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");//I think this should be here
 8000582:	4932      	ldr	r1, [pc, #200]	; (800064c <sendRequest+0x118>)
 8000584:	4830      	ldr	r0, [pc, #192]	; (8000648 <sendRequest+0x114>)
 8000586:	f000 fcc1 	bl	8000f0c <search_usart1_buffer_Rx>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <sendRequest+0x10c>)
 8000590:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <sendRequest+0x10c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d105      	bne.n	80005a6 <sendRequest+0x72>
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f000 fa4e 	bl	8000a3c <timeout_with_timer4>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0e1      	beq.n	800056a <sendRequest+0x36>
			}
		}
		if(found == PASS){
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <sendRequest+0x10c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d009      	beq.n	80005c2 <sendRequest+0x8e>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 80005b4:	481f      	ldr	r0, [pc, #124]	; (8000634 <sendRequest+0x100>)
 80005b6:	f000 fc37 	bl	8000e28 <write_usart1>
	while(_CIPSEND_tries > 0){
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1e8      	bne.n	8000592 <sendRequest+0x5e>
 80005c0:	e000      	b.n	80005c4 <sendRequest+0x90>
			break; //move on to next command
 80005c2:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <sendRequest+0x10c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d003      	beq.n	80005d4 <sendRequest+0xa0>
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <sendRequest+0x10c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d101      	bne.n	80005d8 <sendRequest+0xa4>
		return FALSE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e028      	b.n	800062a <sendRequest+0xf6>
	}


	/*Send HTTP request*/
	found = STANDBY;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <sendRequest+0x10c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <sendRequest+0x11c>)
 80005e0:	f000 fc22 	bl	8000e28 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 80005e4:	e01d      	b.n	8000622 <sendRequest+0xee>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 80005e6:	491b      	ldr	r1, [pc, #108]	; (8000654 <sendRequest+0x120>)
 80005e8:	481b      	ldr	r0, [pc, #108]	; (8000658 <sendRequest+0x124>)
 80005ea:	f000 fc8f 	bl	8000f0c <search_usart1_buffer_Rx>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <sendRequest+0x10c>)
 80005f4:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <sendRequest+0x10c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d105      	bne.n	800060a <sendRequest+0xd6>
 80005fe:	6838      	ldr	r0, [r7, #0]
 8000600:	f000 fa1c 	bl	8000a3c <timeout_with_timer4>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0ed      	beq.n	80005e6 <sendRequest+0xb2>
		}
		if(found == PASS){
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <sendRequest+0x10c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <sendRequest+0xe2>
			return TRUE;
 8000612:	2301      	movs	r3, #1
 8000614:	e009      	b.n	800062a <sendRequest+0xf6>
		}
		else{
			_SEND_OK_tries--;
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <sendRequest+0x11c>)
 800061e:	f000 fc03 	bl	8000e28 <write_usart1>
	while(_SEND_OK_tries > 0){
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e6      	bne.n	80005f6 <sendRequest+0xc2>
		}
	}
	return FALSE;
 8000628:	2300      	movs	r3, #0

}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000ec 	.word	0x200000ec
 8000638:	200003ec 	.word	0x200003ec
 800063c:	08001b0c 	.word	0x08001b0c
 8000640:	2000006b 	.word	0x2000006b
 8000644:	08001990 	.word	0x08001990
 8000648:	08001b20 	.word	0x08001b20
 800064c:	08001b24 	.word	0x08001b24
 8000650:	200001ec 	.word	0x200001ec
 8000654:	080019ec 	.word	0x080019ec
 8000658:	08001b30 	.word	0x08001b30

0800065c <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <readResponse+0x4c>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 800066a:	e007      	b.n	800067c <readResponse+0x20>
		//found = search_usart1_buffer_Rx((uint8_t *)"\r\n\r\nOK\r\n", (uint8_t *)AT_FAIL); //We counting on the appearance of OK in the HTTP response (we wont see the full response)
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <readResponse+0x50>)
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <readResponse+0x54>)
 8000670:	f000 fc4c 	bl	8000f0c <search_usart1_buffer_Rx>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <readResponse+0x4c>)
 800067a:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <readResponse+0x4c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d105      	bne.n	8000690 <readResponse+0x34>
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f9d9 	bl	8000a3c <timeout_with_timer4>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0ed      	beq.n	800066c <readResponse+0x10>
	}

	if(found == PASS){
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <readResponse+0x4c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <readResponse+0x40>
		return TRUE;
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <readResponse+0x42>
	}
	else{
		return FALSE;
 800069c:	2300      	movs	r3, #0
	}

}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000006b 	.word	0x2000006b
 80006ac:	080019ec 	.word	0x080019ec
 80006b0:	08001b24 	.word	0x08001b24

080006b4 <closeCunnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeCunnection(uint32_t tries, uint32_t timeout){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <closeCunnection+0x64>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 80006c4:	4815      	ldr	r0, [pc, #84]	; (800071c <closeCunnection+0x68>)
 80006c6:	f000 fbaf 	bl	8000e28 <write_usart1>
	while(tries > 0){
 80006ca:	e01d      	b.n	8000708 <closeCunnection+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80006cc:	4914      	ldr	r1, [pc, #80]	; (8000720 <closeCunnection+0x6c>)
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <closeCunnection+0x70>)
 80006d0:	f000 fc1c 	bl	8000f0c <search_usart1_buffer_Rx>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <closeCunnection+0x64>)
 80006da:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <closeCunnection+0x64>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d105      	bne.n	80006f0 <closeCunnection+0x3c>
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f000 f9a9 	bl	8000a3c <timeout_with_timer4>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0ed      	beq.n	80006cc <closeCunnection+0x18>
		}
		if(found == PASS){
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <closeCunnection+0x64>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <closeCunnection+0x48>
			return TRUE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e009      	b.n	8000710 <closeCunnection+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <closeCunnection+0x68>)
 8000704:	f000 fb90 	bl	8000e28 <write_usart1>
	while(tries > 0){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1e6      	bne.n	80006dc <closeCunnection+0x28>
		}
	}
	return FALSE;
 800070e:	2300      	movs	r3, #0

}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000006b 	.word	0x2000006b
 800071c:	08001b3c 	.word	0x08001b3c
 8000720:	08001990 	.word	0x08001990
 8000724:	08001998 	.word	0x08001998

08000728 <toggle_led>:

}


void toggle_led()
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	if(state == OFF)
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <toggle_led+0x3c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d109      	bne.n	8000748 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <toggle_led+0x40>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <toggle_led+0x40>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <toggle_led+0x3c>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 8000746:	e008      	b.n	800075a <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <toggle_led+0x40>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <toggle_led+0x40>)
 800074e:	f023 0320 	bic.w	r3, r3, #32
 8000752:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <toggle_led+0x3c>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000b40 	.word	0x20000b40
 8000768:	40010800 	.word	0x40010800

0800076c <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <EXTI4_IRQHandler+0x20>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <EXTI4_IRQHandler+0x20>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 800077c:	f7ff ffd4 	bl	8000728 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <EXTI4_IRQHandler+0x24>)
 8000782:	f000 fb15 	bl	8000db0 <write_usart2>

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010400 	.word	0x40010400
 8000790:	08001bdc 	.word	0x08001bdc

08000794 <main>:
#include "timers.h"
#include "common.h"


int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 8000798:	f000 fa58 	bl	8000c4c <init_usart2>

//	init_timer2();
	init_timer3();
 800079c:	f000 f8b0 	bl	8000900 <init_timer3>
	init_timer4();
 80007a0:	f000 f8ee 	bl	8000980 <init_timer4>

	init_usart1(); // for ESP8266
 80007a4:	f000 fa86 	bl	8000cb4 <init_usart1>
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0x34>)
 80007aa:	f000 fb01 	bl	8000db0 <write_usart2>


	while(1)
	{
		if(recordAlert()){
 80007ae:	f7ff fcfd 	bl	80001ac <recordAlert>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d003      	beq.n	80007c0 <main+0x2c>
			write_usart2((uint8_t*)(":)\r\n"));
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <main+0x38>)
 80007ba:	f000 faf9 	bl	8000db0 <write_usart2>
 80007be:	e7f6      	b.n	80007ae <main+0x1a>
		}
		else{
			write_usart2((uint8_t*)(":(\r\n"));
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <main+0x3c>)
 80007c2:	f000 faf5 	bl	8000db0 <write_usart2>
		if(recordAlert()){
 80007c6:	e7f2      	b.n	80007ae <main+0x1a>
 80007c8:	08001c5c 	.word	0x08001c5c
 80007cc:	08001c70 	.word	0x08001c70
 80007d0:	08001c78 	.word	0x08001c78

080007d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <_sbrk+0x50>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x16>
		heap_end = &end;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <_sbrk+0x50>)
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <_sbrk+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <_sbrk+0x50>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <_sbrk+0x50>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	466a      	mov	r2, sp
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d907      	bls.n	800080e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007fe:	f000 fc3b 	bl	8001078 <__errno>
 8000802:	4602      	mov	r2, r0
 8000804:	230c      	movs	r3, #12
 8000806:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	e006      	b.n	800081c <_sbrk+0x48>
	}

	heap_end += incr;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <_sbrk+0x50>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a03      	ldr	r2, [pc, #12]	; (8000824 <_sbrk+0x50>)
 8000818:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004f4 	.word	0x200004f4
 8000828:	20000b48 	.word	0x20000b48

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <__NVIC_EnableIRQ+0x34>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <init_timer3>:
	timer2.timeout = FALSE;

}

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <init_timer3+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <init_timer3+0x74>)
 800090a:	f043 0302 	orr.w	r3, r3, #2
 800090e:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <init_timer3+0x78>)
 8000912:	2264      	movs	r2, #100	; 0x64
 8000914:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <init_timer3+0x78>)
 8000918:	2250      	movs	r2, #80	; 0x50
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <init_timer3+0x78>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <init_timer3+0x78>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <init_timer3+0x78>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <init_timer3+0x78>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <init_timer3+0x78>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <init_timer3+0x78>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000942:	2007      	movs	r0, #7
 8000944:	f7ff ff72 	bl	800082c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000948:	2100      	movs	r1, #0
 800094a:	201d      	movs	r0, #29
 800094c:	f7ff ffae 	bl	80008ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8000950:	201d      	movs	r0, #29
 8000952:	f7ff ff8f 	bl	8000874 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000956:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <init_timer3+0x7c>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
	timer3.timeout_count = 0;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <init_timer3+0x7c>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
	timer3.delay = FALSE;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <init_timer3+0x7c>)
 8000966:	2200      	movs	r2, #0
 8000968:	721a      	strb	r2, [r3, #8]
	timer3.timeout = FALSE;
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <init_timer3+0x7c>)
 800096c:	2200      	movs	r2, #0
 800096e:	725a      	strb	r2, [r3, #9]
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	40000400 	.word	0x40000400
 800097c:	20000504 	.word	0x20000504

08000980 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <init_timer4+0x78>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <init_timer4+0x78>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <init_timer4+0x7c>)
 8000992:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <init_timer4+0x7c>)
 800099a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <init_timer4+0x7c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a15      	ldr	r2, [pc, #84]	; (80009fc <init_timer4+0x7c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <init_timer4+0x7c>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <init_timer4+0x7c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <init_timer4+0x7c>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <init_timer4+0x7c>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80009c6:	2007      	movs	r0, #7
 80009c8:	f7ff ff30 	bl	800082c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80009cc:	2100      	movs	r1, #0
 80009ce:	201e      	movs	r0, #30
 80009d0:	f7ff ff6c 	bl	80008ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80009d4:	201e      	movs	r0, #30
 80009d6:	f7ff ff4d 	bl	8000874 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80009da:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <init_timer4+0x80>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
	timer4.timeout_count = 0;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <init_timer4+0x80>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
	timer4.delay = FALSE;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <init_timer4+0x80>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	721a      	strb	r2, [r3, #8]
	timer4.timeout = FALSE;
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <init_timer4+0x80>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	725a      	strb	r2, [r3, #9]
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40000800 	.word	0x40000800
 8000a00:	20000510 	.word	0x20000510

08000a04 <enable_timer4>:
{
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
}

void enable_timer4(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <enable_timer4+0x18>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <enable_timer4+0x18>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40000800 	.word	0x40000800

08000a20 <disable_timer4>:
{
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
}

void disable_timer4(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <disable_timer4+0x18>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <disable_timer4+0x18>)
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40000800 	.word	0x40000800

08000a3c <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000a44:	f7ff ffde 	bl	8000a04 <enable_timer4>

	timer4.timeout = TRUE;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <timeout_with_timer4+0x44>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	725a      	strb	r2, [r3, #9]
	if(timer4.timeout_count >= num_of_sec){
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <timeout_with_timer4+0x44>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d80d      	bhi.n	8000a74 <timeout_with_timer4+0x38>
		if(!timer4.delay){
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <timeout_with_timer4+0x44>)
 8000a5a:	7a1b      	ldrb	r3, [r3, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <timeout_with_timer4+0x28>
			disable_timer4();
 8000a60:	f7ff ffde 	bl	8000a20 <disable_timer4>
		}
		timer4.timeout = FALSE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <timeout_with_timer4+0x44>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
		timer4.timeout_count = 0;
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <timeout_with_timer4+0x44>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <timeout_with_timer4+0x3a>
	}
	else{
		return FALSE;
 8000a74:	2300      	movs	r3, #0
	}
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000510 	.word	0x20000510

08000a84 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d119      	bne.n	8000aca <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000a98:	7a1b      	ldrb	r3, [r3, #8]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d104      	bne.n	8000aa8 <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000aa6:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000aaa:	7a5b      	ldrb	r3, [r3, #9]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d104      	bne.n	8000aba <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <TIM2_IRQHandler+0x50>)
 8000ab8:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	6113      	str	r3, [r2, #16]
	}
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200004f8 	.word	0x200004f8

08000ad8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <TIM3_IRQHandler+0x48>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d117      	bne.n	8000b18 <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000aea:	7a1b      	ldrb	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d104      	bne.n	8000afa <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000af8:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000afc:	7a5b      	ldrb	r3, [r3, #9]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d104      	bne.n	8000b0c <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <TIM3_IRQHandler+0x4c>)
 8000b0a:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <TIM3_IRQHandler+0x48>)
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <TIM3_IRQHandler+0x48>)
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	6113      	str	r3, [r2, #16]
	}
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40000400 	.word	0x40000400
 8000b24:	20000504 	.word	0x20000504

08000b28 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <TIM4_IRQHandler+0x48>)
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d117      	bne.n	8000b68 <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b3a:	7a1b      	ldrb	r3, [r3, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d104      	bne.n	8000b4a <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b48:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b4c:	7a5b      	ldrb	r3, [r3, #9]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d104      	bne.n	8000b5c <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <TIM4_IRQHandler+0x4c>)
 8000b5a:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <TIM4_IRQHandler+0x48>)
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <TIM4_IRQHandler+0x48>)
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	6113      	str	r3, [r2, #16]
	}
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40000800 	.word	0x40000800
 8000b74:	20000510 	.word	0x20000510

08000b78 <__NVIC_SetPriorityGrouping>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <__NVIC_EnableIRQ+0x34>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <init_usart2+0x5c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <init_usart2+0x5c>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <init_usart2+0x60>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <init_usart2+0x60>)
 8000c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c66:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <init_usart2+0x60>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <init_usart2+0x60>)
 8000c6e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000c72:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <init_usart2+0x5c>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <init_usart2+0x5c>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <init_usart2+0x64>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <init_usart2+0x64>)
 8000c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c8a:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <init_usart2+0x64>)
 8000c8e:	f240 324d 	movw	r2, #845	; 0x34d
 8000c92:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <init_usart2+0x64>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <init_usart2+0x64>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <init_usart1+0xb0>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <init_usart1+0xb0>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <init_usart1+0xb4>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <init_usart1+0xb4>)
 8000cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <init_usart1+0xb4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <init_usart1+0xb4>)
 8000cd6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000cda:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <init_usart1+0xb4>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <init_usart1+0xb4>)
 8000ce2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ce6:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <init_usart1+0xb4>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <init_usart1+0xb4>)
 8000cee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf2:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <init_usart1+0xb4>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <init_usart1+0xb4>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <init_usart1+0xb0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <init_usart1+0xb0>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <init_usart1+0xb8>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <init_usart1+0xb8>)
 8000d12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d16:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <init_usart1+0xb8>)
 8000d1a:	2245      	movs	r2, #69	; 0x45
 8000d1c:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <init_usart1+0xb8>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <init_usart1+0xb8>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 8000d2a:	f000 f8d9 	bl	8000ee0 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <init_usart1+0xb8>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <init_usart1+0xb8>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3a:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <init_usart1+0xb8>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <init_usart1+0xb8>)
 8000d42:	f043 0320 	orr.w	r3, r3, #32
 8000d46:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000d48:	2007      	movs	r0, #7
 8000d4a:	f7ff ff15 	bl	8000b78 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2025      	movs	r0, #37	; 0x25
 8000d52:	f7ff ff51 	bl	8000bf8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8000d56:	2025      	movs	r0, #37	; 0x25
 8000d58:	f7ff ff32 	bl	8000bc0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d5c:	b662      	cpsie	i
	__enable_irq();

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40013800 	.word	0x40013800

08000d70 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <set_usart2_buffer_Tx+0x3c>)
 8000d80:	f000 f9a4 	bl	80010cc <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <set_usart2_buffer_Tx+0x3c>)
 8000d88:	f000 f9c8 	bl	800111c <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff f9ef 	bl	8000170 <strlen>
 8000d92:	4602      	mov	r2, r0
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <set_usart2_buffer_Tx+0x3c>)
 8000d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_usart2_buffer_Tx+0x3c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000051c 	.word	0x2000051c

08000db0 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ffd9 	bl	8000d70 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 8000dbe:	e014      	b.n	8000dea <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000dc0:	bf00      	nop
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <write_usart2+0x70>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f9      	beq.n	8000dc2 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <write_usart2+0x74>)
 8000dd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dd4:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <write_usart2+0x74>)
 8000dd6:	5cd2      	ldrb	r2, [r2, r3]
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <write_usart2+0x70>)
 8000dda:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <write_usart2+0x74>)
 8000dde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <write_usart2+0x74>)
 8000de6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <write_usart2+0x74>)
 8000dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <write_usart2+0x74>)
 8000df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d3e2      	bcc.n	8000dc0 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000dfa:	bf00      	nop
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <write_usart2+0x70>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	2b40      	cmp	r3, #64	; 0x40
 8000e06:	d1f9      	bne.n	8000dfc <write_usart2+0x4c>
	usart2.write_index = 0;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <write_usart2+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <write_usart2+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40004400 	.word	0x40004400
 8000e24:	2000051c 	.word	0x2000051c

08000e28 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f835 	bl	8000ea0 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8000e36:	e014      	b.n	8000e62 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000e38:	bf00      	nop
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <write_usart1+0x70>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f9      	beq.n	8000e3a <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <write_usart1+0x74>)
 8000e48:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <write_usart1+0x74>)
 8000e4e:	5cd2      	ldrb	r2, [r2, r3]
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <write_usart1+0x70>)
 8000e52:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <write_usart1+0x74>)
 8000e56:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <write_usart1+0x74>)
 8000e5e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <write_usart1+0x74>)
 8000e64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <write_usart1+0x74>)
 8000e6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3e2      	bcc.n	8000e38 <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000e72:	bf00      	nop
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <write_usart1+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7c:	2b40      	cmp	r3, #64	; 0x40
 8000e7e:	d1f9      	bne.n	8000e74 <write_usart1+0x4c>
	usart1.write_index = 0;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <write_usart1+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <write_usart1+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	20000724 	.word	0x20000724

08000ea0 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	2100      	movs	r1, #0
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <set_usart1_buffer_Tx+0x3c>)
 8000eb0:	f000 f90c 	bl	80010cc <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <set_usart1_buffer_Tx+0x3c>)
 8000eb8:	f000 f930 	bl	800111c <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff f957 	bl	8000170 <strlen>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <set_usart1_buffer_Tx+0x3c>)
 8000ec6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <set_usart1_buffer_Tx+0x3c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000724 	.word	0x20000724

08000ee0 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <set_usart1_buffer_Rx+0x24>)
 8000eec:	f000 f8ee 	bl	80010cc <memset>
	usart1.Rx_len = 0;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <set_usart1_buffer_Rx+0x28>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <set_usart1_buffer_Rx+0x28>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000924 	.word	0x20000924
 8000f08:	20000724 	.word	0x20000724

08000f0c <search_usart1_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <search_usart1_buffer_Rx+0x7c>)
 8000f18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f22:	d223      	bcs.n	8000f6c <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4819      	ldr	r0, [pc, #100]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f28:	f000 f900 	bl	800112c <strstr>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f34:	f7ff ff3c 	bl	8000db0 <write_usart2>
			set_usart1_buffer_Rx();
 8000f38:	f7ff ffd2 	bl	8000ee0 <set_usart1_buffer_Rx>
			return (uint32_t)PASS;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e01e      	b.n	8000f7e <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f44:	f000 f8f2 	bl	800112c <strstr>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f50:	f7ff ff2e 	bl	8000db0 <write_usart2>
			set_usart1_buffer_Rx();
 8000f54:	f7ff ffc4 	bl	8000ee0 <set_usart1_buffer_Rx>
			return (uint32_t)FAIL;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e010      	b.n	8000f7e <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f5e:	f7ff ff27 	bl	8000db0 <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <search_usart1_buffer_Rx+0x84>)
 8000f64:	f7ff ff24 	bl	8000db0 <write_usart2>
			return (uint32_t)STANDBY;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e008      	b.n	8000f7e <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <search_usart1_buffer_Rx+0x88>)
 8000f6e:	f7ff ff1f 	bl	8000db0 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <search_usart1_buffer_Rx+0x80>)
 8000f74:	f7ff ff1c 	bl	8000db0 <write_usart2>
		set_usart1_buffer_Rx();
 8000f78:	f7ff ffb2 	bl	8000ee0 <set_usart1_buffer_Rx>
		return (uint32_t)STANDBY;
 8000f7c:	2301      	movs	r3, #1
	}

}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000724 	.word	0x20000724
 8000f8c:	20000924 	.word	0x20000924
 8000f90:	08001c80 	.word	0x08001c80
 8000f94:	08001c84 	.word	0x08001c84

08000f98 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <USART1_IRQHandler+0x80>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d132      	bne.n	800100e <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <USART1_IRQHandler+0x80>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <USART1_IRQHandler+0x84>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fbe:	d20a      	bcs.n	8000fd6 <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <USART1_IRQHandler+0x84>)
 8000fc8:	7811      	ldrb	r1, [r2, #0]
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	460a      	mov	r2, r1
 8000fd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8000fd4:	e00d      	b.n	8000ff2 <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fe0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <USART1_IRQHandler+0x84>)
 8000fe6:	7811      	ldrb	r1, [r2, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <USART1_IRQHandler+0x88>)
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <USART1_IRQHandler+0x88>)
 8000ff4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <USART1_IRQHandler+0x88>)
 8000ffc:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <USART1_IRQHandler+0x88>)
 8001002:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001006:	3301      	adds	r3, #1
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <USART1_IRQHandler+0x88>)
 800100a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40013800 	.word	0x40013800
 800101c:	20000b34 	.word	0x20000b34
 8001020:	20000724 	.word	0x20000724

08001024 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001026:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800104e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001052:	f000 f817 	bl	8001084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001056:	f7ff fb9d 	bl	8000794 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   r0, =_estack
 800105c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001068:	08001cd4 	.word	0x08001cd4
  ldr r2, =_sbss
 800106c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001070:	20000b48 	.word	0x20000b48

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <__errno>:
 8001078:	4b01      	ldr	r3, [pc, #4]	; (8001080 <__errno+0x8>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000006c 	.word	0x2000006c

08001084 <__libc_init_array>:
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	2500      	movs	r5, #0
 8001088:	4e0c      	ldr	r6, [pc, #48]	; (80010bc <__libc_init_array+0x38>)
 800108a:	4c0d      	ldr	r4, [pc, #52]	; (80010c0 <__libc_init_array+0x3c>)
 800108c:	1ba4      	subs	r4, r4, r6
 800108e:	10a4      	asrs	r4, r4, #2
 8001090:	42a5      	cmp	r5, r4
 8001092:	d109      	bne.n	80010a8 <__libc_init_array+0x24>
 8001094:	f000 fc56 	bl	8001944 <_init>
 8001098:	2500      	movs	r5, #0
 800109a:	4e0a      	ldr	r6, [pc, #40]	; (80010c4 <__libc_init_array+0x40>)
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <__libc_init_array+0x44>)
 800109e:	1ba4      	subs	r4, r4, r6
 80010a0:	10a4      	asrs	r4, r4, #2
 80010a2:	42a5      	cmp	r5, r4
 80010a4:	d105      	bne.n	80010b2 <__libc_init_array+0x2e>
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
 80010a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010ac:	4798      	blx	r3
 80010ae:	3501      	adds	r5, #1
 80010b0:	e7ee      	b.n	8001090 <__libc_init_array+0xc>
 80010b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010b6:	4798      	blx	r3
 80010b8:	3501      	adds	r5, #1
 80010ba:	e7f2      	b.n	80010a2 <__libc_init_array+0x1e>
 80010bc:	08001ccc 	.word	0x08001ccc
 80010c0:	08001ccc 	.word	0x08001ccc
 80010c4:	08001ccc 	.word	0x08001ccc
 80010c8:	08001cd0 	.word	0x08001cd0

080010cc <memset>:
 80010cc:	4603      	mov	r3, r0
 80010ce:	4402      	add	r2, r0
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d100      	bne.n	80010d6 <memset+0xa>
 80010d4:	4770      	bx	lr
 80010d6:	f803 1b01 	strb.w	r1, [r3], #1
 80010da:	e7f9      	b.n	80010d0 <memset+0x4>

080010dc <siprintf>:
 80010dc:	b40e      	push	{r1, r2, r3}
 80010de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80010e2:	b500      	push	{lr}
 80010e4:	b09c      	sub	sp, #112	; 0x70
 80010e6:	ab1d      	add	r3, sp, #116	; 0x74
 80010e8:	9002      	str	r0, [sp, #8]
 80010ea:	9006      	str	r0, [sp, #24]
 80010ec:	9107      	str	r1, [sp, #28]
 80010ee:	9104      	str	r1, [sp, #16]
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <siprintf+0x38>)
 80010f2:	4909      	ldr	r1, [pc, #36]	; (8001118 <siprintf+0x3c>)
 80010f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80010f8:	9105      	str	r1, [sp, #20]
 80010fa:	6800      	ldr	r0, [r0, #0]
 80010fc:	a902      	add	r1, sp, #8
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	f000 f888 	bl	8001214 <_svfiprintf_r>
 8001104:	2200      	movs	r2, #0
 8001106:	9b02      	ldr	r3, [sp, #8]
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	b01c      	add	sp, #112	; 0x70
 800110c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001110:	b003      	add	sp, #12
 8001112:	4770      	bx	lr
 8001114:	2000006c 	.word	0x2000006c
 8001118:	ffff0208 	.word	0xffff0208

0800111c <strcpy>:
 800111c:	4603      	mov	r3, r0
 800111e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001122:	f803 2b01 	strb.w	r2, [r3], #1
 8001126:	2a00      	cmp	r2, #0
 8001128:	d1f9      	bne.n	800111e <strcpy+0x2>
 800112a:	4770      	bx	lr

0800112c <strstr>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	7803      	ldrb	r3, [r0, #0]
 8001130:	b17b      	cbz	r3, 8001152 <strstr+0x26>
 8001132:	4604      	mov	r4, r0
 8001134:	7823      	ldrb	r3, [r4, #0]
 8001136:	4620      	mov	r0, r4
 8001138:	1c66      	adds	r6, r4, #1
 800113a:	b17b      	cbz	r3, 800115c <strstr+0x30>
 800113c:	1e4a      	subs	r2, r1, #1
 800113e:	1e63      	subs	r3, r4, #1
 8001140:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001144:	b14d      	cbz	r5, 800115a <strstr+0x2e>
 8001146:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800114a:	4634      	mov	r4, r6
 800114c:	42af      	cmp	r7, r5
 800114e:	d0f7      	beq.n	8001140 <strstr+0x14>
 8001150:	e7f0      	b.n	8001134 <strstr+0x8>
 8001152:	780b      	ldrb	r3, [r1, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf18      	it	ne
 8001158:	2000      	movne	r0, #0
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	4618      	mov	r0, r3
 800115e:	e7fc      	b.n	800115a <strstr+0x2e>

08001160 <__ssputs_r>:
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	688e      	ldr	r6, [r1, #8]
 8001166:	4682      	mov	sl, r0
 8001168:	429e      	cmp	r6, r3
 800116a:	460c      	mov	r4, r1
 800116c:	4690      	mov	r8, r2
 800116e:	4699      	mov	r9, r3
 8001170:	d837      	bhi.n	80011e2 <__ssputs_r+0x82>
 8001172:	898a      	ldrh	r2, [r1, #12]
 8001174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001178:	d031      	beq.n	80011de <__ssputs_r+0x7e>
 800117a:	2302      	movs	r3, #2
 800117c:	6825      	ldr	r5, [r4, #0]
 800117e:	6909      	ldr	r1, [r1, #16]
 8001180:	1a6f      	subs	r7, r5, r1
 8001182:	6965      	ldr	r5, [r4, #20]
 8001184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001188:	fb95 f5f3 	sdiv	r5, r5, r3
 800118c:	f109 0301 	add.w	r3, r9, #1
 8001190:	443b      	add	r3, r7
 8001192:	429d      	cmp	r5, r3
 8001194:	bf38      	it	cc
 8001196:	461d      	movcc	r5, r3
 8001198:	0553      	lsls	r3, r2, #21
 800119a:	d530      	bpl.n	80011fe <__ssputs_r+0x9e>
 800119c:	4629      	mov	r1, r5
 800119e:	f000 fb37 	bl	8001810 <_malloc_r>
 80011a2:	4606      	mov	r6, r0
 80011a4:	b950      	cbnz	r0, 80011bc <__ssputs_r+0x5c>
 80011a6:	230c      	movs	r3, #12
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f8ca 3000 	str.w	r3, [sl]
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b6:	81a3      	strh	r3, [r4, #12]
 80011b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011bc:	463a      	mov	r2, r7
 80011be:	6921      	ldr	r1, [r4, #16]
 80011c0:	f000 fab6 	bl	8001730 <memcpy>
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80011ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ce:	81a3      	strh	r3, [r4, #12]
 80011d0:	6126      	str	r6, [r4, #16]
 80011d2:	443e      	add	r6, r7
 80011d4:	6026      	str	r6, [r4, #0]
 80011d6:	464e      	mov	r6, r9
 80011d8:	6165      	str	r5, [r4, #20]
 80011da:	1bed      	subs	r5, r5, r7
 80011dc:	60a5      	str	r5, [r4, #8]
 80011de:	454e      	cmp	r6, r9
 80011e0:	d900      	bls.n	80011e4 <__ssputs_r+0x84>
 80011e2:	464e      	mov	r6, r9
 80011e4:	4632      	mov	r2, r6
 80011e6:	4641      	mov	r1, r8
 80011e8:	6820      	ldr	r0, [r4, #0]
 80011ea:	f000 faac 	bl	8001746 <memmove>
 80011ee:	68a3      	ldr	r3, [r4, #8]
 80011f0:	2000      	movs	r0, #0
 80011f2:	1b9b      	subs	r3, r3, r6
 80011f4:	60a3      	str	r3, [r4, #8]
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	441e      	add	r6, r3
 80011fa:	6026      	str	r6, [r4, #0]
 80011fc:	e7dc      	b.n	80011b8 <__ssputs_r+0x58>
 80011fe:	462a      	mov	r2, r5
 8001200:	f000 fb60 	bl	80018c4 <_realloc_r>
 8001204:	4606      	mov	r6, r0
 8001206:	2800      	cmp	r0, #0
 8001208:	d1e2      	bne.n	80011d0 <__ssputs_r+0x70>
 800120a:	6921      	ldr	r1, [r4, #16]
 800120c:	4650      	mov	r0, sl
 800120e:	f000 fab3 	bl	8001778 <_free_r>
 8001212:	e7c8      	b.n	80011a6 <__ssputs_r+0x46>

08001214 <_svfiprintf_r>:
 8001214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001218:	461d      	mov	r5, r3
 800121a:	898b      	ldrh	r3, [r1, #12]
 800121c:	b09d      	sub	sp, #116	; 0x74
 800121e:	061f      	lsls	r7, r3, #24
 8001220:	4680      	mov	r8, r0
 8001222:	460c      	mov	r4, r1
 8001224:	4616      	mov	r6, r2
 8001226:	d50f      	bpl.n	8001248 <_svfiprintf_r+0x34>
 8001228:	690b      	ldr	r3, [r1, #16]
 800122a:	b96b      	cbnz	r3, 8001248 <_svfiprintf_r+0x34>
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	f000 faef 	bl	8001810 <_malloc_r>
 8001232:	6020      	str	r0, [r4, #0]
 8001234:	6120      	str	r0, [r4, #16]
 8001236:	b928      	cbnz	r0, 8001244 <_svfiprintf_r+0x30>
 8001238:	230c      	movs	r3, #12
 800123a:	f8c8 3000 	str.w	r3, [r8]
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	e0c8      	b.n	80013d6 <_svfiprintf_r+0x1c2>
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	6163      	str	r3, [r4, #20]
 8001248:	2300      	movs	r3, #0
 800124a:	9309      	str	r3, [sp, #36]	; 0x24
 800124c:	2320      	movs	r3, #32
 800124e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001252:	2330      	movs	r3, #48	; 0x30
 8001254:	f04f 0b01 	mov.w	fp, #1
 8001258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800125c:	9503      	str	r5, [sp, #12]
 800125e:	4637      	mov	r7, r6
 8001260:	463d      	mov	r5, r7
 8001262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001266:	b10b      	cbz	r3, 800126c <_svfiprintf_r+0x58>
 8001268:	2b25      	cmp	r3, #37	; 0x25
 800126a:	d13e      	bne.n	80012ea <_svfiprintf_r+0xd6>
 800126c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001270:	d00b      	beq.n	800128a <_svfiprintf_r+0x76>
 8001272:	4653      	mov	r3, sl
 8001274:	4632      	mov	r2, r6
 8001276:	4621      	mov	r1, r4
 8001278:	4640      	mov	r0, r8
 800127a:	f7ff ff71 	bl	8001160 <__ssputs_r>
 800127e:	3001      	adds	r0, #1
 8001280:	f000 80a4 	beq.w	80013cc <_svfiprintf_r+0x1b8>
 8001284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001286:	4453      	add	r3, sl
 8001288:	9309      	str	r3, [sp, #36]	; 0x24
 800128a:	783b      	ldrb	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 809d 	beq.w	80013cc <_svfiprintf_r+0x1b8>
 8001292:	2300      	movs	r3, #0
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800129c:	9304      	str	r3, [sp, #16]
 800129e:	9307      	str	r3, [sp, #28]
 80012a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012a4:	931a      	str	r3, [sp, #104]	; 0x68
 80012a6:	462f      	mov	r7, r5
 80012a8:	2205      	movs	r2, #5
 80012aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80012ae:	4850      	ldr	r0, [pc, #320]	; (80013f0 <_svfiprintf_r+0x1dc>)
 80012b0:	f000 fa30 	bl	8001714 <memchr>
 80012b4:	9b04      	ldr	r3, [sp, #16]
 80012b6:	b9d0      	cbnz	r0, 80012ee <_svfiprintf_r+0xda>
 80012b8:	06d9      	lsls	r1, r3, #27
 80012ba:	bf44      	itt	mi
 80012bc:	2220      	movmi	r2, #32
 80012be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012c2:	071a      	lsls	r2, r3, #28
 80012c4:	bf44      	itt	mi
 80012c6:	222b      	movmi	r2, #43	; 0x2b
 80012c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012cc:	782a      	ldrb	r2, [r5, #0]
 80012ce:	2a2a      	cmp	r2, #42	; 0x2a
 80012d0:	d015      	beq.n	80012fe <_svfiprintf_r+0xea>
 80012d2:	462f      	mov	r7, r5
 80012d4:	2000      	movs	r0, #0
 80012d6:	250a      	movs	r5, #10
 80012d8:	9a07      	ldr	r2, [sp, #28]
 80012da:	4639      	mov	r1, r7
 80012dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012e0:	3b30      	subs	r3, #48	; 0x30
 80012e2:	2b09      	cmp	r3, #9
 80012e4:	d94d      	bls.n	8001382 <_svfiprintf_r+0x16e>
 80012e6:	b1b8      	cbz	r0, 8001318 <_svfiprintf_r+0x104>
 80012e8:	e00f      	b.n	800130a <_svfiprintf_r+0xf6>
 80012ea:	462f      	mov	r7, r5
 80012ec:	e7b8      	b.n	8001260 <_svfiprintf_r+0x4c>
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <_svfiprintf_r+0x1dc>)
 80012f0:	463d      	mov	r5, r7
 80012f2:	1a80      	subs	r0, r0, r2
 80012f4:	fa0b f000 	lsl.w	r0, fp, r0
 80012f8:	4318      	orrs	r0, r3
 80012fa:	9004      	str	r0, [sp, #16]
 80012fc:	e7d3      	b.n	80012a6 <_svfiprintf_r+0x92>
 80012fe:	9a03      	ldr	r2, [sp, #12]
 8001300:	1d11      	adds	r1, r2, #4
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	9103      	str	r1, [sp, #12]
 8001306:	2a00      	cmp	r2, #0
 8001308:	db01      	blt.n	800130e <_svfiprintf_r+0xfa>
 800130a:	9207      	str	r2, [sp, #28]
 800130c:	e004      	b.n	8001318 <_svfiprintf_r+0x104>
 800130e:	4252      	negs	r2, r2
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	9207      	str	r2, [sp, #28]
 8001316:	9304      	str	r3, [sp, #16]
 8001318:	783b      	ldrb	r3, [r7, #0]
 800131a:	2b2e      	cmp	r3, #46	; 0x2e
 800131c:	d10c      	bne.n	8001338 <_svfiprintf_r+0x124>
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	2b2a      	cmp	r3, #42	; 0x2a
 8001322:	d133      	bne.n	800138c <_svfiprintf_r+0x178>
 8001324:	9b03      	ldr	r3, [sp, #12]
 8001326:	3702      	adds	r7, #2
 8001328:	1d1a      	adds	r2, r3, #4
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	9203      	str	r2, [sp, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bfb8      	it	lt
 8001332:	f04f 33ff 	movlt.w	r3, #4294967295
 8001336:	9305      	str	r3, [sp, #20]
 8001338:	4d2e      	ldr	r5, [pc, #184]	; (80013f4 <_svfiprintf_r+0x1e0>)
 800133a:	2203      	movs	r2, #3
 800133c:	7839      	ldrb	r1, [r7, #0]
 800133e:	4628      	mov	r0, r5
 8001340:	f000 f9e8 	bl	8001714 <memchr>
 8001344:	b138      	cbz	r0, 8001356 <_svfiprintf_r+0x142>
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	fa03 f000 	lsl.w	r0, r3, r0
 800134e:	9b04      	ldr	r3, [sp, #16]
 8001350:	3701      	adds	r7, #1
 8001352:	4303      	orrs	r3, r0
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	7839      	ldrb	r1, [r7, #0]
 8001358:	2206      	movs	r2, #6
 800135a:	4827      	ldr	r0, [pc, #156]	; (80013f8 <_svfiprintf_r+0x1e4>)
 800135c:	1c7e      	adds	r6, r7, #1
 800135e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001362:	f000 f9d7 	bl	8001714 <memchr>
 8001366:	2800      	cmp	r0, #0
 8001368:	d038      	beq.n	80013dc <_svfiprintf_r+0x1c8>
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <_svfiprintf_r+0x1e8>)
 800136c:	bb13      	cbnz	r3, 80013b4 <_svfiprintf_r+0x1a0>
 800136e:	9b03      	ldr	r3, [sp, #12]
 8001370:	3307      	adds	r3, #7
 8001372:	f023 0307 	bic.w	r3, r3, #7
 8001376:	3308      	adds	r3, #8
 8001378:	9303      	str	r3, [sp, #12]
 800137a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800137c:	444b      	add	r3, r9
 800137e:	9309      	str	r3, [sp, #36]	; 0x24
 8001380:	e76d      	b.n	800125e <_svfiprintf_r+0x4a>
 8001382:	fb05 3202 	mla	r2, r5, r2, r3
 8001386:	2001      	movs	r0, #1
 8001388:	460f      	mov	r7, r1
 800138a:	e7a6      	b.n	80012da <_svfiprintf_r+0xc6>
 800138c:	2300      	movs	r3, #0
 800138e:	250a      	movs	r5, #10
 8001390:	4619      	mov	r1, r3
 8001392:	3701      	adds	r7, #1
 8001394:	9305      	str	r3, [sp, #20]
 8001396:	4638      	mov	r0, r7
 8001398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800139c:	3a30      	subs	r2, #48	; 0x30
 800139e:	2a09      	cmp	r2, #9
 80013a0:	d903      	bls.n	80013aa <_svfiprintf_r+0x196>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0c8      	beq.n	8001338 <_svfiprintf_r+0x124>
 80013a6:	9105      	str	r1, [sp, #20]
 80013a8:	e7c6      	b.n	8001338 <_svfiprintf_r+0x124>
 80013aa:	fb05 2101 	mla	r1, r5, r1, r2
 80013ae:	2301      	movs	r3, #1
 80013b0:	4607      	mov	r7, r0
 80013b2:	e7f0      	b.n	8001396 <_svfiprintf_r+0x182>
 80013b4:	ab03      	add	r3, sp, #12
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4622      	mov	r2, r4
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_svfiprintf_r+0x1ec>)
 80013bc:	a904      	add	r1, sp, #16
 80013be:	4640      	mov	r0, r8
 80013c0:	f3af 8000 	nop.w
 80013c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80013c8:	4681      	mov	r9, r0
 80013ca:	d1d6      	bne.n	800137a <_svfiprintf_r+0x166>
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	065b      	lsls	r3, r3, #25
 80013d0:	f53f af35 	bmi.w	800123e <_svfiprintf_r+0x2a>
 80013d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013d6:	b01d      	add	sp, #116	; 0x74
 80013d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013dc:	ab03      	add	r3, sp, #12
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4622      	mov	r2, r4
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_svfiprintf_r+0x1ec>)
 80013e4:	a904      	add	r1, sp, #16
 80013e6:	4640      	mov	r0, r8
 80013e8:	f000 f882 	bl	80014f0 <_printf_i>
 80013ec:	e7ea      	b.n	80013c4 <_svfiprintf_r+0x1b0>
 80013ee:	bf00      	nop
 80013f0:	08001c98 	.word	0x08001c98
 80013f4:	08001c9e 	.word	0x08001c9e
 80013f8:	08001ca2 	.word	0x08001ca2
 80013fc:	00000000 	.word	0x00000000
 8001400:	08001161 	.word	0x08001161

08001404 <_printf_common>:
 8001404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001408:	4691      	mov	r9, r2
 800140a:	461f      	mov	r7, r3
 800140c:	688a      	ldr	r2, [r1, #8]
 800140e:	690b      	ldr	r3, [r1, #16]
 8001410:	4606      	mov	r6, r0
 8001412:	4293      	cmp	r3, r2
 8001414:	bfb8      	it	lt
 8001416:	4613      	movlt	r3, r2
 8001418:	f8c9 3000 	str.w	r3, [r9]
 800141c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001420:	460c      	mov	r4, r1
 8001422:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001426:	b112      	cbz	r2, 800142e <_printf_common+0x2a>
 8001428:	3301      	adds	r3, #1
 800142a:	f8c9 3000 	str.w	r3, [r9]
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	0699      	lsls	r1, r3, #26
 8001432:	bf42      	ittt	mi
 8001434:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001438:	3302      	addmi	r3, #2
 800143a:	f8c9 3000 	strmi.w	r3, [r9]
 800143e:	6825      	ldr	r5, [r4, #0]
 8001440:	f015 0506 	ands.w	r5, r5, #6
 8001444:	d107      	bne.n	8001456 <_printf_common+0x52>
 8001446:	f104 0a19 	add.w	sl, r4, #25
 800144a:	68e3      	ldr	r3, [r4, #12]
 800144c:	f8d9 2000 	ldr.w	r2, [r9]
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	42ab      	cmp	r3, r5
 8001454:	dc29      	bgt.n	80014aa <_printf_common+0xa6>
 8001456:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	3300      	adds	r3, #0
 800145e:	bf18      	it	ne
 8001460:	2301      	movne	r3, #1
 8001462:	0692      	lsls	r2, r2, #26
 8001464:	d42e      	bmi.n	80014c4 <_printf_common+0xc0>
 8001466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800146a:	4639      	mov	r1, r7
 800146c:	4630      	mov	r0, r6
 800146e:	47c0      	blx	r8
 8001470:	3001      	adds	r0, #1
 8001472:	d021      	beq.n	80014b8 <_printf_common+0xb4>
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	68e5      	ldr	r5, [r4, #12]
 8001478:	f003 0306 	and.w	r3, r3, #6
 800147c:	2b04      	cmp	r3, #4
 800147e:	bf18      	it	ne
 8001480:	2500      	movne	r5, #0
 8001482:	f8d9 2000 	ldr.w	r2, [r9]
 8001486:	f04f 0900 	mov.w	r9, #0
 800148a:	bf08      	it	eq
 800148c:	1aad      	subeq	r5, r5, r2
 800148e:	68a3      	ldr	r3, [r4, #8]
 8001490:	6922      	ldr	r2, [r4, #16]
 8001492:	bf08      	it	eq
 8001494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001498:	4293      	cmp	r3, r2
 800149a:	bfc4      	itt	gt
 800149c:	1a9b      	subgt	r3, r3, r2
 800149e:	18ed      	addgt	r5, r5, r3
 80014a0:	341a      	adds	r4, #26
 80014a2:	454d      	cmp	r5, r9
 80014a4:	d11a      	bne.n	80014dc <_printf_common+0xd8>
 80014a6:	2000      	movs	r0, #0
 80014a8:	e008      	b.n	80014bc <_printf_common+0xb8>
 80014aa:	2301      	movs	r3, #1
 80014ac:	4652      	mov	r2, sl
 80014ae:	4639      	mov	r1, r7
 80014b0:	4630      	mov	r0, r6
 80014b2:	47c0      	blx	r8
 80014b4:	3001      	adds	r0, #1
 80014b6:	d103      	bne.n	80014c0 <_printf_common+0xbc>
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014c0:	3501      	adds	r5, #1
 80014c2:	e7c2      	b.n	800144a <_printf_common+0x46>
 80014c4:	2030      	movs	r0, #48	; 0x30
 80014c6:	18e1      	adds	r1, r4, r3
 80014c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80014d2:	4422      	add	r2, r4
 80014d4:	3302      	adds	r3, #2
 80014d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80014da:	e7c4      	b.n	8001466 <_printf_common+0x62>
 80014dc:	2301      	movs	r3, #1
 80014de:	4622      	mov	r2, r4
 80014e0:	4639      	mov	r1, r7
 80014e2:	4630      	mov	r0, r6
 80014e4:	47c0      	blx	r8
 80014e6:	3001      	adds	r0, #1
 80014e8:	d0e6      	beq.n	80014b8 <_printf_common+0xb4>
 80014ea:	f109 0901 	add.w	r9, r9, #1
 80014ee:	e7d8      	b.n	80014a2 <_printf_common+0x9e>

080014f0 <_printf_i>:
 80014f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80014f8:	460c      	mov	r4, r1
 80014fa:	7e09      	ldrb	r1, [r1, #24]
 80014fc:	b085      	sub	sp, #20
 80014fe:	296e      	cmp	r1, #110	; 0x6e
 8001500:	4617      	mov	r7, r2
 8001502:	4606      	mov	r6, r0
 8001504:	4698      	mov	r8, r3
 8001506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001508:	f000 80b3 	beq.w	8001672 <_printf_i+0x182>
 800150c:	d822      	bhi.n	8001554 <_printf_i+0x64>
 800150e:	2963      	cmp	r1, #99	; 0x63
 8001510:	d036      	beq.n	8001580 <_printf_i+0x90>
 8001512:	d80a      	bhi.n	800152a <_printf_i+0x3a>
 8001514:	2900      	cmp	r1, #0
 8001516:	f000 80b9 	beq.w	800168c <_printf_i+0x19c>
 800151a:	2958      	cmp	r1, #88	; 0x58
 800151c:	f000 8083 	beq.w	8001626 <_printf_i+0x136>
 8001520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001524:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001528:	e032      	b.n	8001590 <_printf_i+0xa0>
 800152a:	2964      	cmp	r1, #100	; 0x64
 800152c:	d001      	beq.n	8001532 <_printf_i+0x42>
 800152e:	2969      	cmp	r1, #105	; 0x69
 8001530:	d1f6      	bne.n	8001520 <_printf_i+0x30>
 8001532:	6820      	ldr	r0, [r4, #0]
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	0605      	lsls	r5, r0, #24
 8001538:	f103 0104 	add.w	r1, r3, #4
 800153c:	d52a      	bpl.n	8001594 <_printf_i+0xa4>
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6011      	str	r1, [r2, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da03      	bge.n	800154e <_printf_i+0x5e>
 8001546:	222d      	movs	r2, #45	; 0x2d
 8001548:	425b      	negs	r3, r3
 800154a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800154e:	486f      	ldr	r0, [pc, #444]	; (800170c <_printf_i+0x21c>)
 8001550:	220a      	movs	r2, #10
 8001552:	e039      	b.n	80015c8 <_printf_i+0xd8>
 8001554:	2973      	cmp	r1, #115	; 0x73
 8001556:	f000 809d 	beq.w	8001694 <_printf_i+0x1a4>
 800155a:	d808      	bhi.n	800156e <_printf_i+0x7e>
 800155c:	296f      	cmp	r1, #111	; 0x6f
 800155e:	d020      	beq.n	80015a2 <_printf_i+0xb2>
 8001560:	2970      	cmp	r1, #112	; 0x70
 8001562:	d1dd      	bne.n	8001520 <_printf_i+0x30>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f043 0320 	orr.w	r3, r3, #32
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	e003      	b.n	8001576 <_printf_i+0x86>
 800156e:	2975      	cmp	r1, #117	; 0x75
 8001570:	d017      	beq.n	80015a2 <_printf_i+0xb2>
 8001572:	2978      	cmp	r1, #120	; 0x78
 8001574:	d1d4      	bne.n	8001520 <_printf_i+0x30>
 8001576:	2378      	movs	r3, #120	; 0x78
 8001578:	4865      	ldr	r0, [pc, #404]	; (8001710 <_printf_i+0x220>)
 800157a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800157e:	e055      	b.n	800162c <_printf_i+0x13c>
 8001580:	6813      	ldr	r3, [r2, #0]
 8001582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001586:	1d19      	adds	r1, r3, #4
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6011      	str	r1, [r2, #0]
 800158c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001590:	2301      	movs	r3, #1
 8001592:	e08c      	b.n	80016ae <_printf_i+0x1be>
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800159a:	6011      	str	r1, [r2, #0]
 800159c:	bf18      	it	ne
 800159e:	b21b      	sxthne	r3, r3
 80015a0:	e7cf      	b.n	8001542 <_printf_i+0x52>
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	6825      	ldr	r5, [r4, #0]
 80015a6:	1d18      	adds	r0, r3, #4
 80015a8:	6010      	str	r0, [r2, #0]
 80015aa:	0628      	lsls	r0, r5, #24
 80015ac:	d501      	bpl.n	80015b2 <_printf_i+0xc2>
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e002      	b.n	80015b8 <_printf_i+0xc8>
 80015b2:	0668      	lsls	r0, r5, #25
 80015b4:	d5fb      	bpl.n	80015ae <_printf_i+0xbe>
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	296f      	cmp	r1, #111	; 0x6f
 80015ba:	bf14      	ite	ne
 80015bc:	220a      	movne	r2, #10
 80015be:	2208      	moveq	r2, #8
 80015c0:	4852      	ldr	r0, [pc, #328]	; (800170c <_printf_i+0x21c>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015c8:	6865      	ldr	r5, [r4, #4]
 80015ca:	2d00      	cmp	r5, #0
 80015cc:	60a5      	str	r5, [r4, #8]
 80015ce:	f2c0 8095 	blt.w	80016fc <_printf_i+0x20c>
 80015d2:	6821      	ldr	r1, [r4, #0]
 80015d4:	f021 0104 	bic.w	r1, r1, #4
 80015d8:	6021      	str	r1, [r4, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d13d      	bne.n	800165a <_printf_i+0x16a>
 80015de:	2d00      	cmp	r5, #0
 80015e0:	f040 808e 	bne.w	8001700 <_printf_i+0x210>
 80015e4:	4665      	mov	r5, ip
 80015e6:	2a08      	cmp	r2, #8
 80015e8:	d10b      	bne.n	8001602 <_printf_i+0x112>
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	07db      	lsls	r3, r3, #31
 80015ee:	d508      	bpl.n	8001602 <_printf_i+0x112>
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	bfde      	ittt	le
 80015f8:	2330      	movle	r3, #48	; 0x30
 80015fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001602:	ebac 0305 	sub.w	r3, ip, r5
 8001606:	6123      	str	r3, [r4, #16]
 8001608:	f8cd 8000 	str.w	r8, [sp]
 800160c:	463b      	mov	r3, r7
 800160e:	aa03      	add	r2, sp, #12
 8001610:	4621      	mov	r1, r4
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fef6 	bl	8001404 <_printf_common>
 8001618:	3001      	adds	r0, #1
 800161a:	d14d      	bne.n	80016b8 <_printf_i+0x1c8>
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	b005      	add	sp, #20
 8001622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001626:	4839      	ldr	r0, [pc, #228]	; (800170c <_printf_i+0x21c>)
 8001628:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	6821      	ldr	r1, [r4, #0]
 8001630:	1d1d      	adds	r5, r3, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6015      	str	r5, [r2, #0]
 8001636:	060a      	lsls	r2, r1, #24
 8001638:	d50b      	bpl.n	8001652 <_printf_i+0x162>
 800163a:	07ca      	lsls	r2, r1, #31
 800163c:	bf44      	itt	mi
 800163e:	f041 0120 	orrmi.w	r1, r1, #32
 8001642:	6021      	strmi	r1, [r4, #0]
 8001644:	b91b      	cbnz	r3, 800164e <_printf_i+0x15e>
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	f022 0220 	bic.w	r2, r2, #32
 800164c:	6022      	str	r2, [r4, #0]
 800164e:	2210      	movs	r2, #16
 8001650:	e7b7      	b.n	80015c2 <_printf_i+0xd2>
 8001652:	064d      	lsls	r5, r1, #25
 8001654:	bf48      	it	mi
 8001656:	b29b      	uxthmi	r3, r3
 8001658:	e7ef      	b.n	800163a <_printf_i+0x14a>
 800165a:	4665      	mov	r5, ip
 800165c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001660:	fb02 3311 	mls	r3, r2, r1, r3
 8001664:	5cc3      	ldrb	r3, [r0, r3]
 8001666:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800166a:	460b      	mov	r3, r1
 800166c:	2900      	cmp	r1, #0
 800166e:	d1f5      	bne.n	800165c <_printf_i+0x16c>
 8001670:	e7b9      	b.n	80015e6 <_printf_i+0xf6>
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	6825      	ldr	r5, [r4, #0]
 8001676:	1d18      	adds	r0, r3, #4
 8001678:	6961      	ldr	r1, [r4, #20]
 800167a:	6010      	str	r0, [r2, #0]
 800167c:	0628      	lsls	r0, r5, #24
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	d501      	bpl.n	8001686 <_printf_i+0x196>
 8001682:	6019      	str	r1, [r3, #0]
 8001684:	e002      	b.n	800168c <_printf_i+0x19c>
 8001686:	066a      	lsls	r2, r5, #25
 8001688:	d5fb      	bpl.n	8001682 <_printf_i+0x192>
 800168a:	8019      	strh	r1, [r3, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	4665      	mov	r5, ip
 8001690:	6123      	str	r3, [r4, #16]
 8001692:	e7b9      	b.n	8001608 <_printf_i+0x118>
 8001694:	6813      	ldr	r3, [r2, #0]
 8001696:	1d19      	adds	r1, r3, #4
 8001698:	6011      	str	r1, [r2, #0]
 800169a:	681d      	ldr	r5, [r3, #0]
 800169c:	6862      	ldr	r2, [r4, #4]
 800169e:	2100      	movs	r1, #0
 80016a0:	4628      	mov	r0, r5
 80016a2:	f000 f837 	bl	8001714 <memchr>
 80016a6:	b108      	cbz	r0, 80016ac <_printf_i+0x1bc>
 80016a8:	1b40      	subs	r0, r0, r5
 80016aa:	6060      	str	r0, [r4, #4]
 80016ac:	6863      	ldr	r3, [r4, #4]
 80016ae:	6123      	str	r3, [r4, #16]
 80016b0:	2300      	movs	r3, #0
 80016b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016b6:	e7a7      	b.n	8001608 <_printf_i+0x118>
 80016b8:	6923      	ldr	r3, [r4, #16]
 80016ba:	462a      	mov	r2, r5
 80016bc:	4639      	mov	r1, r7
 80016be:	4630      	mov	r0, r6
 80016c0:	47c0      	blx	r8
 80016c2:	3001      	adds	r0, #1
 80016c4:	d0aa      	beq.n	800161c <_printf_i+0x12c>
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	079b      	lsls	r3, r3, #30
 80016ca:	d413      	bmi.n	80016f4 <_printf_i+0x204>
 80016cc:	68e0      	ldr	r0, [r4, #12]
 80016ce:	9b03      	ldr	r3, [sp, #12]
 80016d0:	4298      	cmp	r0, r3
 80016d2:	bfb8      	it	lt
 80016d4:	4618      	movlt	r0, r3
 80016d6:	e7a3      	b.n	8001620 <_printf_i+0x130>
 80016d8:	2301      	movs	r3, #1
 80016da:	464a      	mov	r2, r9
 80016dc:	4639      	mov	r1, r7
 80016de:	4630      	mov	r0, r6
 80016e0:	47c0      	blx	r8
 80016e2:	3001      	adds	r0, #1
 80016e4:	d09a      	beq.n	800161c <_printf_i+0x12c>
 80016e6:	3501      	adds	r5, #1
 80016e8:	68e3      	ldr	r3, [r4, #12]
 80016ea:	9a03      	ldr	r2, [sp, #12]
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	42ab      	cmp	r3, r5
 80016f0:	dcf2      	bgt.n	80016d8 <_printf_i+0x1e8>
 80016f2:	e7eb      	b.n	80016cc <_printf_i+0x1dc>
 80016f4:	2500      	movs	r5, #0
 80016f6:	f104 0919 	add.w	r9, r4, #25
 80016fa:	e7f5      	b.n	80016e8 <_printf_i+0x1f8>
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ac      	bne.n	800165a <_printf_i+0x16a>
 8001700:	7803      	ldrb	r3, [r0, #0]
 8001702:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800170a:	e76c      	b.n	80015e6 <_printf_i+0xf6>
 800170c:	08001ca9 	.word	0x08001ca9
 8001710:	08001cba 	.word	0x08001cba

08001714 <memchr>:
 8001714:	b510      	push	{r4, lr}
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	4402      	add	r2, r0
 800171a:	4290      	cmp	r0, r2
 800171c:	4603      	mov	r3, r0
 800171e:	d101      	bne.n	8001724 <memchr+0x10>
 8001720:	2300      	movs	r3, #0
 8001722:	e003      	b.n	800172c <memchr+0x18>
 8001724:	781c      	ldrb	r4, [r3, #0]
 8001726:	3001      	adds	r0, #1
 8001728:	428c      	cmp	r4, r1
 800172a:	d1f6      	bne.n	800171a <memchr+0x6>
 800172c:	4618      	mov	r0, r3
 800172e:	bd10      	pop	{r4, pc}

08001730 <memcpy>:
 8001730:	b510      	push	{r4, lr}
 8001732:	1e43      	subs	r3, r0, #1
 8001734:	440a      	add	r2, r1
 8001736:	4291      	cmp	r1, r2
 8001738:	d100      	bne.n	800173c <memcpy+0xc>
 800173a:	bd10      	pop	{r4, pc}
 800173c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001744:	e7f7      	b.n	8001736 <memcpy+0x6>

08001746 <memmove>:
 8001746:	4288      	cmp	r0, r1
 8001748:	b510      	push	{r4, lr}
 800174a:	eb01 0302 	add.w	r3, r1, r2
 800174e:	d807      	bhi.n	8001760 <memmove+0x1a>
 8001750:	1e42      	subs	r2, r0, #1
 8001752:	4299      	cmp	r1, r3
 8001754:	d00a      	beq.n	800176c <memmove+0x26>
 8001756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800175a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800175e:	e7f8      	b.n	8001752 <memmove+0xc>
 8001760:	4283      	cmp	r3, r0
 8001762:	d9f5      	bls.n	8001750 <memmove+0xa>
 8001764:	1881      	adds	r1, r0, r2
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	42d3      	cmn	r3, r2
 800176a:	d100      	bne.n	800176e <memmove+0x28>
 800176c:	bd10      	pop	{r4, pc}
 800176e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001772:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001776:	e7f7      	b.n	8001768 <memmove+0x22>

08001778 <_free_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4605      	mov	r5, r0
 800177c:	2900      	cmp	r1, #0
 800177e:	d043      	beq.n	8001808 <_free_r+0x90>
 8001780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001784:	1f0c      	subs	r4, r1, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfb8      	it	lt
 800178a:	18e4      	addlt	r4, r4, r3
 800178c:	f000 f8d0 	bl	8001930 <__malloc_lock>
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <_free_r+0x94>)
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	4610      	mov	r0, r2
 8001796:	b933      	cbnz	r3, 80017a6 <_free_r+0x2e>
 8001798:	6063      	str	r3, [r4, #4]
 800179a:	6014      	str	r4, [r2, #0]
 800179c:	4628      	mov	r0, r5
 800179e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017a2:	f000 b8c6 	b.w	8001932 <__malloc_unlock>
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	d90b      	bls.n	80017c2 <_free_r+0x4a>
 80017aa:	6821      	ldr	r1, [r4, #0]
 80017ac:	1862      	adds	r2, r4, r1
 80017ae:	4293      	cmp	r3, r2
 80017b0:	bf01      	itttt	eq
 80017b2:	681a      	ldreq	r2, [r3, #0]
 80017b4:	685b      	ldreq	r3, [r3, #4]
 80017b6:	1852      	addeq	r2, r2, r1
 80017b8:	6022      	streq	r2, [r4, #0]
 80017ba:	6063      	str	r3, [r4, #4]
 80017bc:	6004      	str	r4, [r0, #0]
 80017be:	e7ed      	b.n	800179c <_free_r+0x24>
 80017c0:	4613      	mov	r3, r2
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	b10a      	cbz	r2, 80017ca <_free_r+0x52>
 80017c6:	42a2      	cmp	r2, r4
 80017c8:	d9fa      	bls.n	80017c0 <_free_r+0x48>
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	1858      	adds	r0, r3, r1
 80017ce:	42a0      	cmp	r0, r4
 80017d0:	d10b      	bne.n	80017ea <_free_r+0x72>
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	4401      	add	r1, r0
 80017d6:	1858      	adds	r0, r3, r1
 80017d8:	4282      	cmp	r2, r0
 80017da:	6019      	str	r1, [r3, #0]
 80017dc:	d1de      	bne.n	800179c <_free_r+0x24>
 80017de:	6810      	ldr	r0, [r2, #0]
 80017e0:	6852      	ldr	r2, [r2, #4]
 80017e2:	4401      	add	r1, r0
 80017e4:	6019      	str	r1, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	e7d8      	b.n	800179c <_free_r+0x24>
 80017ea:	d902      	bls.n	80017f2 <_free_r+0x7a>
 80017ec:	230c      	movs	r3, #12
 80017ee:	602b      	str	r3, [r5, #0]
 80017f0:	e7d4      	b.n	800179c <_free_r+0x24>
 80017f2:	6820      	ldr	r0, [r4, #0]
 80017f4:	1821      	adds	r1, r4, r0
 80017f6:	428a      	cmp	r2, r1
 80017f8:	bf01      	itttt	eq
 80017fa:	6811      	ldreq	r1, [r2, #0]
 80017fc:	6852      	ldreq	r2, [r2, #4]
 80017fe:	1809      	addeq	r1, r1, r0
 8001800:	6021      	streq	r1, [r4, #0]
 8001802:	6062      	str	r2, [r4, #4]
 8001804:	605c      	str	r4, [r3, #4]
 8001806:	e7c9      	b.n	800179c <_free_r+0x24>
 8001808:	bd38      	pop	{r3, r4, r5, pc}
 800180a:	bf00      	nop
 800180c:	20000b38 	.word	0x20000b38

08001810 <_malloc_r>:
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	1ccd      	adds	r5, r1, #3
 8001814:	f025 0503 	bic.w	r5, r5, #3
 8001818:	3508      	adds	r5, #8
 800181a:	2d0c      	cmp	r5, #12
 800181c:	bf38      	it	cc
 800181e:	250c      	movcc	r5, #12
 8001820:	2d00      	cmp	r5, #0
 8001822:	4606      	mov	r6, r0
 8001824:	db01      	blt.n	800182a <_malloc_r+0x1a>
 8001826:	42a9      	cmp	r1, r5
 8001828:	d903      	bls.n	8001832 <_malloc_r+0x22>
 800182a:	230c      	movs	r3, #12
 800182c:	6033      	str	r3, [r6, #0]
 800182e:	2000      	movs	r0, #0
 8001830:	bd70      	pop	{r4, r5, r6, pc}
 8001832:	f000 f87d 	bl	8001930 <__malloc_lock>
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <_malloc_r+0xac>)
 8001838:	6814      	ldr	r4, [r2, #0]
 800183a:	4621      	mov	r1, r4
 800183c:	b991      	cbnz	r1, 8001864 <_malloc_r+0x54>
 800183e:	4c20      	ldr	r4, [pc, #128]	; (80018c0 <_malloc_r+0xb0>)
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	b91b      	cbnz	r3, 800184c <_malloc_r+0x3c>
 8001844:	4630      	mov	r0, r6
 8001846:	f000 f863 	bl	8001910 <_sbrk_r>
 800184a:	6020      	str	r0, [r4, #0]
 800184c:	4629      	mov	r1, r5
 800184e:	4630      	mov	r0, r6
 8001850:	f000 f85e 	bl	8001910 <_sbrk_r>
 8001854:	1c43      	adds	r3, r0, #1
 8001856:	d124      	bne.n	80018a2 <_malloc_r+0x92>
 8001858:	230c      	movs	r3, #12
 800185a:	4630      	mov	r0, r6
 800185c:	6033      	str	r3, [r6, #0]
 800185e:	f000 f868 	bl	8001932 <__malloc_unlock>
 8001862:	e7e4      	b.n	800182e <_malloc_r+0x1e>
 8001864:	680b      	ldr	r3, [r1, #0]
 8001866:	1b5b      	subs	r3, r3, r5
 8001868:	d418      	bmi.n	800189c <_malloc_r+0x8c>
 800186a:	2b0b      	cmp	r3, #11
 800186c:	d90f      	bls.n	800188e <_malloc_r+0x7e>
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	18cc      	adds	r4, r1, r3
 8001872:	50cd      	str	r5, [r1, r3]
 8001874:	4630      	mov	r0, r6
 8001876:	f000 f85c 	bl	8001932 <__malloc_unlock>
 800187a:	f104 000b 	add.w	r0, r4, #11
 800187e:	1d23      	adds	r3, r4, #4
 8001880:	f020 0007 	bic.w	r0, r0, #7
 8001884:	1ac3      	subs	r3, r0, r3
 8001886:	d0d3      	beq.n	8001830 <_malloc_r+0x20>
 8001888:	425a      	negs	r2, r3
 800188a:	50e2      	str	r2, [r4, r3]
 800188c:	e7d0      	b.n	8001830 <_malloc_r+0x20>
 800188e:	684b      	ldr	r3, [r1, #4]
 8001890:	428c      	cmp	r4, r1
 8001892:	bf16      	itet	ne
 8001894:	6063      	strne	r3, [r4, #4]
 8001896:	6013      	streq	r3, [r2, #0]
 8001898:	460c      	movne	r4, r1
 800189a:	e7eb      	b.n	8001874 <_malloc_r+0x64>
 800189c:	460c      	mov	r4, r1
 800189e:	6849      	ldr	r1, [r1, #4]
 80018a0:	e7cc      	b.n	800183c <_malloc_r+0x2c>
 80018a2:	1cc4      	adds	r4, r0, #3
 80018a4:	f024 0403 	bic.w	r4, r4, #3
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	d005      	beq.n	80018b8 <_malloc_r+0xa8>
 80018ac:	1a21      	subs	r1, r4, r0
 80018ae:	4630      	mov	r0, r6
 80018b0:	f000 f82e 	bl	8001910 <_sbrk_r>
 80018b4:	3001      	adds	r0, #1
 80018b6:	d0cf      	beq.n	8001858 <_malloc_r+0x48>
 80018b8:	6025      	str	r5, [r4, #0]
 80018ba:	e7db      	b.n	8001874 <_malloc_r+0x64>
 80018bc:	20000b38 	.word	0x20000b38
 80018c0:	20000b3c 	.word	0x20000b3c

080018c4 <_realloc_r>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	4607      	mov	r7, r0
 80018c8:	4614      	mov	r4, r2
 80018ca:	460e      	mov	r6, r1
 80018cc:	b921      	cbnz	r1, 80018d8 <_realloc_r+0x14>
 80018ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80018d2:	4611      	mov	r1, r2
 80018d4:	f7ff bf9c 	b.w	8001810 <_malloc_r>
 80018d8:	b922      	cbnz	r2, 80018e4 <_realloc_r+0x20>
 80018da:	f7ff ff4d 	bl	8001778 <_free_r>
 80018de:	4625      	mov	r5, r4
 80018e0:	4628      	mov	r0, r5
 80018e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e4:	f000 f826 	bl	8001934 <_malloc_usable_size_r>
 80018e8:	42a0      	cmp	r0, r4
 80018ea:	d20f      	bcs.n	800190c <_realloc_r+0x48>
 80018ec:	4621      	mov	r1, r4
 80018ee:	4638      	mov	r0, r7
 80018f0:	f7ff ff8e 	bl	8001810 <_malloc_r>
 80018f4:	4605      	mov	r5, r0
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d0f2      	beq.n	80018e0 <_realloc_r+0x1c>
 80018fa:	4631      	mov	r1, r6
 80018fc:	4622      	mov	r2, r4
 80018fe:	f7ff ff17 	bl	8001730 <memcpy>
 8001902:	4631      	mov	r1, r6
 8001904:	4638      	mov	r0, r7
 8001906:	f7ff ff37 	bl	8001778 <_free_r>
 800190a:	e7e9      	b.n	80018e0 <_realloc_r+0x1c>
 800190c:	4635      	mov	r5, r6
 800190e:	e7e7      	b.n	80018e0 <_realloc_r+0x1c>

08001910 <_sbrk_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	2300      	movs	r3, #0
 8001914:	4c05      	ldr	r4, [pc, #20]	; (800192c <_sbrk_r+0x1c>)
 8001916:	4605      	mov	r5, r0
 8001918:	4608      	mov	r0, r1
 800191a:	6023      	str	r3, [r4, #0]
 800191c:	f7fe ff5a 	bl	80007d4 <_sbrk>
 8001920:	1c43      	adds	r3, r0, #1
 8001922:	d102      	bne.n	800192a <_sbrk_r+0x1a>
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	b103      	cbz	r3, 800192a <_sbrk_r+0x1a>
 8001928:	602b      	str	r3, [r5, #0]
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	20000b44 	.word	0x20000b44

08001930 <__malloc_lock>:
 8001930:	4770      	bx	lr

08001932 <__malloc_unlock>:
 8001932:	4770      	bx	lr

08001934 <_malloc_usable_size_r>:
 8001934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001938:	1f18      	subs	r0, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfbc      	itt	lt
 800193e:	580b      	ldrlt	r3, [r1, r0]
 8001940:	18c0      	addlt	r0, r0, r3
 8001942:	4770      	bx	lr

08001944 <_init>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	bf00      	nop
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr

08001950 <_fini>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	bf00      	nop
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr
