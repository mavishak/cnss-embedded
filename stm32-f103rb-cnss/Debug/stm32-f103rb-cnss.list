
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000334  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000334  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a8e  00000000  00000000  0001035d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000627  00000000  00000000  00011deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  00012418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c8  00000000  00000000  00012528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000003dc  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001696  00000000  00000000  000129cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057422  00000000  00000000  00014062  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006b484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000028c  00000000  00000000  0006b500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000314 	.word	0x08000314

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000314 	.word	0x08000314

08000170 <toggle_led>:

}


void toggle_led()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <toggle_led+0x3c>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d109      	bne.n	8000190 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <toggle_led+0x40>)
 800017e:	68db      	ldr	r3, [r3, #12]
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <toggle_led+0x40>)
 8000182:	f043 0320 	orr.w	r3, r3, #32
 8000186:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000188:	4b08      	ldr	r3, [pc, #32]	; (80001ac <toggle_led+0x3c>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800018e:	e008      	b.n	80001a2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <toggle_led+0x40>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <toggle_led+0x40>)
 8000196:	f023 0320 	bic.w	r3, r3, #32
 800019a:	60d3      	str	r3, [r2, #12]
		state=OFF;
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <toggle_led+0x3c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	40010800 	.word	0x40010800

080001b4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <EXTI4_IRQHandler+0x18>)
 80001ba:	695b      	ldr	r3, [r3, #20]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <EXTI4_IRQHandler+0x18>)
 80001be:	f043 0310 	orr.w	r3, r3, #16
 80001c2:	6153      	str	r3, [r2, #20]
	toggle_led();
 80001c4:	f7ff ffd4 	bl	8000170 <toggle_led>

}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010400 	.word	0x40010400

080001d0 <EXTI15_10_IRQHandler>:

/*Interrupt service routine for sensor using pin D6 (PB10) as input mode*/
void EXTI15_10_IRQHandler(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <EXTI15_10_IRQHandler+0x18>)
 80001d6:	695b      	ldr	r3, [r3, #20]
 80001d8:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <EXTI15_10_IRQHandler+0x18>)
 80001da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001de:	6153      	str	r3, [r2, #20]
	toggle_led();
 80001e0:	f7ff ffc6 	bl	8000170 <toggle_led>

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40010400 	.word	0x40010400

080001ec <main>:




int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();

	init_usart();
 80001f0:	f000 f80a 	bl	8000208 <init_usart>
	while(1)
	{
		write();
 80001f4:	f000 f82e 	bl	8000254 <write>
 80001f8:	e7fc      	b.n	80001f4 <main+0x8>

080001fa <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0

}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
	...

08000208 <init_usart>:
#include "hc-sr501pir_sensor.h"
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ() and NVIC_SetPriority()*/


void init_usart(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

	/*Enable Alternate Funcion for PINs)*/
	RCC->APB2ENR |= 0x00000001; // for interrupt (see RM 8.3.7)
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <init_usart+0x44>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <init_usart+0x44>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6193      	str	r3, [r2, #24]

	/*Enable USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8)
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <init_usart+0x44>)
 800021a:	69db      	ldr	r3, [r3, #28]
 800021c:	4a0b      	ldr	r2, [pc, #44]	; (800024c <init_usart+0x44>)
 800021e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000222:	61d3      	str	r3, [r2, #28]

	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <init_usart+0x48>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a09      	ldr	r2, [pc, #36]	; (8000250 <init_usart+0x48>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
	//Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0xEA6; // 9600 bps (see https://www.programmersought.com/article/11991629979/ and RM 27.6.3)
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <init_usart+0x48>)
 8000232:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000236:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <init_usart+0x48>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <init_usart+0x48>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	60d3      	str	r3, [r2, #12]

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000
 8000250:	40004400 	.word	0x40004400

08000254 <write>:

void write(){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

	//while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmition is complete TC=1 (see RM 27.6.1)
	//wait while data is not transferd
	//wait while txe==0
	while(((USART2->SR) & 0x00000080) == 0x00000000); // != 0x00000080 check TXE (see RM 27.6.1)
 8000258:	bf00      	nop
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <write+0x20>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <write+0x6>
	USART2->DR = 'c'; //send data (see RM 27.6.2)
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <write+0x20>)
 8000268:	2263      	movs	r2, #99	; 0x63
 800026a:	605a      	str	r2, [r3, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40004400 	.word	0x40004400

08000278 <Reset_Handler>:
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
 800027a:	4685      	mov	sp, r0
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x6>)
 800027e:	490e      	ldr	r1, [pc, #56]	; (80002b8 <LoopForever+0xa>)
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <LoopForever+0xe>)
 8000282:	2300      	movs	r3, #0
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:
 8000286:	58d4      	ldr	r4, [r2, r3]
 8000288:	50c4      	str	r4, [r0, r3]
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:
 800028c:	18c4      	adds	r4, r0, r3
 800028e:	428c      	cmp	r4, r1
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
 8000292:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <LoopForever+0x12>)
 8000294:	4c0b      	ldr	r4, [pc, #44]	; (80002c4 <LoopForever+0x16>)
 8000296:	2300      	movs	r3, #0
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:
 800029e:	42a2      	cmp	r2, r4
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>
 80002a2:	f3af 8000 	nop.w
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
 80002aa:	f7ff ff9f 	bl	80001ec <main>

080002ae <LoopForever>:
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
 80002b0:	20005000 	.word	0x20005000
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	08000334 	.word	0x08000334
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000020 	.word	0x20000020

080002c8 <ADC1_2_IRQHandler>:
 80002c8:	e7fe      	b.n	80002c8 <ADC1_2_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	2500      	movs	r5, #0
 80002d0:	4e0c      	ldr	r6, [pc, #48]	; (8000304 <__libc_init_array+0x38>)
 80002d2:	4c0d      	ldr	r4, [pc, #52]	; (8000308 <__libc_init_array+0x3c>)
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	42a5      	cmp	r5, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	f000 f81a 	bl	8000314 <_init>
 80002e0:	2500      	movs	r5, #0
 80002e2:	4e0a      	ldr	r6, [pc, #40]	; (800030c <__libc_init_array+0x40>)
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <__libc_init_array+0x44>)
 80002e6:	1ba4      	subs	r4, r4, r6
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f4:	4798      	blx	r3
 80002f6:	3501      	adds	r5, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002fe:	4798      	blx	r3
 8000300:	3501      	adds	r5, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr
