
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002984  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080034ec  080034ec  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ec  080034ec  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080034f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc0  200000c4  080035b8  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e84  080035b8  00020e84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009391  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c3  00000000  00000000  0002947e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000468  00000000  00000000  0002ae48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b0  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001eab  00000000  00000000  0002b660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005446  00000000  00000000  0002d50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005959e  00000000  00000000  00032951  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008beef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001228  00000000  00000000  0008bf6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c4 	.word	0x200000c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002a9c 	.word	0x08002a9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000c8 	.word	0x200000c8
 800016c:	08002a9c 	.word	0x08002a9c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <CONFIGURATIONS_uid_read>:
#include <stdio.h>
#include <string.h>

static struct u_id ID;

void CONFIGURATIONS_uid_read(struct u_id *id){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	id->off0 = MMIO16(ID_ADDR + 0x0);
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <CONFIGURATIONS_uid_read+0x38>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	b29a      	uxth	r2, r3
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	801a      	strh	r2, [r3, #0]
	id->off2 = MMIO16(ID_ADDR + 0x2);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <CONFIGURATIONS_uid_read+0x3c>)
 8000194:	881b      	ldrh	r3, [r3, #0]
 8000196:	b29a      	uxth	r2, r3
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	805a      	strh	r2, [r3, #2]
	id->off4 = MMIO32(ID_ADDR + 0x4);
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <CONFIGURATIONS_uid_read+0x40>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	605a      	str	r2, [r3, #4]
	id->off8 = MMIO32(ID_ADDR + 0x8);
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <CONFIGURATIONS_uid_read+0x44>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	609a      	str	r2, [r3, #8]

}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	1ffff7e8 	.word	0x1ffff7e8
 80001bc:	1ffff7ea 	.word	0x1ffff7ea
 80001c0:	1ffff7ec 	.word	0x1ffff7ec
 80001c4:	1ffff7f0 	.word	0x1ffff7f0

080001c8 <CONFIGURATIONS_set_device_id>:

void CONFIGURATIONS_set_device_id(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8

	CONFIGURATIONS_uid_read(&ID);
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001d0:	f7ff ffd6 	bl	8000180 <CONFIGURATIONS_uid_read>
	memset(DEVICE_ID,'\0', ID_SIZE*sizeof(uint8_t));
 80001d4:	2219      	movs	r2, #25
 80001d6:	2100      	movs	r1, #0
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001da:	f002 f82c 	bl	8002236 <memset>
	sprintf((char*)DEVICE_ID,"%X%X%lX%lX",ID.off0,ID.off2,ID.off4,ID.off8);
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e6:	885b      	ldrh	r3, [r3, #2]
 80001e8:	4618      	mov	r0, r3
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001f0:	6892      	ldr	r2, [r2, #8]
 80001f2:	9201      	str	r2, [sp, #4]
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	4603      	mov	r3, r0
 80001f8:	460a      	mov	r2, r1
 80001fa:	4905      	ldr	r1, [pc, #20]	; (8000210 <CONFIGURATIONS_set_device_id+0x48>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001fe:	f002 f823 	bl	8002248 <siprintf>

}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	20000ddc 	.word	0x20000ddc
 8000210:	08002ab4 	.word	0x08002ab4

08000214 <CONFIGURATIONS_set_network>:

BOOL CONFIGURATIONS_set_network(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\r\nWord to the wise: if at some point nothing seems to be happening"));
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <CONFIGURATIONS_set_network+0x68>)
 800021a:	f001 fc9f 	bl	8001b5c <USART2_write>
	USART2_write((uint8_t*)("\r\ndisconnect the device from your computer, wait a few minutes, and then reconnect.\r\n"));
 800021e:	4818      	ldr	r0, [pc, #96]	; (8000280 <CONFIGURATIONS_set_network+0x6c>)
 8000220:	f001 fc9c 	bl	8001b5c <USART2_write>


	if(!SYSTEM_CONTROL_set_up()){
 8000224:	f000 ffc8 	bl	80011b8 <SYSTEM_CONTROL_set_up>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d110      	bne.n	8000250 <CONFIGURATIONS_set_network+0x3c>
		USART2_write((uint8_t*)("\r\nNetwok connection error."));
 800022e:	4815      	ldr	r0, [pc, #84]	; (8000284 <CONFIGURATIONS_set_network+0x70>)
 8000230:	f001 fc94 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\nIf you are sure you entered the correct network name and password,\r\ndo the following:"));
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <CONFIGURATIONS_set_network+0x74>)
 8000236:	f001 fc91 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\nCheck your network signal, is it strong enough?"));
 800023a:	4814      	ldr	r0, [pc, #80]	; (800028c <CONFIGURATIONS_set_network+0x78>)
 800023c:	f001 fc8e 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\nIf it is not, try again later or from another physical location."));
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <CONFIGURATIONS_set_network+0x7c>)
 8000242:	f001 fc8b 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\nIf it is, hit the reset button or disconnect the device from the computer, wait a few minutes, then reconnect and try again."));
 8000246:	4813      	ldr	r0, [pc, #76]	; (8000294 <CONFIGURATIONS_set_network+0x80>)
 8000248:	f001 fc88 	bl	8001b5c <USART2_write>
		return FALSE;
 800024c:	2300      	movs	r3, #0
 800024e:	e012      	b.n	8000276 <CONFIGURATIONS_set_network+0x62>
	}
	else{
		USART2_write((uint8_t*)("\r\nYour device was successfully registered."));
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <CONFIGURATIONS_set_network+0x84>)
 8000252:	f001 fc83 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\nThis is your device ID: '"));
 8000256:	4811      	ldr	r0, [pc, #68]	; (800029c <CONFIGURATIONS_set_network+0x88>)
 8000258:	f001 fc80 	bl	8001b5c <USART2_write>
		USART2_write(DEVICE_ID);
 800025c:	4810      	ldr	r0, [pc, #64]	; (80002a0 <CONFIGURATIONS_set_network+0x8c>)
 800025e:	f001 fc7d 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("'\r\nPlease coppy it, you will need it later."));
 8000262:	4810      	ldr	r0, [pc, #64]	; (80002a4 <CONFIGURATIONS_set_network+0x90>)
 8000264:	f001 fc7a 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)("\r\n\r\nYou can now safely disconnect the device and connect it to an electric power supply."));
 8000268:	480f      	ldr	r0, [pc, #60]	; (80002a8 <CONFIGURATIONS_set_network+0x94>)
 800026a:	f001 fc77 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)"\r\nIf you ever wish to reset your network details,\r\nconnect the device to the computer and open 'TeraTerm'.");
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <CONFIGURATIONS_set_network+0x98>)
 8000270:	f001 fc74 	bl	8001b5c <USART2_write>
		return TRUE;
 8000274:	2301      	movs	r3, #1
	}

}
 8000276:	4618      	mov	r0, r3
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	08002ac0 	.word	0x08002ac0
 8000280:	08002b04 	.word	0x08002b04
 8000284:	08002b5c 	.word	0x08002b5c
 8000288:	08002b78 	.word	0x08002b78
 800028c:	08002bd0 	.word	0x08002bd0
 8000290:	08002c04 	.word	0x08002c04
 8000294:	08002c48 	.word	0x08002c48
 8000298:	08002cc8 	.word	0x08002cc8
 800029c:	08002cf4 	.word	0x08002cf4
 80002a0:	20000ddc 	.word	0x20000ddc
 80002a4:	08002d10 	.word	0x08002d10
 80002a8:	08002d3c 	.word	0x08002d3c
 80002ac:	08002d98 	.word	0x08002d98

080002b0 <alert_Handler>:
	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");

}

void *alert_Handler(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 80002ba:	e002      	b.n	80002c2 <alert_Handler+0x12>
		i--;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3b01      	subs	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d008      	beq.n	80002da <alert_Handler+0x2a>
 80002c8:	f000 f884 	bl	80003d4 <recordAlert>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d103      	bne.n	80002da <alert_Handler+0x2a>
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <alert_Handler+0x38>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f0      	bne.n	80002bc <alert_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80002da:	f001 f9a1 	bl	8001620 <TIMER4_disable>

	return NULL;
 80002de:	2300      	movs	r3, #0

}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000474 	.word	0x20000474

080002ec <control_Handler>:

void *control_Handler(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <control_Handler+0x8c>)
 80002f4:	2203      	movs	r2, #3
 80002f6:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 80002f8:	2303      	movs	r3, #3
 80002fa:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80002fc:	e002      	b.n	8000304 <control_Handler+0x18>
		i--;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3b01      	subs	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d008      	beq.n	800031c <control_Handler+0x30>
 800030a:	f000 f8b7 	bl	800047c <checkSwitchState>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d103      	bne.n	800031c <control_Handler+0x30>
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <control_Handler+0x90>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f0      	bne.n	80002fe <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <control_Handler+0x8c>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d003      	beq.n	800032c <control_Handler+0x40>
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <control_Handler+0x8c>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d109      	bne.n	8000340 <control_Handler+0x54>
		disable_sensor();
 800032c:	f000 fe9a 	bl	8001064 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 8000330:	f001 f968 	bl	8001604 <TIMER3_disable>
		LED_off();
 8000334:	f000 fee4 	bl	8001100 <LED_off>
		USART2_write((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 8000338:	4811      	ldr	r0, [pc, #68]	; (8000380 <control_Handler+0x94>)
 800033a:	f001 fc0f 	bl	8001b5c <USART2_write>
 800033e:	e014      	b.n	800036a <control_Handler+0x7e>
	}

	else if(state == ON){
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <control_Handler+0x8c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d107      	bne.n	8000358 <control_Handler+0x6c>
		enable_sensor();
 8000348:	f000 fe80 	bl	800104c <enable_sensor>
		LED_on();
 800034c:	f000 feca 	bl	80010e4 <LED_on>
		USART2_write((uint8_t*)("\r\nON\r\n"));
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <control_Handler+0x98>)
 8000352:	f001 fc03 	bl	8001b5c <USART2_write>
 8000356:	e008      	b.n	800036a <control_Handler+0x7e>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 8000358:	f000 fe84 	bl	8001064 <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 800035c:	f001 f952 	bl	8001604 <TIMER3_disable>
		LED_off();
 8000360:	f000 fece 	bl	8001100 <LED_off>
		USART2_write((uint8_t*)("\r\nNON\r\n"));
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <control_Handler+0x9c>)
 8000366:	f001 fbf9 	bl	8001b5c <USART2_write>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 800036a:	f001 f959 	bl	8001620 <TIMER4_disable>

	return NULL;
 800036e:	2300      	movs	r3, #0

}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000475 	.word	0x20000475
 800037c:	20000474 	.word	0x20000474
 8000380:	08002e10 	.word	0x08002e10
 8000384:	08002e20 	.word	0x08002e20
 8000388:	08002e28 	.word	0x08002e28

0800038c <registeration_Handler>:

BOOL registeration_Handler(void){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 8000392:	2303      	movs	r3, #3
 8000394:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 8000396:	e002      	b.n	800039e <registeration_Handler+0x12>
		i--;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3b01      	subs	r3, #1
 800039c:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <registeration_Handler+0x2a>
 80003a4:	f000 f8be 	bl	8000524 <registerDeviceID>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d103      	bne.n	80003b6 <registeration_Handler+0x2a>
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <registeration_Handler+0x44>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d1f0      	bne.n	8000398 <registeration_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80003b6:	f001 f933 	bl	8001620 <TIMER4_disable>

	if(i == 0){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d101      	bne.n	80003c4 <registeration_Handler+0x38>
		return FALSE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	e000      	b.n	80003c6 <registeration_Handler+0x3a>
	}
	return TRUE;
 80003c4:	2301      	movs	r3, #1
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000474 	.word	0x20000474

080003d4 <recordAlert>:

/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In recordAlert()\r\n"); // for debugging
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <recordAlert+0x90>)
 80003da:	f001 fbbf 	bl	8001b5c <USART2_write>

	connection_closed = TRUE;
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <recordAlert+0x94>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 80003e4:	231e      	movs	r3, #30
 80003e6:	2206      	movs	r2, #6
 80003e8:	2102      	movs	r1, #2
 80003ea:	2002      	movs	r0, #2
 80003ec:	f000 f9a8 	bl	8000740 <connectFirebaseHost>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d101      	bne.n	80003fa <recordAlert+0x26>
		return FALSE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e031      	b.n	800045e <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <recordAlert+0x98>)
 80003fc:	f001 fbae 	bl	8001b5c <USART2_write>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//USART2_write((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 8000400:	f000 fa44 	bl	800088c <createPostMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000404:	481a      	ldr	r0, [pc, #104]	; (8000470 <recordAlert+0x9c>)
 8000406:	f001 fba9 	bl	8001b5c <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 800040a:	2328      	movs	r3, #40	; 0x28
 800040c:	221e      	movs	r2, #30
 800040e:	2102      	movs	r1, #2
 8000410:	2002      	movs	r0, #2
 8000412:	f000 faef 	bl	80009f4 <sendRequest>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d109      	bne.n	8000430 <recordAlert+0x5c>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 800041c:	2106      	movs	r1, #6
 800041e:	2002      	movs	r0, #2
 8000420:	f000 fc10 	bl	8000c44 <closeConnection>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <recordAlert+0x94>)
 800042a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800042c:	2300      	movs	r3, #0
 800042e:	e016      	b.n	800045e <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <recordAlert+0xa0>)
 8000432:	f001 fb93 	bl	8001b5c <USART2_write>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 8000436:	2078      	movs	r0, #120	; 0x78
 8000438:	f000 fb84 	bl	8000b44 <readResponse>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d109      	bne.n	8000456 <recordAlert+0x82>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 8000442:	2106      	movs	r1, #6
 8000444:	2002      	movs	r0, #2
 8000446:	f000 fbfd 	bl	8000c44 <closeConnection>
 800044a:	4603      	mov	r3, r0
 800044c:	461a      	mov	r2, r3
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <recordAlert+0x94>)
 8000450:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000452:	2300      	movs	r3, #0
 8000454:	e003      	b.n	800045e <recordAlert+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 8000456:	4808      	ldr	r0, [pc, #32]	; (8000478 <recordAlert+0xa4>)
 8000458:	f001 fb80 	bl	8001b5c <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 800045c:	2301      	movs	r3, #1

}
 800045e:	4618      	mov	r0, r3
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	08002e30 	.word	0x08002e30
 8000468:	20000474 	.word	0x20000474
 800046c:	08002e44 	.word	0x08002e44
 8000470:	08002e48 	.word	0x08002e48
 8000474:	08002e4c 	.word	0x08002e4c
 8000478:	08002e50 	.word	0x08002e50

0800047c <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 8000480:	4822      	ldr	r0, [pc, #136]	; (800050c <checkSwitchState+0x90>)
 8000482:	f001 fb6b 	bl	8001b5c <USART2_write>

	connection_closed = TRUE;//added 30.4.21
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <checkSwitchState+0x94>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 800048c:	231e      	movs	r3, #30
 800048e:	2206      	movs	r2, #6
 8000490:	2102      	movs	r1, #2
 8000492:	2002      	movs	r0, #2
 8000494:	f000 f954 	bl	8000740 <connectFirebaseHost>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d101      	bne.n	80004a2 <checkSwitchState+0x26>
		return FALSE;
 800049e:	2300      	movs	r3, #0
 80004a0:	e031      	b.n	8000506 <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 80004a2:	481c      	ldr	r0, [pc, #112]	; (8000514 <checkSwitchState+0x98>)
 80004a4:	f001 fb5a 	bl	8001b5c <USART2_write>


	//Create HTTP request
	createGetMsg();
 80004a8:	f000 fa36 	bl	8000918 <createGetMsg>
	USART2_write((uint8_t*)"4\r\n");
 80004ac:	481a      	ldr	r0, [pc, #104]	; (8000518 <checkSwitchState+0x9c>)
 80004ae:	f001 fb55 	bl	8001b5c <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 80004b2:	2328      	movs	r3, #40	; 0x28
 80004b4:	221e      	movs	r2, #30
 80004b6:	2102      	movs	r1, #2
 80004b8:	2002      	movs	r0, #2
 80004ba:	f000 fa9b 	bl	80009f4 <sendRequest>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d109      	bne.n	80004d8 <checkSwitchState+0x5c>
		connection_closed = closeConnection(2,6);
 80004c4:	2106      	movs	r1, #6
 80004c6:	2002      	movs	r0, #2
 80004c8:	f000 fbbc 	bl	8000c44 <closeConnection>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <checkSwitchState+0x94>)
 80004d2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	e016      	b.n	8000506 <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <checkSwitchState+0xa0>)
 80004da:	f001 fb3f 	bl	8001b5c <USART2_write>

	//Read response
	if(!parseResponse(120)){//timeout set t0 3 minutes
 80004de:	2078      	movs	r0, #120	; 0x78
 80004e0:	f000 fb64 	bl	8000bac <parseResponse>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d109      	bne.n	80004fe <checkSwitchState+0x82>
		connection_closed = closeConnection(2,6);//added 30.4.21
 80004ea:	2106      	movs	r1, #6
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fba9 	bl	8000c44 <closeConnection>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <checkSwitchState+0x94>)
 80004f8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	e003      	b.n	8000506 <checkSwitchState+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <checkSwitchState+0xa4>)
 8000500:	f001 fb2c 	bl	8001b5c <USART2_write>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 8000504:	2301      	movs	r3, #1


}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	08002e54 	.word	0x08002e54
 8000510:	20000474 	.word	0x20000474
 8000514:	08002e44 	.word	0x08002e44
 8000518:	08002e48 	.word	0x08002e48
 800051c:	08002e4c 	.word	0x08002e4c
 8000520:	08002e50 	.word	0x08002e50

08000524 <registerDeviceID>:



BOOL registerDeviceID(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"registerDeviceID\r\n"); // for debugging
 8000528:	482f      	ldr	r0, [pc, #188]	; (80005e8 <registerDeviceID+0xc4>)
 800052a:	f001 fb17 	bl	8001b5c <USART2_write>

	connection_closed = TRUE;
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <registerDeviceID+0xc8>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
//	 if(!reset(3,6)){
//		return FALSE;
//	 }
//	 TIMER4_delay(1);

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 8000534:	482e      	ldr	r0, [pc, #184]	; (80005f0 <registerDeviceID+0xcc>)
 8000536:	f001 fb11 	bl	8001b5c <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 800053a:	2106      	movs	r1, #6
 800053c:	2002      	movs	r0, #2
 800053e:	f000 f865 	bl	800060c <setClientMode>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <registerDeviceID+0x28>
		return FALSE;
 8000548:	2300      	movs	r3, #0
 800054a:	e04b      	b.n	80005e4 <registerDeviceID+0xc0>
	}
	USART2_write((uint8_t*)"1\r\n");
 800054c:	4829      	ldr	r0, [pc, #164]	; (80005f4 <registerDeviceID+0xd0>)
 800054e:	f001 fb05 	bl	8001b5c <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,10)){
 8000552:	210a      	movs	r1, #10
 8000554:	2002      	movs	r0, #2
 8000556:	f000 f89d 	bl	8000694 <joinAccessPoint>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d101      	bne.n	8000564 <registerDeviceID+0x40>
		return FALSE;
 8000560:	2300      	movs	r3, #0
 8000562:	e03f      	b.n	80005e4 <registerDeviceID+0xc0>
	}
	USART2_write((uint8_t*)"2\r\n");
 8000564:	4824      	ldr	r0, [pc, #144]	; (80005f8 <registerDeviceID+0xd4>)
 8000566:	f001 faf9 	bl	8001b5c <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 800056a:	231e      	movs	r3, #30
 800056c:	2206      	movs	r2, #6
 800056e:	2102      	movs	r1, #2
 8000570:	2002      	movs	r0, #2
 8000572:	f000 f8e5 	bl	8000740 <connectFirebaseHost>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <registerDeviceID+0x5c>
		return FALSE;
 800057c:	2300      	movs	r3, #0
 800057e:	e031      	b.n	80005e4 <registerDeviceID+0xc0>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <registerDeviceID+0xd8>)
 8000582:	f001 faeb 	bl	8001b5c <USART2_write>


	//Create HTTP request
	createPutMsg();
 8000586:	f000 f9ef 	bl	8000968 <createPutMsg>
	USART2_write((uint8_t*)"4\r\n");
 800058a:	481d      	ldr	r0, [pc, #116]	; (8000600 <registerDeviceID+0xdc>)
 800058c:	f001 fae6 	bl	8001b5c <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000590:	2328      	movs	r3, #40	; 0x28
 8000592:	221e      	movs	r2, #30
 8000594:	2102      	movs	r1, #2
 8000596:	2002      	movs	r0, #2
 8000598:	f000 fa2c 	bl	80009f4 <sendRequest>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d109      	bne.n	80005b6 <registerDeviceID+0x92>
		connection_closed = closeConnection(2,6);
 80005a2:	2106      	movs	r1, #6
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 fb4d 	bl	8000c44 <closeConnection>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <registerDeviceID+0xc8>)
 80005b0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e016      	b.n	80005e4 <registerDeviceID+0xc0>
	}
	USART2_write((uint8_t*)"5\r\n");
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <registerDeviceID+0xe0>)
 80005b8:	f001 fad0 	bl	8001b5c <USART2_write>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 80005bc:	2078      	movs	r0, #120	; 0x78
 80005be:	f000 fac1 	bl	8000b44 <readResponse>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d109      	bne.n	80005dc <registerDeviceID+0xb8>
		connection_closed = closeConnection(2,6);
 80005c8:	2106      	movs	r1, #6
 80005ca:	2002      	movs	r0, #2
 80005cc:	f000 fb3a 	bl	8000c44 <closeConnection>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <registerDeviceID+0xc8>)
 80005d6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80005d8:	2300      	movs	r3, #0
 80005da:	e003      	b.n	80005e4 <registerDeviceID+0xc0>
	}

	USART2_write((uint8_t*)"6\r\n");
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <registerDeviceID+0xe4>)
 80005de:	f001 fabd 	bl	8001b5c <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 80005e2:	2301      	movs	r3, #1

}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08002e6c 	.word	0x08002e6c
 80005ec:	20000474 	.word	0x20000474
 80005f0:	08002e80 	.word	0x08002e80
 80005f4:	08002e84 	.word	0x08002e84
 80005f8:	08002e88 	.word	0x08002e88
 80005fc:	08002e44 	.word	0x08002e44
 8000600:	08002e48 	.word	0x08002e48
 8000604:	08002e4c 	.word	0x08002e4c
 8000608:	08002e50 	.word	0x08002e50

0800060c <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <setClientMode+0x78>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CWMODE);
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <setClientMode+0x7c>)
 800061e:	f001 fbb3 	bl	8001d88 <USART1_write>
	while(tries > 0){
 8000622:	e027      	b.n	8000674 <setClientMode+0x68>
		TIMER4_set_timeout(timeout);
 8000624:	6838      	ldr	r0, [r7, #0]
 8000626:	f001 f869 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800062a:	e00e      	b.n	800064a <setClientMode+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 800062c:	f001 f962 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <setClientMode+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 8000636:	4915      	ldr	r1, [pc, #84]	; (800068c <setClientMode+0x80>)
 8000638:	4815      	ldr	r0, [pc, #84]	; (8000690 <setClientMode+0x84>)
 800063a:	f001 fc2b 	bl	8001e94 <USART1_search_buffer_Rx>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <setClientMode+0x78>)
 8000644:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000646:	f001 f961 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <setClientMode+0x78>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d104      	bne.n	800065c <setClientMode+0x50>
 8000652:	f001 f865 	bl	8001720 <TIMER4_timeout_done>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0e7      	beq.n	800062c <setClientMode+0x20>
			}
		}
		if(found == PASS){
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <setClientMode+0x78>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <setClientMode+0x5c>
			return TRUE;
 8000664:	2301      	movs	r3, #1
 8000666:	e009      	b.n	800067c <setClientMode+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CWMODE);
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <setClientMode+0x7c>)
 8000670:	f001 fb8a 	bl	8001d88 <USART1_write>
	while(tries > 0){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1d4      	bne.n	8000624 <setClientMode+0x18>
		}
	}
	return FALSE;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000005c 	.word	0x2000005c
 8000688:	08002eb0 	.word	0x08002eb0
 800068c:	08002e94 	.word	0x08002e94
 8000690:	08002e9c 	.word	0x08002e9c

08000694 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800069e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a2:	2100      	movs	r1, #0
 80006a4:	481f      	ldr	r0, [pc, #124]	; (8000724 <joinAccessPoint+0x90>)
 80006a6:	f001 fdc6 	bl	8002236 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PWD);
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <joinAccessPoint+0x94>)
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <joinAccessPoint+0x98>)
 80006ae:	4920      	ldr	r1, [pc, #128]	; (8000730 <joinAccessPoint+0x9c>)
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <joinAccessPoint+0x90>)
 80006b2:	f001 fdc9 	bl	8002248 <siprintf>

	found = STANDBY;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <joinAccessPoint+0xa0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 80006bc:	4819      	ldr	r0, [pc, #100]	; (8000724 <joinAccessPoint+0x90>)
 80006be:	f001 fb63 	bl	8001d88 <USART1_write>
	while(tries > 0){
 80006c2:	e027      	b.n	8000714 <joinAccessPoint+0x80>
		TIMER4_set_timeout(timeout);
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f001 f819 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006ca:	e00e      	b.n	80006ea <joinAccessPoint+0x56>
			if(USART1_NEW_LINE_FOUND_get()){
 80006cc:	f001 f912 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d009      	beq.n	80006ea <joinAccessPoint+0x56>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80006d6:	4918      	ldr	r1, [pc, #96]	; (8000738 <joinAccessPoint+0xa4>)
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <joinAccessPoint+0xa8>)
 80006da:	f001 fbdb 	bl	8001e94 <USART1_search_buffer_Rx>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <joinAccessPoint+0xa0>)
 80006e4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80006e6:	f001 f911 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <joinAccessPoint+0xa0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d104      	bne.n	80006fc <joinAccessPoint+0x68>
 80006f2:	f001 f815 	bl	8001720 <TIMER4_timeout_done>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0e7      	beq.n	80006cc <joinAccessPoint+0x38>
			}
		}
		if(found == PASS){
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <joinAccessPoint+0xa0>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <joinAccessPoint+0x74>
			return TRUE;
 8000704:	2301      	movs	r3, #1
 8000706:	e009      	b.n	800071c <joinAccessPoint+0x88>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)command);
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <joinAccessPoint+0x90>)
 8000710:	f001 fb3a 	bl	8001d88 <USART1_write>
	while(tries > 0){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1d4      	bne.n	80006c4 <joinAccessPoint+0x30>
		}
	}
	return FALSE;
 800071a:	2300      	movs	r3, #0

}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000ec 	.word	0x200000ec
 8000728:	20000df8 	.word	0x20000df8
 800072c:	20000e3c 	.word	0x20000e3c
 8000730:	08002ec0 	.word	0x08002ec0
 8000734:	2000005c 	.word	0x2000005c
 8000738:	08002ed8 	.word	0x08002ed8
 800073c:	08002e9c 	.word	0x08002e9c

08000740 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <connectFirebaseHost+0x128>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000754:	4845      	ldr	r0, [pc, #276]	; (800086c <connectFirebaseHost+0x12c>)
 8000756:	f001 fb17 	bl	8001d88 <USART1_write>
	while(_ssl_tries > 0){
 800075a:	e025      	b.n	80007a8 <connectFirebaseHost+0x68>
		TIMER4_set_timeout(_ssl_timeout);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 ffcd 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000762:	e00e      	b.n	8000782 <connectFirebaseHost+0x42>
			if(USART1_NEW_LINE_FOUND_get()){
 8000764:	f001 f8c6 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d009      	beq.n	8000782 <connectFirebaseHost+0x42>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800076e:	4940      	ldr	r1, [pc, #256]	; (8000870 <connectFirebaseHost+0x130>)
 8000770:	4840      	ldr	r0, [pc, #256]	; (8000874 <connectFirebaseHost+0x134>)
 8000772:	f001 fb8f 	bl	8001e94 <USART1_search_buffer_Rx>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <connectFirebaseHost+0x128>)
 800077c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800077e:	f001 f8c5 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <connectFirebaseHost+0x128>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d104      	bne.n	8000794 <connectFirebaseHost+0x54>
 800078a:	f000 ffc9 	bl	8001720 <TIMER4_timeout_done>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0e7      	beq.n	8000764 <connectFirebaseHost+0x24>
			}
		}
		if(found == PASS){
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <connectFirebaseHost+0x128>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d009      	beq.n	80007b0 <connectFirebaseHost+0x70>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3b01      	subs	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 80007a2:	4832      	ldr	r0, [pc, #200]	; (800086c <connectFirebaseHost+0x12c>)
 80007a4:	f001 faf0 	bl	8001d88 <USART1_write>
	while(_ssl_tries > 0){
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1d6      	bne.n	800075c <connectFirebaseHost+0x1c>
 80007ae:	e000      	b.n	80007b2 <connectFirebaseHost+0x72>
			break; //move on to next command
 80007b0:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <connectFirebaseHost+0x128>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <connectFirebaseHost+0x82>
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <connectFirebaseHost+0x128>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d101      	bne.n	80007c6 <connectFirebaseHost+0x86>
		return FALSE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e04b      	b.n	800085e <connectFirebaseHost+0x11e>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ca:	2100      	movs	r1, #0
 80007cc:	482a      	ldr	r0, [pc, #168]	; (8000878 <connectFirebaseHost+0x138>)
 80007ce:	f001 fd32 	bl	8002236 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <connectFirebaseHost+0x13c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <connectFirebaseHost+0x140>)
 80007d8:	492a      	ldr	r1, [pc, #168]	; (8000884 <connectFirebaseHost+0x144>)
 80007da:	4827      	ldr	r0, [pc, #156]	; (8000878 <connectFirebaseHost+0x138>)
 80007dc:	f001 fd34 	bl	8002248 <siprintf>

	found = STANDBY;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <connectFirebaseHost+0x128>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <connectFirebaseHost+0x138>)
 80007e8:	f001 face 	bl	8001d88 <USART1_write>
	while(_cipstart_tries > 0){
 80007ec:	e033      	b.n	8000856 <connectFirebaseHost+0x116>
		TIMER4_set_timeout(_cipstart_timeout);
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f000 ff84 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80007f4:	e01a      	b.n	800082c <connectFirebaseHost+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 80007f6:	f001 f87d 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d015      	beq.n	800082c <connectFirebaseHost+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000800:	491b      	ldr	r1, [pc, #108]	; (8000870 <connectFirebaseHost+0x130>)
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <connectFirebaseHost+0x134>)
 8000804:	f001 fb46 	bl	8001e94 <USART1_search_buffer_Rx>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <connectFirebaseHost+0x128>)
 800080e:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <connectFirebaseHost+0x128>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d107      	bne.n	8000828 <connectFirebaseHost+0xe8>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <connectFirebaseHost+0x130>)
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <connectFirebaseHost+0x148>)
 800081c:	f001 fb3a 	bl	8001e94 <USART1_search_buffer_Rx>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <connectFirebaseHost+0x128>)
 8000826:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000828:	f001 f870 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <connectFirebaseHost+0x128>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d104      	bne.n	800083e <connectFirebaseHost+0xfe>
 8000834:	f000 ff74 	bl	8001720 <TIMER4_timeout_done>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0db      	beq.n	80007f6 <connectFirebaseHost+0xb6>
			}
		}
		if(found == PASS){
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <connectFirebaseHost+0x128>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <connectFirebaseHost+0x10a>
			return TRUE;
 8000846:	2301      	movs	r3, #1
 8000848:	e009      	b.n	800085e <connectFirebaseHost+0x11e>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3b01      	subs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)command);
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <connectFirebaseHost+0x138>)
 8000852:	f001 fa99 	bl	8001d88 <USART1_write>
	while(_cipstart_tries > 0){
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1c8      	bne.n	80007ee <connectFirebaseHost+0xae>
		}
	}
	return FALSE;
 800085c:	2300      	movs	r3, #0



}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000005c 	.word	0x2000005c
 800086c:	08002ee0 	.word	0x08002ee0
 8000870:	08002e94 	.word	0x08002e94
 8000874:	08002e9c 	.word	0x08002e9c
 8000878:	200000ec 	.word	0x200000ec
 800087c:	20000058 	.word	0x20000058
 8000880:	20000000 	.word	0x20000000
 8000884:	08002ef8 	.word	0x08002ef8
 8000888:	08002f18 	.word	0x08002f18

0800088c <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	2100      	movs	r1, #0
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <createPostMsg+0x68>)
 8000898:	f001 fccd 	bl	8002236 <memset>
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <createPostMsg+0x68>)
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <createPostMsg+0x6c>)
 80008a0:	4610      	mov	r0, r2
 80008a2:	4619      	mov	r1, r3
 80008a4:	235c      	movs	r3, #92	; 0x5c
 80008a6:	461a      	mov	r2, r3
 80008a8:	f001 fcba 	bl	8002220 <memcpy>
	content_len = strlen((char*)content);
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <createPostMsg+0x68>)
 80008ae:	f7ff fc5f 	bl	8000170 <strlen>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <createPostMsg+0x70>)
 80008b6:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	2100      	movs	r1, #0
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <createPostMsg+0x74>)
 80008c0:	f001 fcb9 	bl	8002236 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <createPostMsg+0x70>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <createPostMsg+0x68>)
 80008ca:	9202      	str	r2, [sp, #8]
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <createPostMsg+0x78>)
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <createPostMsg+0x7c>)
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <createPostMsg+0x80>)
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <createPostMsg+0x84>)
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <createPostMsg+0x74>)
 80008da:	f001 fcb5 	bl	8002248 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <createPostMsg+0x74>)
 80008e0:	f7ff fc46 	bl	8000170 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	3b02      	subs	r3, #2
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <createPostMsg+0x88>)
 80008ea:	6013      	str	r3, [r2, #0]

}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200003f0 	.word	0x200003f0
 80008f8:	08002f2c 	.word	0x08002f2c
 80008fc:	20000470 	.word	0x20000470
 8000900:	200001ec 	.word	0x200001ec
 8000904:	20000000 	.word	0x20000000
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000ddc 	.word	0x20000ddc
 8000910:	08002f88 	.word	0x08002f88
 8000914:	200003ec 	.word	0x200003ec

08000918 <createGetMsg>:

void createGetMsg(void){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 800091e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000922:	2100      	movs	r1, #0
 8000924:	480a      	ldr	r0, [pc, #40]	; (8000950 <createGetMsg+0x38>)
 8000926:	f001 fc86 	bl	8002236 <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <createGetMsg+0x3c>)
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <createGetMsg+0x40>)
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <createGetMsg+0x44>)
 8000932:	490b      	ldr	r1, [pc, #44]	; (8000960 <createGetMsg+0x48>)
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <createGetMsg+0x38>)
 8000936:	f001 fc87 	bl	8002248 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <createGetMsg+0x38>)
 800093c:	f7ff fc18 	bl	8000170 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	3b02      	subs	r3, #2
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <createGetMsg+0x4c>)
 8000946:	6013      	str	r3, [r2, #0]

}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001ec 	.word	0x200001ec
 8000954:	20000000 	.word	0x20000000
 8000958:	2000002c 	.word	0x2000002c
 800095c:	20000ddc 	.word	0x20000ddc
 8000960:	08003000 	.word	0x08003000
 8000964:	200003ec 	.word	0x200003ec

08000968 <createPutMsg>:

void createPutMsg(void){
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	2100      	movs	r1, #0
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <createPutMsg+0x68>)
 8000974:	f001 fc5f 	bl	8002236 <memset>
	sprintf((char*)content,"{\"is_in_use\": true}");
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <createPutMsg+0x68>)
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <createPutMsg+0x6c>)
 800097c:	4614      	mov	r4, r2
 800097e:	461d      	mov	r5, r3
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	6023      	str	r3, [r4, #0]
	content_len = strlen((char*)content);
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <createPutMsg+0x68>)
 800098a:	f7ff fbf1 	bl	8000170 <strlen>
 800098e:	4602      	mov	r2, r0
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <createPutMsg+0x70>)
 8000992:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000998:	2100      	movs	r1, #0
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <createPutMsg+0x74>)
 800099c:	f001 fc4b 	bl	8002236 <memset>
	sprintf((char*)http,"PUT /device-list/%s.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <createPutMsg+0x70>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <createPutMsg+0x68>)
 80009a6:	9202      	str	r2, [sp, #8]
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <createPutMsg+0x78>)
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <createPutMsg+0x7c>)
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <createPutMsg+0x80>)
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <createPutMsg+0x84>)
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <createPutMsg+0x74>)
 80009b6:	f001 fc47 	bl	8002248 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <createPutMsg+0x74>)
 80009bc:	f7ff fbd8 	bl	8000170 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	3b02      	subs	r3, #2
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <createPutMsg+0x88>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bdb0      	pop	{r4, r5, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200003f0 	.word	0x200003f0
 80009d4:	08003044 	.word	0x08003044
 80009d8:	20000470 	.word	0x20000470
 80009dc:	200001ec 	.word	0x200001ec
 80009e0:	20000000 	.word	0x20000000
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	20000ddc 	.word	0x20000ddc
 80009ec:	08003058 	.word	0x08003058
 80009f0:	200003ec 	.word	0x200003ec

080009f4 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a06:	2100      	movs	r1, #0
 8000a08:	4844      	ldr	r0, [pc, #272]	; (8000b1c <sendRequest+0x128>)
 8000a0a:	f001 fc14 	bl	8002236 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 8000a0e:	4b44      	ldr	r3, [pc, #272]	; (8000b20 <sendRequest+0x12c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4943      	ldr	r1, [pc, #268]	; (8000b24 <sendRequest+0x130>)
 8000a16:	4841      	ldr	r0, [pc, #260]	; (8000b1c <sendRequest+0x128>)
 8000a18:	f001 fc16 	bl	8002248 <siprintf>

	found = STANDBY;
 8000a1c:	4b42      	ldr	r3, [pc, #264]	; (8000b28 <sendRequest+0x134>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000a22:	483e      	ldr	r0, [pc, #248]	; (8000b1c <sendRequest+0x128>)
 8000a24:	f001 f9b0 	bl	8001d88 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000a28:	e031      	b.n	8000a8e <sendRequest+0x9a>
		TIMER4_set_timeout(_CIPSEND_timeout);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 fe66 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000a30:	e01a      	b.n	8000a68 <sendRequest+0x74>
			if(USART1_NEW_LINE_FOUND_get()){
 8000a32:	f000 ff5f 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d015      	beq.n	8000a68 <sendRequest+0x74>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000a3c:	493b      	ldr	r1, [pc, #236]	; (8000b2c <sendRequest+0x138>)
 8000a3e:	483c      	ldr	r0, [pc, #240]	; (8000b30 <sendRequest+0x13c>)
 8000a40:	f001 fa28 	bl	8001e94 <USART1_search_buffer_Rx>
 8000a44:	4603      	mov	r3, r0
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <sendRequest+0x134>)
 8000a4a:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000a4c:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <sendRequest+0x134>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d107      	bne.n	8000a64 <sendRequest+0x70>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000a54:	4937      	ldr	r1, [pc, #220]	; (8000b34 <sendRequest+0x140>)
 8000a56:	4836      	ldr	r0, [pc, #216]	; (8000b30 <sendRequest+0x13c>)
 8000a58:	f001 fa1c 	bl	8001e94 <USART1_search_buffer_Rx>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <sendRequest+0x134>)
 8000a62:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000a64:	f000 ff52 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <sendRequest+0x134>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d104      	bne.n	8000a7a <sendRequest+0x86>
 8000a70:	f000 fe56 	bl	8001720 <TIMER4_timeout_done>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0db      	beq.n	8000a32 <sendRequest+0x3e>
			}
		}
		if(found == PASS){
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <sendRequest+0x134>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d009      	beq.n	8000a96 <sendRequest+0xa2>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)command);
 8000a88:	4824      	ldr	r0, [pc, #144]	; (8000b1c <sendRequest+0x128>)
 8000a8a:	f001 f97d 	bl	8001d88 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1ca      	bne.n	8000a2a <sendRequest+0x36>
 8000a94:	e000      	b.n	8000a98 <sendRequest+0xa4>
			break; //move on to next command
 8000a96:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <sendRequest+0x134>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d003      	beq.n	8000aa8 <sendRequest+0xb4>
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <sendRequest+0x134>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d101      	bne.n	8000aac <sendRequest+0xb8>
		return FALSE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e032      	b.n	8000b12 <sendRequest+0x11e>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <sendRequest+0x134>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)http);
 8000ab2:	4821      	ldr	r0, [pc, #132]	; (8000b38 <sendRequest+0x144>)
 8000ab4:	f001 f968 	bl	8001d88 <USART1_write>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000ab8:	e027      	b.n	8000b0a <sendRequest+0x116>
		TIMER4_set_timeout(_SEND_OK_timeout);
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f000 fe1e 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000ac0:	e00e      	b.n	8000ae0 <sendRequest+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 8000ac2:	f000 ff17 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <sendRequest+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000acc:	491b      	ldr	r1, [pc, #108]	; (8000b3c <sendRequest+0x148>)
 8000ace:	481c      	ldr	r0, [pc, #112]	; (8000b40 <sendRequest+0x14c>)
 8000ad0:	f001 f9e0 	bl	8001e94 <USART1_search_buffer_Rx>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <sendRequest+0x134>)
 8000ada:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000adc:	f000 ff16 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <sendRequest+0x134>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d104      	bne.n	8000af2 <sendRequest+0xfe>
 8000ae8:	f000 fe1a 	bl	8001720 <TIMER4_timeout_done>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0e7      	beq.n	8000ac2 <sendRequest+0xce>
			}
		}
		if(found == PASS){
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <sendRequest+0x134>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <sendRequest+0x10a>
			return TRUE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e009      	b.n	8000b12 <sendRequest+0x11e>
		}
		else{
			_SEND_OK_tries--;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)http);
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <sendRequest+0x144>)
 8000b06:	f001 f93f 	bl	8001d88 <USART1_write>
	while(_SEND_OK_tries > 0){
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1d4      	bne.n	8000aba <sendRequest+0xc6>
		}
	}
	return FALSE;
 8000b10:	2300      	movs	r3, #0

}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	200003ec 	.word	0x200003ec
 8000b24:	080030cc 	.word	0x080030cc
 8000b28:	2000005c 	.word	0x2000005c
 8000b2c:	08002e94 	.word	0x08002e94
 8000b30:	080030e0 	.word	0x080030e0
 8000b34:	080030e4 	.word	0x080030e4
 8000b38:	200001ec 	.word	0x200001ec
 8000b3c:	08002ed8 	.word	0x08002ed8
 8000b40:	080030f0 	.word	0x080030f0

08000b44 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <readResponse+0x5c>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 fdd2 	bl	80016fc <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000b58:	e00e      	b.n	8000b78 <readResponse+0x34>
		if(USART1_NEW_LINE_FOUND_get()){
 8000b5a:	f000 fecb 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d009      	beq.n	8000b78 <readResponse+0x34>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000b64:	490f      	ldr	r1, [pc, #60]	; (8000ba4 <readResponse+0x60>)
 8000b66:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <readResponse+0x64>)
 8000b68:	f001 f994 	bl	8001e94 <USART1_search_buffer_Rx>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <readResponse+0x5c>)
 8000b72:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 8000b74:	f000 feca 	bl	800190c <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <readResponse+0x5c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d104      	bne.n	8000b8a <readResponse+0x46>
 8000b80:	f000 fdce 	bl	8001720 <TIMER4_timeout_done>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0e7      	beq.n	8000b5a <readResponse+0x16>
		}
	}
	if(found == PASS){
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <readResponse+0x5c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <readResponse+0x52>
		return TRUE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <readResponse+0x54>
	}
	else{
		return FALSE;
 8000b96:	2300      	movs	r3, #0
	}

}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000005c 	.word	0x2000005c
 8000ba4:	08002ed8 	.word	0x08002ed8
 8000ba8:	080030e4 	.word	0x080030e4

08000bac <parseResponse>:


// THIS NEEDS TO CHANGE NEED TO CHECK WETHER IT'S ON OR OFF for that we need to retreive the content.
BOOL parseResponse(uint32_t timeout){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <parseResponse+0x7c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	state = NON;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <parseResponse+0x80>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 fd9b 	bl	80016fc <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000bc6:	e01b      	b.n	8000c00 <parseResponse+0x54>
		if(USART1_NEW_LINE_FOUND_get()){
 8000bc8:	f000 fe94 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d016      	beq.n	8000c00 <parseResponse+0x54>
			state = USART1_check_state_buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <parseResponse+0x84>)
 8000bd4:	4917      	ldr	r1, [pc, #92]	; (8000c34 <parseResponse+0x88>)
 8000bd6:	4818      	ldr	r0, [pc, #96]	; (8000c38 <parseResponse+0x8c>)
 8000bd8:	f001 f9b4 	bl	8001f44 <USART1_check_state_buffer_Rx>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <parseResponse+0x80>)
 8000be2:	701a      	strb	r2, [r3, #0]
			if(state != NON){
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <parseResponse+0x80>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d007      	beq.n	8000bfc <parseResponse+0x50>
				found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <parseResponse+0x90>)
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <parseResponse+0x94>)
 8000bf0:	f001 f950 	bl	8001e94 <USART1_search_buffer_Rx>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <parseResponse+0x7c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
			}
			USART1_NEW_LINE_READ_set();
 8000bfc:	f000 fe86 	bl	800190c <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <parseResponse+0x7c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <parseResponse+0x66>
 8000c08:	f000 fd8a 	bl	8001720 <TIMER4_timeout_done>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0da      	beq.n	8000bc8 <parseResponse+0x1c>
		}
	}
	if(found == PASS){
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <parseResponse+0x7c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <parseResponse+0x72>
		return TRUE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <parseResponse+0x74>
	}
	else{
		return FALSE;
 8000c1e:	2300      	movs	r3, #0
	}

}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000005c 	.word	0x2000005c
 8000c2c:	20000475 	.word	0x20000475
 8000c30:	080030fc 	.word	0x080030fc
 8000c34:	08003108 	.word	0x08003108
 8000c38:	08003114 	.word	0x08003114
 8000c3c:	08002ed8 	.word	0x08002ed8
 8000c40:	080030e4 	.word	0x080030e4

08000c44 <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <closeConnection+0x78>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CIPCLOSE);
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <closeConnection+0x7c>)
 8000c56:	f001 f897 	bl	8001d88 <USART1_write>
	while(tries > 0){
 8000c5a:	e027      	b.n	8000cac <closeConnection+0x68>
		TIMER4_set_timeout(timeout);
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f000 fd4d 	bl	80016fc <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c62:	e00e      	b.n	8000c82 <closeConnection+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000c64:	f000 fe46 	bl	80018f4 <USART1_NEW_LINE_FOUND_get>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d009      	beq.n	8000c82 <closeConnection+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000c6e:	4915      	ldr	r1, [pc, #84]	; (8000cc4 <closeConnection+0x80>)
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <closeConnection+0x84>)
 8000c72:	f001 f90f 	bl	8001e94 <USART1_search_buffer_Rx>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <closeConnection+0x78>)
 8000c7c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000c7e:	f000 fe45 	bl	800190c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <closeConnection+0x78>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d104      	bne.n	8000c94 <closeConnection+0x50>
 8000c8a:	f000 fd49 	bl	8001720 <TIMER4_timeout_done>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0e7      	beq.n	8000c64 <closeConnection+0x20>
			}
		}
		if(found == PASS){
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <closeConnection+0x78>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <closeConnection+0x5c>
			return TRUE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e009      	b.n	8000cb4 <closeConnection+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CIPCLOSE);
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <closeConnection+0x7c>)
 8000ca8:	f001 f86e 	bl	8001d88 <USART1_write>
	while(tries > 0){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1d4      	bne.n	8000c5c <closeConnection+0x18>
		}
	}
	return FALSE;
 8000cb2:	2300      	movs	r3, #0

}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000005c 	.word	0x2000005c
 8000cc0:	08003120 	.word	0x08003120
 8000cc4:	08002e94 	.word	0x08002e94
 8000cc8:	08002e9c 	.word	0x08002e9c

08000ccc <QUEUE_init>:

static Queue queue;


void QUEUE_init()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-QUEUE_init->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <QUEUE_init+0x24>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <QUEUE_init+0x24>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <QUEUE_init+0x24>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000478 	.word	0x20000478

08000cf4 <QUEUE_add_event>:


void QUEUE_add_event(Handler handler)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 8000cfc:	f000 f854 	bl	8000da8 <queue_isFull>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d118      	bne.n	8000d38 <QUEUE_add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d08:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000d1a:	2b3e      	cmp	r3, #62	; 0x3e
 8000d1c:	d807      	bhi.n	8000d2e <QUEUE_add_event+0x3a>
		queue.writeIndex++;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000d2c:	e005      	b.n	8000d3a <QUEUE_add_event+0x46>
	else
		queue.writeIndex = 0;
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <QUEUE_add_event+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000d36:	e000      	b.n	8000d3a <QUEUE_add_event+0x46>
		return;
 8000d38:	bf00      	nop

}
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000478 	.word	0x20000478

08000d44 <QUEUE_do_event>:



void *QUEUE_do_event()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 8000d4a:	f000 f843 	bl	8000dd4 <queue_isEmpty>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <QUEUE_do_event+0x14>
		return NULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e020      	b.n	8000d9a <QUEUE_do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	4798      	blx	r3
 8000d66:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d6a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8000d7e:	d807      	bhi.n	8000d90 <QUEUE_do_event+0x4c>
      queue.readIndex++;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d82:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000d8e:	e003      	b.n	8000d98 <QUEUE_do_event+0x54>
   else
      queue.readIndex = 0;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <QUEUE_do_event+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000d98:	687b      	ldr	r3, [r7, #4]

}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000478 	.word	0x20000478

08000da8 <queue_isFull>:


BOOL queue_isFull()
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <queue_isFull+0x28>)
 8000dae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <queue_isFull+0x28>)
 8000db4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000db8:	3301      	adds	r3, #1
 8000dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000478 	.word	0x20000478

08000dd4 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <queue_isEmpty+0x24>)
 8000dda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <queue_isEmpty+0x24>)
 8000de0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000478 	.word	0x20000478

08000dfc <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <EXTI15_10_IRQHandler+0x24>)
 8000e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e06:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <EXTI15_10_IRQHandler+0x24>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <EXTI15_10_IRQHandler+0x24>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e12:	6153      	str	r3, [r2, #20]

	QUEUE_add_event(interrupt_handler);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <EXTI15_10_IRQHandler+0x28>)
 8000e16:	f7ff ff6d 	bl	8000cf4 <QUEUE_add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010400 	.word	0x40010400
 8000e24:	08000e29 	.word	0x08000e29

08000e28 <interrupt_handler>:

void *interrupt_handler(void){
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <interrupt_handler+0x3c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <interrupt_handler+0x40>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <interrupt_handler+0x40>)
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <interrupt_handler+0x3c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e008      	b.n	8000e5a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <interrupt_handler+0x40>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <interrupt_handler+0x40>)
 8000e4e:	f023 0320 	bic.w	r3, r3, #32
 8000e52:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <interrupt_handler+0x3c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000e5a:	2300      	movs	r3, #0

}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000e7c 	.word	0x20000e7c
 8000e68:	40010800 	.word	0x40010800

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <__NVIC_EnableIRQ+0x34>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db10      	blt.n	8000f20 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4909      	ldr	r1, [pc, #36]	; (8000f2c <__NVIC_DisableIRQ+0x40>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	3320      	adds	r3, #32
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0c      	blt.n	8000f5c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_ClearPendingIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	3360      	adds	r3, #96	; 0x60
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <init_sensor_with_interrupt>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void init_sensor_with_interrupt(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <init_sensor_with_interrupt+0x7c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <init_sensor_with_interrupt+0x7c>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <init_sensor_with_interrupt+0x7c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <init_sensor_with_interrupt+0x7c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000fe2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000fe6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ff2:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <init_sensor_with_interrupt+0x80>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <init_sensor_with_interrupt+0x84>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <init_sensor_with_interrupt+0x84>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <init_sensor_with_interrupt+0x88>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <init_sensor_with_interrupt+0x88>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <init_sensor_with_interrupt+0x88>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <init_sensor_with_interrupt+0x88>)
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001026:	2007      	movs	r0, #7
 8001028:	f7ff ff20 	bl	8000e6c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 800102c:	2100      	movs	r1, #0
 800102e:	200a      	movs	r0, #10
 8001030:	f7ff ff9c 	bl	8000f6c <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8001034:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40010000 	.word	0x40010000
 8001048:	40010400 	.word	0x40010400

0800104c <enable_sensor>:

void enable_sensor(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 8001052:	200a      	movs	r0, #10
 8001054:	f7ff ff6c 	bl	8000f30 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 8001058:	200a      	movs	r0, #10
 800105a:	f7ff ff2b 	bl	8000eb4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800105e:	b662      	cpsie	i
	__enable_irq();

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <disable_sensor>:

void disable_sensor(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 800106a:	200a      	movs	r0, #10
 800106c:	f7ff ff3e 	bl	8000eec <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001070:	b662      	cpsie	i
	__enable_irq();

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <EXTI4_IRQHandler+0x2c>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <EXTI4_IRQHandler+0x2c>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6153      	str	r3, [r2, #20]
	if(TIMER3_timeout_done())
 8001088:	f000 fb26 	bl	80016d8 <TIMER3_timeout_done>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <EXTI4_IRQHandler+0x26>
	{
		QUEUE_add_event(alert_Handler);
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <EXTI4_IRQHandler+0x30>)
 8001094:	f7ff fe2e 	bl	8000cf4 <QUEUE_add_event>
		TIMER3_set_timeout(60); //60 seconds = 1 minute
 8001098:	203c      	movs	r0, #60	; 0x3c
 800109a:	f000 fb0b 	bl	80016b4 <TIMER3_set_timeout>
	}

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010400 	.word	0x40010400
 80010a8:	080002b1 	.word	0x080002b1

080010ac <LED_init>:
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ() and NVIC_SetPriority()*/
#include <string.h>
#include <stdlib.h>

void LED_init(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	/*USING LD2 (PA5) as output*/
	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <LED_init+0x30>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <LED_init+0x30>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LED_init+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <LED_init+0x34>)
 80010c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <LED_init+0x34>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <LED_init+0x34>)
 80010ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d2:	6013      	str	r3, [r2, #0]

}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800

080010e4 <LED_on>:
	// Toggle GPIOA pin 5.
	GPIOA->ODR ^= 0x0020;
}

void LED_on()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 0x0020;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <LED_on+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <LED_on+0x18>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40010800 	.word	0x40010800

08001100 <LED_off>:

void LED_off()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(0x0020);
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <LED_off+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <LED_off+0x18>)
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010800 	.word	0x40010800

0800111c <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();



	USART1_init(); // for ESP8266
 8001120:	f000 fc6e 	bl	8001a00 <USART1_init>
	USART2_init(); // for debugging
 8001124:	f000 fc16 	bl	8001954 <USART2_init>

	CONFIGURATIONS_set_device_id();
 8001128:	f7ff f84e 	bl	80001c8 <CONFIGURATIONS_set_device_id>



	QUEUE_init();
 800112c:	f7ff fdce 	bl	8000ccc <QUEUE_init>
	init_sensor_with_interrupt(); // sensor interrupts are not inabled
 8001130:	f7ff ff46 	bl	8000fc0 <init_sensor_with_interrupt>

	LED_init();
 8001134:	f7ff ffba 	bl	80010ac <LED_init>

	TIMER2_init(); // for monitoring switch state.
 8001138:	f000 f972 	bl	8001420 <TIMER2_init>
	TIMER3_init(); // for sensor delay
 800113c:	f000 f9b2 	bl	80014a4 <TIMER3_init>
	TIMER4_init(); // for ESP8266 timeout
 8001140:	f000 f9ec 	bl	800151c <TIMER4_init>


	//init_i2c1();
	USART2_write((uint8_t*)("\r\n_______________\r\n"));//For test
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <main+0x40>)
 8001146:	f000 fd09 	bl	8001b5c <USART2_write>

	CONFIGURATIONS_set_network(); // returns true or false
 800114a:	f7ff f863 	bl	8000214 <CONFIGURATIONS_set_network>


	while(1)
	{

		QUEUE_do_event();
 800114e:	f7ff fdf9 	bl	8000d44 <QUEUE_do_event>
		SYSTEM_CONTROL_monitor_switch_state(120); // every 2 minutes
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 f8e4 	bl	8001320 <SYSTEM_CONTROL_monitor_switch_state>
		QUEUE_do_event();
 8001158:	e7f9      	b.n	800114e <main+0x32>
 800115a:	bf00      	nop
 800115c:	080031c0 	.word	0x080031c0

08001160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x50>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x16>
		heap_end = &end;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <_sbrk+0x50>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <_sbrk+0x54>)
 8001174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <_sbrk+0x50>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <_sbrk+0x50>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	466a      	mov	r2, sp
 8001186:	4293      	cmp	r3, r2
 8001188:	d907      	bls.n	800119a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800118a:	f001 f81f 	bl	80021cc <__errno>
 800118e:	4602      	mov	r2, r0
 8001190:	230c      	movs	r3, #12
 8001192:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e006      	b.n	80011a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <_sbrk+0x50>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <_sbrk+0x50>)
 80011a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000584 	.word	0x20000584
 80011b4:	20000e88 	.word	0x20000e88

080011b8 <SYSTEM_CONTROL_set_up>:
uint8_t PWD[WiFi_SIZE];  // extern see configurations
uint8_t DEVICE_ID[ID_SIZE]; // extern see configurations



BOOL SYSTEM_CONTROL_set_up(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\r\n\r\nDear user, thank you for participating in our project!\r\n"));
 80011bc:	484a      	ldr	r0, [pc, #296]	; (80012e8 <SYSTEM_CONTROL_set_up+0x130>)
 80011be:	f000 fccd 	bl	8001b5c <USART2_write>
	USART2_write((uint8_t*)("Just a few more steps...\r\n\r\n"));
 80011c2:	484a      	ldr	r0, [pc, #296]	; (80012ec <SYSTEM_CONTROL_set_up+0x134>)
 80011c4:	f000 fcca 	bl	8001b5c <USART2_write>
	USART2_write((uint8_t*)("The security device needs to connect to your WiFi network, for that we need to set your network connection information.\r\n"));
 80011c8:	4849      	ldr	r0, [pc, #292]	; (80012f0 <SYSTEM_CONTROL_set_up+0x138>)
 80011ca:	f000 fcc7 	bl	8001b5c <USART2_write>
	USART2_write((uint8_t*)("For your assurance, this information will not be saved in any database!\r\n"));
 80011ce:	4849      	ldr	r0, [pc, #292]	; (80012f4 <SYSTEM_CONTROL_set_up+0x13c>)
 80011d0:	f000 fcc4 	bl	8001b5c <USART2_write>

	// set network ssid
	while(!USART2_ok()){
 80011d4:	e034      	b.n	8001240 <SYSTEM_CONTROL_set_up+0x88>
		USART2_NEW_LINE_READ_set();
 80011d6:	f000 fbb1 	bl	800193c <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\r\nNetwork name: ");
 80011da:	4847      	ldr	r0, [pc, #284]	; (80012f8 <SYSTEM_CONTROL_set_up+0x140>)
 80011dc:	f000 fcbe 	bl	8001b5c <USART2_write>
		USART2_enable_Rx();
 80011e0:	f000 fc6a 	bl	8001ab8 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80011e4:	bf00      	nop
 80011e6:	f000 fb9d 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0fa      	beq.n	80011e6 <SYSTEM_CONTROL_set_up+0x2e>
		USART2_disable_Rx();
 80011f0:	f000 fc70 	bl	8001ad4 <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 80011f4:	e00e      	b.n	8001214 <SYSTEM_CONTROL_set_up+0x5c>
			USART2_NEW_LINE_READ_set();
 80011f6:	f000 fba1 	bl	800193c <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\r\nThe network name is too long, try again: ");
 80011fa:	4840      	ldr	r0, [pc, #256]	; (80012fc <SYSTEM_CONTROL_set_up+0x144>)
 80011fc:	f000 fcae 	bl	8001b5c <USART2_write>
			USART2_enable_Rx();
 8001200:	f000 fc5a 	bl	8001ab8 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001204:	bf00      	nop
 8001206:	f000 fb8d 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0fa      	beq.n	8001206 <SYSTEM_CONTROL_set_up+0x4e>
			USART2_disable_Rx();
 8001210:	f000 fc60 	bl	8001ad4 <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 8001214:	493a      	ldr	r1, [pc, #232]	; (8001300 <SYSTEM_CONTROL_set_up+0x148>)
 8001216:	2040      	movs	r0, #64	; 0x40
 8001218:	f000 fd5c 	bl	8001cd4 <USART2_read_buffer_Rx>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0e9      	beq.n	80011f6 <SYSTEM_CONTROL_set_up+0x3e>
		}
		USART2_NEW_LINE_READ_set();
 8001222:	f000 fb8b 	bl	800193c <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"Enter 'ok' to continue or any other key to change network name: ");
 8001226:	4837      	ldr	r0, [pc, #220]	; (8001304 <SYSTEM_CONTROL_set_up+0x14c>)
 8001228:	f000 fc98 	bl	8001b5c <USART2_write>
		USART2_enable_Rx();
 800122c:	f000 fc44 	bl	8001ab8 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001230:	bf00      	nop
 8001232:	f000 fb77 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0fa      	beq.n	8001232 <SYSTEM_CONTROL_set_up+0x7a>
		USART2_disable_Rx();
 800123c:	f000 fc4a 	bl	8001ad4 <USART2_disable_Rx>
	while(!USART2_ok()){
 8001240:	f000 fd7a 	bl	8001d38 <USART2_ok>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0c5      	beq.n	80011d6 <SYSTEM_CONTROL_set_up+0x1e>
	}
	USART2_NEW_LINE_READ_set();
 800124a:	f000 fb77 	bl	800193c <USART2_NEW_LINE_READ_set>


	// set network password
	USART2_set_buffer_Rx(); // reset buffer
 800124e:	f000 fc6f 	bl	8001b30 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 8001252:	e034      	b.n	80012be <SYSTEM_CONTROL_set_up+0x106>
		USART2_NEW_LINE_READ_set();
 8001254:	f000 fb72 	bl	800193c <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\r\nNetwork access code (password): ");
 8001258:	482b      	ldr	r0, [pc, #172]	; (8001308 <SYSTEM_CONTROL_set_up+0x150>)
 800125a:	f000 fc7f 	bl	8001b5c <USART2_write>
		USART2_enable_Rx();
 800125e:	f000 fc2b 	bl	8001ab8 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001262:	bf00      	nop
 8001264:	f000 fb5e 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0fa      	beq.n	8001264 <SYSTEM_CONTROL_set_up+0xac>
		USART2_disable_Rx();
 800126e:	f000 fc31 	bl	8001ad4 <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 8001272:	e00e      	b.n	8001292 <SYSTEM_CONTROL_set_up+0xda>
			USART2_NEW_LINE_READ_set();
 8001274:	f000 fb62 	bl	800193c <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\r\nThe access code is to long, please try again: ");
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <SYSTEM_CONTROL_set_up+0x154>)
 800127a:	f000 fc6f 	bl	8001b5c <USART2_write>
			USART2_enable_Rx();
 800127e:	f000 fc1b 	bl	8001ab8 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001282:	bf00      	nop
 8001284:	f000 fb4e 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0fa      	beq.n	8001284 <SYSTEM_CONTROL_set_up+0xcc>
			USART2_disable_Rx();
 800128e:	f000 fc21 	bl	8001ad4 <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 8001292:	491f      	ldr	r1, [pc, #124]	; (8001310 <SYSTEM_CONTROL_set_up+0x158>)
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f000 fd1d 	bl	8001cd4 <USART2_read_buffer_Rx>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e9      	beq.n	8001274 <SYSTEM_CONTROL_set_up+0xbc>
		}
		USART2_NEW_LINE_READ_set();
 80012a0:	f000 fb4c 	bl	800193c <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"Enter 'ok' to continue or any other key to change password: ");
 80012a4:	481b      	ldr	r0, [pc, #108]	; (8001314 <SYSTEM_CONTROL_set_up+0x15c>)
 80012a6:	f000 fc59 	bl	8001b5c <USART2_write>
		USART2_enable_Rx();
 80012aa:	f000 fc05 	bl	8001ab8 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80012ae:	bf00      	nop
 80012b0:	f000 fb38 	bl	8001924 <USART2_NEW_LINE_FOUND_get>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0fa      	beq.n	80012b0 <SYSTEM_CONTROL_set_up+0xf8>
		USART2_disable_Rx();
 80012ba:	f000 fc0b 	bl	8001ad4 <USART2_disable_Rx>
	while(!USART2_ok()){
 80012be:	f000 fd3b 	bl	8001d38 <USART2_ok>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0c5      	beq.n	8001254 <SYSTEM_CONTROL_set_up+0x9c>
	}
	USART2_NEW_LINE_READ_set();
 80012c8:	f000 fb38 	bl	800193c <USART2_NEW_LINE_READ_set>

	USART2_write((uint8_t*)"\r\nTrying to connect...\r\nPlease wait, this might take a few minutes.");
 80012cc:	4812      	ldr	r0, [pc, #72]	; (8001318 <SYSTEM_CONTROL_set_up+0x160>)
 80012ce:	f000 fc45 	bl	8001b5c <USART2_write>
	USART2_write((uint8_t*)"\r\n\r\n");
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <SYSTEM_CONTROL_set_up+0x164>)
 80012d4:	f000 fc42 	bl	8001b5c <USART2_write>
	TIMER4_delay(5);
 80012d8:	2005      	movs	r0, #5
 80012da:	f000 f9af 	bl	800163c <TIMER4_delay>
	return registeration_Handler();
 80012de:	f7ff f855 	bl	800038c <registeration_Handler>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	080031d4 	.word	0x080031d4
 80012ec:	08003214 	.word	0x08003214
 80012f0:	08003234 	.word	0x08003234
 80012f4:	080032b0 	.word	0x080032b0
 80012f8:	080032fc 	.word	0x080032fc
 80012fc:	08003310 	.word	0x08003310
 8001300:	20000e3c 	.word	0x20000e3c
 8001304:	0800333c 	.word	0x0800333c
 8001308:	08003380 	.word	0x08003380
 800130c:	080033a4 	.word	0x080033a4
 8001310:	20000df8 	.word	0x20000df8
 8001314:	080033d8 	.word	0x080033d8
 8001318:	08003418 	.word	0x08003418
 800131c:	0800345c 	.word	0x0800345c

08001320 <SYSTEM_CONTROL_monitor_switch_state>:

void SYSTEM_CONTROL_monitor_switch_state(uint32_t seconds){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	if(TIMER2_timeout_done()){
 8001328:	f000 f9b2 	bl	8001690 <TIMER2_timeout_done>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <SYSTEM_CONTROL_monitor_switch_state+0x1e>
		QUEUE_add_event(control_Handler);
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <SYSTEM_CONTROL_monitor_switch_state+0x28>)
 8001334:	f7ff fcde 	bl	8000cf4 <QUEUE_add_event>
		TIMER2_set_timeout(seconds);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f997 	bl	800166c <TIMER2_set_timeout>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	080002ed 	.word	0x080002ed

0800134c <__NVIC_SetPriorityGrouping>:
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <TIMER2_init>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;


void TIMER2_init(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <TIMER2_init+0x7c>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <TIMER2_init+0x7c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001434:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 800143a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8001456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 8001466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001476:	2007      	movs	r0, #7
 8001478:	f7ff ff68 	bl	800134c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800147c:	2100      	movs	r1, #0
 800147e:	201c      	movs	r0, #28
 8001480:	f7ff ffa4 	bl	80013cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8001484:	201c      	movs	r0, #28
 8001486:	f7ff ff85 	bl	8001394 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800148a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <TIMER2_init+0x80>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <TIMER2_init+0x80>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	20000588 	.word	0x20000588

080014a4 <TIMER3_init>:

void TIMER3_init(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <TIMER3_init+0x6c>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <TIMER3_init+0x6c>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <TIMER3_init+0x70>)
 80014b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <TIMER3_init+0x70>)
 80014be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <TIMER3_init+0x70>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <TIMER3_init+0x70>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <TIMER3_init+0x70>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <TIMER3_init+0x70>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <TIMER3_init+0x70>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <TIMER3_init+0x70>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80014ea:	2007      	movs	r0, #7
 80014ec:	f7ff ff2e 	bl	800134c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80014f0:	2100      	movs	r1, #0
 80014f2:	201d      	movs	r0, #29
 80014f4:	f7ff ff6a 	bl	80013cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 80014f8:	201d      	movs	r0, #29
 80014fa:	f7ff ff4b 	bl	8001394 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80014fe:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <TIMER3_init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <TIMER3_init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	40000400 	.word	0x40000400
 8001518:	20000590 	.word	0x20000590

0800151c <TIMER4_init>:

void TIMER4_init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <TIMER4_init+0x6c>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <TIMER4_init+0x6c>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <TIMER4_init+0x70>)
 800152e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <TIMER4_init+0x70>)
 8001536:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <TIMER4_init+0x70>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <TIMER4_init+0x70>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <TIMER4_init+0x70>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <TIMER4_init+0x70>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <TIMER4_init+0x70>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <TIMER4_init+0x70>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001562:	2007      	movs	r0, #7
 8001564:	f7ff fef2 	bl	800134c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001568:	2100      	movs	r1, #0
 800156a:	201e      	movs	r0, #30
 800156c:	f7ff ff2e 	bl	80013cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 8001570:	201e      	movs	r0, #30
 8001572:	f7ff ff0f 	bl	8001394 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001576:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <TIMER4_init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <TIMER4_init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	40000800 	.word	0x40000800
 8001590:	20000598 	.word	0x20000598

08001594 <TIMER2_enable>:


void TIMER2_enable(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8001598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <TIMER3_enable>:

void TIMER3_enable(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <TIMER3_enable+0x18>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <TIMER3_enable+0x18>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40000400 	.word	0x40000400

080015cc <TIMER4_enable>:

void TIMER4_enable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <TIMER4_enable+0x18>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <TIMER4_enable+0x18>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40000800 	.word	0x40000800

080015e8 <TIMER2_disable>:


void TIMER2_disable(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <TIMER3_disable>:

void TIMER3_disable(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <TIMER3_disable+0x18>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <TIMER3_disable+0x18>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40000400 	.word	0x40000400

08001620 <TIMER4_disable>:

void TIMER4_disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <TIMER4_disable+0x18>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <TIMER4_disable+0x18>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40000800 	.word	0x40000800

0800163c <TIMER4_delay>:
	TIMER3_disable();

}

void TIMER4_delay(uint32_t num_of_sec)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	TIMER4_enable();
 8001644:	f7ff ffc2 	bl	80015cc <TIMER4_enable>

	timer4.countTicks = 0;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <TIMER4_delay+0x2c>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 800164e:	bf00      	nop
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <TIMER4_delay+0x2c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d8fa      	bhi.n	8001650 <TIMER4_delay+0x14>

	TIMER4_disable();
 800165a:	f7ff ffe1 	bl	8001620 <TIMER4_disable>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000598 	.word	0x20000598

0800166c <TIMER2_set_timeout>:


void TIMER2_set_timeout(uint32_t num_of_sec)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	timer2.targetTick = num_of_sec;
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <TIMER2_set_timeout+0x20>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6053      	str	r3, [r2, #4]
	timer2.countTicks = 0;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <TIMER2_set_timeout+0x20>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
	TIMER2_enable();
 8001680:	f7ff ff88 	bl	8001594 <TIMER2_enable>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000588 	.word	0x20000588

08001690 <TIMER2_timeout_done>:

BOOL TIMER2_timeout_done(void){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <TIMER2_timeout_done+0x20>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <TIMER2_timeout_done+0x20>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d303      	bcc.n	80016a8 <TIMER2_timeout_done+0x18>

		TIMER2_disable();
 80016a0:	f7ff ffa2 	bl	80015e8 <TIMER2_disable>
		return TRUE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <TIMER2_timeout_done+0x1a>
	}
	return FALSE;
 80016a8:	2300      	movs	r3, #0

}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000588 	.word	0x20000588

080016b4 <TIMER3_set_timeout>:


void TIMER3_set_timeout(uint32_t num_of_sec)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <TIMER3_set_timeout+0x20>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6053      	str	r3, [r2, #4]
	timer3.countTicks = 0;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <TIMER3_set_timeout+0x20>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
	TIMER3_enable();
 80016c8:	f7ff ff72 	bl	80015b0 <TIMER3_enable>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000590 	.word	0x20000590

080016d8 <TIMER3_timeout_done>:

BOOL TIMER3_timeout_done(void){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <TIMER3_timeout_done+0x20>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <TIMER3_timeout_done+0x20>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d303      	bcc.n	80016f0 <TIMER3_timeout_done+0x18>

		TIMER3_disable();
 80016e8:	f7ff ff8c 	bl	8001604 <TIMER3_disable>
		return TRUE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <TIMER3_timeout_done+0x1a>
	}
	return FALSE;
 80016f0:	2300      	movs	r3, #0

}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000590 	.word	0x20000590

080016fc <TIMER4_set_timeout>:


void TIMER4_set_timeout(uint32_t num_of_seconds)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	timer4.targetTick = num_of_seconds;
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <TIMER4_set_timeout+0x20>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6053      	str	r3, [r2, #4]
	timer4.countTicks = 0;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <TIMER4_set_timeout+0x20>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	TIMER4_enable();
 8001710:	f7ff ff5c 	bl	80015cc <TIMER4_enable>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000598 	.word	0x20000598

08001720 <TIMER4_timeout_done>:

BOOL TIMER4_timeout_done(void){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

	if(timer4.countTicks >= timer4.targetTick){
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <TIMER4_timeout_done+0x20>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <TIMER4_timeout_done+0x20>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d303      	bcc.n	8001738 <TIMER4_timeout_done+0x18>

		TIMER4_disable();
 8001730:	f7ff ff76 	bl	8001620 <TIMER4_disable>
		return TRUE;
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <TIMER4_timeout_done+0x1a>
	}
	return FALSE;
 8001738:	2300      	movs	r3, #0

}
 800173a:	4618      	mov	r0, r3
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000598 	.word	0x20000598

08001744 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8001748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d115      	bne.n	8001782 <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~(0x0001);
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <TIM2_IRQHandler+0x48>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <TIM2_IRQHandler+0x48>)
 800176e:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer2.countTicks == MAX_COUNT){
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <TIM2_IRQHandler+0x48>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001778:	4293      	cmp	r3, r2
 800177a:	d102      	bne.n	8001782 <TIM2_IRQHandler+0x3e>
			timer2.countTicks = 0;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <TIM2_IRQHandler+0x48>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER2\r\n"));//For test


}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000588 	.word	0x20000588

08001790 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <TIM3_IRQHandler+0x40>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b01      	cmp	r3, #1
 800179e:	d113      	bne.n	80017c8 <TIM3_IRQHandler+0x38>
	{
		TIM3->SR &= ~(0x0001);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <TIM3_IRQHandler+0x40>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <TIM3_IRQHandler+0x40>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <TIM3_IRQHandler+0x44>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <TIM3_IRQHandler+0x44>)
 80017b4:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer3.countTicks == MAX_COUNT){
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <TIM3_IRQHandler+0x44>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <TIM3_IRQHandler+0x38>
			timer3.countTicks = 0;
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <TIM3_IRQHandler+0x44>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER3\r\n"));//For test


}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40000400 	.word	0x40000400
 80017d4:	20000590 	.word	0x20000590

080017d8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <TIM4_IRQHandler+0x40>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d113      	bne.n	8001810 <TIM4_IRQHandler+0x38>
	{
		TIM4->SR &= ~(0x0001);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <TIM4_IRQHandler+0x40>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <TIM4_IRQHandler+0x40>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <TIM4_IRQHandler+0x44>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <TIM4_IRQHandler+0x44>)
 80017fc:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer4.countTicks == MAX_COUNT){
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <TIM4_IRQHandler+0x44>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001806:	4293      	cmp	r3, r2
 8001808:	d102      	bne.n	8001810 <TIM4_IRQHandler+0x38>
			timer4.countTicks = 0;
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <TIM4_IRQHandler+0x44>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
		}

	}
	// USART2_write((uint8_t*)("\r\nTIMER4\r\n"));//For test

}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40000800 	.word	0x40000800
 800181c:	20000598 	.word	0x20000598

08001820 <__NVIC_SetPriorityGrouping>:
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4906      	ldr	r1, [pc, #24]	; (800189c <__NVIC_EnableIRQ+0x34>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <USART1_NEW_LINE_FOUND_get>:

static uint8_t *START;  // for search UART2_write_line
static uint8_t *END;  // for search


BOOL USART1_NEW_LINE_FOUND_get(void){
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	return usart1.new_line_found;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <USART1_NEW_LINE_FOUND_get+0x14>)
 80018fa:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200009b4 	.word	0x200009b4

0800190c <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	usart1.new_line_read = TRUE;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <USART1_NEW_LINE_READ_set+0x14>)
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	200009b4 	.word	0x200009b4

08001924 <USART2_NEW_LINE_FOUND_get>:


BOOL USART2_NEW_LINE_FOUND_get(void){
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return usart2.new_line_found;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <USART2_NEW_LINE_FOUND_get+0x14>)
 800192a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200005a0 	.word	0x200005a0

0800193c <USART2_NEW_LINE_READ_set>:

void USART2_NEW_LINE_READ_set(void){
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	usart2.new_line_read = TRUE;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <USART2_NEW_LINE_READ_set+0x14>)
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200005a0 	.word	0x200005a0

08001954 <USART2_init>:



void USART2_init(){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	/*This program works when TeraTerm speed is set to 9600 and USART_BRR is set to 0x34D.*/

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <USART2_init+0xa0>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <USART2_init+0xa0>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <USART2_init+0xa4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <USART2_init+0xa4>)
 800196a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800196e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <USART2_init+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <USART2_init+0xa4>)
 8001976:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800197a:	6013      	str	r3, [r2, #0]

	/*Configure USART2 Rx (PA3) as Input*/
	GPIOA->CRL &= 0xFFFF0FFF; //Leave all bits as they are except for bit 3 (see reference manual 9.2.2)
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <USART2_init+0xa4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <USART2_init+0xa4>)
 8001982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001986:	6013      	str	r3, [r2, #0]
	//For Input Pull-Up (See reference manual p. 167)
	GPIOA->CRL |= 0x00008000; //configure as input with pull up/pull down (see reference manual 9.2.2).
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <USART2_init+0xa4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <USART2_init+0xa4>)
 800198e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001992:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= 0x00000008;//(reference manual p. 161 and 9.2.4)
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <USART2_init+0xa4>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <USART2_init+0xa4>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see reference manual 8.3.8)
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <USART2_init+0xa0>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <USART2_init+0xa0>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019aa:	61d3      	str	r3, [r2, #28]
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO


	/*Following directions RM p. 792 (Setting Tx procesure)*/
	/*Following directions RM p. 795 (Setting Rx procesure) */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <USART2_init+0xa8>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <USART2_init+0xa8>)
 80019b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b6:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <USART2_init+0xa8>)
 80019ba:	f240 324d 	movw	r2, #845	; 0x34d
 80019be:	609a      	str	r2, [r3, #8]

	/*Enable USART Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <USART2_init+0xa8>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <USART2_init+0xa8>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
	/*Enable USART Receive*/
	//USART2->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)

	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART2->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <USART2_init+0xa8>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <USART2_init+0xa8>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80019da:	2007      	movs	r0, #7
 80019dc:	f7ff ff20 	bl	8001820 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80019e0:	2100      	movs	r1, #0
 80019e2:	2026      	movs	r0, #38	; 0x26
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
 80019e8:	2026      	movs	r0, #38	; 0x26
 80019ea:	f7ff ff3d 	bl	8001868 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80019ee:	b662      	cpsie	i
	__enable_irq();
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	40004400 	.word	0x40004400

08001a00 <USART1_init>:

void USART1_init(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <USART1_init+0xac>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <USART1_init+0xac>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <USART1_init+0xb0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <USART1_init+0xb0>)
 8001a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a1a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <USART1_init+0xb0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <USART1_init+0xb0>)
 8001a22:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001a26:	6053      	str	r3, [r2, #4]


	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <USART1_init+0xb0>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <USART1_init+0xb0>)
 8001a2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a32:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <USART1_init+0xb0>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <USART1_init+0xb0>)
 8001a3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a3e:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <USART1_init+0xb0>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <USART1_init+0xb0>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <USART1_init+0xac>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a16      	ldr	r2, [pc, #88]	; (8001aac <USART1_init+0xac>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <USART1_init+0xb4>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <USART1_init+0xb4>)
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a62:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <USART1_init+0xb4>)
 8001a66:	2245      	movs	r2, #69	; 0x45
 8001a68:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <USART1_init+0xb4>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <USART1_init+0xb4>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <USART1_init+0xb4>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <USART1_init+0xb4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a82:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <USART1_init+0xb4>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <USART1_init+0xb4>)
 8001a8a:	f043 0320 	orr.w	r3, r3, #32
 8001a8e:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001a90:	2007      	movs	r0, #7
 8001a92:	f7ff fec5 	bl	8001820 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001a96:	2100      	movs	r1, #0
 8001a98:	2025      	movs	r0, #37	; 0x25
 8001a9a:	f7ff ff01 	bl	80018a0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8001a9e:	2025      	movs	r0, #37	; 0x25
 8001aa0:	f7ff fee2 	bl	8001868 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001aa4:	b662      	cpsie	i
	__enable_irq();

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40013800 	.word	0x40013800

08001ab8 <USART2_enable_Rx>:



void USART2_enable_Rx(void){
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

	USART2->CR1 |= 0x00000004;// set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <USART2_enable_Rx+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a03      	ldr	r2, [pc, #12]	; (8001ad0 <USART2_enable_Rx+0x18>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	60d3      	str	r3, [r2, #12]

}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <USART2_disable_Rx>:

void USART2_disable_Rx(void){
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(0x00000004);// reset the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <USART2_disable_Rx+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <USART2_disable_Rx+0x18>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	60d3      	str	r3, [r2, #12]

}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40004400 	.word	0x40004400

08001af0 <USART2_set_buffer_Tx>:

void USART2_set_buffer_Tx(uint8_t *msg){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	2100      	movs	r1, #0
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <USART2_set_buffer_Tx+0x3c>)
 8001b00:	f000 fb99 	bl	8002236 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <USART2_set_buffer_Tx+0x3c>)
 8001b08:	f000 fbbe 	bl	8002288 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fb2f 	bl	8000170 <strlen>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <USART2_set_buffer_Tx+0x3c>)
 8001b16:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}

	usart2.write_index = 0;
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <USART2_set_buffer_Tx+0x3c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200005a0 	.word	0x200005a0

08001b30 <USART2_set_buffer_Rx>:

void USART2_set_buffer_Rx(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

	memset(usart2.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <USART2_set_buffer_Rx+0x24>)
 8001b3c:	f000 fb7b 	bl	8002236 <memset>
	usart2.Rx_len = 0;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <USART2_set_buffer_Rx+0x28>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart2.read_index = 0;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <USART2_set_buffer_Rx+0x28>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200007a0 	.word	0x200007a0
 8001b58:	200005a0 	.word	0x200005a0

08001b5c <USART2_write>:

void USART2_write(uint8_t* msg){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with msg*/
	USART2_set_buffer_Tx(msg);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ffc3 	bl	8001af0 <USART2_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART2_set_buffer_Rx();
 8001b6a:	f7ff ffe1 	bl	8001b30 <USART2_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart2.new_line_found = FALSE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <USART2_write+0x84>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart2.new_line_read = TRUE;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <USART2_write+0x84>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	while(usart2.write_index < usart2.Tx_len)
 8001b7e:	e014      	b.n	8001baa <USART2_write+0x4e>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001b80:	bf00      	nop
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <USART2_write+0x88>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f9      	beq.n	8001b82 <USART2_write+0x26>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <USART2_write+0x84>)
 8001b90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <USART2_write+0x84>)
 8001b96:	5cd2      	ldrb	r2, [r2, r3]
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <USART2_write+0x88>)
 8001b9a:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <USART2_write+0x84>)
 8001b9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <USART2_write+0x84>)
 8001ba6:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <USART2_write+0x84>)
 8001bac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <USART2_write+0x84>)
 8001bb2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3e2      	bcc.n	8001b80 <USART2_write+0x24>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001bba:	bf00      	nop
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <USART2_write+0x88>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	d1f9      	bne.n	8001bbc <USART2_write+0x60>
	usart2.write_index = 0;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <USART2_write+0x84>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <USART2_write+0x84>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200005a0 	.word	0x200005a0
 8001be4:	40004400 	.word	0x40004400

08001be8 <USART2_write_line>:

void USART2_write_line(uint8_t *start, uint8_t *end){
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4833      	ldr	r0, [pc, #204]	; (8001cc8 <USART2_write_line+0xe0>)
 8001bfa:	f000 fb1c 	bl	8002236 <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c08:	3301      	adds	r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0c      	bge.n	8001c28 <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <USART2_write_line+0xe4>)
 8001c12:	4614      	mov	r4, r2
 8001c14:	461d      	mov	r5, r3
 8001c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c20:	2213      	movs	r2, #19
 8001c22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001c26:	e01a      	b.n	8001c5e <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		while(start < end){
 8001c3a:	e00c      	b.n	8001c56 <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	460a      	mov	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
			start++;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
			i++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
		while(start < end){
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3ee      	bcc.n	8001c3c <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

	while(usart2.write_index < usart2.Tx_len)
 8001c66:	e014      	b.n	8001c92 <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001c68:	bf00      	nop
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <USART2_write_line+0xe8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f9      	beq.n	8001c6a <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c78:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c7e:	5cd2      	ldrb	r2, [r2, r3]
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <USART2_write_line+0xe8>)
 8001c82:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c86:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c8e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c94:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <USART2_write_line+0xe0>)
 8001c9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3e2      	bcc.n	8001c68 <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001ca2:	bf00      	nop
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <USART2_write_line+0xe8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	d1f9      	bne.n	8001ca4 <USART2_write_line+0xbc>
	usart2.write_index = 0;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <USART2_write_line+0xe0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <USART2_write_line+0xe0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc8:	200005a0 	.word	0x200005a0
 8001ccc:	08003464 	.word	0x08003464
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <USART2_read_buffer_Rx>:

BOOL USART2_read_buffer_Rx(uint32_t dest_size, uint8_t *dest){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]


	memset(dest, '\0', dest_size*sizeof(uint8_t));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f000 faa7 	bl	8002236 <memset>
	if((usart2.Rx_len + 1) < dest_size){
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <USART2_read_buffer_Rx+0x60>)
 8001cea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001cee:	3301      	adds	r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d919      	bls.n	8001d2a <USART2_read_buffer_Rx+0x56>

		uint32_t i = 0; // Rx index
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001cfa:	e00c      	b.n	8001d16 <USART2_read_buffer_Rx+0x42>
			dest[i] = usart2.Rx[i];
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	490c      	ldr	r1, [pc, #48]	; (8001d34 <USART2_read_buffer_Rx+0x60>)
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	440a      	add	r2, r1
 8001d08:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	701a      	strb	r2, [r3, #0]
			i++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <USART2_read_buffer_Rx+0x60>)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	d1ea      	bne.n	8001cfc <USART2_read_buffer_Rx+0x28>
		}
		return TRUE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <USART2_read_buffer_Rx+0x58>
	}
	return FALSE;
 8001d2a:	2300      	movs	r3, #0

}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200005a0 	.word	0x200005a0

08001d38 <USART2_ok>:

BOOL USART2_ok(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

	if(strstr((const char*)usart2.Rx , (const char*)"ok\r\n")){
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <USART2_ok+0x40>)
 8001d3e:	480f      	ldr	r0, [pc, #60]	; (8001d7c <USART2_ok+0x44>)
 8001d40:	f000 faaa 	bl	8002298 <strstr>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <USART2_ok+0x16>
		return TRUE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e012      	b.n	8001d74 <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"OK\r\n")){
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <USART2_ok+0x48>)
 8001d50:	480a      	ldr	r0, [pc, #40]	; (8001d7c <USART2_ok+0x44>)
 8001d52:	f000 faa1 	bl	8002298 <strstr>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <USART2_ok+0x28>
		return TRUE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e009      	b.n	8001d74 <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"Ok\r\n")){
 8001d60:	4908      	ldr	r1, [pc, #32]	; (8001d84 <USART2_ok+0x4c>)
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <USART2_ok+0x44>)
 8001d64:	f000 fa98 	bl	8002298 <strstr>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <USART2_ok+0x3a>
		return TRUE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <USART2_ok+0x3c>
	}
	return FALSE;
 8001d72:	2300      	movs	r3, #0

}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	08003478 	.word	0x08003478
 8001d7c:	200007a0 	.word	0x200007a0
 8001d80:	08003480 	.word	0x08003480
 8001d84:	08003488 	.word	0x08003488

08001d88 <USART1_write>:





void USART1_write(uint8_t *command){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	USART1_set_buffer_Tx(command);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f83f 	bl	8001e14 <USART1_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART1_set_buffer_Rx();
 8001d96:	f000 f85d 	bl	8001e54 <USART1_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart1.new_line_found = FALSE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <USART1_write+0x84>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart1.new_line_read = TRUE;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <USART1_write+0x84>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001daa:	e014      	b.n	8001dd6 <USART1_write+0x4e>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001dac:	bf00      	nop
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <USART1_write+0x88>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f9      	beq.n	8001dae <USART1_write+0x26>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <USART1_write+0x84>)
 8001dbc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <USART1_write+0x84>)
 8001dc2:	5cd2      	ldrb	r2, [r2, r3]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <USART1_write+0x88>)
 8001dc6:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <USART1_write+0x84>)
 8001dca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <USART1_write+0x84>)
 8001dd2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <USART1_write+0x84>)
 8001dd8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <USART1_write+0x84>)
 8001dde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3e2      	bcc.n	8001dac <USART1_write+0x24>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001de6:	bf00      	nop
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <USART1_write+0x88>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	2b40      	cmp	r3, #64	; 0x40
 8001df2:	d1f9      	bne.n	8001de8 <USART1_write+0x60>
	usart1.write_index = 0;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <USART1_write+0x84>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <USART1_write+0x84>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200009b4 	.word	0x200009b4
 8001e10:	40013800 	.word	0x40013800

08001e14 <USART1_set_buffer_Tx>:

void USART1_set_buffer_Tx(uint8_t *command){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e20:	2100      	movs	r1, #0
 8001e22:	480b      	ldr	r0, [pc, #44]	; (8001e50 <USART1_set_buffer_Tx+0x3c>)
 8001e24:	f000 fa07 	bl	8002236 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <USART1_set_buffer_Tx+0x3c>)
 8001e2c:	f000 fa2c 	bl	8002288 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe f99d 	bl	8000170 <strlen>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <USART1_set_buffer_Tx+0x3c>)
 8001e3a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <USART1_set_buffer_Tx+0x3c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200009b4 	.word	0x200009b4

08001e54 <USART1_set_buffer_Rx>:

void USART1_set_buffer_Rx(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4809      	ldr	r0, [pc, #36]	; (8001e84 <USART1_set_buffer_Rx+0x30>)
 8001e60:	f000 f9e9 	bl	8002236 <memset>
	usart1.Rx_len = 0;
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <USART1_set_buffer_Rx+0x34>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <USART1_set_buffer_Rx+0x34>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <USART1_set_buffer_Rx+0x38>)
 8001e76:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <USART1_set_buffer_Rx+0x30>)
 8001e78:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <USART1_set_buffer_Rx+0x3c>)
 8001e7c:	4a01      	ldr	r2, [pc, #4]	; (8001e84 <USART1_set_buffer_Rx+0x30>)
 8001e7e:	601a      	str	r2, [r3, #0]

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000bb4 	.word	0x20000bb4
 8001e88:	200009b4 	.word	0x200009b4
 8001e8c:	20000dcc 	.word	0x20000dcc
 8001e90:	20000dd0 	.word	0x20000dd0

08001e94 <USART1_search_buffer_Rx>:

STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <USART1_search_buffer_Rx+0x9c>)
 8001ea0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eaa:	d236      	bcs.n	8001f1a <USART1_search_buffer_Rx+0x86>

		START = END;
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <USART1_search_buffer_Rx+0xa0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <USART1_search_buffer_Rx+0xa4>)
 8001eb2:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <USART1_search_buffer_Rx+0x9c>)
 8001eb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001eba:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <USART1_search_buffer_Rx+0xa8>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <USART1_search_buffer_Rx+0xa0>)
 8001ec0:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	481d      	ldr	r0, [pc, #116]	; (8001f3c <USART1_search_buffer_Rx+0xa8>)
 8001ec6:	f000 f9e7 	bl	8002298 <strstr>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <USART1_search_buffer_Rx+0xa4>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <USART1_search_buffer_Rx+0xa0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7ff fe84 	bl	8001be8 <USART2_write_line>
			return PASS;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e021      	b.n	8001f28 <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	4815      	ldr	r0, [pc, #84]	; (8001f3c <USART1_search_buffer_Rx+0xa8>)
 8001ee8:	f000 f9d6 	bl	8002298 <strstr>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <USART1_search_buffer_Rx+0xa4>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <USART1_search_buffer_Rx+0xa0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff fe73 	bl	8001be8 <USART2_write_line>
			return FAIL;
 8001f02:	2302      	movs	r3, #2
 8001f04:	e010      	b.n	8001f28 <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <USART1_search_buffer_Rx+0xa4>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <USART1_search_buffer_Rx+0xa0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f7ff fe69 	bl	8001be8 <USART2_write_line>
			return STANDBY;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e006      	b.n	8001f28 <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8001f1a:	4809      	ldr	r0, [pc, #36]	; (8001f40 <USART1_search_buffer_Rx+0xac>)
 8001f1c:	f7ff fe1e 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <USART1_search_buffer_Rx+0xa8>)
 8001f22:	f7ff fe1b 	bl	8001b5c <USART2_write>
		return FAIL;
 8001f26:	2302      	movs	r3, #2
	}

}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200009b4 	.word	0x200009b4
 8001f34:	20000dd0 	.word	0x20000dd0
 8001f38:	20000dcc 	.word	0x20000dcc
 8001f3c:	20000bb4 	.word	0x20000bb4
 8001f40:	08003490 	.word	0x08003490

08001f44 <USART1_check_state_buffer_Rx>:

SWITCH_STATE USART1_check_state_buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <USART1_check_state_buffer_Rx+0xb8>)
 8001f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f56:	3301      	adds	r3, #1
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d242      	bcs.n	8001fe4 <USART1_check_state_buffer_Rx+0xa0>

		START = END;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <USART1_check_state_buffer_Rx+0xbc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <USART1_check_state_buffer_Rx+0xc0>)
 8001f64:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <USART1_check_state_buffer_Rx+0xb8>)
 8001f68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <USART1_check_state_buffer_Rx+0xbc>)
 8001f72:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	4824      	ldr	r0, [pc, #144]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001f78:	f000 f98e 	bl	8002298 <strstr>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <USART1_check_state_buffer_Rx+0x52>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); //write response to screen
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <USART1_check_state_buffer_Rx+0xc0>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <USART1_check_state_buffer_Rx+0xbc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fe2b 	bl	8001be8 <USART2_write_line>
			return (uint32_t)ON;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e02d      	b.n	8001ff2 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001f9a:	f000 f97d 	bl	8002298 <strstr>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <USART1_check_state_buffer_Rx+0x74>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <USART1_check_state_buffer_Rx+0xc0>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <USART1_check_state_buffer_Rx+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7ff fe1a 	bl	8001be8 <USART2_write_line>
			return (uint32_t)OFF;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e01c      	b.n	8001ff2 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4813      	ldr	r0, [pc, #76]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001fbc:	f000 f96c 	bl	8002298 <strstr>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <USART1_check_state_buffer_Rx+0x96>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <USART1_check_state_buffer_Rx+0xc0>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <USART1_check_state_buffer_Rx+0xbc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7ff fe09 	bl	8001be8 <USART2_write_line>
			return (uint32_t)NO_PATH;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e00b      	b.n	8001ff2 <USART1_check_state_buffer_Rx+0xae>
		}
		else{
			USART2_write((uint8_t*)usart1.Rx);//for debuging
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001fdc:	f7ff fdbe 	bl	8001b5c <USART2_write>
			return (uint32_t)NON;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <USART1_check_state_buffer_Rx+0xae>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <USART1_check_state_buffer_Rx+0xc8>)
 8001fe6:	f7ff fdb9 	bl	8001b5c <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <USART1_check_state_buffer_Rx+0xc4>)
 8001fec:	f7ff fdb6 	bl	8001b5c <USART2_write>
		return (uint32_t)NO_PATH;
 8001ff0:	2302      	movs	r3, #2
	}

}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200009b4 	.word	0x200009b4
 8002000:	20000dd0 	.word	0x20000dd0
 8002004:	20000dcc 	.word	0x20000dcc
 8002008:	20000bb4 	.word	0x20000bb4
 800200c:	08003490 	.word	0x08003490

08002010 <USART1_IRQHandler>:


/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <USART1_IRQHandler+0xa8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b20      	cmp	r3, #32
 800201e:	d146      	bne.n	80020ae <USART1_IRQHandler+0x9e>

		c = USART1->DR; // clear RXNE bit
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <USART1_IRQHandler+0xa8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <USART1_IRQHandler+0xac>)
 8002028:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800202c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002030:	3301      	adds	r3, #1
 8002032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002036:	d303      	bcc.n	8002040 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800203a:	2200      	movs	r2, #0
 800203c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <USART1_IRQHandler+0xb0>)
 8002042:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <USART1_IRQHandler+0xac>)
 8002048:	7811      	ldrb	r1, [r2, #0]
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800204c:	4413      	add	r3, r2
 800204e:	460a      	mov	r2, r1
 8002050:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <USART1_IRQHandler+0xb0>)
 8002056:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800205a:	3301      	adds	r3, #1
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800205e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <USART1_IRQHandler+0xb0>)
 8002064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002068:	3301      	adds	r3, #1
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800206c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart1.new_line_read){
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <USART1_IRQHandler+0xac>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b0a      	cmp	r3, #10
 8002076:	d10d      	bne.n	8002094 <USART1_IRQHandler+0x84>
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800207a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <USART1_IRQHandler+0x84>
			usart1.new_line_found = TRUE;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <USART1_IRQHandler+0xb0>)
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart1.new_line_read = FALSE;
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart1.new_line_found = FALSE;
		}

	}

}
 8002092:	e00c      	b.n	80020ae <USART1_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart1.new_line_read){
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <USART1_IRQHandler+0xac>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b0a      	cmp	r3, #10
 800209a:	d008      	beq.n	80020ae <USART1_IRQHandler+0x9e>
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <USART1_IRQHandler+0xb0>)
 800209e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <USART1_IRQHandler+0x9e>
			usart1.new_line_found = FALSE;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <USART1_IRQHandler+0xb0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40013800 	.word	0x40013800
 80020bc:	20000dc8 	.word	0x20000dc8
 80020c0:	200009b4 	.word	0x200009b4

080020c4 <USART2_IRQHandler>:

/*USART2 Interrupt Handler - Only Rx is set to have interrupts*/
void USART2_IRQHandler(void){
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

	if(((USART2->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <USART2_IRQHandler+0xa8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d146      	bne.n	8002162 <USART2_IRQHandler+0x9e>

		c = USART2->DR; // clear RXNE bit
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <USART2_IRQHandler+0xa8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <USART2_IRQHandler+0xac>)
 80020dc:	701a      	strb	r2, [r3, #0]
		if((usart2.read_index + 1) >= BUFF_SIZE){
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <USART2_IRQHandler+0xb0>)
 80020e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020e4:	3301      	adds	r3, #1
 80020e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ea:	d303      	bcc.n	80020f4 <USART2_IRQHandler+0x30>
			usart2.read_index = 0;
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <USART2_IRQHandler+0xb0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart2.Rx[usart2.read_index] = (uint8_t)(c & 0xFF);
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <USART2_IRQHandler+0xb0>)
 80020f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <USART2_IRQHandler+0xac>)
 80020fc:	7811      	ldrb	r1, [r2, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002100:	4413      	add	r3, r2
 8002102:	460a      	mov	r2, r1
 8002104:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart2.read_index++;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <USART2_IRQHandler+0xb0>)
 800210a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800210e:	3301      	adds	r3, #1
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002112:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart2.Rx_len++; // count total chars received
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002118:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800211c:	3301      	adds	r3, #1
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002120:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart2.new_line_read){
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <USART2_IRQHandler+0xac>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b0a      	cmp	r3, #10
 800212a:	d10d      	bne.n	8002148 <USART2_IRQHandler+0x84>
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <USART2_IRQHandler+0xb0>)
 800212e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <USART2_IRQHandler+0x84>
			usart2.new_line_found = TRUE;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart2.new_line_read = FALSE;
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart2.new_line_found = FALSE;
		}

	}

}
 8002146:	e00c      	b.n	8002162 <USART2_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart2.new_line_read){
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <USART2_IRQHandler+0xac>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b0a      	cmp	r3, #10
 800214e:	d008      	beq.n	8002162 <USART2_IRQHandler+0x9e>
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <USART2_IRQHandler+0xb0>)
 8002152:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <USART2_IRQHandler+0x9e>
			usart2.new_line_found = FALSE;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <USART2_IRQHandler+0xb0>)
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40004400 	.word	0x40004400
 8002170:	20000dc8 	.word	0x20000dc8
 8002174:	200005a0 	.word	0x200005a0

08002178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopForever+0xe>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopForever+0x16>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021a2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80021a6:	f000 f817 	bl	80021d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7fe ffb7 	bl	800111c <main>

080021ae <LoopForever>:

LoopForever:
    b LoopForever
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
  ldr   r0, =_estack
 80021b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80021bc:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 80021c0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80021c4:	20000e84 	.word	0x20000e84

080021c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_2_IRQHandler>
	...

080021cc <__errno>:
 80021cc:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <__errno+0x8>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000060 	.word	0x20000060

080021d8 <__libc_init_array>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2500      	movs	r5, #0
 80021dc:	4e0c      	ldr	r6, [pc, #48]	; (8002210 <__libc_init_array+0x38>)
 80021de:	4c0d      	ldr	r4, [pc, #52]	; (8002214 <__libc_init_array+0x3c>)
 80021e0:	1ba4      	subs	r4, r4, r6
 80021e2:	10a4      	asrs	r4, r4, #2
 80021e4:	42a5      	cmp	r5, r4
 80021e6:	d109      	bne.n	80021fc <__libc_init_array+0x24>
 80021e8:	f000 fc58 	bl	8002a9c <_init>
 80021ec:	2500      	movs	r5, #0
 80021ee:	4e0a      	ldr	r6, [pc, #40]	; (8002218 <__libc_init_array+0x40>)
 80021f0:	4c0a      	ldr	r4, [pc, #40]	; (800221c <__libc_init_array+0x44>)
 80021f2:	1ba4      	subs	r4, r4, r6
 80021f4:	10a4      	asrs	r4, r4, #2
 80021f6:	42a5      	cmp	r5, r4
 80021f8:	d105      	bne.n	8002206 <__libc_init_array+0x2e>
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002200:	4798      	blx	r3
 8002202:	3501      	adds	r5, #1
 8002204:	e7ee      	b.n	80021e4 <__libc_init_array+0xc>
 8002206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800220a:	4798      	blx	r3
 800220c:	3501      	adds	r5, #1
 800220e:	e7f2      	b.n	80021f6 <__libc_init_array+0x1e>
 8002210:	080034ec 	.word	0x080034ec
 8002214:	080034ec 	.word	0x080034ec
 8002218:	080034ec 	.word	0x080034ec
 800221c:	080034f0 	.word	0x080034f0

08002220 <memcpy>:
 8002220:	b510      	push	{r4, lr}
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	440a      	add	r2, r1
 8002226:	4291      	cmp	r1, r2
 8002228:	d100      	bne.n	800222c <memcpy+0xc>
 800222a:	bd10      	pop	{r4, pc}
 800222c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002234:	e7f7      	b.n	8002226 <memcpy+0x6>

08002236 <memset>:
 8002236:	4603      	mov	r3, r0
 8002238:	4402      	add	r2, r0
 800223a:	4293      	cmp	r3, r2
 800223c:	d100      	bne.n	8002240 <memset+0xa>
 800223e:	4770      	bx	lr
 8002240:	f803 1b01 	strb.w	r1, [r3], #1
 8002244:	e7f9      	b.n	800223a <memset+0x4>
	...

08002248 <siprintf>:
 8002248:	b40e      	push	{r1, r2, r3}
 800224a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800224e:	b500      	push	{lr}
 8002250:	b09c      	sub	sp, #112	; 0x70
 8002252:	ab1d      	add	r3, sp, #116	; 0x74
 8002254:	9002      	str	r0, [sp, #8]
 8002256:	9006      	str	r0, [sp, #24]
 8002258:	9107      	str	r1, [sp, #28]
 800225a:	9104      	str	r1, [sp, #16]
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <siprintf+0x38>)
 800225e:	4909      	ldr	r1, [pc, #36]	; (8002284 <siprintf+0x3c>)
 8002260:	f853 2b04 	ldr.w	r2, [r3], #4
 8002264:	9105      	str	r1, [sp, #20]
 8002266:	6800      	ldr	r0, [r0, #0]
 8002268:	a902      	add	r1, sp, #8
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f000 f888 	bl	8002380 <_svfiprintf_r>
 8002270:	2200      	movs	r2, #0
 8002272:	9b02      	ldr	r3, [sp, #8]
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	b01c      	add	sp, #112	; 0x70
 8002278:	f85d eb04 	ldr.w	lr, [sp], #4
 800227c:	b003      	add	sp, #12
 800227e:	4770      	bx	lr
 8002280:	20000060 	.word	0x20000060
 8002284:	ffff0208 	.word	0xffff0208

08002288 <strcpy>:
 8002288:	4603      	mov	r3, r0
 800228a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800228e:	f803 2b01 	strb.w	r2, [r3], #1
 8002292:	2a00      	cmp	r2, #0
 8002294:	d1f9      	bne.n	800228a <strcpy+0x2>
 8002296:	4770      	bx	lr

08002298 <strstr>:
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	7803      	ldrb	r3, [r0, #0]
 800229c:	b17b      	cbz	r3, 80022be <strstr+0x26>
 800229e:	4604      	mov	r4, r0
 80022a0:	7823      	ldrb	r3, [r4, #0]
 80022a2:	4620      	mov	r0, r4
 80022a4:	1c66      	adds	r6, r4, #1
 80022a6:	b17b      	cbz	r3, 80022c8 <strstr+0x30>
 80022a8:	1e4a      	subs	r2, r1, #1
 80022aa:	1e63      	subs	r3, r4, #1
 80022ac:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80022b0:	b14d      	cbz	r5, 80022c6 <strstr+0x2e>
 80022b2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80022b6:	4634      	mov	r4, r6
 80022b8:	42af      	cmp	r7, r5
 80022ba:	d0f7      	beq.n	80022ac <strstr+0x14>
 80022bc:	e7f0      	b.n	80022a0 <strstr+0x8>
 80022be:	780b      	ldrb	r3, [r1, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf18      	it	ne
 80022c4:	2000      	movne	r0, #0
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c8:	4618      	mov	r0, r3
 80022ca:	e7fc      	b.n	80022c6 <strstr+0x2e>

080022cc <__ssputs_r>:
 80022cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d0:	688e      	ldr	r6, [r1, #8]
 80022d2:	4682      	mov	sl, r0
 80022d4:	429e      	cmp	r6, r3
 80022d6:	460c      	mov	r4, r1
 80022d8:	4690      	mov	r8, r2
 80022da:	4699      	mov	r9, r3
 80022dc:	d837      	bhi.n	800234e <__ssputs_r+0x82>
 80022de:	898a      	ldrh	r2, [r1, #12]
 80022e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022e4:	d031      	beq.n	800234a <__ssputs_r+0x7e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	6825      	ldr	r5, [r4, #0]
 80022ea:	6909      	ldr	r1, [r1, #16]
 80022ec:	1a6f      	subs	r7, r5, r1
 80022ee:	6965      	ldr	r5, [r4, #20]
 80022f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80022f8:	f109 0301 	add.w	r3, r9, #1
 80022fc:	443b      	add	r3, r7
 80022fe:	429d      	cmp	r5, r3
 8002300:	bf38      	it	cc
 8002302:	461d      	movcc	r5, r3
 8002304:	0553      	lsls	r3, r2, #21
 8002306:	d530      	bpl.n	800236a <__ssputs_r+0x9e>
 8002308:	4629      	mov	r1, r5
 800230a:	f000 fb2d 	bl	8002968 <_malloc_r>
 800230e:	4606      	mov	r6, r0
 8002310:	b950      	cbnz	r0, 8002328 <__ssputs_r+0x5c>
 8002312:	230c      	movs	r3, #12
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f8ca 3000 	str.w	r3, [sl]
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002322:	81a3      	strh	r3, [r4, #12]
 8002324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002328:	463a      	mov	r2, r7
 800232a:	6921      	ldr	r1, [r4, #16]
 800232c:	f7ff ff78 	bl	8002220 <memcpy>
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	6126      	str	r6, [r4, #16]
 800233e:	443e      	add	r6, r7
 8002340:	6026      	str	r6, [r4, #0]
 8002342:	464e      	mov	r6, r9
 8002344:	6165      	str	r5, [r4, #20]
 8002346:	1bed      	subs	r5, r5, r7
 8002348:	60a5      	str	r5, [r4, #8]
 800234a:	454e      	cmp	r6, r9
 800234c:	d900      	bls.n	8002350 <__ssputs_r+0x84>
 800234e:	464e      	mov	r6, r9
 8002350:	4632      	mov	r2, r6
 8002352:	4641      	mov	r1, r8
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	f000 faa1 	bl	800289c <memmove>
 800235a:	68a3      	ldr	r3, [r4, #8]
 800235c:	2000      	movs	r0, #0
 800235e:	1b9b      	subs	r3, r3, r6
 8002360:	60a3      	str	r3, [r4, #8]
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	441e      	add	r6, r3
 8002366:	6026      	str	r6, [r4, #0]
 8002368:	e7dc      	b.n	8002324 <__ssputs_r+0x58>
 800236a:	462a      	mov	r2, r5
 800236c:	f000 fb56 	bl	8002a1c <_realloc_r>
 8002370:	4606      	mov	r6, r0
 8002372:	2800      	cmp	r0, #0
 8002374:	d1e2      	bne.n	800233c <__ssputs_r+0x70>
 8002376:	6921      	ldr	r1, [r4, #16]
 8002378:	4650      	mov	r0, sl
 800237a:	f000 faa9 	bl	80028d0 <_free_r>
 800237e:	e7c8      	b.n	8002312 <__ssputs_r+0x46>

08002380 <_svfiprintf_r>:
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	461d      	mov	r5, r3
 8002386:	898b      	ldrh	r3, [r1, #12]
 8002388:	b09d      	sub	sp, #116	; 0x74
 800238a:	061f      	lsls	r7, r3, #24
 800238c:	4680      	mov	r8, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4616      	mov	r6, r2
 8002392:	d50f      	bpl.n	80023b4 <_svfiprintf_r+0x34>
 8002394:	690b      	ldr	r3, [r1, #16]
 8002396:	b96b      	cbnz	r3, 80023b4 <_svfiprintf_r+0x34>
 8002398:	2140      	movs	r1, #64	; 0x40
 800239a:	f000 fae5 	bl	8002968 <_malloc_r>
 800239e:	6020      	str	r0, [r4, #0]
 80023a0:	6120      	str	r0, [r4, #16]
 80023a2:	b928      	cbnz	r0, 80023b0 <_svfiprintf_r+0x30>
 80023a4:	230c      	movs	r3, #12
 80023a6:	f8c8 3000 	str.w	r3, [r8]
 80023aa:	f04f 30ff 	mov.w	r0, #4294967295
 80023ae:	e0c8      	b.n	8002542 <_svfiprintf_r+0x1c2>
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	6163      	str	r3, [r4, #20]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9309      	str	r3, [sp, #36]	; 0x24
 80023b8:	2320      	movs	r3, #32
 80023ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023be:	2330      	movs	r3, #48	; 0x30
 80023c0:	f04f 0b01 	mov.w	fp, #1
 80023c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023c8:	9503      	str	r5, [sp, #12]
 80023ca:	4637      	mov	r7, r6
 80023cc:	463d      	mov	r5, r7
 80023ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80023d2:	b10b      	cbz	r3, 80023d8 <_svfiprintf_r+0x58>
 80023d4:	2b25      	cmp	r3, #37	; 0x25
 80023d6:	d13e      	bne.n	8002456 <_svfiprintf_r+0xd6>
 80023d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80023dc:	d00b      	beq.n	80023f6 <_svfiprintf_r+0x76>
 80023de:	4653      	mov	r3, sl
 80023e0:	4632      	mov	r2, r6
 80023e2:	4621      	mov	r1, r4
 80023e4:	4640      	mov	r0, r8
 80023e6:	f7ff ff71 	bl	80022cc <__ssputs_r>
 80023ea:	3001      	adds	r0, #1
 80023ec:	f000 80a4 	beq.w	8002538 <_svfiprintf_r+0x1b8>
 80023f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023f2:	4453      	add	r3, sl
 80023f4:	9309      	str	r3, [sp, #36]	; 0x24
 80023f6:	783b      	ldrb	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 809d 	beq.w	8002538 <_svfiprintf_r+0x1b8>
 80023fe:	2300      	movs	r3, #0
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002408:	9304      	str	r3, [sp, #16]
 800240a:	9307      	str	r3, [sp, #28]
 800240c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002410:	931a      	str	r3, [sp, #104]	; 0x68
 8002412:	462f      	mov	r7, r5
 8002414:	2205      	movs	r2, #5
 8002416:	f817 1b01 	ldrb.w	r1, [r7], #1
 800241a:	4850      	ldr	r0, [pc, #320]	; (800255c <_svfiprintf_r+0x1dc>)
 800241c:	f000 fa30 	bl	8002880 <memchr>
 8002420:	9b04      	ldr	r3, [sp, #16]
 8002422:	b9d0      	cbnz	r0, 800245a <_svfiprintf_r+0xda>
 8002424:	06d9      	lsls	r1, r3, #27
 8002426:	bf44      	itt	mi
 8002428:	2220      	movmi	r2, #32
 800242a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800242e:	071a      	lsls	r2, r3, #28
 8002430:	bf44      	itt	mi
 8002432:	222b      	movmi	r2, #43	; 0x2b
 8002434:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002438:	782a      	ldrb	r2, [r5, #0]
 800243a:	2a2a      	cmp	r2, #42	; 0x2a
 800243c:	d015      	beq.n	800246a <_svfiprintf_r+0xea>
 800243e:	462f      	mov	r7, r5
 8002440:	2000      	movs	r0, #0
 8002442:	250a      	movs	r5, #10
 8002444:	9a07      	ldr	r2, [sp, #28]
 8002446:	4639      	mov	r1, r7
 8002448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800244c:	3b30      	subs	r3, #48	; 0x30
 800244e:	2b09      	cmp	r3, #9
 8002450:	d94d      	bls.n	80024ee <_svfiprintf_r+0x16e>
 8002452:	b1b8      	cbz	r0, 8002484 <_svfiprintf_r+0x104>
 8002454:	e00f      	b.n	8002476 <_svfiprintf_r+0xf6>
 8002456:	462f      	mov	r7, r5
 8002458:	e7b8      	b.n	80023cc <_svfiprintf_r+0x4c>
 800245a:	4a40      	ldr	r2, [pc, #256]	; (800255c <_svfiprintf_r+0x1dc>)
 800245c:	463d      	mov	r5, r7
 800245e:	1a80      	subs	r0, r0, r2
 8002460:	fa0b f000 	lsl.w	r0, fp, r0
 8002464:	4318      	orrs	r0, r3
 8002466:	9004      	str	r0, [sp, #16]
 8002468:	e7d3      	b.n	8002412 <_svfiprintf_r+0x92>
 800246a:	9a03      	ldr	r2, [sp, #12]
 800246c:	1d11      	adds	r1, r2, #4
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	9103      	str	r1, [sp, #12]
 8002472:	2a00      	cmp	r2, #0
 8002474:	db01      	blt.n	800247a <_svfiprintf_r+0xfa>
 8002476:	9207      	str	r2, [sp, #28]
 8002478:	e004      	b.n	8002484 <_svfiprintf_r+0x104>
 800247a:	4252      	negs	r2, r2
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	9207      	str	r2, [sp, #28]
 8002482:	9304      	str	r3, [sp, #16]
 8002484:	783b      	ldrb	r3, [r7, #0]
 8002486:	2b2e      	cmp	r3, #46	; 0x2e
 8002488:	d10c      	bne.n	80024a4 <_svfiprintf_r+0x124>
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	2b2a      	cmp	r3, #42	; 0x2a
 800248e:	d133      	bne.n	80024f8 <_svfiprintf_r+0x178>
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	3702      	adds	r7, #2
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	9203      	str	r2, [sp, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	4d2e      	ldr	r5, [pc, #184]	; (8002560 <_svfiprintf_r+0x1e0>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	7839      	ldrb	r1, [r7, #0]
 80024aa:	4628      	mov	r0, r5
 80024ac:	f000 f9e8 	bl	8002880 <memchr>
 80024b0:	b138      	cbz	r0, 80024c2 <_svfiprintf_r+0x142>
 80024b2:	2340      	movs	r3, #64	; 0x40
 80024b4:	1b40      	subs	r0, r0, r5
 80024b6:	fa03 f000 	lsl.w	r0, r3, r0
 80024ba:	9b04      	ldr	r3, [sp, #16]
 80024bc:	3701      	adds	r7, #1
 80024be:	4303      	orrs	r3, r0
 80024c0:	9304      	str	r3, [sp, #16]
 80024c2:	7839      	ldrb	r1, [r7, #0]
 80024c4:	2206      	movs	r2, #6
 80024c6:	4827      	ldr	r0, [pc, #156]	; (8002564 <_svfiprintf_r+0x1e4>)
 80024c8:	1c7e      	adds	r6, r7, #1
 80024ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024ce:	f000 f9d7 	bl	8002880 <memchr>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d038      	beq.n	8002548 <_svfiprintf_r+0x1c8>
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <_svfiprintf_r+0x1e8>)
 80024d8:	bb13      	cbnz	r3, 8002520 <_svfiprintf_r+0x1a0>
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	3307      	adds	r3, #7
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	3308      	adds	r3, #8
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024e8:	444b      	add	r3, r9
 80024ea:	9309      	str	r3, [sp, #36]	; 0x24
 80024ec:	e76d      	b.n	80023ca <_svfiprintf_r+0x4a>
 80024ee:	fb05 3202 	mla	r2, r5, r2, r3
 80024f2:	2001      	movs	r0, #1
 80024f4:	460f      	mov	r7, r1
 80024f6:	e7a6      	b.n	8002446 <_svfiprintf_r+0xc6>
 80024f8:	2300      	movs	r3, #0
 80024fa:	250a      	movs	r5, #10
 80024fc:	4619      	mov	r1, r3
 80024fe:	3701      	adds	r7, #1
 8002500:	9305      	str	r3, [sp, #20]
 8002502:	4638      	mov	r0, r7
 8002504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002508:	3a30      	subs	r2, #48	; 0x30
 800250a:	2a09      	cmp	r2, #9
 800250c:	d903      	bls.n	8002516 <_svfiprintf_r+0x196>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0c8      	beq.n	80024a4 <_svfiprintf_r+0x124>
 8002512:	9105      	str	r1, [sp, #20]
 8002514:	e7c6      	b.n	80024a4 <_svfiprintf_r+0x124>
 8002516:	fb05 2101 	mla	r1, r5, r1, r2
 800251a:	2301      	movs	r3, #1
 800251c:	4607      	mov	r7, r0
 800251e:	e7f0      	b.n	8002502 <_svfiprintf_r+0x182>
 8002520:	ab03      	add	r3, sp, #12
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4622      	mov	r2, r4
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <_svfiprintf_r+0x1ec>)
 8002528:	a904      	add	r1, sp, #16
 800252a:	4640      	mov	r0, r8
 800252c:	f3af 8000 	nop.w
 8002530:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002534:	4681      	mov	r9, r0
 8002536:	d1d6      	bne.n	80024e6 <_svfiprintf_r+0x166>
 8002538:	89a3      	ldrh	r3, [r4, #12]
 800253a:	065b      	lsls	r3, r3, #25
 800253c:	f53f af35 	bmi.w	80023aa <_svfiprintf_r+0x2a>
 8002540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002542:	b01d      	add	sp, #116	; 0x74
 8002544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002548:	ab03      	add	r3, sp, #12
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4622      	mov	r2, r4
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <_svfiprintf_r+0x1ec>)
 8002550:	a904      	add	r1, sp, #16
 8002552:	4640      	mov	r0, r8
 8002554:	f000 f882 	bl	800265c <_printf_i>
 8002558:	e7ea      	b.n	8002530 <_svfiprintf_r+0x1b0>
 800255a:	bf00      	nop
 800255c:	080034b7 	.word	0x080034b7
 8002560:	080034bd 	.word	0x080034bd
 8002564:	080034c1 	.word	0x080034c1
 8002568:	00000000 	.word	0x00000000
 800256c:	080022cd 	.word	0x080022cd

08002570 <_printf_common>:
 8002570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002574:	4691      	mov	r9, r2
 8002576:	461f      	mov	r7, r3
 8002578:	688a      	ldr	r2, [r1, #8]
 800257a:	690b      	ldr	r3, [r1, #16]
 800257c:	4606      	mov	r6, r0
 800257e:	4293      	cmp	r3, r2
 8002580:	bfb8      	it	lt
 8002582:	4613      	movlt	r3, r2
 8002584:	f8c9 3000 	str.w	r3, [r9]
 8002588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800258c:	460c      	mov	r4, r1
 800258e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002592:	b112      	cbz	r2, 800259a <_printf_common+0x2a>
 8002594:	3301      	adds	r3, #1
 8002596:	f8c9 3000 	str.w	r3, [r9]
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	0699      	lsls	r1, r3, #26
 800259e:	bf42      	ittt	mi
 80025a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025a4:	3302      	addmi	r3, #2
 80025a6:	f8c9 3000 	strmi.w	r3, [r9]
 80025aa:	6825      	ldr	r5, [r4, #0]
 80025ac:	f015 0506 	ands.w	r5, r5, #6
 80025b0:	d107      	bne.n	80025c2 <_printf_common+0x52>
 80025b2:	f104 0a19 	add.w	sl, r4, #25
 80025b6:	68e3      	ldr	r3, [r4, #12]
 80025b8:	f8d9 2000 	ldr.w	r2, [r9]
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	42ab      	cmp	r3, r5
 80025c0:	dc29      	bgt.n	8002616 <_printf_common+0xa6>
 80025c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	3300      	adds	r3, #0
 80025ca:	bf18      	it	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	0692      	lsls	r2, r2, #26
 80025d0:	d42e      	bmi.n	8002630 <_printf_common+0xc0>
 80025d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025d6:	4639      	mov	r1, r7
 80025d8:	4630      	mov	r0, r6
 80025da:	47c0      	blx	r8
 80025dc:	3001      	adds	r0, #1
 80025de:	d021      	beq.n	8002624 <_printf_common+0xb4>
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	68e5      	ldr	r5, [r4, #12]
 80025e4:	f003 0306 	and.w	r3, r3, #6
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	bf18      	it	ne
 80025ec:	2500      	movne	r5, #0
 80025ee:	f8d9 2000 	ldr.w	r2, [r9]
 80025f2:	f04f 0900 	mov.w	r9, #0
 80025f6:	bf08      	it	eq
 80025f8:	1aad      	subeq	r5, r5, r2
 80025fa:	68a3      	ldr	r3, [r4, #8]
 80025fc:	6922      	ldr	r2, [r4, #16]
 80025fe:	bf08      	it	eq
 8002600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002604:	4293      	cmp	r3, r2
 8002606:	bfc4      	itt	gt
 8002608:	1a9b      	subgt	r3, r3, r2
 800260a:	18ed      	addgt	r5, r5, r3
 800260c:	341a      	adds	r4, #26
 800260e:	454d      	cmp	r5, r9
 8002610:	d11a      	bne.n	8002648 <_printf_common+0xd8>
 8002612:	2000      	movs	r0, #0
 8002614:	e008      	b.n	8002628 <_printf_common+0xb8>
 8002616:	2301      	movs	r3, #1
 8002618:	4652      	mov	r2, sl
 800261a:	4639      	mov	r1, r7
 800261c:	4630      	mov	r0, r6
 800261e:	47c0      	blx	r8
 8002620:	3001      	adds	r0, #1
 8002622:	d103      	bne.n	800262c <_printf_common+0xbc>
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800262c:	3501      	adds	r5, #1
 800262e:	e7c2      	b.n	80025b6 <_printf_common+0x46>
 8002630:	2030      	movs	r0, #48	; 0x30
 8002632:	18e1      	adds	r1, r4, r3
 8002634:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800263e:	4422      	add	r2, r4
 8002640:	3302      	adds	r3, #2
 8002642:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002646:	e7c4      	b.n	80025d2 <_printf_common+0x62>
 8002648:	2301      	movs	r3, #1
 800264a:	4622      	mov	r2, r4
 800264c:	4639      	mov	r1, r7
 800264e:	4630      	mov	r0, r6
 8002650:	47c0      	blx	r8
 8002652:	3001      	adds	r0, #1
 8002654:	d0e6      	beq.n	8002624 <_printf_common+0xb4>
 8002656:	f109 0901 	add.w	r9, r9, #1
 800265a:	e7d8      	b.n	800260e <_printf_common+0x9e>

0800265c <_printf_i>:
 800265c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002660:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002664:	460c      	mov	r4, r1
 8002666:	7e09      	ldrb	r1, [r1, #24]
 8002668:	b085      	sub	sp, #20
 800266a:	296e      	cmp	r1, #110	; 0x6e
 800266c:	4617      	mov	r7, r2
 800266e:	4606      	mov	r6, r0
 8002670:	4698      	mov	r8, r3
 8002672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002674:	f000 80b3 	beq.w	80027de <_printf_i+0x182>
 8002678:	d822      	bhi.n	80026c0 <_printf_i+0x64>
 800267a:	2963      	cmp	r1, #99	; 0x63
 800267c:	d036      	beq.n	80026ec <_printf_i+0x90>
 800267e:	d80a      	bhi.n	8002696 <_printf_i+0x3a>
 8002680:	2900      	cmp	r1, #0
 8002682:	f000 80b9 	beq.w	80027f8 <_printf_i+0x19c>
 8002686:	2958      	cmp	r1, #88	; 0x58
 8002688:	f000 8083 	beq.w	8002792 <_printf_i+0x136>
 800268c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002690:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002694:	e032      	b.n	80026fc <_printf_i+0xa0>
 8002696:	2964      	cmp	r1, #100	; 0x64
 8002698:	d001      	beq.n	800269e <_printf_i+0x42>
 800269a:	2969      	cmp	r1, #105	; 0x69
 800269c:	d1f6      	bne.n	800268c <_printf_i+0x30>
 800269e:	6820      	ldr	r0, [r4, #0]
 80026a0:	6813      	ldr	r3, [r2, #0]
 80026a2:	0605      	lsls	r5, r0, #24
 80026a4:	f103 0104 	add.w	r1, r3, #4
 80026a8:	d52a      	bpl.n	8002700 <_printf_i+0xa4>
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	da03      	bge.n	80026ba <_printf_i+0x5e>
 80026b2:	222d      	movs	r2, #45	; 0x2d
 80026b4:	425b      	negs	r3, r3
 80026b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80026ba:	486f      	ldr	r0, [pc, #444]	; (8002878 <_printf_i+0x21c>)
 80026bc:	220a      	movs	r2, #10
 80026be:	e039      	b.n	8002734 <_printf_i+0xd8>
 80026c0:	2973      	cmp	r1, #115	; 0x73
 80026c2:	f000 809d 	beq.w	8002800 <_printf_i+0x1a4>
 80026c6:	d808      	bhi.n	80026da <_printf_i+0x7e>
 80026c8:	296f      	cmp	r1, #111	; 0x6f
 80026ca:	d020      	beq.n	800270e <_printf_i+0xb2>
 80026cc:	2970      	cmp	r1, #112	; 0x70
 80026ce:	d1dd      	bne.n	800268c <_printf_i+0x30>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f043 0320 	orr.w	r3, r3, #32
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	e003      	b.n	80026e2 <_printf_i+0x86>
 80026da:	2975      	cmp	r1, #117	; 0x75
 80026dc:	d017      	beq.n	800270e <_printf_i+0xb2>
 80026de:	2978      	cmp	r1, #120	; 0x78
 80026e0:	d1d4      	bne.n	800268c <_printf_i+0x30>
 80026e2:	2378      	movs	r3, #120	; 0x78
 80026e4:	4865      	ldr	r0, [pc, #404]	; (800287c <_printf_i+0x220>)
 80026e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026ea:	e055      	b.n	8002798 <_printf_i+0x13c>
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f2:	1d19      	adds	r1, r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6011      	str	r1, [r2, #0]
 80026f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026fc:	2301      	movs	r3, #1
 80026fe:	e08c      	b.n	800281a <_printf_i+0x1be>
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002706:	6011      	str	r1, [r2, #0]
 8002708:	bf18      	it	ne
 800270a:	b21b      	sxthne	r3, r3
 800270c:	e7cf      	b.n	80026ae <_printf_i+0x52>
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	6825      	ldr	r5, [r4, #0]
 8002712:	1d18      	adds	r0, r3, #4
 8002714:	6010      	str	r0, [r2, #0]
 8002716:	0628      	lsls	r0, r5, #24
 8002718:	d501      	bpl.n	800271e <_printf_i+0xc2>
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e002      	b.n	8002724 <_printf_i+0xc8>
 800271e:	0668      	lsls	r0, r5, #25
 8002720:	d5fb      	bpl.n	800271a <_printf_i+0xbe>
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	296f      	cmp	r1, #111	; 0x6f
 8002726:	bf14      	ite	ne
 8002728:	220a      	movne	r2, #10
 800272a:	2208      	moveq	r2, #8
 800272c:	4852      	ldr	r0, [pc, #328]	; (8002878 <_printf_i+0x21c>)
 800272e:	2100      	movs	r1, #0
 8002730:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002734:	6865      	ldr	r5, [r4, #4]
 8002736:	2d00      	cmp	r5, #0
 8002738:	60a5      	str	r5, [r4, #8]
 800273a:	f2c0 8095 	blt.w	8002868 <_printf_i+0x20c>
 800273e:	6821      	ldr	r1, [r4, #0]
 8002740:	f021 0104 	bic.w	r1, r1, #4
 8002744:	6021      	str	r1, [r4, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13d      	bne.n	80027c6 <_printf_i+0x16a>
 800274a:	2d00      	cmp	r5, #0
 800274c:	f040 808e 	bne.w	800286c <_printf_i+0x210>
 8002750:	4665      	mov	r5, ip
 8002752:	2a08      	cmp	r2, #8
 8002754:	d10b      	bne.n	800276e <_printf_i+0x112>
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	07db      	lsls	r3, r3, #31
 800275a:	d508      	bpl.n	800276e <_printf_i+0x112>
 800275c:	6923      	ldr	r3, [r4, #16]
 800275e:	6862      	ldr	r2, [r4, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	bfde      	ittt	le
 8002764:	2330      	movle	r3, #48	; 0x30
 8002766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800276a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800276e:	ebac 0305 	sub.w	r3, ip, r5
 8002772:	6123      	str	r3, [r4, #16]
 8002774:	f8cd 8000 	str.w	r8, [sp]
 8002778:	463b      	mov	r3, r7
 800277a:	aa03      	add	r2, sp, #12
 800277c:	4621      	mov	r1, r4
 800277e:	4630      	mov	r0, r6
 8002780:	f7ff fef6 	bl	8002570 <_printf_common>
 8002784:	3001      	adds	r0, #1
 8002786:	d14d      	bne.n	8002824 <_printf_i+0x1c8>
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	b005      	add	sp, #20
 800278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002792:	4839      	ldr	r0, [pc, #228]	; (8002878 <_printf_i+0x21c>)
 8002794:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002798:	6813      	ldr	r3, [r2, #0]
 800279a:	6821      	ldr	r1, [r4, #0]
 800279c:	1d1d      	adds	r5, r3, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6015      	str	r5, [r2, #0]
 80027a2:	060a      	lsls	r2, r1, #24
 80027a4:	d50b      	bpl.n	80027be <_printf_i+0x162>
 80027a6:	07ca      	lsls	r2, r1, #31
 80027a8:	bf44      	itt	mi
 80027aa:	f041 0120 	orrmi.w	r1, r1, #32
 80027ae:	6021      	strmi	r1, [r4, #0]
 80027b0:	b91b      	cbnz	r3, 80027ba <_printf_i+0x15e>
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	f022 0220 	bic.w	r2, r2, #32
 80027b8:	6022      	str	r2, [r4, #0]
 80027ba:	2210      	movs	r2, #16
 80027bc:	e7b7      	b.n	800272e <_printf_i+0xd2>
 80027be:	064d      	lsls	r5, r1, #25
 80027c0:	bf48      	it	mi
 80027c2:	b29b      	uxthmi	r3, r3
 80027c4:	e7ef      	b.n	80027a6 <_printf_i+0x14a>
 80027c6:	4665      	mov	r5, ip
 80027c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80027cc:	fb02 3311 	mls	r3, r2, r1, r3
 80027d0:	5cc3      	ldrb	r3, [r0, r3]
 80027d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80027d6:	460b      	mov	r3, r1
 80027d8:	2900      	cmp	r1, #0
 80027da:	d1f5      	bne.n	80027c8 <_printf_i+0x16c>
 80027dc:	e7b9      	b.n	8002752 <_printf_i+0xf6>
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	6825      	ldr	r5, [r4, #0]
 80027e2:	1d18      	adds	r0, r3, #4
 80027e4:	6961      	ldr	r1, [r4, #20]
 80027e6:	6010      	str	r0, [r2, #0]
 80027e8:	0628      	lsls	r0, r5, #24
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	d501      	bpl.n	80027f2 <_printf_i+0x196>
 80027ee:	6019      	str	r1, [r3, #0]
 80027f0:	e002      	b.n	80027f8 <_printf_i+0x19c>
 80027f2:	066a      	lsls	r2, r5, #25
 80027f4:	d5fb      	bpl.n	80027ee <_printf_i+0x192>
 80027f6:	8019      	strh	r1, [r3, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	4665      	mov	r5, ip
 80027fc:	6123      	str	r3, [r4, #16]
 80027fe:	e7b9      	b.n	8002774 <_printf_i+0x118>
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	1d19      	adds	r1, r3, #4
 8002804:	6011      	str	r1, [r2, #0]
 8002806:	681d      	ldr	r5, [r3, #0]
 8002808:	6862      	ldr	r2, [r4, #4]
 800280a:	2100      	movs	r1, #0
 800280c:	4628      	mov	r0, r5
 800280e:	f000 f837 	bl	8002880 <memchr>
 8002812:	b108      	cbz	r0, 8002818 <_printf_i+0x1bc>
 8002814:	1b40      	subs	r0, r0, r5
 8002816:	6060      	str	r0, [r4, #4]
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	6123      	str	r3, [r4, #16]
 800281c:	2300      	movs	r3, #0
 800281e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002822:	e7a7      	b.n	8002774 <_printf_i+0x118>
 8002824:	6923      	ldr	r3, [r4, #16]
 8002826:	462a      	mov	r2, r5
 8002828:	4639      	mov	r1, r7
 800282a:	4630      	mov	r0, r6
 800282c:	47c0      	blx	r8
 800282e:	3001      	adds	r0, #1
 8002830:	d0aa      	beq.n	8002788 <_printf_i+0x12c>
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	079b      	lsls	r3, r3, #30
 8002836:	d413      	bmi.n	8002860 <_printf_i+0x204>
 8002838:	68e0      	ldr	r0, [r4, #12]
 800283a:	9b03      	ldr	r3, [sp, #12]
 800283c:	4298      	cmp	r0, r3
 800283e:	bfb8      	it	lt
 8002840:	4618      	movlt	r0, r3
 8002842:	e7a3      	b.n	800278c <_printf_i+0x130>
 8002844:	2301      	movs	r3, #1
 8002846:	464a      	mov	r2, r9
 8002848:	4639      	mov	r1, r7
 800284a:	4630      	mov	r0, r6
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d09a      	beq.n	8002788 <_printf_i+0x12c>
 8002852:	3501      	adds	r5, #1
 8002854:	68e3      	ldr	r3, [r4, #12]
 8002856:	9a03      	ldr	r2, [sp, #12]
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	42ab      	cmp	r3, r5
 800285c:	dcf2      	bgt.n	8002844 <_printf_i+0x1e8>
 800285e:	e7eb      	b.n	8002838 <_printf_i+0x1dc>
 8002860:	2500      	movs	r5, #0
 8002862:	f104 0919 	add.w	r9, r4, #25
 8002866:	e7f5      	b.n	8002854 <_printf_i+0x1f8>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ac      	bne.n	80027c6 <_printf_i+0x16a>
 800286c:	7803      	ldrb	r3, [r0, #0]
 800286e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002872:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002876:	e76c      	b.n	8002752 <_printf_i+0xf6>
 8002878:	080034c8 	.word	0x080034c8
 800287c:	080034d9 	.word	0x080034d9

08002880 <memchr>:
 8002880:	b510      	push	{r4, lr}
 8002882:	b2c9      	uxtb	r1, r1
 8002884:	4402      	add	r2, r0
 8002886:	4290      	cmp	r0, r2
 8002888:	4603      	mov	r3, r0
 800288a:	d101      	bne.n	8002890 <memchr+0x10>
 800288c:	2300      	movs	r3, #0
 800288e:	e003      	b.n	8002898 <memchr+0x18>
 8002890:	781c      	ldrb	r4, [r3, #0]
 8002892:	3001      	adds	r0, #1
 8002894:	428c      	cmp	r4, r1
 8002896:	d1f6      	bne.n	8002886 <memchr+0x6>
 8002898:	4618      	mov	r0, r3
 800289a:	bd10      	pop	{r4, pc}

0800289c <memmove>:
 800289c:	4288      	cmp	r0, r1
 800289e:	b510      	push	{r4, lr}
 80028a0:	eb01 0302 	add.w	r3, r1, r2
 80028a4:	d807      	bhi.n	80028b6 <memmove+0x1a>
 80028a6:	1e42      	subs	r2, r0, #1
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d00a      	beq.n	80028c2 <memmove+0x26>
 80028ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80028b4:	e7f8      	b.n	80028a8 <memmove+0xc>
 80028b6:	4283      	cmp	r3, r0
 80028b8:	d9f5      	bls.n	80028a6 <memmove+0xa>
 80028ba:	1881      	adds	r1, r0, r2
 80028bc:	1ad2      	subs	r2, r2, r3
 80028be:	42d3      	cmn	r3, r2
 80028c0:	d100      	bne.n	80028c4 <memmove+0x28>
 80028c2:	bd10      	pop	{r4, pc}
 80028c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80028cc:	e7f7      	b.n	80028be <memmove+0x22>
	...

080028d0 <_free_r>:
 80028d0:	b538      	push	{r3, r4, r5, lr}
 80028d2:	4605      	mov	r5, r0
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d043      	beq.n	8002960 <_free_r+0x90>
 80028d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028dc:	1f0c      	subs	r4, r1, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bfb8      	it	lt
 80028e2:	18e4      	addlt	r4, r4, r3
 80028e4:	f000 f8d0 	bl	8002a88 <__malloc_lock>
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <_free_r+0x94>)
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	4610      	mov	r0, r2
 80028ee:	b933      	cbnz	r3, 80028fe <_free_r+0x2e>
 80028f0:	6063      	str	r3, [r4, #4]
 80028f2:	6014      	str	r4, [r2, #0]
 80028f4:	4628      	mov	r0, r5
 80028f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028fa:	f000 b8c6 	b.w	8002a8a <__malloc_unlock>
 80028fe:	42a3      	cmp	r3, r4
 8002900:	d90b      	bls.n	800291a <_free_r+0x4a>
 8002902:	6821      	ldr	r1, [r4, #0]
 8002904:	1862      	adds	r2, r4, r1
 8002906:	4293      	cmp	r3, r2
 8002908:	bf01      	itttt	eq
 800290a:	681a      	ldreq	r2, [r3, #0]
 800290c:	685b      	ldreq	r3, [r3, #4]
 800290e:	1852      	addeq	r2, r2, r1
 8002910:	6022      	streq	r2, [r4, #0]
 8002912:	6063      	str	r3, [r4, #4]
 8002914:	6004      	str	r4, [r0, #0]
 8002916:	e7ed      	b.n	80028f4 <_free_r+0x24>
 8002918:	4613      	mov	r3, r2
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	b10a      	cbz	r2, 8002922 <_free_r+0x52>
 800291e:	42a2      	cmp	r2, r4
 8002920:	d9fa      	bls.n	8002918 <_free_r+0x48>
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	1858      	adds	r0, r3, r1
 8002926:	42a0      	cmp	r0, r4
 8002928:	d10b      	bne.n	8002942 <_free_r+0x72>
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	4401      	add	r1, r0
 800292e:	1858      	adds	r0, r3, r1
 8002930:	4282      	cmp	r2, r0
 8002932:	6019      	str	r1, [r3, #0]
 8002934:	d1de      	bne.n	80028f4 <_free_r+0x24>
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	6852      	ldr	r2, [r2, #4]
 800293a:	4401      	add	r1, r0
 800293c:	6019      	str	r1, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	e7d8      	b.n	80028f4 <_free_r+0x24>
 8002942:	d902      	bls.n	800294a <_free_r+0x7a>
 8002944:	230c      	movs	r3, #12
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	e7d4      	b.n	80028f4 <_free_r+0x24>
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	1821      	adds	r1, r4, r0
 800294e:	428a      	cmp	r2, r1
 8002950:	bf01      	itttt	eq
 8002952:	6811      	ldreq	r1, [r2, #0]
 8002954:	6852      	ldreq	r2, [r2, #4]
 8002956:	1809      	addeq	r1, r1, r0
 8002958:	6021      	streq	r1, [r4, #0]
 800295a:	6062      	str	r2, [r4, #4]
 800295c:	605c      	str	r4, [r3, #4]
 800295e:	e7c9      	b.n	80028f4 <_free_r+0x24>
 8002960:	bd38      	pop	{r3, r4, r5, pc}
 8002962:	bf00      	nop
 8002964:	20000dd4 	.word	0x20000dd4

08002968 <_malloc_r>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	1ccd      	adds	r5, r1, #3
 800296c:	f025 0503 	bic.w	r5, r5, #3
 8002970:	3508      	adds	r5, #8
 8002972:	2d0c      	cmp	r5, #12
 8002974:	bf38      	it	cc
 8002976:	250c      	movcc	r5, #12
 8002978:	2d00      	cmp	r5, #0
 800297a:	4606      	mov	r6, r0
 800297c:	db01      	blt.n	8002982 <_malloc_r+0x1a>
 800297e:	42a9      	cmp	r1, r5
 8002980:	d903      	bls.n	800298a <_malloc_r+0x22>
 8002982:	230c      	movs	r3, #12
 8002984:	6033      	str	r3, [r6, #0]
 8002986:	2000      	movs	r0, #0
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	f000 f87d 	bl	8002a88 <__malloc_lock>
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <_malloc_r+0xac>)
 8002990:	6814      	ldr	r4, [r2, #0]
 8002992:	4621      	mov	r1, r4
 8002994:	b991      	cbnz	r1, 80029bc <_malloc_r+0x54>
 8002996:	4c20      	ldr	r4, [pc, #128]	; (8002a18 <_malloc_r+0xb0>)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	b91b      	cbnz	r3, 80029a4 <_malloc_r+0x3c>
 800299c:	4630      	mov	r0, r6
 800299e:	f000 f863 	bl	8002a68 <_sbrk_r>
 80029a2:	6020      	str	r0, [r4, #0]
 80029a4:	4629      	mov	r1, r5
 80029a6:	4630      	mov	r0, r6
 80029a8:	f000 f85e 	bl	8002a68 <_sbrk_r>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d124      	bne.n	80029fa <_malloc_r+0x92>
 80029b0:	230c      	movs	r3, #12
 80029b2:	4630      	mov	r0, r6
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	f000 f868 	bl	8002a8a <__malloc_unlock>
 80029ba:	e7e4      	b.n	8002986 <_malloc_r+0x1e>
 80029bc:	680b      	ldr	r3, [r1, #0]
 80029be:	1b5b      	subs	r3, r3, r5
 80029c0:	d418      	bmi.n	80029f4 <_malloc_r+0x8c>
 80029c2:	2b0b      	cmp	r3, #11
 80029c4:	d90f      	bls.n	80029e6 <_malloc_r+0x7e>
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	18cc      	adds	r4, r1, r3
 80029ca:	50cd      	str	r5, [r1, r3]
 80029cc:	4630      	mov	r0, r6
 80029ce:	f000 f85c 	bl	8002a8a <__malloc_unlock>
 80029d2:	f104 000b 	add.w	r0, r4, #11
 80029d6:	1d23      	adds	r3, r4, #4
 80029d8:	f020 0007 	bic.w	r0, r0, #7
 80029dc:	1ac3      	subs	r3, r0, r3
 80029de:	d0d3      	beq.n	8002988 <_malloc_r+0x20>
 80029e0:	425a      	negs	r2, r3
 80029e2:	50e2      	str	r2, [r4, r3]
 80029e4:	e7d0      	b.n	8002988 <_malloc_r+0x20>
 80029e6:	684b      	ldr	r3, [r1, #4]
 80029e8:	428c      	cmp	r4, r1
 80029ea:	bf16      	itet	ne
 80029ec:	6063      	strne	r3, [r4, #4]
 80029ee:	6013      	streq	r3, [r2, #0]
 80029f0:	460c      	movne	r4, r1
 80029f2:	e7eb      	b.n	80029cc <_malloc_r+0x64>
 80029f4:	460c      	mov	r4, r1
 80029f6:	6849      	ldr	r1, [r1, #4]
 80029f8:	e7cc      	b.n	8002994 <_malloc_r+0x2c>
 80029fa:	1cc4      	adds	r4, r0, #3
 80029fc:	f024 0403 	bic.w	r4, r4, #3
 8002a00:	42a0      	cmp	r0, r4
 8002a02:	d005      	beq.n	8002a10 <_malloc_r+0xa8>
 8002a04:	1a21      	subs	r1, r4, r0
 8002a06:	4630      	mov	r0, r6
 8002a08:	f000 f82e 	bl	8002a68 <_sbrk_r>
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d0cf      	beq.n	80029b0 <_malloc_r+0x48>
 8002a10:	6025      	str	r5, [r4, #0]
 8002a12:	e7db      	b.n	80029cc <_malloc_r+0x64>
 8002a14:	20000dd4 	.word	0x20000dd4
 8002a18:	20000dd8 	.word	0x20000dd8

08002a1c <_realloc_r>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	4607      	mov	r7, r0
 8002a20:	4614      	mov	r4, r2
 8002a22:	460e      	mov	r6, r1
 8002a24:	b921      	cbnz	r1, 8002a30 <_realloc_r+0x14>
 8002a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	f7ff bf9c 	b.w	8002968 <_malloc_r>
 8002a30:	b922      	cbnz	r2, 8002a3c <_realloc_r+0x20>
 8002a32:	f7ff ff4d 	bl	80028d0 <_free_r>
 8002a36:	4625      	mov	r5, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a3c:	f000 f826 	bl	8002a8c <_malloc_usable_size_r>
 8002a40:	42a0      	cmp	r0, r4
 8002a42:	d20f      	bcs.n	8002a64 <_realloc_r+0x48>
 8002a44:	4621      	mov	r1, r4
 8002a46:	4638      	mov	r0, r7
 8002a48:	f7ff ff8e 	bl	8002968 <_malloc_r>
 8002a4c:	4605      	mov	r5, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d0f2      	beq.n	8002a38 <_realloc_r+0x1c>
 8002a52:	4631      	mov	r1, r6
 8002a54:	4622      	mov	r2, r4
 8002a56:	f7ff fbe3 	bl	8002220 <memcpy>
 8002a5a:	4631      	mov	r1, r6
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	f7ff ff37 	bl	80028d0 <_free_r>
 8002a62:	e7e9      	b.n	8002a38 <_realloc_r+0x1c>
 8002a64:	4635      	mov	r5, r6
 8002a66:	e7e7      	b.n	8002a38 <_realloc_r+0x1c>

08002a68 <_sbrk_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	4c05      	ldr	r4, [pc, #20]	; (8002a84 <_sbrk_r+0x1c>)
 8002a6e:	4605      	mov	r5, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	f7fe fb74 	bl	8001160 <_sbrk>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d102      	bne.n	8002a82 <_sbrk_r+0x1a>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	b103      	cbz	r3, 8002a82 <_sbrk_r+0x1a>
 8002a80:	602b      	str	r3, [r5, #0]
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
 8002a84:	20000e80 	.word	0x20000e80

08002a88 <__malloc_lock>:
 8002a88:	4770      	bx	lr

08002a8a <__malloc_unlock>:
 8002a8a:	4770      	bx	lr

08002a8c <_malloc_usable_size_r>:
 8002a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a90:	1f18      	subs	r0, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfbc      	itt	lt
 8002a96:	580b      	ldrlt	r3, [r1, r0]
 8002a98:	18c0      	addlt	r0, r0, r3
 8002a9a:	4770      	bx	lr

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
