
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080037e0  080037e0  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e0  080037e0  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc4  200000c4  080038ac  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e88  080038ac  00020e88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094f7  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a06  00000000  00000000  000295e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000470  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001eb4  00000000  00000000  0002b818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054ba  00000000  00000000  0002d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000595b0  00000000  00000000  00032b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008c136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001240  00000000  00000000  0008c1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c4 	.word	0x200000c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002c5c 	.word	0x08002c5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000c8 	.word	0x200000c8
 800016c:	08002c5c 	.word	0x08002c5c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <CONFIGURATIONS_uid_read>:
#include <string.h>

static struct u_id ID;
BOOL RESET_FLAG;

void CONFIGURATIONS_uid_read(struct u_id *id){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	id->off0 = MMIO16(ID_ADDR + 0x0);
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <CONFIGURATIONS_uid_read+0x38>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	b29a      	uxth	r2, r3
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	801a      	strh	r2, [r3, #0]
	id->off2 = MMIO16(ID_ADDR + 0x2);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <CONFIGURATIONS_uid_read+0x3c>)
 8000194:	881b      	ldrh	r3, [r3, #0]
 8000196:	b29a      	uxth	r2, r3
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	805a      	strh	r2, [r3, #2]
	id->off4 = MMIO32(ID_ADDR + 0x4);
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <CONFIGURATIONS_uid_read+0x40>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	605a      	str	r2, [r3, #4]
	id->off8 = MMIO32(ID_ADDR + 0x8);
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <CONFIGURATIONS_uid_read+0x44>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	609a      	str	r2, [r3, #8]

}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	1ffff7e8 	.word	0x1ffff7e8
 80001bc:	1ffff7ea 	.word	0x1ffff7ea
 80001c0:	1ffff7ec 	.word	0x1ffff7ec
 80001c4:	1ffff7f0 	.word	0x1ffff7f0

080001c8 <CONFIGURATIONS_set_device_id>:

void CONFIGURATIONS_set_device_id(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8

	CONFIGURATIONS_uid_read(&ID);
 80001ce:	480e      	ldr	r0, [pc, #56]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001d0:	f7ff ffd6 	bl	8000180 <CONFIGURATIONS_uid_read>
	memset(DEVICE_ID,'\0', ID_SIZE*sizeof(uint8_t));
 80001d4:	2219      	movs	r2, #25
 80001d6:	2100      	movs	r1, #0
 80001d8:	480c      	ldr	r0, [pc, #48]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001da:	f002 f90c 	bl	80023f6 <memset>
	sprintf((char*)DEVICE_ID,"%X%X%lX%lX",ID.off0,ID.off2,ID.off4,ID.off8);
 80001de:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001e6:	885b      	ldrh	r3, [r3, #2]
 80001e8:	4618      	mov	r0, r3
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <CONFIGURATIONS_set_device_id+0x40>)
 80001f0:	6892      	ldr	r2, [r2, #8]
 80001f2:	9201      	str	r2, [sp, #4]
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	4603      	mov	r3, r0
 80001f8:	460a      	mov	r2, r1
 80001fa:	4905      	ldr	r1, [pc, #20]	; (8000210 <CONFIGURATIONS_set_device_id+0x48>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <CONFIGURATIONS_set_device_id+0x44>)
 80001fe:	f002 f903 	bl	8002408 <siprintf>

}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	20000de0 	.word	0x20000de0
 8000210:	08002c74 	.word	0x08002c74

08000214 <CONFIGURATIONS_set_network>:

BOOL CONFIGURATIONS_set_network(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\033[96m\r\nIf at some point nothing seems to be happening\033[0m"));
 8000218:	481c      	ldr	r0, [pc, #112]	; (800028c <CONFIGURATIONS_set_network+0x78>)
 800021a:	f001 fd6b 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)("\033[96m\r\ndisconnect the device from your computer, wait a few minutes, and then reconnect.\r\n\033[0m"));
 800021e:	481c      	ldr	r0, [pc, #112]	; (8000290 <CONFIGURATIONS_set_network+0x7c>)
 8000220:	f001 fd68 	bl	8001cf4 <USART2_write>


	if(!SYSTEM_CONTROL_set_up()){
 8000224:	f001 f886 	bl	8001334 <SYSTEM_CONTROL_set_up>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d116      	bne.n	800025c <CONFIGURATIONS_set_network+0x48>
		USART2_write((uint8_t*)("\033[91m\r\nNetwok connection error.\033[0m"));
 800022e:	4819      	ldr	r0, [pc, #100]	; (8000294 <CONFIGURATIONS_set_network+0x80>)
 8000230:	f001 fd60 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nIf you are sure you entered the correct network name and password,\r\ndo the following:\033[0m"));
 8000234:	4818      	ldr	r0, [pc, #96]	; (8000298 <CONFIGURATIONS_set_network+0x84>)
 8000236:	f001 fd5d 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nCheck your network signal, is it strong enough?\033[0m"));
 800023a:	4818      	ldr	r0, [pc, #96]	; (800029c <CONFIGURATIONS_set_network+0x88>)
 800023c:	f001 fd5a 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nIf it is not, try again later or from another physical location.\033[0m"));
 8000240:	4817      	ldr	r0, [pc, #92]	; (80002a0 <CONFIGURATIONS_set_network+0x8c>)
 8000242:	f001 fd57 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96mIf it is, hit the reset button or disconnect the device from the computer,\033[0m"));
 8000246:	4817      	ldr	r0, [pc, #92]	; (80002a4 <CONFIGURATIONS_set_network+0x90>)
 8000248:	f001 fd54 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nwait a few minutes, then reconnect and try again\033[0m"));
 800024c:	4816      	ldr	r0, [pc, #88]	; (80002a8 <CONFIGURATIONS_set_network+0x94>)
 800024e:	f001 fd51 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)"\r\n\r\n");
 8000252:	4816      	ldr	r0, [pc, #88]	; (80002ac <CONFIGURATIONS_set_network+0x98>)
 8000254:	f001 fd4e 	bl	8001cf4 <USART2_write>
		return FALSE;
 8000258:	2300      	movs	r3, #0
 800025a:	e015      	b.n	8000288 <CONFIGURATIONS_set_network+0x74>
	}
	else{
		USART2_write((uint8_t*)("\033[96m\r\nYour device was successfully registered.\033[0m"));
 800025c:	4814      	ldr	r0, [pc, #80]	; (80002b0 <CONFIGURATIONS_set_network+0x9c>)
 800025e:	f001 fd49 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\nThis is your device ID: \033[0m"));
 8000262:	4814      	ldr	r0, [pc, #80]	; (80002b4 <CONFIGURATIONS_set_network+0xa0>)
 8000264:	f001 fd46 	bl	8001cf4 <USART2_write>
		USART2_write(DEVICE_ID);
 8000268:	4813      	ldr	r0, [pc, #76]	; (80002b8 <CONFIGURATIONS_set_network+0xa4>)
 800026a:	f001 fd43 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[32m\r\nCoppy it, you will need it later.\033[0m"));
 800026e:	4813      	ldr	r0, [pc, #76]	; (80002bc <CONFIGURATIONS_set_network+0xa8>)
 8000270:	f001 fd40 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)("\033[96m\r\n\r\nYou can now safely disconnect the device and connect it to an electric power supply.\033[0m"));
 8000274:	4812      	ldr	r0, [pc, #72]	; (80002c0 <CONFIGURATIONS_set_network+0xac>)
 8000276:	f001 fd3d 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)"\033[96m\r\nIf you ever wish to reset your network details,\r\nconnect the device to the computer and open 'TeraTerm'.\033[0m");
 800027a:	4812      	ldr	r0, [pc, #72]	; (80002c4 <CONFIGURATIONS_set_network+0xb0>)
 800027c:	f001 fd3a 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)"\r\n\r\n");
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <CONFIGURATIONS_set_network+0x98>)
 8000282:	f001 fd37 	bl	8001cf4 <USART2_write>
		return TRUE;
 8000286:	2301      	movs	r3, #1
	}

}
 8000288:	4618      	mov	r0, r3
 800028a:	bd80      	pop	{r7, pc}
 800028c:	08002c80 	.word	0x08002c80
 8000290:	08002cbc 	.word	0x08002cbc
 8000294:	08002d1c 	.word	0x08002d1c
 8000298:	08002d40 	.word	0x08002d40
 800029c:	08002da4 	.word	0x08002da4
 80002a0:	08002de0 	.word	0x08002de0
 80002a4:	08002e2c 	.word	0x08002e2c
 80002a8:	08002e80 	.word	0x08002e80
 80002ac:	08002ebc 	.word	0x08002ebc
 80002b0:	08002ec4 	.word	0x08002ec4
 80002b4:	08002ef8 	.word	0x08002ef8
 80002b8:	20000de0 	.word	0x20000de0
 80002bc:	08002f1c 	.word	0x08002f1c
 80002c0:	08002f4c 	.word	0x08002f4c
 80002c4:	08002fb0 	.word	0x08002fb0

080002c8 <configuration_Handler>:

void* configuration_Handler(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	CONFIGURATIONS_set_network(); // returns TRUE upon success
 80002cc:	f7ff ffa2 	bl	8000214 <CONFIGURATIONS_set_network>

	USART2_write((uint8_t*)"\033[32m\r\nEnter 'ok' to continue: \033[0m");
 80002d0:	4815      	ldr	r0, [pc, #84]	; (8000328 <configuration_Handler+0x60>)
 80002d2:	f001 fd0f 	bl	8001cf4 <USART2_write>
	USART2_enable_Rx();
 80002d6:	f001 fcbb 	bl	8001c50 <USART2_enable_Rx>
	while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80002da:	bf00      	nop
 80002dc:	f001 fbe8 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0fa      	beq.n	80002dc <configuration_Handler+0x14>
	USART2_disable_Rx();
 80002e6:	f001 fcc1 	bl	8001c6c <USART2_disable_Rx>

	while(!USART2_ok()){
 80002ea:	e00e      	b.n	800030a <configuration_Handler+0x42>
		USART2_NEW_LINE_READ_set();
 80002ec:	f001 fbec 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter 'ok' to continue: \033[0m");
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <configuration_Handler+0x60>)
 80002f2:	f001 fcff 	bl	8001cf4 <USART2_write>
		USART2_enable_Rx();
 80002f6:	f001 fcab 	bl	8001c50 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80002fa:	bf00      	nop
 80002fc:	f001 fbd8 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0fa      	beq.n	80002fc <configuration_Handler+0x34>
		USART2_disable_Rx();
 8000306:	f001 fcb1 	bl	8001c6c <USART2_disable_Rx>
	while(!USART2_ok()){
 800030a:	f001 fde1 	bl	8001ed0 <USART2_ok>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0eb      	beq.n	80002ec <configuration_Handler+0x24>

	}
	USART2_NEW_LINE_READ_set();
 8000314:	f001 fbd8 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

	RESET_FLAG = TRUE; // allow another event just like this
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <configuration_Handler+0x64>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
	USART2_enable_Rx();
 800031e:	f001 fc97 	bl	8001c50 <USART2_enable_Rx>
	return NULL;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	bd80      	pop	{r7, pc}
 8000328:	08003024 	.word	0x08003024
 800032c:	20000ddc 	.word	0x20000ddc

08000330 <alert_Handler>:
	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");

}

void *alert_Handler(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 8000336:	2303      	movs	r3, #3
 8000338:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800033a:	e002      	b.n	8000342 <alert_Handler+0x12>
		i--;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3b01      	subs	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d008      	beq.n	800035a <alert_Handler+0x2a>
 8000348:	f000 f884 	bl	8000454 <recordAlert>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d103      	bne.n	800035a <alert_Handler+0x2a>
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <alert_Handler+0x38>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f0      	bne.n	800033c <alert_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 800035a:	f001 fa27 	bl	80017ac <TIMER4_disable>

	return NULL;
 800035e:	2300      	movs	r3, #0

}
 8000360:	4618      	mov	r0, r3
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000474 	.word	0x20000474

0800036c <control_Handler>:

void *control_Handler(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <control_Handler+0x8c>)
 8000374:	2203      	movs	r2, #3
 8000376:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 8000378:	2303      	movs	r3, #3
 800037a:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 800037c:	e002      	b.n	8000384 <control_Handler+0x18>
		i--;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3b01      	subs	r3, #1
 8000382:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <control_Handler+0x30>
 800038a:	f000 f8b7 	bl	80004fc <checkSwitchState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d103      	bne.n	800039c <control_Handler+0x30>
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <control_Handler+0x90>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1f0      	bne.n	800037e <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 800039c:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <control_Handler+0x8c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d003      	beq.n	80003ac <control_Handler+0x40>
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <control_Handler+0x8c>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d109      	bne.n	80003c0 <control_Handler+0x54>
		disable_sensor();
 80003ac:	f000 ff06 	bl	80011bc <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 80003b0:	f001 f9ee 	bl	8001790 <TIMER3_disable>
		LED_off();
 80003b4:	f000 ff50 	bl	8001258 <LED_off>
		USART2_write((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 80003b8:	4811      	ldr	r0, [pc, #68]	; (8000400 <control_Handler+0x94>)
 80003ba:	f001 fc9b 	bl	8001cf4 <USART2_write>
 80003be:	e014      	b.n	80003ea <control_Handler+0x7e>
	}

	else if(state == ON){
 80003c0:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <control_Handler+0x8c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d107      	bne.n	80003d8 <control_Handler+0x6c>
		enable_sensor();
 80003c8:	f000 feec 	bl	80011a4 <enable_sensor>
		LED_on();
 80003cc:	f000 ff36 	bl	800123c <LED_on>
		USART2_write((uint8_t*)("\r\nON\r\n"));
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <control_Handler+0x98>)
 80003d2:	f001 fc8f 	bl	8001cf4 <USART2_write>
 80003d6:	e008      	b.n	80003ea <control_Handler+0x7e>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 80003d8:	f000 fef0 	bl	80011bc <disable_sensor>
		TIMER3_disable(); // otherwise the timer will keep going for ever and an overflow will occur
 80003dc:	f001 f9d8 	bl	8001790 <TIMER3_disable>
		LED_off();
 80003e0:	f000 ff3a 	bl	8001258 <LED_off>
		USART2_write((uint8_t*)("\r\nNON\r\n"));
 80003e4:	4808      	ldr	r0, [pc, #32]	; (8000408 <control_Handler+0x9c>)
 80003e6:	f001 fc85 	bl	8001cf4 <USART2_write>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80003ea:	f001 f9df 	bl	80017ac <TIMER4_disable>

	return NULL;
 80003ee:	2300      	movs	r3, #0

}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000475 	.word	0x20000475
 80003fc:	20000474 	.word	0x20000474
 8000400:	08003054 	.word	0x08003054
 8000404:	08003064 	.word	0x08003064
 8000408:	0800306c 	.word	0x0800306c

0800040c <registeration_Handler>:

BOOL registeration_Handler(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 8000412:	2303      	movs	r3, #3
 8000414:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 8000416:	e002      	b.n	800041e <registeration_Handler+0x12>
		i--;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3b01      	subs	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d008      	beq.n	8000436 <registeration_Handler+0x2a>
 8000424:	f000 f8be 	bl	80005a4 <registerDeviceID>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d103      	bne.n	8000436 <registeration_Handler+0x2a>
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <registeration_Handler+0x44>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1f0      	bne.n	8000418 <registeration_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 8000436:	f001 f9b9 	bl	80017ac <TIMER4_disable>

	if(i == 0){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d101      	bne.n	8000444 <registeration_Handler+0x38>
		return FALSE;
 8000440:	2300      	movs	r3, #0
 8000442:	e000      	b.n	8000446 <registeration_Handler+0x3a>
	}
	return TRUE;
 8000444:	2301      	movs	r3, #1
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000474 	.word	0x20000474

08000454 <recordAlert>:

/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In recordAlert()\r\n"); // for debugging
 8000458:	4822      	ldr	r0, [pc, #136]	; (80004e4 <recordAlert+0x90>)
 800045a:	f001 fc4b 	bl	8001cf4 <USART2_write>

	connection_closed = TRUE;
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <recordAlert+0x94>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000464:	231e      	movs	r3, #30
 8000466:	2206      	movs	r2, #6
 8000468:	2102      	movs	r1, #2
 800046a:	2002      	movs	r0, #2
 800046c:	f000 fa04 	bl	8000878 <connectFirebaseHost>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d101      	bne.n	800047a <recordAlert+0x26>
		return FALSE;
 8000476:	2300      	movs	r3, #0
 8000478:	e031      	b.n	80004de <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 800047a:	481c      	ldr	r0, [pc, #112]	; (80004ec <recordAlert+0x98>)
 800047c:	f001 fc3a 	bl	8001cf4 <USART2_write>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//USART2_write((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 8000480:	f000 faa6 	bl	80009d0 <createPostMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000484:	481a      	ldr	r0, [pc, #104]	; (80004f0 <recordAlert+0x9c>)
 8000486:	f001 fc35 	bl	8001cf4 <USART2_write>


	//Send number of data bytes
	if(!sendRequest(1,1,30,40)){
 800048a:	2328      	movs	r3, #40	; 0x28
 800048c:	221e      	movs	r2, #30
 800048e:	2101      	movs	r1, #1
 8000490:	2001      	movs	r0, #1
 8000492:	f000 fb51 	bl	8000b38 <sendRequest>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d109      	bne.n	80004b0 <recordAlert+0x5c>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 800049c:	2106      	movs	r1, #6
 800049e:	2002      	movs	r0, #2
 80004a0:	f000 fc78 	bl	8000d94 <closeConnection>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <recordAlert+0x94>)
 80004aa:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	e016      	b.n	80004de <recordAlert+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 80004b0:	4810      	ldr	r0, [pc, #64]	; (80004f4 <recordAlert+0xa0>)
 80004b2:	f001 fc1f 	bl	8001cf4 <USART2_write>

	//Read response
	if(!readResponse(60)){ //timeout set t0 3 minutes
 80004b6:	203c      	movs	r0, #60	; 0x3c
 80004b8:	f000 fbec 	bl	8000c94 <readResponse>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d109      	bne.n	80004d6 <recordAlert+0x82>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 80004c2:	2106      	movs	r1, #6
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 fc65 	bl	8000d94 <closeConnection>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <recordAlert+0x94>)
 80004d0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e003      	b.n	80004de <recordAlert+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 80004d6:	4808      	ldr	r0, [pc, #32]	; (80004f8 <recordAlert+0xa4>)
 80004d8:	f001 fc0c 	bl	8001cf4 <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 80004dc:	2301      	movs	r3, #1

}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	08003074 	.word	0x08003074
 80004e8:	20000474 	.word	0x20000474
 80004ec:	08003088 	.word	0x08003088
 80004f0:	0800308c 	.word	0x0800308c
 80004f4:	08003090 	.word	0x08003090
 80004f8:	08003094 	.word	0x08003094

080004fc <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 8000500:	4822      	ldr	r0, [pc, #136]	; (800058c <checkSwitchState+0x90>)
 8000502:	f001 fbf7 	bl	8001cf4 <USART2_write>

	connection_closed = TRUE;//added 30.4.21
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <checkSwitchState+0x94>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
//	USART2_write((uint8_t*)"2\r\n");

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 800050c:	231e      	movs	r3, #30
 800050e:	2206      	movs	r2, #6
 8000510:	2102      	movs	r1, #2
 8000512:	2002      	movs	r0, #2
 8000514:	f000 f9b0 	bl	8000878 <connectFirebaseHost>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <checkSwitchState+0x26>
		return FALSE;
 800051e:	2300      	movs	r3, #0
 8000520:	e031      	b.n	8000586 <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <checkSwitchState+0x98>)
 8000524:	f001 fbe6 	bl	8001cf4 <USART2_write>


	//Create HTTP request
	createGetMsg();
 8000528:	f000 fa98 	bl	8000a5c <createGetMsg>
	USART2_write((uint8_t*)"4\r\n");
 800052c:	481a      	ldr	r0, [pc, #104]	; (8000598 <checkSwitchState+0x9c>)
 800052e:	f001 fbe1 	bl	8001cf4 <USART2_write>


	//Send number of data bytes
	if(!sendRequest(1,1,30,40)){
 8000532:	2328      	movs	r3, #40	; 0x28
 8000534:	221e      	movs	r2, #30
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fafd 	bl	8000b38 <sendRequest>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d109      	bne.n	8000558 <checkSwitchState+0x5c>
		connection_closed = closeConnection(2,6);
 8000544:	2106      	movs	r1, #6
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fc24 	bl	8000d94 <closeConnection>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <checkSwitchState+0x94>)
 8000552:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000554:	2300      	movs	r3, #0
 8000556:	e016      	b.n	8000586 <checkSwitchState+0x8a>
	}
	USART2_write((uint8_t*)"5\r\n");
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <checkSwitchState+0xa0>)
 800055a:	f001 fbcb 	bl	8001cf4 <USART2_write>

	//Read response
	if(!parseResponse(60)){//timeout set t0 3 minutes
 800055e:	203c      	movs	r0, #60	; 0x3c
 8000560:	f000 fbcc 	bl	8000cfc <parseResponse>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d109      	bne.n	800057e <checkSwitchState+0x82>
		connection_closed = closeConnection(2,6);//added 30.4.21
 800056a:	2106      	movs	r1, #6
 800056c:	2002      	movs	r0, #2
 800056e:	f000 fc11 	bl	8000d94 <closeConnection>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <checkSwitchState+0x94>)
 8000578:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800057a:	2300      	movs	r3, #0
 800057c:	e003      	b.n	8000586 <checkSwitchState+0x8a>
	}

	USART2_write((uint8_t*)"6\r\n");
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <checkSwitchState+0xa4>)
 8000580:	f001 fbb8 	bl	8001cf4 <USART2_write>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 8000584:	2301      	movs	r3, #1


}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	08003098 	.word	0x08003098
 8000590:	20000474 	.word	0x20000474
 8000594:	08003088 	.word	0x08003088
 8000598:	0800308c 	.word	0x0800308c
 800059c:	08003090 	.word	0x08003090
 80005a0:	08003094 	.word	0x08003094

080005a4 <registerDeviceID>:



BOOL registerDeviceID(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"registerDeviceID\r\n"); // for debugging
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <registerDeviceID+0xdc>)
 80005aa:	f001 fba3 	bl	8001cf4 <USART2_write>

	connection_closed = TRUE;
 80005ae:	4b35      	ldr	r3, [pc, #212]	; (8000684 <registerDeviceID+0xe0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){
 80005b4:	2106      	movs	r1, #6
 80005b6:	2003      	movs	r0, #3
 80005b8:	f000 f874 	bl	80006a4 <reset>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <registerDeviceID+0x22>
		return FALSE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e05a      	b.n	800067c <registerDeviceID+0xd8>
	 }
	 TIMER4_delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 f8fe 	bl	80017c8 <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 80005cc:	482e      	ldr	r0, [pc, #184]	; (8000688 <registerDeviceID+0xe4>)
 80005ce:	f001 fb91 	bl	8001cf4 <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 80005d2:	2106      	movs	r1, #6
 80005d4:	2002      	movs	r0, #2
 80005d6:	f000 f8ad 	bl	8000734 <setClientMode>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <registerDeviceID+0x40>
		return FALSE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	e04b      	b.n	800067c <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 80005e4:	4829      	ldr	r0, [pc, #164]	; (800068c <registerDeviceID+0xe8>)
 80005e6:	f001 fb85 	bl	8001cf4 <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,30)){
 80005ea:	211e      	movs	r1, #30
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f8e9 	bl	80007c4 <joinAccessPoint>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <registerDeviceID+0x58>
		return FALSE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e03f      	b.n	800067c <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 80005fc:	4824      	ldr	r0, [pc, #144]	; (8000690 <registerDeviceID+0xec>)
 80005fe:	f001 fb79 	bl	8001cf4 <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000602:	231e      	movs	r3, #30
 8000604:	2206      	movs	r2, #6
 8000606:	2102      	movs	r1, #2
 8000608:	2002      	movs	r0, #2
 800060a:	f000 f935 	bl	8000878 <connectFirebaseHost>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <registerDeviceID+0x74>
		return FALSE;
 8000614:	2300      	movs	r3, #0
 8000616:	e031      	b.n	800067c <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000618:	481e      	ldr	r0, [pc, #120]	; (8000694 <registerDeviceID+0xf0>)
 800061a:	f001 fb6b 	bl	8001cf4 <USART2_write>


	//Create HTTP request
	createPutMsg();
 800061e:	f000 fa45 	bl	8000aac <createPutMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000622:	481d      	ldr	r0, [pc, #116]	; (8000698 <registerDeviceID+0xf4>)
 8000624:	f001 fb66 	bl	8001cf4 <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000628:	2328      	movs	r3, #40	; 0x28
 800062a:	221e      	movs	r2, #30
 800062c:	2102      	movs	r1, #2
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fa82 	bl	8000b38 <sendRequest>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <registerDeviceID+0xaa>
		connection_closed = closeConnection(2,6);
 800063a:	2106      	movs	r1, #6
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fba9 	bl	8000d94 <closeConnection>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <registerDeviceID+0xe0>)
 8000648:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800064a:	2300      	movs	r3, #0
 800064c:	e016      	b.n	800067c <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <registerDeviceID+0xf8>)
 8000650:	f001 fb50 	bl	8001cf4 <USART2_write>

	//Read response
	if(!readResponse(60)){ //timeout set to 3 minutes
 8000654:	203c      	movs	r0, #60	; 0x3c
 8000656:	f000 fb1d 	bl	8000c94 <readResponse>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d109      	bne.n	8000674 <registerDeviceID+0xd0>
		connection_closed = closeConnection(2,6);
 8000660:	2106      	movs	r1, #6
 8000662:	2002      	movs	r0, #2
 8000664:	f000 fb96 	bl	8000d94 <closeConnection>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <registerDeviceID+0xe0>)
 800066e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000670:	2300      	movs	r3, #0
 8000672:	e003      	b.n	800067c <registerDeviceID+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <registerDeviceID+0xfc>)
 8000676:	f001 fb3d 	bl	8001cf4 <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 800067a:	2301      	movs	r3, #1

}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	080030b0 	.word	0x080030b0
 8000684:	20000474 	.word	0x20000474
 8000688:	080030c4 	.word	0x080030c4
 800068c:	080030c8 	.word	0x080030c8
 8000690:	080030cc 	.word	0x080030cc
 8000694:	08003088 	.word	0x08003088
 8000698:	0800308c 	.word	0x0800308c
 800069c:	08003090 	.word	0x08003090
 80006a0:	08003094 	.word	0x08003094

080006a4 <reset>:
/*This function resets ESP8266 modem with AT+RST command,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.
 * !TODO This functionality does not work properly - needs fixing.*/
BOOL reset(uint32_t tries, uint32_t timeout){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <reset+0x80>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_RST);
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <reset+0x84>)
 80006b6:	f001 fc33 	bl	8001f20 <USART1_write>
	while(tries > 0){
 80006ba:	e02a      	b.n	8000712 <reset+0x6e>
		TIMER4_set_timeout(timeout);
 80006bc:	6838      	ldr	r0, [r7, #0]
 80006be:	f001 f8e3 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006c2:	e00e      	b.n	80006e2 <reset+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 80006c4:	f001 f9dc 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <reset+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80006ce:	4917      	ldr	r1, [pc, #92]	; (800072c <reset+0x88>)
 80006d0:	4817      	ldr	r0, [pc, #92]	; (8000730 <reset+0x8c>)
 80006d2:	f001 fcab 	bl	800202c <USART1_search_buffer_Rx>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <reset+0x80>)
 80006dc:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80006de:	f001 f9db 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <reset+0x80>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d104      	bne.n	80006f4 <reset+0x50>
 80006ea:	f001 f8df 	bl	80018ac <TIMER4_timeout_done>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0e7      	beq.n	80006c4 <reset+0x20>
			}
		}
		if(found == PASS){
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <reset+0x80>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <reset+0x5c>
			return TRUE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e00c      	b.n	800071a <reset+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <reset+0x80>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_RST);
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <reset+0x84>)
 800070e:	f001 fc07 	bl	8001f20 <USART1_write>
	while(tries > 0){
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1d1      	bne.n	80006bc <reset+0x18>
		}
	}
	return FALSE;
 8000718:	2300      	movs	r3, #0

}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000005c 	.word	0x2000005c
 8000728:	080030e8 	.word	0x080030e8
 800072c:	080030d8 	.word	0x080030d8
 8000730:	080030e0 	.word	0x080030e0

08000734 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <setClientMode+0x80>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CWMODE);
 8000744:	481c      	ldr	r0, [pc, #112]	; (80007b8 <setClientMode+0x84>)
 8000746:	f001 fbeb 	bl	8001f20 <USART1_write>
	while(tries > 0){
 800074a:	e02a      	b.n	80007a2 <setClientMode+0x6e>
		TIMER4_set_timeout(timeout);
 800074c:	6838      	ldr	r0, [r7, #0]
 800074e:	f001 f89b 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000752:	e00e      	b.n	8000772 <setClientMode+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000754:	f001 f994 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d009      	beq.n	8000772 <setClientMode+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 800075e:	4917      	ldr	r1, [pc, #92]	; (80007bc <setClientMode+0x88>)
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <setClientMode+0x8c>)
 8000762:	f001 fc63 	bl	800202c <USART1_search_buffer_Rx>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <setClientMode+0x80>)
 800076c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800076e:	f001 f993 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <setClientMode+0x80>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d104      	bne.n	8000784 <setClientMode+0x50>
 800077a:	f001 f897 	bl	80018ac <TIMER4_timeout_done>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0e7      	beq.n	8000754 <setClientMode+0x20>
			}
		}
		if(found == PASS){
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <setClientMode+0x80>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d101      	bne.n	8000790 <setClientMode+0x5c>
			return TRUE;
 800078c:	2301      	movs	r3, #1
 800078e:	e00c      	b.n	80007aa <setClientMode+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <setClientMode+0x80>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_CWMODE);
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <setClientMode+0x84>)
 800079e:	f001 fbbf 	bl	8001f20 <USART1_write>
	while(tries > 0){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1d1      	bne.n	800074c <setClientMode+0x18>
		}
	}
	return FALSE;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000005c 	.word	0x2000005c
 80007b8:	080030f4 	.word	0x080030f4
 80007bc:	080030d8 	.word	0x080030d8
 80007c0:	080030e0 	.word	0x080030e0

080007c4 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80007ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d2:	2100      	movs	r1, #0
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <joinAccessPoint+0x98>)
 80007d6:	f001 fe0e 	bl	80023f6 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PWD);
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <joinAccessPoint+0x9c>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <joinAccessPoint+0xa0>)
 80007de:	4922      	ldr	r1, [pc, #136]	; (8000868 <joinAccessPoint+0xa4>)
 80007e0:	481e      	ldr	r0, [pc, #120]	; (800085c <joinAccessPoint+0x98>)
 80007e2:	f001 fe11 	bl	8002408 <siprintf>

	found = STANDBY;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <joinAccessPoint+0xa8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <joinAccessPoint+0x98>)
 80007ee:	f001 fb97 	bl	8001f20 <USART1_write>
	while(tries > 0){
 80007f2:	e02a      	b.n	800084a <joinAccessPoint+0x86>
		TIMER4_set_timeout(timeout);
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f001 f847 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80007fa:	e00e      	b.n	800081a <joinAccessPoint+0x56>
			if(USART1_NEW_LINE_FOUND_get()){
 80007fc:	f001 f940 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d009      	beq.n	800081a <joinAccessPoint+0x56>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 8000806:	491a      	ldr	r1, [pc, #104]	; (8000870 <joinAccessPoint+0xac>)
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <joinAccessPoint+0xb0>)
 800080a:	f001 fc0f 	bl	800202c <USART1_search_buffer_Rx>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <joinAccessPoint+0xa8>)
 8000814:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000816:	f001 f93f 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <joinAccessPoint+0xa8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d104      	bne.n	800082c <joinAccessPoint+0x68>
 8000822:	f001 f843 	bl	80018ac <TIMER4_timeout_done>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0e7      	beq.n	80007fc <joinAccessPoint+0x38>
			}
		}
		if(found == PASS){
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <joinAccessPoint+0xa8>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d101      	bne.n	8000838 <joinAccessPoint+0x74>
			return TRUE;
 8000834:	2301      	movs	r3, #1
 8000836:	e00c      	b.n	8000852 <joinAccessPoint+0x8e>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <joinAccessPoint+0xa8>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <joinAccessPoint+0x98>)
 8000846:	f001 fb6b 	bl	8001f20 <USART1_write>
	while(tries > 0){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1d1      	bne.n	80007f4 <joinAccessPoint+0x30>
		}
	}
	return FALSE;
 8000850:	2300      	movs	r3, #0

}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000ec 	.word	0x200000ec
 8000860:	20000dfc 	.word	0x20000dfc
 8000864:	20000e40 	.word	0x20000e40
 8000868:	08003104 	.word	0x08003104
 800086c:	2000005c 	.word	0x2000005c
 8000870:	0800311c 	.word	0x0800311c
 8000874:	080030e0 	.word	0x080030e0

08000878 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <connectFirebaseHost+0x134>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 800088c:	4848      	ldr	r0, [pc, #288]	; (80009b0 <connectFirebaseHost+0x138>)
 800088e:	f001 fb47 	bl	8001f20 <USART1_write>
	while(_ssl_tries > 0){
 8000892:	e028      	b.n	80008e6 <connectFirebaseHost+0x6e>
		TIMER4_set_timeout(_ssl_timeout);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 fff7 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800089a:	e00e      	b.n	80008ba <connectFirebaseHost+0x42>
			if(USART1_NEW_LINE_FOUND_get()){
 800089c:	f001 f8f0 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d009      	beq.n	80008ba <connectFirebaseHost+0x42>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80008a6:	4943      	ldr	r1, [pc, #268]	; (80009b4 <connectFirebaseHost+0x13c>)
 80008a8:	4843      	ldr	r0, [pc, #268]	; (80009b8 <connectFirebaseHost+0x140>)
 80008aa:	f001 fbbf 	bl	800202c <USART1_search_buffer_Rx>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <connectFirebaseHost+0x134>)
 80008b4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80008b6:	f001 f8ef 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <connectFirebaseHost+0x134>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d104      	bne.n	80008cc <connectFirebaseHost+0x54>
 80008c2:	f000 fff3 	bl	80018ac <TIMER4_timeout_done>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0e7      	beq.n	800089c <connectFirebaseHost+0x24>
			}
		}
		if(found == PASS){
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <connectFirebaseHost+0x134>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00c      	beq.n	80008ee <connectFirebaseHost+0x76>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
			found = STANDBY; // reset found
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <connectFirebaseHost+0x134>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 80008e0:	4833      	ldr	r0, [pc, #204]	; (80009b0 <connectFirebaseHost+0x138>)
 80008e2:	f001 fb1d 	bl	8001f20 <USART1_write>
	while(_ssl_tries > 0){
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1d3      	bne.n	8000894 <connectFirebaseHost+0x1c>
 80008ec:	e000      	b.n	80008f0 <connectFirebaseHost+0x78>
			break; //move on to next command
 80008ee:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <connectFirebaseHost+0x134>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d003      	beq.n	8000900 <connectFirebaseHost+0x88>
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <connectFirebaseHost+0x134>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d101      	bne.n	8000904 <connectFirebaseHost+0x8c>
		return FALSE;
 8000900:	2300      	movs	r3, #0
 8000902:	e04e      	b.n	80009a2 <connectFirebaseHost+0x12a>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000908:	2100      	movs	r1, #0
 800090a:	482c      	ldr	r0, [pc, #176]	; (80009bc <connectFirebaseHost+0x144>)
 800090c:	f001 fd73 	bl	80023f6 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <connectFirebaseHost+0x148>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <connectFirebaseHost+0x14c>)
 8000916:	492c      	ldr	r1, [pc, #176]	; (80009c8 <connectFirebaseHost+0x150>)
 8000918:	4828      	ldr	r0, [pc, #160]	; (80009bc <connectFirebaseHost+0x144>)
 800091a:	f001 fd75 	bl	8002408 <siprintf>

	found = STANDBY;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <connectFirebaseHost+0x134>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000924:	4825      	ldr	r0, [pc, #148]	; (80009bc <connectFirebaseHost+0x144>)
 8000926:	f001 fafb 	bl	8001f20 <USART1_write>
	while(_cipstart_tries > 0){
 800092a:	e036      	b.n	800099a <connectFirebaseHost+0x122>
		TIMER4_set_timeout(_cipstart_timeout);
 800092c:	6838      	ldr	r0, [r7, #0]
 800092e:	f000 ffab 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000932:	e01a      	b.n	800096a <connectFirebaseHost+0xf2>
			if(USART1_NEW_LINE_FOUND_get()){
 8000934:	f001 f8a4 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d015      	beq.n	800096a <connectFirebaseHost+0xf2>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800093e:	491d      	ldr	r1, [pc, #116]	; (80009b4 <connectFirebaseHost+0x13c>)
 8000940:	481d      	ldr	r0, [pc, #116]	; (80009b8 <connectFirebaseHost+0x140>)
 8000942:	f001 fb73 	bl	800202c <USART1_search_buffer_Rx>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <connectFirebaseHost+0x134>)
 800094c:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <connectFirebaseHost+0x134>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d107      	bne.n	8000966 <connectFirebaseHost+0xee>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 8000956:	4917      	ldr	r1, [pc, #92]	; (80009b4 <connectFirebaseHost+0x13c>)
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <connectFirebaseHost+0x154>)
 800095a:	f001 fb67 	bl	800202c <USART1_search_buffer_Rx>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <connectFirebaseHost+0x134>)
 8000964:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000966:	f001 f897 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <connectFirebaseHost+0x134>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <connectFirebaseHost+0x104>
 8000972:	f000 ff9b 	bl	80018ac <TIMER4_timeout_done>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0db      	beq.n	8000934 <connectFirebaseHost+0xbc>
			}
		}
		if(found == PASS){
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <connectFirebaseHost+0x134>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <connectFirebaseHost+0x110>
			return TRUE;
 8000984:	2301      	movs	r3, #1
 8000986:	e00c      	b.n	80009a2 <connectFirebaseHost+0x12a>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3b01      	subs	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
			found = STANDBY; // reset found
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <connectFirebaseHost+0x134>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <connectFirebaseHost+0x144>)
 8000996:	f001 fac3 	bl	8001f20 <USART1_write>
	while(_cipstart_tries > 0){
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1c5      	bne.n	800092c <connectFirebaseHost+0xb4>
		}
	}
	return FALSE;
 80009a0:	2300      	movs	r3, #0



}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000005c 	.word	0x2000005c
 80009b0:	08003124 	.word	0x08003124
 80009b4:	080030d8 	.word	0x080030d8
 80009b8:	080030e0 	.word	0x080030e0
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	20000058 	.word	0x20000058
 80009c4:	20000000 	.word	0x20000000
 80009c8:	0800313c 	.word	0x0800313c
 80009cc:	0800315c 	.word	0x0800315c

080009d0 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	2100      	movs	r1, #0
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <createPostMsg+0x68>)
 80009dc:	f001 fd0b 	bl	80023f6 <memset>
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 80009e0:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <createPostMsg+0x68>)
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <createPostMsg+0x6c>)
 80009e4:	4610      	mov	r0, r2
 80009e6:	4619      	mov	r1, r3
 80009e8:	235c      	movs	r3, #92	; 0x5c
 80009ea:	461a      	mov	r2, r3
 80009ec:	f001 fcf8 	bl	80023e0 <memcpy>
	content_len = strlen((char*)content);
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <createPostMsg+0x68>)
 80009f2:	f7ff fbbd 	bl	8000170 <strlen>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <createPostMsg+0x70>)
 80009fa:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80009fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a00:	2100      	movs	r1, #0
 8000a02:	4810      	ldr	r0, [pc, #64]	; (8000a44 <createPostMsg+0x74>)
 8000a04:	f001 fcf7 	bl	80023f6 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <createPostMsg+0x70>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <createPostMsg+0x68>)
 8000a0e:	9202      	str	r2, [sp, #8]
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <createPostMsg+0x78>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <createPostMsg+0x7c>)
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <createPostMsg+0x80>)
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <createPostMsg+0x84>)
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <createPostMsg+0x74>)
 8000a1e:	f001 fcf3 	bl	8002408 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <createPostMsg+0x74>)
 8000a24:	f7ff fba4 	bl	8000170 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	3b02      	subs	r3, #2
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <createPostMsg+0x88>)
 8000a2e:	6013      	str	r3, [r2, #0]

}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200003f0 	.word	0x200003f0
 8000a3c:	08003170 	.word	0x08003170
 8000a40:	20000470 	.word	0x20000470
 8000a44:	200001ec 	.word	0x200001ec
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	2000002c 	.word	0x2000002c
 8000a50:	20000de0 	.word	0x20000de0
 8000a54:	080031cc 	.word	0x080031cc
 8000a58:	200003ec 	.word	0x200003ec

08000a5c <createGetMsg>:

void createGetMsg(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	2100      	movs	r1, #0
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <createGetMsg+0x38>)
 8000a6a:	f001 fcc4 	bl	80023f6 <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <createGetMsg+0x3c>)
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <createGetMsg+0x40>)
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <createGetMsg+0x44>)
 8000a76:	490b      	ldr	r1, [pc, #44]	; (8000aa4 <createGetMsg+0x48>)
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <createGetMsg+0x38>)
 8000a7a:	f001 fcc5 	bl	8002408 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <createGetMsg+0x38>)
 8000a80:	f7ff fb76 	bl	8000170 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	3b02      	subs	r3, #2
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <createGetMsg+0x4c>)
 8000a8a:	6013      	str	r3, [r2, #0]

}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001ec 	.word	0x200001ec
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	20000de0 	.word	0x20000de0
 8000aa4:	08003244 	.word	0x08003244
 8000aa8:	200003ec 	.word	0x200003ec

08000aac <createPutMsg>:

void createPutMsg(void){
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4817      	ldr	r0, [pc, #92]	; (8000b14 <createPutMsg+0x68>)
 8000ab8:	f001 fc9d 	bl	80023f6 <memset>
	sprintf((char*)content,"{\"is_in_use\": true}");
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <createPutMsg+0x68>)
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <createPutMsg+0x6c>)
 8000ac0:	4614      	mov	r4, r2
 8000ac2:	461d      	mov	r5, r3
 8000ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	6023      	str	r3, [r4, #0]
	content_len = strlen((char*)content);
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <createPutMsg+0x68>)
 8000ace:	f7ff fb4f 	bl	8000170 <strlen>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <createPutMsg+0x70>)
 8000ad6:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	2100      	movs	r1, #0
 8000ade:	4810      	ldr	r0, [pc, #64]	; (8000b20 <createPutMsg+0x74>)
 8000ae0:	f001 fc89 	bl	80023f6 <memset>
	sprintf((char*)http,"PUT /device-list/%s.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)DEVICE_ID,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <createPutMsg+0x70>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <createPutMsg+0x68>)
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <createPutMsg+0x78>)
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <createPutMsg+0x7c>)
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <createPutMsg+0x80>)
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <createPutMsg+0x84>)
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <createPutMsg+0x74>)
 8000afa:	f001 fc85 	bl	8002408 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <createPutMsg+0x74>)
 8000b00:	f7ff fb36 	bl	8000170 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	3b02      	subs	r3, #2
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <createPutMsg+0x88>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200003f0 	.word	0x200003f0
 8000b18:	08003288 	.word	0x08003288
 8000b1c:	20000470 	.word	0x20000470
 8000b20:	200001ec 	.word	0x200001ec
 8000b24:	20000000 	.word	0x20000000
 8000b28:	2000002c 	.word	0x2000002c
 8000b2c:	20000de0 	.word	0x20000de0
 8000b30:	0800329c 	.word	0x0800329c
 8000b34:	200003ec 	.word	0x200003ec

08000b38 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4847      	ldr	r0, [pc, #284]	; (8000c6c <sendRequest+0x134>)
 8000b4e:	f001 fc52 	bl	80023f6 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 8000b52:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <sendRequest+0x138>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4946      	ldr	r1, [pc, #280]	; (8000c74 <sendRequest+0x13c>)
 8000b5a:	4844      	ldr	r0, [pc, #272]	; (8000c6c <sendRequest+0x134>)
 8000b5c:	f001 fc54 	bl	8002408 <siprintf>

	found = STANDBY;
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <sendRequest+0x140>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000b66:	4841      	ldr	r0, [pc, #260]	; (8000c6c <sendRequest+0x134>)
 8000b68:	f001 f9da 	bl	8001f20 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000b6c:	e034      	b.n	8000bd8 <sendRequest+0xa0>
		TIMER4_set_timeout(_CIPSEND_timeout);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 fe8a 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000b74:	e01a      	b.n	8000bac <sendRequest+0x74>
			if(USART1_NEW_LINE_FOUND_get()){
 8000b76:	f000 ff83 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d015      	beq.n	8000bac <sendRequest+0x74>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000b80:	493e      	ldr	r1, [pc, #248]	; (8000c7c <sendRequest+0x144>)
 8000b82:	483f      	ldr	r0, [pc, #252]	; (8000c80 <sendRequest+0x148>)
 8000b84:	f001 fa52 	bl	800202c <USART1_search_buffer_Rx>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	; (8000c78 <sendRequest+0x140>)
 8000b8e:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000b90:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <sendRequest+0x140>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d107      	bne.n	8000ba8 <sendRequest+0x70>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000b98:	493a      	ldr	r1, [pc, #232]	; (8000c84 <sendRequest+0x14c>)
 8000b9a:	4839      	ldr	r0, [pc, #228]	; (8000c80 <sendRequest+0x148>)
 8000b9c:	f001 fa46 	bl	800202c <USART1_search_buffer_Rx>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <sendRequest+0x140>)
 8000ba6:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000ba8:	f000 ff76 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <sendRequest+0x140>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d104      	bne.n	8000bbe <sendRequest+0x86>
 8000bb4:	f000 fe7a 	bl	80018ac <TIMER4_timeout_done>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0db      	beq.n	8000b76 <sendRequest+0x3e>
			}
		}
		if(found == PASS){
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <sendRequest+0x140>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00c      	beq.n	8000be0 <sendRequest+0xa8>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
			found = STANDBY; // reset found
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <sendRequest+0x140>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)command);
 8000bd2:	4826      	ldr	r0, [pc, #152]	; (8000c6c <sendRequest+0x134>)
 8000bd4:	f001 f9a4 	bl	8001f20 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1c7      	bne.n	8000b6e <sendRequest+0x36>
 8000bde:	e000      	b.n	8000be2 <sendRequest+0xaa>
			break; //move on to next command
 8000be0:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <sendRequest+0x140>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d003      	beq.n	8000bf2 <sendRequest+0xba>
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <sendRequest+0x140>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d101      	bne.n	8000bf6 <sendRequest+0xbe>
		return FALSE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e035      	b.n	8000c62 <sendRequest+0x12a>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <sendRequest+0x140>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)http);
 8000bfc:	4822      	ldr	r0, [pc, #136]	; (8000c88 <sendRequest+0x150>)
 8000bfe:	f001 f98f 	bl	8001f20 <USART1_write>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000c02:	e02a      	b.n	8000c5a <sendRequest+0x122>
		TIMER4_set_timeout(_SEND_OK_timeout);
 8000c04:	6838      	ldr	r0, [r7, #0]
 8000c06:	f000 fe3f 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c0a:	e00e      	b.n	8000c2a <sendRequest+0xf2>
			if(USART1_NEW_LINE_FOUND_get()){
 8000c0c:	f000 ff38 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d009      	beq.n	8000c2a <sendRequest+0xf2>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000c16:	491d      	ldr	r1, [pc, #116]	; (8000c8c <sendRequest+0x154>)
 8000c18:	481d      	ldr	r0, [pc, #116]	; (8000c90 <sendRequest+0x158>)
 8000c1a:	f001 fa07 	bl	800202c <USART1_search_buffer_Rx>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <sendRequest+0x140>)
 8000c24:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000c26:	f000 ff37 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <sendRequest+0x140>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d104      	bne.n	8000c3c <sendRequest+0x104>
 8000c32:	f000 fe3b 	bl	80018ac <TIMER4_timeout_done>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0e7      	beq.n	8000c0c <sendRequest+0xd4>
			}
		}
		if(found == PASS){
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <sendRequest+0x140>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <sendRequest+0x110>
			return TRUE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e00c      	b.n	8000c62 <sendRequest+0x12a>
		}
		else{
			_SEND_OK_tries--;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
			found = STANDBY; // reset found
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <sendRequest+0x140>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)http);
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <sendRequest+0x150>)
 8000c56:	f001 f963 	bl	8001f20 <USART1_write>
	while(_SEND_OK_tries > 0){
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1d1      	bne.n	8000c04 <sendRequest+0xcc>
		}
	}
	return FALSE;
 8000c60:	2300      	movs	r3, #0

}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000ec 	.word	0x200000ec
 8000c70:	200003ec 	.word	0x200003ec
 8000c74:	08003310 	.word	0x08003310
 8000c78:	2000005c 	.word	0x2000005c
 8000c7c:	080030d8 	.word	0x080030d8
 8000c80:	08003324 	.word	0x08003324
 8000c84:	08003328 	.word	0x08003328
 8000c88:	200001ec 	.word	0x200001ec
 8000c8c:	0800311c 	.word	0x0800311c
 8000c90:	08003334 	.word	0x08003334

08000c94 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <readResponse+0x5c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fdf0 	bl	8001888 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000ca8:	e00e      	b.n	8000cc8 <readResponse+0x34>
		if(USART1_NEW_LINE_FOUND_get()){
 8000caa:	f000 fee9 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d009      	beq.n	8000cc8 <readResponse+0x34>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <readResponse+0x60>)
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <readResponse+0x64>)
 8000cb8:	f001 f9b8 	bl	800202c <USART1_search_buffer_Rx>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <readResponse+0x5c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 8000cc4:	f000 fee8 	bl	8001a98 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <readResponse+0x5c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <readResponse+0x46>
 8000cd0:	f000 fdec 	bl	80018ac <TIMER4_timeout_done>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0e7      	beq.n	8000caa <readResponse+0x16>
		}
	}
	if(found == PASS){
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <readResponse+0x5c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <readResponse+0x52>
		return TRUE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <readResponse+0x54>
	}
	else{
		return FALSE;
 8000ce6:	2300      	movs	r3, #0
	}

}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000005c 	.word	0x2000005c
 8000cf4:	0800311c 	.word	0x0800311c
 8000cf8:	08003328 	.word	0x08003328

08000cfc <parseResponse>:


BOOL parseResponse(uint32_t timeout){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <parseResponse+0x7c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
	state = NON;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <parseResponse+0x80>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 fdb9 	bl	8001888 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000d16:	e01b      	b.n	8000d50 <parseResponse+0x54>
		if(USART1_NEW_LINE_FOUND_get()){
 8000d18:	f000 feb2 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d016      	beq.n	8000d50 <parseResponse+0x54>
			state = USART1_check_state_buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <parseResponse+0x84>)
 8000d24:	4917      	ldr	r1, [pc, #92]	; (8000d84 <parseResponse+0x88>)
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <parseResponse+0x8c>)
 8000d28:	f001 f9d8 	bl	80020dc <USART1_check_state_buffer_Rx>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <parseResponse+0x80>)
 8000d32:	701a      	strb	r2, [r3, #0]
			if(state != NON){
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <parseResponse+0x80>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d007      	beq.n	8000d4c <parseResponse+0x50>
				found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000d3c:	4913      	ldr	r1, [pc, #76]	; (8000d8c <parseResponse+0x90>)
 8000d3e:	4814      	ldr	r0, [pc, #80]	; (8000d90 <parseResponse+0x94>)
 8000d40:	f001 f974 	bl	800202c <USART1_search_buffer_Rx>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <parseResponse+0x7c>)
 8000d4a:	701a      	strb	r2, [r3, #0]
			}
			USART1_NEW_LINE_READ_set();
 8000d4c:	f000 fea4 	bl	8001a98 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <parseResponse+0x7c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d104      	bne.n	8000d62 <parseResponse+0x66>
 8000d58:	f000 fda8 	bl	80018ac <TIMER4_timeout_done>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0da      	beq.n	8000d18 <parseResponse+0x1c>
		}
	}
	if(found == PASS){
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <parseResponse+0x7c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <parseResponse+0x72>
		return TRUE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <parseResponse+0x74>
	}
	else{
		return FALSE;
 8000d6e:	2300      	movs	r3, #0
	}

}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000005c 	.word	0x2000005c
 8000d7c:	20000475 	.word	0x20000475
 8000d80:	08003340 	.word	0x08003340
 8000d84:	0800334c 	.word	0x0800334c
 8000d88:	08003358 	.word	0x08003358
 8000d8c:	0800311c 	.word	0x0800311c
 8000d90:	08003328 	.word	0x08003328

08000d94 <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <closeConnection+0x80>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CIPCLOSE);
 8000da4:	481c      	ldr	r0, [pc, #112]	; (8000e18 <closeConnection+0x84>)
 8000da6:	f001 f8bb 	bl	8001f20 <USART1_write>
	while(tries > 0){
 8000daa:	e02a      	b.n	8000e02 <closeConnection+0x6e>
		TIMER4_set_timeout(timeout);
 8000dac:	6838      	ldr	r0, [r7, #0]
 8000dae:	f000 fd6b 	bl	8001888 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000db2:	e00e      	b.n	8000dd2 <closeConnection+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000db4:	f000 fe64 	bl	8001a80 <USART1_NEW_LINE_FOUND_get>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d009      	beq.n	8000dd2 <closeConnection+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000dbe:	4917      	ldr	r1, [pc, #92]	; (8000e1c <closeConnection+0x88>)
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <closeConnection+0x8c>)
 8000dc2:	f001 f933 	bl	800202c <USART1_search_buffer_Rx>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <closeConnection+0x80>)
 8000dcc:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000dce:	f000 fe63 	bl	8001a98 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <closeConnection+0x80>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d104      	bne.n	8000de4 <closeConnection+0x50>
 8000dda:	f000 fd67 	bl	80018ac <TIMER4_timeout_done>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0e7      	beq.n	8000db4 <closeConnection+0x20>
			}
		}
		if(found == PASS){
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <closeConnection+0x80>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <closeConnection+0x5c>
			return TRUE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e00c      	b.n	8000e0a <closeConnection+0x76>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
			found = STANDBY; // reset found
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <closeConnection+0x80>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
			USART1_write((uint8_t*)AT_CIPCLOSE);
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <closeConnection+0x84>)
 8000dfe:	f001 f88f 	bl	8001f20 <USART1_write>
	while(tries > 0){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1d1      	bne.n	8000dac <closeConnection+0x18>
		}
	}
	return FALSE;
 8000e08:	2300      	movs	r3, #0

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000005c 	.word	0x2000005c
 8000e18:	08003364 	.word	0x08003364
 8000e1c:	080030d8 	.word	0x080030d8
 8000e20:	080030e0 	.word	0x080030e0

08000e24 <QUEUE_init>:

static Queue queue;


void QUEUE_init()
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-QUEUE_init->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <QUEUE_init+0x24>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <QUEUE_init+0x24>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <QUEUE_init+0x24>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000478 	.word	0x20000478

08000e4c <QUEUE_add_event>:


void QUEUE_add_event(Handler handler)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

	if(QUEUE_isFull()){
 8000e54:	f000 f854 	bl	8000f00 <QUEUE_isFull>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d118      	bne.n	8000e90 <QUEUE_add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e72:	2b3e      	cmp	r3, #62	; 0x3e
 8000e74:	d807      	bhi.n	8000e86 <QUEUE_add_event+0x3a>
		queue.writeIndex++;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e80:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000e84:	e005      	b.n	8000e92 <QUEUE_add_event+0x46>
	else
		queue.writeIndex = 0;
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <QUEUE_add_event+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000e8e:	e000      	b.n	8000e92 <QUEUE_add_event+0x46>
		return;
 8000e90:	bf00      	nop

}
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000478 	.word	0x20000478

08000e9c <QUEUE_do_event>:



void *QUEUE_do_event()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	void *res;

	if(QUEUE_isEmpty()){
 8000ea2:	f000 f843 	bl	8000f2c <QUEUE_isEmpty>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <QUEUE_do_event+0x14>
		return NULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e020      	b.n	8000ef2 <QUEUE_do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <QUEUE_do_event+0x60>)
 8000eb2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000eb6:	4a11      	ldr	r2, [pc, #68]	; (8000efc <QUEUE_do_event+0x60>)
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	4798      	blx	r3
 8000ebe:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <QUEUE_do_event+0x60>)
 8000ec2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <QUEUE_do_event+0x60>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <QUEUE_do_event+0x60>)
 8000ed0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8000ed6:	d807      	bhi.n	8000ee8 <QUEUE_do_event+0x4c>
      queue.readIndex++;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <QUEUE_do_event+0x60>)
 8000eda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <QUEUE_do_event+0x60>)
 8000ee2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000ee6:	e003      	b.n	8000ef0 <QUEUE_do_event+0x54>
   else
      queue.readIndex = 0;
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <QUEUE_do_event+0x60>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000ef0:	687b      	ldr	r3, [r7, #4]

}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000478 	.word	0x20000478

08000f00 <QUEUE_isFull>:


BOOL QUEUE_isFull()
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <QUEUE_isFull+0x28>)
 8000f06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <QUEUE_isFull+0x28>)
 8000f0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000f10:	3301      	adds	r3, #1
 8000f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f16:	429a      	cmp	r2, r3
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000478 	.word	0x20000478

08000f2c <QUEUE_isEmpty>:


BOOL QUEUE_isEmpty()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <QUEUE_isEmpty+0x24>)
 8000f32:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <QUEUE_isEmpty+0x24>)
 8000f38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000478 	.word	0x20000478

08000f54 <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <EXTI15_10_IRQHandler+0x24>)
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <EXTI15_10_IRQHandler+0x24>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <EXTI15_10_IRQHandler+0x24>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6153      	str	r3, [r2, #20]

	QUEUE_add_event(interrupt_handler);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <EXTI15_10_IRQHandler+0x28>)
 8000f6e:	f7ff ff6d 	bl	8000e4c <QUEUE_add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010400 	.word	0x40010400
 8000f7c:	08000f81 	.word	0x08000f81

08000f80 <interrupt_handler>:

void *interrupt_handler(void){
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <interrupt_handler+0x3c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <interrupt_handler+0x40>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <interrupt_handler+0x40>)
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <interrupt_handler+0x3c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e008      	b.n	8000fb2 <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <interrupt_handler+0x40>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <interrupt_handler+0x40>)
 8000fa6:	f023 0320 	bic.w	r3, r3, #32
 8000faa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <interrupt_handler+0x3c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000fb2:	2300      	movs	r3, #0

}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000e80 	.word	0x20000e80
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <__NVIC_EnableIRQ+0x34>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db10      	blt.n	8001078 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4909      	ldr	r1, [pc, #36]	; (8001084 <__NVIC_DisableIRQ+0x40>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	3320      	adds	r3, #32
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001070:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001074:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0c      	blt.n	80010b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_ClearPendingIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	3360      	adds	r3, #96	; 0x60
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <SENSOR_init>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void SENSOR_init(){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <SENSOR_init+0x7c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <SENSOR_init+0x7c>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <SENSOR_init+0x7c>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <SENSOR_init+0x7c>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <SENSOR_init+0x80>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <SENSOR_init+0x80>)
 800113a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800113e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <SENSOR_init+0x80>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <SENSOR_init+0x80>)
 8001146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800114a:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SENSOR_init+0x80>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <SENSOR_init+0x80>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <SENSOR_init+0x84>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <SENSOR_init+0x84>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <SENSOR_init+0x88>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <SENSOR_init+0x88>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <SENSOR_init+0x88>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SENSOR_init+0x88>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800117e:	2007      	movs	r0, #7
 8001180:	f7ff ff20 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8001184:	2100      	movs	r1, #0
 8001186:	200a      	movs	r0, #10
 8001188:	f7ff ff9c 	bl	80010c4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800118c:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010400 	.word	0x40010400

080011a4 <enable_sensor>:

void enable_sensor(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 80011aa:	200a      	movs	r0, #10
 80011ac:	f7ff ff6c 	bl	8001088 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 80011b0:	200a      	movs	r0, #10
 80011b2:	f7ff ff2b 	bl	800100c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011b6:	b662      	cpsie	i
	__enable_irq();

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <disable_sensor>:

void disable_sensor(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 80011c2:	200a      	movs	r0, #10
 80011c4:	f7ff ff3e 	bl	8001044 <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
	__enable_irq();

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <EXTI4_IRQHandler+0x2c>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <EXTI4_IRQHandler+0x2c>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6153      	str	r3, [r2, #20]
	if(TIMER3_timeout_done())
 80011e0:	f000 fb40 	bl	8001864 <TIMER3_timeout_done>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <EXTI4_IRQHandler+0x26>
	{
		QUEUE_add_event(alert_Handler);
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <EXTI4_IRQHandler+0x30>)
 80011ec:	f7ff fe2e 	bl	8000e4c <QUEUE_add_event>
		TIMER3_set_timeout(60); //60 seconds = 1 minute
 80011f0:	203c      	movs	r0, #60	; 0x3c
 80011f2:	f000 fb25 	bl	8001840 <TIMER3_set_timeout>
	}

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010400 	.word	0x40010400
 8001200:	08000331 	.word	0x08000331

08001204 <LED_init>:
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ() and NVIC_SetPriority()*/
#include <string.h>
#include <stdlib.h>

void LED_init(){
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	/*USING LD2 (PA5) as output*/
	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <LED_init+0x30>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <LED_init+0x30>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <LED_init+0x34>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <LED_init+0x34>)
 800121a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800121e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <LED_init+0x34>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <LED_init+0x34>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122a:	6013      	str	r3, [r2, #0]

}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800

0800123c <LED_on>:
	// Toggle GPIOA pin 5.
	GPIOA->ODR ^= 0x0020;
}

void LED_on()
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	GPIOA->ODR |= 0x0020;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <LED_on+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4a03      	ldr	r2, [pc, #12]	; (8001254 <LED_on+0x18>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40010800 	.word	0x40010800

08001258 <LED_off>:

void LED_off()
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(0x0020);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <LED_off+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <LED_off+0x18>)
 8001262:	f023 0320 	bic.w	r3, r3, #32
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40010800 	.word	0x40010800

08001274 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	//init_MCO();




	USART1_init(); // for ESP8266
 8001278:	f000 fc8e 	bl	8001b98 <USART1_init>
	USART2_init(); // for debugging
 800127c:	f000 fc30 	bl	8001ae0 <USART2_init>

	TIMER2_init(); // for monitoring switch state.
 8001280:	f000 f994 	bl	80015ac <TIMER2_init>
	TIMER3_init(); // for sensor delay
 8001284:	f000 f9d4 	bl	8001630 <TIMER3_init>
	TIMER4_init(); // for ESP8266 timeout
 8001288:	f000 fa0e 	bl	80016a8 <TIMER4_init>

	QUEUE_init();
 800128c:	f7ff fdca 	bl	8000e24 <QUEUE_init>

	CONFIGURATIONS_set_device_id();
 8001290:	f7fe ff9a 	bl	80001c8 <CONFIGURATIONS_set_device_id>

	USART2_enable_Rx(); // for ESC
 8001294:	f000 fcdc 	bl	8001c50 <USART2_enable_Rx>

	USART2_write((uint8_t*)("\033[32m\r\nPress ESC to configure\033[0m"));
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <main+0x60>)
 800129a:	f000 fd2b 	bl	8001cf4 <USART2_write>
	TIMER4_set_timeout(60);
 800129e:	203c      	movs	r0, #60	; 0x3c
 80012a0:	f000 faf2 	bl	8001888 <TIMER4_set_timeout>
	while(QUEUE_isEmpty() && !TIMER4_timeout_done());
 80012a4:	bf00      	nop
 80012a6:	f7ff fe41 	bl	8000f2c <QUEUE_isEmpty>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <main+0x46>
 80012b0:	f000 fafc 	bl	80018ac <TIMER4_timeout_done>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f5      	beq.n	80012a6 <main+0x32>

	SENSOR_init(); // sensor interrupts are not inabled
 80012ba:	f7ff ff2d 	bl	8001118 <SENSOR_init>

	LED_init();
 80012be:	f7ff ffa1 	bl	8001204 <LED_init>



	//init_i2c1();
	USART2_write((uint8_t*)("\r\n_______________\r\n"));//For test
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <main+0x64>)
 80012c4:	f000 fd16 	bl	8001cf4 <USART2_write>

	while(1)
	{

		QUEUE_do_event();
 80012c8:	f7ff fde8 	bl	8000e9c <QUEUE_do_event>
		SYSTEM_CONTROL_monitor_switch_state(120); // every 2 minutes
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 f8ed 	bl	80014ac <SYSTEM_CONTROL_monitor_switch_state>
		QUEUE_do_event();
 80012d2:	e7f9      	b.n	80012c8 <main+0x54>
 80012d4:	08003404 	.word	0x08003404
 80012d8:	08003428 	.word	0x08003428

080012dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x50>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x16>
		heap_end = &end;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <_sbrk+0x50>)
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <_sbrk+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <_sbrk+0x50>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_sbrk+0x50>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	466a      	mov	r2, sp
 8001302:	4293      	cmp	r3, r2
 8001304:	d907      	bls.n	8001316 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001306:	f001 f841 	bl	800238c <__errno>
 800130a:	4602      	mov	r2, r0
 800130c:	230c      	movs	r3, #12
 800130e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e006      	b.n	8001324 <_sbrk+0x48>
	}

	heap_end += incr;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <_sbrk+0x50>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <_sbrk+0x50>)
 8001320:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000584 	.word	0x20000584
 8001330:	20000e88 	.word	0x20000e88

08001334 <SYSTEM_CONTROL_set_up>:
uint8_t PWD[WiFi_SIZE];  // extern see configurations
uint8_t DEVICE_ID[ID_SIZE]; // extern see configurations



BOOL SYSTEM_CONTROL_set_up(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\033[96m\r\n\r\nDear user, thank you for participating in our project!\r\n\033[0m"));
 8001338:	484d      	ldr	r0, [pc, #308]	; (8001470 <SYSTEM_CONTROL_set_up+0x13c>)
 800133a:	f000 fcdb 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)("\033[96mJust a few more steps...\r\n\r\n\033[0m"));
 800133e:	484d      	ldr	r0, [pc, #308]	; (8001474 <SYSTEM_CONTROL_set_up+0x140>)
 8001340:	f000 fcd8 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)("\033[96mThe security device needs to connect to your WiFi network.\r\n\033[0m"));
 8001344:	484c      	ldr	r0, [pc, #304]	; (8001478 <SYSTEM_CONTROL_set_up+0x144>)
 8001346:	f000 fcd5 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)("\033[96mFor that, we need you to enter your network connection information.\r\n\033[0m"));
 800134a:	484c      	ldr	r0, [pc, #304]	; (800147c <SYSTEM_CONTROL_set_up+0x148>)
 800134c:	f000 fcd2 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)("\033[96mFor your assurance, this information will not be saved in any database!\r\n\033[0m"));
 8001350:	484b      	ldr	r0, [pc, #300]	; (8001480 <SYSTEM_CONTROL_set_up+0x14c>)
 8001352:	f000 fccf 	bl	8001cf4 <USART2_write>

	// set network ssid
	USART2_set_buffer_Rx(); // reset buffer
 8001356:	f000 fcb7 	bl	8001cc8 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 800135a:	e034      	b.n	80013c6 <SYSTEM_CONTROL_set_up+0x92>
		USART2_NEW_LINE_READ_set();
 800135c:	f000 fbb4 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter network name (case-sensitive): \033[0m");
 8001360:	4848      	ldr	r0, [pc, #288]	; (8001484 <SYSTEM_CONTROL_set_up+0x150>)
 8001362:	f000 fcc7 	bl	8001cf4 <USART2_write>
		USART2_enable_Rx();
 8001366:	f000 fc73 	bl	8001c50 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 800136a:	bf00      	nop
 800136c:	f000 fba0 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0fa      	beq.n	800136c <SYSTEM_CONTROL_set_up+0x38>
		USART2_disable_Rx();
 8001376:	f000 fc79 	bl	8001c6c <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 800137a:	e00e      	b.n	800139a <SYSTEM_CONTROL_set_up+0x66>
			USART2_NEW_LINE_READ_set();
 800137c:	f000 fba4 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\033[91m\r\nThe network name is too long, try again: \033[0m");
 8001380:	4841      	ldr	r0, [pc, #260]	; (8001488 <SYSTEM_CONTROL_set_up+0x154>)
 8001382:	f000 fcb7 	bl	8001cf4 <USART2_write>
			USART2_enable_Rx();
 8001386:	f000 fc63 	bl	8001c50 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 800138a:	bf00      	nop
 800138c:	f000 fb90 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fa      	beq.n	800138c <SYSTEM_CONTROL_set_up+0x58>
			USART2_disable_Rx();
 8001396:	f000 fc69 	bl	8001c6c <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, SSID)){
 800139a:	493c      	ldr	r1, [pc, #240]	; (800148c <SYSTEM_CONTROL_set_up+0x158>)
 800139c:	2040      	movs	r0, #64	; 0x40
 800139e:	f000 fd65 	bl	8001e6c <USART2_read_buffer_Rx>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e9      	beq.n	800137c <SYSTEM_CONTROL_set_up+0x48>
		}
		USART2_NEW_LINE_READ_set();
 80013a8:	f000 fb8e 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32mEnter 'ok' to continue or any other key to change network name: \033[0m");
 80013ac:	4838      	ldr	r0, [pc, #224]	; (8001490 <SYSTEM_CONTROL_set_up+0x15c>)
 80013ae:	f000 fca1 	bl	8001cf4 <USART2_write>
		USART2_enable_Rx();
 80013b2:	f000 fc4d 	bl	8001c50 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80013b6:	bf00      	nop
 80013b8:	f000 fb7a 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0fa      	beq.n	80013b8 <SYSTEM_CONTROL_set_up+0x84>
		USART2_disable_Rx();
 80013c2:	f000 fc53 	bl	8001c6c <USART2_disable_Rx>
	while(!USART2_ok()){
 80013c6:	f000 fd83 	bl	8001ed0 <USART2_ok>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0c5      	beq.n	800135c <SYSTEM_CONTROL_set_up+0x28>
	}
	USART2_NEW_LINE_READ_set();
 80013d0:	f000 fb7a 	bl	8001ac8 <USART2_NEW_LINE_READ_set>


	// set network password
	USART2_set_buffer_Rx(); // reset buffer
 80013d4:	f000 fc78 	bl	8001cc8 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 80013d8:	e034      	b.n	8001444 <SYSTEM_CONTROL_set_up+0x110>
		USART2_NEW_LINE_READ_set();
 80013da:	f000 fb75 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32m\r\nEnter network access code (password): \033[0m");
 80013de:	482d      	ldr	r0, [pc, #180]	; (8001494 <SYSTEM_CONTROL_set_up+0x160>)
 80013e0:	f000 fc88 	bl	8001cf4 <USART2_write>
		USART2_enable_Rx();
 80013e4:	f000 fc34 	bl	8001c50 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 80013e8:	bf00      	nop
 80013ea:	f000 fb61 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0fa      	beq.n	80013ea <SYSTEM_CONTROL_set_up+0xb6>
		USART2_disable_Rx();
 80013f4:	f000 fc3a 	bl	8001c6c <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 80013f8:	e00e      	b.n	8001418 <SYSTEM_CONTROL_set_up+0xe4>
			USART2_NEW_LINE_READ_set();
 80013fa:	f000 fb65 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\033[91m\r\nThe access code is to long, try again: \033[0m");
 80013fe:	4826      	ldr	r0, [pc, #152]	; (8001498 <SYSTEM_CONTROL_set_up+0x164>)
 8001400:	f000 fc78 	bl	8001cf4 <USART2_write>
			USART2_enable_Rx();
 8001404:	f000 fc24 	bl	8001c50 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001408:	bf00      	nop
 800140a:	f000 fb51 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0fa      	beq.n	800140a <SYSTEM_CONTROL_set_up+0xd6>
			USART2_disable_Rx();
 8001414:	f000 fc2a 	bl	8001c6c <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(WiFi_SIZE, PWD)){
 8001418:	4920      	ldr	r1, [pc, #128]	; (800149c <SYSTEM_CONTROL_set_up+0x168>)
 800141a:	2040      	movs	r0, #64	; 0x40
 800141c:	f000 fd26 	bl	8001e6c <USART2_read_buffer_Rx>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0e9      	beq.n	80013fa <SYSTEM_CONTROL_set_up+0xc6>
		}
		USART2_NEW_LINE_READ_set();
 8001426:	f000 fb4f 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\033[32mEnter 'ok' to continue or any other key to change password: \033[0m");
 800142a:	481d      	ldr	r0, [pc, #116]	; (80014a0 <SYSTEM_CONTROL_set_up+0x16c>)
 800142c:	f000 fc62 	bl	8001cf4 <USART2_write>
		USART2_enable_Rx();
 8001430:	f000 fc0e 	bl	8001c50 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8001434:	bf00      	nop
 8001436:	f000 fb3b 	bl	8001ab0 <USART2_NEW_LINE_FOUND_get>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0fa      	beq.n	8001436 <SYSTEM_CONTROL_set_up+0x102>
		USART2_disable_Rx();
 8001440:	f000 fc14 	bl	8001c6c <USART2_disable_Rx>
	while(!USART2_ok()){
 8001444:	f000 fd44 	bl	8001ed0 <USART2_ok>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0c5      	beq.n	80013da <SYSTEM_CONTROL_set_up+0xa6>
	}
	USART2_NEW_LINE_READ_set();
 800144e:	f000 fb3b 	bl	8001ac8 <USART2_NEW_LINE_READ_set>

	USART2_write((uint8_t*)"\033[96m\r\nTrying to connect...\r\nPlease wait, this might take a few minutes.\033[0m");
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <SYSTEM_CONTROL_set_up+0x170>)
 8001454:	f000 fc4e 	bl	8001cf4 <USART2_write>
	USART2_write((uint8_t*)"\r\n\r\n");
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <SYSTEM_CONTROL_set_up+0x174>)
 800145a:	f000 fc4b 	bl	8001cf4 <USART2_write>
	TIMER4_delay(5);
 800145e:	2005      	movs	r0, #5
 8001460:	f000 f9b2 	bl	80017c8 <TIMER4_delay>
	return registeration_Handler();
 8001464:	f7fe ffd2 	bl	800040c <registeration_Handler>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800343c 	.word	0x0800343c
 8001474:	08003484 	.word	0x08003484
 8001478:	080034ac 	.word	0x080034ac
 800147c:	080034f4 	.word	0x080034f4
 8001480:	08003544 	.word	0x08003544
 8001484:	08003598 	.word	0x08003598
 8001488:	080035cc 	.word	0x080035cc
 800148c:	20000e40 	.word	0x20000e40
 8001490:	08003604 	.word	0x08003604
 8001494:	08003650 	.word	0x08003650
 8001498:	08003684 	.word	0x08003684
 800149c:	20000dfc 	.word	0x20000dfc
 80014a0:	080036b8 	.word	0x080036b8
 80014a4:	08003700 	.word	0x08003700
 80014a8:	08003750 	.word	0x08003750

080014ac <SYSTEM_CONTROL_monitor_switch_state>:

void SYSTEM_CONTROL_monitor_switch_state(uint32_t seconds){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

	if(TIMER2_timeout_done()){
 80014b4:	f000 f9b2 	bl	800181c <TIMER2_timeout_done>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <SYSTEM_CONTROL_monitor_switch_state+0x1e>
		QUEUE_add_event(control_Handler);
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <SYSTEM_CONTROL_monitor_switch_state+0x28>)
 80014c0:	f7ff fcc4 	bl	8000e4c <QUEUE_add_event>
		TIMER2_set_timeout(seconds);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f997 	bl	80017f8 <TIMER2_set_timeout>
	}
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800036d 	.word	0x0800036d

080014d8 <__NVIC_SetPriorityGrouping>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <TIMER2_init>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;


void TIMER2_init(void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <TIMER2_init+0x7c>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <TIMER2_init+0x7c>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80015c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80015d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001602:	2007      	movs	r0, #7
 8001604:	f7ff ff68 	bl	80014d8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f7ff ffa4 	bl	8001558 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8001610:	201c      	movs	r0, #28
 8001612:	f7ff ff85 	bl	8001520 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001616:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <TIMER2_init+0x80>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <TIMER2_init+0x80>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	20000588 	.word	0x20000588

08001630 <TIMER3_init>:

void TIMER3_init(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <TIMER3_init+0x6c>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <TIMER3_init+0x6c>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <TIMER3_init+0x70>)
 8001642:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <TIMER3_init+0x70>)
 800164a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <TIMER3_init+0x70>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <TIMER3_init+0x70>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <TIMER3_init+0x70>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <TIMER3_init+0x70>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <TIMER3_init+0x70>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <TIMER3_init+0x70>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001676:	2007      	movs	r0, #7
 8001678:	f7ff ff2e 	bl	80014d8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800167c:	2100      	movs	r1, #0
 800167e:	201d      	movs	r0, #29
 8001680:	f7ff ff6a 	bl	8001558 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8001684:	201d      	movs	r0, #29
 8001686:	f7ff ff4b 	bl	8001520 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800168a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <TIMER3_init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <TIMER3_init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40000400 	.word	0x40000400
 80016a4:	20000590 	.word	0x20000590

080016a8 <TIMER4_init>:

void TIMER4_init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <TIMER4_init+0x6c>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <TIMER4_init+0x6c>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <TIMER4_init+0x70>)
 80016ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <TIMER4_init+0x70>)
 80016c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <TIMER4_init+0x70>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <TIMER4_init+0x70>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <TIMER4_init+0x70>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <TIMER4_init+0x70>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <TIMER4_init+0x70>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <TIMER4_init+0x70>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80016ee:	2007      	movs	r0, #7
 80016f0:	f7ff fef2 	bl	80014d8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80016f4:	2100      	movs	r1, #0
 80016f6:	201e      	movs	r0, #30
 80016f8:	f7ff ff2e 	bl	8001558 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80016fc:	201e      	movs	r0, #30
 80016fe:	f7ff ff0f 	bl	8001520 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001702:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <TIMER4_init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <TIMER4_init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	40000800 	.word	0x40000800
 800171c:	20000598 	.word	0x20000598

08001720 <TIMER2_enable>:


void TIMER2_enable(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8001724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <TIMER3_enable>:

void TIMER3_enable(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <TIMER3_enable+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <TIMER3_enable+0x18>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40000400 	.word	0x40000400

08001758 <TIMER4_enable>:

void TIMER4_enable(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <TIMER4_enable+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <TIMER4_enable+0x18>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40000800 	.word	0x40000800

08001774 <TIMER2_disable>:


void TIMER2_disable(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8001778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <TIMER3_disable>:

void TIMER3_disable(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <TIMER3_disable+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <TIMER3_disable+0x18>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40000400 	.word	0x40000400

080017ac <TIMER4_disable>:

void TIMER4_disable(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <TIMER4_disable+0x18>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <TIMER4_disable+0x18>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]

}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40000800 	.word	0x40000800

080017c8 <TIMER4_delay>:
	TIMER3_disable();

}

void TIMER4_delay(uint32_t num_of_sec)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	TIMER4_enable();
 80017d0:	f7ff ffc2 	bl	8001758 <TIMER4_enable>

	timer4.countTicks = 0;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <TIMER4_delay+0x2c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 80017da:	bf00      	nop
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <TIMER4_delay+0x2c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d8fa      	bhi.n	80017dc <TIMER4_delay+0x14>

	TIMER4_disable();
 80017e6:	f7ff ffe1 	bl	80017ac <TIMER4_disable>

}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000598 	.word	0x20000598

080017f8 <TIMER2_set_timeout>:


void TIMER2_set_timeout(uint32_t num_of_sec)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	timer2.targetTick = num_of_sec;
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <TIMER2_set_timeout+0x20>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6053      	str	r3, [r2, #4]
	timer2.countTicks = 0;
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <TIMER2_set_timeout+0x20>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
	TIMER2_enable();
 800180c:	f7ff ff88 	bl	8001720 <TIMER2_enable>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000588 	.word	0x20000588

0800181c <TIMER2_timeout_done>:

BOOL TIMER2_timeout_done(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <TIMER2_timeout_done+0x20>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <TIMER2_timeout_done+0x20>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d303      	bcc.n	8001834 <TIMER2_timeout_done+0x18>

		TIMER2_disable();
 800182c:	f7ff ffa2 	bl	8001774 <TIMER2_disable>
		return TRUE;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <TIMER2_timeout_done+0x1a>
	}
	return FALSE;
 8001834:	2300      	movs	r3, #0

}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000588 	.word	0x20000588

08001840 <TIMER3_set_timeout>:


void TIMER3_set_timeout(uint32_t num_of_sec)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <TIMER3_set_timeout+0x20>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6053      	str	r3, [r2, #4]
	timer3.countTicks = 0;
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <TIMER3_set_timeout+0x20>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
	TIMER3_enable();
 8001854:	f7ff ff72 	bl	800173c <TIMER3_enable>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000590 	.word	0x20000590

08001864 <TIMER3_timeout_done>:

BOOL TIMER3_timeout_done(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <TIMER3_timeout_done+0x20>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <TIMER3_timeout_done+0x20>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d303      	bcc.n	800187c <TIMER3_timeout_done+0x18>

		TIMER3_disable();
 8001874:	f7ff ff8c 	bl	8001790 <TIMER3_disable>
		return TRUE;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <TIMER3_timeout_done+0x1a>
	}
	return FALSE;
 800187c:	2300      	movs	r3, #0

}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000590 	.word	0x20000590

08001888 <TIMER4_set_timeout>:


void TIMER4_set_timeout(uint32_t num_of_seconds)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	timer4.targetTick = num_of_seconds;
 8001890:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <TIMER4_set_timeout+0x20>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6053      	str	r3, [r2, #4]
	timer4.countTicks = 0;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <TIMER4_set_timeout+0x20>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	TIMER4_enable();
 800189c:	f7ff ff5c 	bl	8001758 <TIMER4_enable>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000598 	.word	0x20000598

080018ac <TIMER4_timeout_done>:

BOOL TIMER4_timeout_done(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

	if(timer4.countTicks >= timer4.targetTick){
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <TIMER4_timeout_done+0x20>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <TIMER4_timeout_done+0x20>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d303      	bcc.n	80018c4 <TIMER4_timeout_done+0x18>

		TIMER4_disable();
 80018bc:	f7ff ff76 	bl	80017ac <TIMER4_disable>
		return TRUE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <TIMER4_timeout_done+0x1a>
	}
	return FALSE;
 80018c4:	2300      	movs	r3, #0

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000598 	.word	0x20000598

080018d0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d115      	bne.n	800190e <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~(0x0001);
 80018e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <TIM2_IRQHandler+0x48>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <TIM2_IRQHandler+0x48>)
 80018fa:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer2.countTicks == MAX_COUNT){
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <TIM2_IRQHandler+0x48>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001904:	4293      	cmp	r3, r2
 8001906:	d102      	bne.n	800190e <TIM2_IRQHandler+0x3e>
			timer2.countTicks = 0;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <TIM2_IRQHandler+0x48>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER2\r\n"));//For test


}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000588 	.word	0x20000588

0800191c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <TIM3_IRQHandler+0x40>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d113      	bne.n	8001954 <TIM3_IRQHandler+0x38>
	{
		TIM3->SR &= ~(0x0001);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <TIM3_IRQHandler+0x40>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <TIM3_IRQHandler+0x40>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <TIM3_IRQHandler+0x44>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <TIM3_IRQHandler+0x44>)
 8001940:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer3.countTicks == MAX_COUNT){
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <TIM3_IRQHandler+0x44>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800194a:	4293      	cmp	r3, r2
 800194c:	d102      	bne.n	8001954 <TIM3_IRQHandler+0x38>
			timer3.countTicks = 0;
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <TIM3_IRQHandler+0x44>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER3\r\n"));//For test


}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40000400 	.word	0x40000400
 8001960:	20000590 	.word	0x20000590

08001964 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <TIM4_IRQHandler+0x40>)
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d113      	bne.n	800199c <TIM4_IRQHandler+0x38>
	{
		TIM4->SR &= ~(0x0001);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <TIM4_IRQHandler+0x40>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <TIM4_IRQHandler+0x40>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <TIM4_IRQHandler+0x44>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <TIM4_IRQHandler+0x44>)
 8001988:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer4.countTicks == MAX_COUNT){
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <TIM4_IRQHandler+0x44>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001992:	4293      	cmp	r3, r2
 8001994:	d102      	bne.n	800199c <TIM4_IRQHandler+0x38>
			timer4.countTicks = 0;
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <TIM4_IRQHandler+0x44>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
		}

	}
	// USART2_write((uint8_t*)("\r\nTIMER4\r\n"));//For test

}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	40000800 	.word	0x40000800
 80019a8:	20000598 	.word	0x20000598

080019ac <__NVIC_SetPriorityGrouping>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <USART1_NEW_LINE_FOUND_get>:

static uint8_t *START;  // for search UART2_write_line
static uint8_t *END;  // for search


BOOL USART1_NEW_LINE_FOUND_get(void){
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	return usart1.new_line_found;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <USART1_NEW_LINE_FOUND_get+0x14>)
 8001a86:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200009b4 	.word	0x200009b4

08001a98 <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
	usart1.new_line_read = TRUE;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <USART1_NEW_LINE_READ_set+0x14>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	200009b4 	.word	0x200009b4

08001ab0 <USART2_NEW_LINE_FOUND_get>:


BOOL USART2_NEW_LINE_FOUND_get(void){
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	return usart2.new_line_found;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <USART2_NEW_LINE_FOUND_get+0x14>)
 8001ab6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200005a0 	.word	0x200005a0

08001ac8 <USART2_NEW_LINE_READ_set>:

void USART2_NEW_LINE_READ_set(void){
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	usart2.new_line_read = TRUE;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <USART2_NEW_LINE_READ_set+0x14>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	200005a0 	.word	0x200005a0

08001ae0 <USART2_init>:



void USART2_init(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

	/*This program works when TeraTerm speed is set to 9600 and USART_BRR is set to 0x34D.*/

	RESET_FLAG = TRUE; // for ESC
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <USART2_init+0xa8>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <USART2_init+0xac>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <USART2_init+0xac>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <USART2_init+0xb0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <USART2_init+0xb0>)
 8001afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b00:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <USART2_init+0xb0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <USART2_init+0xb0>)
 8001b08:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8001b0c:	6013      	str	r3, [r2, #0]

	/*Configure USART2 Rx (PA3) as Input*/
	GPIOA->CRL &= 0xFFFF0FFF; //Leave all bits as they are except for bit 3 (see reference manual 9.2.2)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <USART2_init+0xb0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <USART2_init+0xb0>)
 8001b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b18:	6013      	str	r3, [r2, #0]
	//For Input Pull-Up (See reference manual p. 167)
	GPIOA->CRL |= 0x00008000; //configure as input with pull up/pull down (see reference manual 9.2.2).
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <USART2_init+0xb0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <USART2_init+0xb0>)
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b24:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= 0x00000008;//(reference manual p. 161 and 9.2.4)
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <USART2_init+0xb0>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <USART2_init+0xb0>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see reference manual 8.3.8)
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <USART2_init+0xac>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <USART2_init+0xac>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	61d3      	str	r3, [r2, #28]
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO


	/*Following directions RM p. 792 (Setting Tx procesure)*/
	/*Following directions RM p. 795 (Setting Rx procesure) */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <USART2_init+0xb4>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <USART2_init+0xb4>)
 8001b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b48:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <USART2_init+0xb4>)
 8001b4c:	f240 324d 	movw	r2, #845	; 0x34d
 8001b50:	609a      	str	r2, [r3, #8]

	/*Enable USART Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <USART2_init+0xb4>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <USART2_init+0xb4>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5e:	b672      	cpsid	i
	/*Enable USART Receive*/
	//USART2->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)

	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART2->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <USART2_init+0xb4>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <USART2_init+0xb4>)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7ff ff1d 	bl	80019ac <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001b72:	2100      	movs	r1, #0
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f7ff ff59 	bl	8001a2c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
 8001b7a:	2026      	movs	r0, #38	; 0x26
 8001b7c:	f7ff ff3a 	bl	80019f4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b80:	b662      	cpsie	i
	__enable_irq();
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000ddc 	.word	0x20000ddc
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40004400 	.word	0x40004400

08001b98 <USART1_init>:

void USART1_init(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <USART1_init+0xac>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <USART1_init+0xac>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <USART1_init+0xb0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a26      	ldr	r2, [pc, #152]	; (8001c48 <USART1_init+0xb0>)
 8001bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001bb4:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <USART1_init+0xb0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <USART1_init+0xb0>)
 8001bba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001bbe:	6053      	str	r3, [r2, #4]


	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <USART1_init+0xb0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <USART1_init+0xb0>)
 8001bc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bca:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <USART1_init+0xb0>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <USART1_init+0xb0>)
 8001bd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd6:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <USART1_init+0xb0>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	; (8001c48 <USART1_init+0xb0>)
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <USART1_init+0xac>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <USART1_init+0xac>)
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bee:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <USART1_init+0xb4>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <USART1_init+0xb4>)
 8001bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfa:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <USART1_init+0xb4>)
 8001bfe:	2245      	movs	r2, #69	; 0x45
 8001c00:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <USART1_init+0xb4>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <USART1_init+0xb4>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <USART1_init+0xb4>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <USART1_init+0xb4>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1a:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <USART1_init+0xb4>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <USART1_init+0xb4>)
 8001c22:	f043 0320 	orr.w	r3, r3, #32
 8001c26:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001c28:	2007      	movs	r0, #7
 8001c2a:	f7ff febf 	bl	80019ac <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2025      	movs	r0, #37	; 0x25
 8001c32:	f7ff fefb 	bl	8001a2c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8001c36:	2025      	movs	r0, #37	; 0x25
 8001c38:	f7ff fedc 	bl	80019f4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c3c:	b662      	cpsie	i
	__enable_irq();

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40013800 	.word	0x40013800

08001c50 <USART2_enable_Rx>:



void USART2_enable_Rx(void){
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

	USART2->CR1 |= 0x00000004;// set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <USART2_enable_Rx+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <USART2_enable_Rx+0x18>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	60d3      	str	r3, [r2, #12]

}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40004400 	.word	0x40004400

08001c6c <USART2_disable_Rx>:

void USART2_disable_Rx(void){
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(0x00000004);// reset the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <USART2_disable_Rx+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <USART2_disable_Rx+0x18>)
 8001c76:	f023 0304 	bic.w	r3, r3, #4
 8001c7a:	60d3      	str	r3, [r2, #12]

}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40004400 	.word	0x40004400

08001c88 <USART2_set_buffer_Tx>:

void USART2_set_buffer_Tx(uint8_t *msg){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c94:	2100      	movs	r1, #0
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <USART2_set_buffer_Tx+0x3c>)
 8001c98:	f000 fbad 	bl	80023f6 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <USART2_set_buffer_Tx+0x3c>)
 8001ca0:	f000 fbd2 	bl	8002448 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7fe fa63 	bl	8000170 <strlen>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <USART2_set_buffer_Tx+0x3c>)
 8001cae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}

	usart2.write_index = 0;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <USART2_set_buffer_Tx+0x3c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200005a0 	.word	0x200005a0

08001cc8 <USART2_set_buffer_Rx>:

void USART2_set_buffer_Rx(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

	memset(usart2.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <USART2_set_buffer_Rx+0x24>)
 8001cd4:	f000 fb8f 	bl	80023f6 <memset>
	usart2.Rx_len = 0;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <USART2_set_buffer_Rx+0x28>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart2.read_index = 0;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <USART2_set_buffer_Rx+0x28>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200007a0 	.word	0x200007a0
 8001cf0:	200005a0 	.word	0x200005a0

08001cf4 <USART2_write>:

void USART2_write(uint8_t* msg){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with msg*/
	USART2_set_buffer_Tx(msg);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ffc3 	bl	8001c88 <USART2_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART2_set_buffer_Rx();
 8001d02:	f7ff ffe1 	bl	8001cc8 <USART2_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart2.new_line_found = FALSE;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <USART2_write+0x84>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart2.new_line_read = TRUE;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <USART2_write+0x84>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	while(usart2.write_index < usart2.Tx_len)
 8001d16:	e014      	b.n	8001d42 <USART2_write+0x4e>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001d18:	bf00      	nop
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <USART2_write+0x88>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f9      	beq.n	8001d1a <USART2_write+0x26>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <USART2_write+0x84>)
 8001d28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <USART2_write+0x84>)
 8001d2e:	5cd2      	ldrb	r2, [r2, r3]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <USART2_write+0x88>)
 8001d32:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <USART2_write+0x84>)
 8001d36:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <USART2_write+0x84>)
 8001d3e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <USART2_write+0x84>)
 8001d44:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <USART2_write+0x84>)
 8001d4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3e2      	bcc.n	8001d18 <USART2_write+0x24>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001d52:	bf00      	nop
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <USART2_write+0x88>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b40      	cmp	r3, #64	; 0x40
 8001d5e:	d1f9      	bne.n	8001d54 <USART2_write+0x60>
	usart2.write_index = 0;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <USART2_write+0x84>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <USART2_write+0x84>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200005a0 	.word	0x200005a0
 8001d7c:	40004400 	.word	0x40004400

08001d80 <USART2_write_line>:

void USART2_write_line(uint8_t *start, uint8_t *end){
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <USART2_write_line+0xe0>)
 8001d92:	f000 fb30 	bl	80023f6 <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001da0:	3301      	adds	r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da0c      	bge.n	8001dc0 <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001da6:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <USART2_write_line+0xe0>)
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <USART2_write_line+0xe4>)
 8001daa:	4614      	mov	r4, r2
 8001dac:	461d      	mov	r5, r3
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <USART2_write_line+0xe0>)
 8001db8:	2213      	movs	r2, #19
 8001dba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8001dbe:	e01a      	b.n	8001df6 <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <USART2_write_line+0xe0>)
 8001dce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		while(start < end){
 8001dd2:	e00c      	b.n	8001dee <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7819      	ldrb	r1, [r3, #0]
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <USART2_write_line+0xe0>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	460a      	mov	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
			start++;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3301      	adds	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
			i++;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
		while(start < end){
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3ee      	bcc.n	8001dd4 <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <USART2_write_line+0xe0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

	while(usart2.write_index < usart2.Tx_len)
 8001dfe:	e014      	b.n	8001e2a <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001e00:	bf00      	nop
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <USART2_write_line+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f9      	beq.n	8001e02 <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <USART2_write_line+0xe0>)
 8001e10:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <USART2_write_line+0xe0>)
 8001e16:	5cd2      	ldrb	r2, [r2, r3]
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <USART2_write_line+0xe8>)
 8001e1a:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <USART2_write_line+0xe0>)
 8001e1e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <USART2_write_line+0xe0>)
 8001e26:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <USART2_write_line+0xe0>)
 8001e2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <USART2_write_line+0xe0>)
 8001e32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3e2      	bcc.n	8001e00 <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001e3a:	bf00      	nop
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <USART2_write_line+0xe8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d1f9      	bne.n	8001e3c <USART2_write_line+0xbc>
	usart2.write_index = 0;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <USART2_write_line+0xe0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <USART2_write_line+0xe0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e60:	200005a0 	.word	0x200005a0
 8001e64:	08003758 	.word	0x08003758
 8001e68:	40004400 	.word	0x40004400

08001e6c <USART2_read_buffer_Rx>:

BOOL USART2_read_buffer_Rx(uint32_t dest_size, uint8_t *dest){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]


	memset(dest, '\0', dest_size*sizeof(uint8_t));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f000 fabb 	bl	80023f6 <memset>
	if((usart2.Rx_len + 1) < dest_size){
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <USART2_read_buffer_Rx+0x60>)
 8001e82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e86:	3301      	adds	r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d919      	bls.n	8001ec2 <USART2_read_buffer_Rx+0x56>

		uint32_t i = 0; // Rx index
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001e92:	e00c      	b.n	8001eae <USART2_read_buffer_Rx+0x42>
			dest[i] = usart2.Rx[i];
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <USART2_read_buffer_Rx+0x60>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
			i++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <USART2_read_buffer_Rx+0x60>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b0d      	cmp	r3, #13
 8001ebc:	d1ea      	bne.n	8001e94 <USART2_read_buffer_Rx+0x28>
		}
		return TRUE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <USART2_read_buffer_Rx+0x58>
	}
	return FALSE;
 8001ec2:	2300      	movs	r3, #0

}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200005a0 	.word	0x200005a0

08001ed0 <USART2_ok>:

BOOL USART2_ok(void){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

	if(strstr((const char*)usart2.Rx , (const char*)"ok\r\n")){
 8001ed4:	490e      	ldr	r1, [pc, #56]	; (8001f10 <USART2_ok+0x40>)
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <USART2_ok+0x44>)
 8001ed8:	f000 fabe 	bl	8002458 <strstr>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <USART2_ok+0x16>
		return TRUE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e012      	b.n	8001f0c <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"OK\r\n")){
 8001ee6:	490c      	ldr	r1, [pc, #48]	; (8001f18 <USART2_ok+0x48>)
 8001ee8:	480a      	ldr	r0, [pc, #40]	; (8001f14 <USART2_ok+0x44>)
 8001eea:	f000 fab5 	bl	8002458 <strstr>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <USART2_ok+0x28>
		return TRUE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e009      	b.n	8001f0c <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"Ok\r\n")){
 8001ef8:	4908      	ldr	r1, [pc, #32]	; (8001f1c <USART2_ok+0x4c>)
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <USART2_ok+0x44>)
 8001efc:	f000 faac 	bl	8002458 <strstr>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <USART2_ok+0x3a>
		return TRUE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <USART2_ok+0x3c>
	}
	return FALSE;
 8001f0a:	2300      	movs	r3, #0

}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0800376c 	.word	0x0800376c
 8001f14:	200007a0 	.word	0x200007a0
 8001f18:	08003774 	.word	0x08003774
 8001f1c:	0800377c 	.word	0x0800377c

08001f20 <USART1_write>:





void USART1_write(uint8_t *command){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	USART1_set_buffer_Tx(command);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f83f 	bl	8001fac <USART1_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART1_set_buffer_Rx();
 8001f2e:	f000 f85d 	bl	8001fec <USART1_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart1.new_line_found = FALSE;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <USART1_write+0x84>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart1.new_line_read = TRUE;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <USART1_write+0x84>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001f42:	e014      	b.n	8001f6e <USART1_write+0x4e>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001f44:	bf00      	nop
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <USART1_write+0x88>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f9      	beq.n	8001f46 <USART1_write+0x26>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <USART1_write+0x84>)
 8001f54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <USART1_write+0x84>)
 8001f5a:	5cd2      	ldrb	r2, [r2, r3]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <USART1_write+0x88>)
 8001f5e:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <USART1_write+0x84>)
 8001f62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f66:	3301      	adds	r3, #1
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <USART1_write+0x84>)
 8001f6a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <USART1_write+0x84>)
 8001f70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <USART1_write+0x84>)
 8001f76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3e2      	bcc.n	8001f44 <USART1_write+0x24>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001f7e:	bf00      	nop
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <USART1_write+0x88>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b40      	cmp	r3, #64	; 0x40
 8001f8a:	d1f9      	bne.n	8001f80 <USART1_write+0x60>
	usart1.write_index = 0;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <USART1_write+0x84>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <USART1_write+0x84>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200009b4 	.word	0x200009b4
 8001fa8:	40013800 	.word	0x40013800

08001fac <USART1_set_buffer_Tx>:

void USART1_set_buffer_Tx(uint8_t *command){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	2100      	movs	r1, #0
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <USART1_set_buffer_Tx+0x3c>)
 8001fbc:	f000 fa1b 	bl	80023f6 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <USART1_set_buffer_Tx+0x3c>)
 8001fc4:	f000 fa40 	bl	8002448 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7fe f8d1 	bl	8000170 <strlen>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <USART1_set_buffer_Tx+0x3c>)
 8001fd2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <USART1_set_buffer_Tx+0x3c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200009b4 	.word	0x200009b4

08001fec <USART1_set_buffer_Rx>:

void USART1_set_buffer_Rx(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <USART1_set_buffer_Rx+0x30>)
 8001ff8:	f000 f9fd 	bl	80023f6 <memset>
	usart1.Rx_len = 0;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <USART1_set_buffer_Rx+0x34>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <USART1_set_buffer_Rx+0x34>)
 8002006:	2200      	movs	r2, #0
 8002008:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <USART1_set_buffer_Rx+0x38>)
 800200e:	4a03      	ldr	r2, [pc, #12]	; (800201c <USART1_set_buffer_Rx+0x30>)
 8002010:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <USART1_set_buffer_Rx+0x3c>)
 8002014:	4a01      	ldr	r2, [pc, #4]	; (800201c <USART1_set_buffer_Rx+0x30>)
 8002016:	601a      	str	r2, [r3, #0]

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000bb4 	.word	0x20000bb4
 8002020:	200009b4 	.word	0x200009b4
 8002024:	20000dcc 	.word	0x20000dcc
 8002028:	20000dd0 	.word	0x20000dd0

0800202c <USART1_search_buffer_Rx>:

STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <USART1_search_buffer_Rx+0x9c>)
 8002038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800203c:	3301      	adds	r3, #1
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d236      	bcs.n	80020b2 <USART1_search_buffer_Rx+0x86>

		START = END;
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <USART1_search_buffer_Rx+0xa0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <USART1_search_buffer_Rx+0xa4>)
 800204a:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <USART1_search_buffer_Rx+0x9c>)
 800204e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <USART1_search_buffer_Rx+0xa8>)
 8002054:	4413      	add	r3, r2
 8002056:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <USART1_search_buffer_Rx+0xa0>)
 8002058:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	481d      	ldr	r0, [pc, #116]	; (80020d4 <USART1_search_buffer_Rx+0xa8>)
 800205e:	f000 f9fb 	bl	8002458 <strstr>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <USART1_search_buffer_Rx+0xa4>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <USART1_search_buffer_Rx+0xa0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7ff fe84 	bl	8001d80 <USART2_write_line>
			return PASS;
 8002078:	2300      	movs	r3, #0
 800207a:	e021      	b.n	80020c0 <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <USART1_search_buffer_Rx+0xa8>)
 8002080:	f000 f9ea 	bl	8002458 <strstr>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <USART1_search_buffer_Rx+0xa4>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <USART1_search_buffer_Rx+0xa0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f7ff fe73 	bl	8001d80 <USART2_write_line>
			return FAIL;
 800209a:	2302      	movs	r3, #2
 800209c:	e010      	b.n	80020c0 <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <USART1_search_buffer_Rx+0xa4>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <USART1_search_buffer_Rx+0xa0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f7ff fe69 	bl	8001d80 <USART2_write_line>
			return STANDBY;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e006      	b.n	80020c0 <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <USART1_search_buffer_Rx+0xac>)
 80020b4:	f7ff fe1e 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <USART1_search_buffer_Rx+0xa8>)
 80020ba:	f7ff fe1b 	bl	8001cf4 <USART2_write>
		return FAIL;
 80020be:	2302      	movs	r3, #2
	}

}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200009b4 	.word	0x200009b4
 80020cc:	20000dd0 	.word	0x20000dd0
 80020d0:	20000dcc 	.word	0x20000dcc
 80020d4:	20000bb4 	.word	0x20000bb4
 80020d8:	08003784 	.word	0x08003784

080020dc <USART1_check_state_buffer_Rx>:

SWITCH_STATE USART1_check_state_buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <USART1_check_state_buffer_Rx+0xb8>)
 80020ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80020ee:	3301      	adds	r3, #1
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	d242      	bcs.n	800217c <USART1_check_state_buffer_Rx+0xa0>

		START = END;
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <USART1_check_state_buffer_Rx+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a28      	ldr	r2, [pc, #160]	; (800219c <USART1_check_state_buffer_Rx+0xc0>)
 80020fc:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 80020fe:	4b25      	ldr	r3, [pc, #148]	; (8002194 <USART1_check_state_buffer_Rx+0xb8>)
 8002100:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002104:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002106:	4413      	add	r3, r2
 8002108:	4a23      	ldr	r2, [pc, #140]	; (8002198 <USART1_check_state_buffer_Rx+0xbc>)
 800210a:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 800210c:	68f9      	ldr	r1, [r7, #12]
 800210e:	4824      	ldr	r0, [pc, #144]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002110:	f000 f9a2 	bl	8002458 <strstr>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <USART1_check_state_buffer_Rx+0x52>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); //write response to screen
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <USART1_check_state_buffer_Rx+0xc0>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <USART1_check_state_buffer_Rx+0xbc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f7ff fe2b 	bl	8001d80 <USART2_write_line>
			return (uint32_t)ON;
 800212a:	2301      	movs	r3, #1
 800212c:	e02d      	b.n	800218a <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	481b      	ldr	r0, [pc, #108]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002132:	f000 f991 	bl	8002458 <strstr>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <USART1_check_state_buffer_Rx+0x74>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <USART1_check_state_buffer_Rx+0xc0>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <USART1_check_state_buffer_Rx+0xbc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f7ff fe1a 	bl	8001d80 <USART2_write_line>
			return (uint32_t)OFF;
 800214c:	2300      	movs	r3, #0
 800214e:	e01c      	b.n	800218a <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002154:	f000 f980 	bl	8002458 <strstr>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <USART1_check_state_buffer_Rx+0x96>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <USART1_check_state_buffer_Rx+0xc0>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <USART1_check_state_buffer_Rx+0xbc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f7ff fe09 	bl	8001d80 <USART2_write_line>
			return (uint32_t)NO_PATH;
 800216e:	2302      	movs	r3, #2
 8002170:	e00b      	b.n	800218a <USART1_check_state_buffer_Rx+0xae>
		}
		else{
			USART2_write((uint8_t*)usart1.Rx);//for debuging
 8002172:	480b      	ldr	r0, [pc, #44]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002174:	f7ff fdbe 	bl	8001cf4 <USART2_write>
			return (uint32_t)NON;
 8002178:	2303      	movs	r3, #3
 800217a:	e006      	b.n	800218a <USART1_check_state_buffer_Rx+0xae>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <USART1_check_state_buffer_Rx+0xc8>)
 800217e:	f7ff fdb9 	bl	8001cf4 <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 8002182:	4807      	ldr	r0, [pc, #28]	; (80021a0 <USART1_check_state_buffer_Rx+0xc4>)
 8002184:	f7ff fdb6 	bl	8001cf4 <USART2_write>
		return (uint32_t)NO_PATH;
 8002188:	2302      	movs	r3, #2
	}

}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200009b4 	.word	0x200009b4
 8002198:	20000dd0 	.word	0x20000dd0
 800219c:	20000dcc 	.word	0x20000dcc
 80021a0:	20000bb4 	.word	0x20000bb4
 80021a4:	08003784 	.word	0x08003784

080021a8 <USART1_IRQHandler>:


/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <USART1_IRQHandler+0xa8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d146      	bne.n	8002246 <USART1_IRQHandler+0x9e>

		c = USART1->DR; // clear RXNE bit
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <USART1_IRQHandler+0xa8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <USART1_IRQHandler+0xac>)
 80021c0:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021c8:	3301      	adds	r3, #1
 80021ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ce:	d303      	bcc.n	80021d8 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <USART1_IRQHandler+0xac>)
 80021e0:	7811      	ldrb	r1, [r2, #0]
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021e4:	4413      	add	r3, r2
 80021e6:	460a      	mov	r2, r1
 80021e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021f6:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <USART1_IRQHandler+0xb0>)
 80021fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002200:	3301      	adds	r3, #1
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <USART1_IRQHandler+0xb0>)
 8002204:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart1.new_line_read){
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <USART1_IRQHandler+0xac>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b0a      	cmp	r3, #10
 800220e:	d10d      	bne.n	800222c <USART1_IRQHandler+0x84>
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <USART1_IRQHandler+0xb0>)
 8002212:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <USART1_IRQHandler+0x84>
			usart1.new_line_found = TRUE;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <USART1_IRQHandler+0xb0>)
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart1.new_line_read = FALSE;
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <USART1_IRQHandler+0xb0>)
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart1.new_line_found = FALSE;
		}

	}

}
 800222a:	e00c      	b.n	8002246 <USART1_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart1.new_line_read){
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <USART1_IRQHandler+0xac>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b0a      	cmp	r3, #10
 8002232:	d008      	beq.n	8002246 <USART1_IRQHandler+0x9e>
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <USART1_IRQHandler+0xb0>)
 8002236:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <USART1_IRQHandler+0x9e>
			usart1.new_line_found = FALSE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <USART1_IRQHandler+0xb0>)
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	20000dc8 	.word	0x20000dc8
 8002258:	200009b4 	.word	0x200009b4

0800225c <USART2_IRQHandler>:

/*USART2 Interrupt Handler - Only Rx is set to have interrupts*/
void USART2_IRQHandler(void){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

	if(((USART2->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <USART2_IRQHandler+0xc8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b20      	cmp	r3, #32
 800226a:	d158      	bne.n	800231e <USART2_IRQHandler+0xc2>

		c = USART2->DR; // clear RXNE bit
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <USART2_IRQHandler+0xc8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <USART2_IRQHandler+0xcc>)
 8002274:	701a      	strb	r2, [r3, #0]


		if(c == 0x1B && RESET_FLAG){ // User entered ESC after reset
 8002276:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <USART2_IRQHandler+0xcc>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b1b      	cmp	r3, #27
 800227c:	d10c      	bne.n	8002298 <USART2_IRQHandler+0x3c>
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <USART2_IRQHandler+0xd0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <USART2_IRQHandler+0x3c>

			RESET_FLAG = FALSE;
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <USART2_IRQHandler+0xd0>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			QUEUE_add_event(configuration_Handler);
 800228c:	4828      	ldr	r0, [pc, #160]	; (8002330 <USART2_IRQHandler+0xd4>)
 800228e:	f7fe fddd 	bl	8000e4c <QUEUE_add_event>
			USART2_disable_Rx();
 8002292:	f7ff fceb 	bl	8001c6c <USART2_disable_Rx>
		if(c == 0x1B && RESET_FLAG){ // User entered ESC after reset
 8002296:	e042      	b.n	800231e <USART2_IRQHandler+0xc2>

		}
		else{

			if((usart2.read_index + 1) >= BUFF_SIZE){
 8002298:	4b26      	ldr	r3, [pc, #152]	; (8002334 <USART2_IRQHandler+0xd8>)
 800229a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800229e:	3301      	adds	r3, #1
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a4:	d303      	bcc.n	80022ae <USART2_IRQHandler+0x52>
				usart2.read_index = 0;
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			}
			usart2.Rx[usart2.read_index] = (uint8_t)(c & 0xFF);
 80022ae:	4b21      	ldr	r3, [pc, #132]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <USART2_IRQHandler+0xcc>)
 80022b6:	7811      	ldrb	r1, [r2, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022ba:	4413      	add	r3, r2
 80022bc:	460a      	mov	r2, r1
 80022be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
			usart2.read_index++;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022c8:	3301      	adds	r3, #1
 80022ca:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022cc:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
			usart2.Rx_len++; // count total chars received
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80022d6:	3301      	adds	r3, #1
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022da:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

			if(c == (uint8_t)'\n' && usart2.new_line_read){
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <USART2_IRQHandler+0xcc>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d10d      	bne.n	8002302 <USART2_IRQHandler+0xa6>
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022e8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <USART2_IRQHandler+0xa6>
				usart2.new_line_found = TRUE;
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				usart2.new_line_read = FALSE;
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <USART2_IRQHandler+0xd8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8002300:	e00d      	b.n	800231e <USART2_IRQHandler+0xc2>
			}
			else if(c != (uint8_t)'\n' && usart2.new_line_read){
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <USART2_IRQHandler+0xcc>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b0a      	cmp	r3, #10
 8002308:	d009      	beq.n	800231e <USART2_IRQHandler+0xc2>
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <USART2_IRQHandler+0xd8>)
 800230c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <USART2_IRQHandler+0xc2>
				usart2.new_line_found = FALSE;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <USART2_IRQHandler+0xd8>)
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

		}

	}

}
 800231c:	e7ff      	b.n	800231e <USART2_IRQHandler+0xc2>
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40004400 	.word	0x40004400
 8002328:	20000dc8 	.word	0x20000dc8
 800232c:	20000ddc 	.word	0x20000ddc
 8002330:	080002c9 	.word	0x080002c9
 8002334:	200005a0 	.word	0x200005a0

08002338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800233a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <LoopForever+0x6>)
  ldr r1, =_edata
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <LoopForever+0xe>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002354:	4c0b      	ldr	r4, [pc, #44]	; (8002384 <LoopForever+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002362:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8002366:	f000 f817 	bl	8002398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236a:	f7fe ff83 	bl	8001274 <main>

0800236e <LoopForever>:

LoopForever:
    b LoopForever
 800236e:	e7fe      	b.n	800236e <LoopForever>
  ldr   r0, =_estack
 8002370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800237c:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 8002380:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002384:	20000e88 	.word	0x20000e88

08002388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC1_2_IRQHandler>
	...

0800238c <__errno>:
 800238c:	4b01      	ldr	r3, [pc, #4]	; (8002394 <__errno+0x8>)
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000060 	.word	0x20000060

08002398 <__libc_init_array>:
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	2500      	movs	r5, #0
 800239c:	4e0c      	ldr	r6, [pc, #48]	; (80023d0 <__libc_init_array+0x38>)
 800239e:	4c0d      	ldr	r4, [pc, #52]	; (80023d4 <__libc_init_array+0x3c>)
 80023a0:	1ba4      	subs	r4, r4, r6
 80023a2:	10a4      	asrs	r4, r4, #2
 80023a4:	42a5      	cmp	r5, r4
 80023a6:	d109      	bne.n	80023bc <__libc_init_array+0x24>
 80023a8:	f000 fc58 	bl	8002c5c <_init>
 80023ac:	2500      	movs	r5, #0
 80023ae:	4e0a      	ldr	r6, [pc, #40]	; (80023d8 <__libc_init_array+0x40>)
 80023b0:	4c0a      	ldr	r4, [pc, #40]	; (80023dc <__libc_init_array+0x44>)
 80023b2:	1ba4      	subs	r4, r4, r6
 80023b4:	10a4      	asrs	r4, r4, #2
 80023b6:	42a5      	cmp	r5, r4
 80023b8:	d105      	bne.n	80023c6 <__libc_init_array+0x2e>
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
 80023bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c0:	4798      	blx	r3
 80023c2:	3501      	adds	r5, #1
 80023c4:	e7ee      	b.n	80023a4 <__libc_init_array+0xc>
 80023c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ca:	4798      	blx	r3
 80023cc:	3501      	adds	r5, #1
 80023ce:	e7f2      	b.n	80023b6 <__libc_init_array+0x1e>
 80023d0:	080037e0 	.word	0x080037e0
 80023d4:	080037e0 	.word	0x080037e0
 80023d8:	080037e0 	.word	0x080037e0
 80023dc:	080037e4 	.word	0x080037e4

080023e0 <memcpy>:
 80023e0:	b510      	push	{r4, lr}
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	440a      	add	r2, r1
 80023e6:	4291      	cmp	r1, r2
 80023e8:	d100      	bne.n	80023ec <memcpy+0xc>
 80023ea:	bd10      	pop	{r4, pc}
 80023ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023f4:	e7f7      	b.n	80023e6 <memcpy+0x6>

080023f6 <memset>:
 80023f6:	4603      	mov	r3, r0
 80023f8:	4402      	add	r2, r0
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d100      	bne.n	8002400 <memset+0xa>
 80023fe:	4770      	bx	lr
 8002400:	f803 1b01 	strb.w	r1, [r3], #1
 8002404:	e7f9      	b.n	80023fa <memset+0x4>
	...

08002408 <siprintf>:
 8002408:	b40e      	push	{r1, r2, r3}
 800240a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800240e:	b500      	push	{lr}
 8002410:	b09c      	sub	sp, #112	; 0x70
 8002412:	ab1d      	add	r3, sp, #116	; 0x74
 8002414:	9002      	str	r0, [sp, #8]
 8002416:	9006      	str	r0, [sp, #24]
 8002418:	9107      	str	r1, [sp, #28]
 800241a:	9104      	str	r1, [sp, #16]
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <siprintf+0x38>)
 800241e:	4909      	ldr	r1, [pc, #36]	; (8002444 <siprintf+0x3c>)
 8002420:	f853 2b04 	ldr.w	r2, [r3], #4
 8002424:	9105      	str	r1, [sp, #20]
 8002426:	6800      	ldr	r0, [r0, #0]
 8002428:	a902      	add	r1, sp, #8
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	f000 f888 	bl	8002540 <_svfiprintf_r>
 8002430:	2200      	movs	r2, #0
 8002432:	9b02      	ldr	r3, [sp, #8]
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	b01c      	add	sp, #112	; 0x70
 8002438:	f85d eb04 	ldr.w	lr, [sp], #4
 800243c:	b003      	add	sp, #12
 800243e:	4770      	bx	lr
 8002440:	20000060 	.word	0x20000060
 8002444:	ffff0208 	.word	0xffff0208

08002448 <strcpy>:
 8002448:	4603      	mov	r3, r0
 800244a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800244e:	f803 2b01 	strb.w	r2, [r3], #1
 8002452:	2a00      	cmp	r2, #0
 8002454:	d1f9      	bne.n	800244a <strcpy+0x2>
 8002456:	4770      	bx	lr

08002458 <strstr>:
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	7803      	ldrb	r3, [r0, #0]
 800245c:	b17b      	cbz	r3, 800247e <strstr+0x26>
 800245e:	4604      	mov	r4, r0
 8002460:	7823      	ldrb	r3, [r4, #0]
 8002462:	4620      	mov	r0, r4
 8002464:	1c66      	adds	r6, r4, #1
 8002466:	b17b      	cbz	r3, 8002488 <strstr+0x30>
 8002468:	1e4a      	subs	r2, r1, #1
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002470:	b14d      	cbz	r5, 8002486 <strstr+0x2e>
 8002472:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002476:	4634      	mov	r4, r6
 8002478:	42af      	cmp	r7, r5
 800247a:	d0f7      	beq.n	800246c <strstr+0x14>
 800247c:	e7f0      	b.n	8002460 <strstr+0x8>
 800247e:	780b      	ldrb	r3, [r1, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf18      	it	ne
 8002484:	2000      	movne	r0, #0
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	4618      	mov	r0, r3
 800248a:	e7fc      	b.n	8002486 <strstr+0x2e>

0800248c <__ssputs_r>:
 800248c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002490:	688e      	ldr	r6, [r1, #8]
 8002492:	4682      	mov	sl, r0
 8002494:	429e      	cmp	r6, r3
 8002496:	460c      	mov	r4, r1
 8002498:	4690      	mov	r8, r2
 800249a:	4699      	mov	r9, r3
 800249c:	d837      	bhi.n	800250e <__ssputs_r+0x82>
 800249e:	898a      	ldrh	r2, [r1, #12]
 80024a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024a4:	d031      	beq.n	800250a <__ssputs_r+0x7e>
 80024a6:	2302      	movs	r3, #2
 80024a8:	6825      	ldr	r5, [r4, #0]
 80024aa:	6909      	ldr	r1, [r1, #16]
 80024ac:	1a6f      	subs	r7, r5, r1
 80024ae:	6965      	ldr	r5, [r4, #20]
 80024b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80024b8:	f109 0301 	add.w	r3, r9, #1
 80024bc:	443b      	add	r3, r7
 80024be:	429d      	cmp	r5, r3
 80024c0:	bf38      	it	cc
 80024c2:	461d      	movcc	r5, r3
 80024c4:	0553      	lsls	r3, r2, #21
 80024c6:	d530      	bpl.n	800252a <__ssputs_r+0x9e>
 80024c8:	4629      	mov	r1, r5
 80024ca:	f000 fb2d 	bl	8002b28 <_malloc_r>
 80024ce:	4606      	mov	r6, r0
 80024d0:	b950      	cbnz	r0, 80024e8 <__ssputs_r+0x5c>
 80024d2:	230c      	movs	r3, #12
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f8ca 3000 	str.w	r3, [sl]
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	463a      	mov	r2, r7
 80024ea:	6921      	ldr	r1, [r4, #16]
 80024ec:	f7ff ff78 	bl	80023e0 <memcpy>
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fa:	81a3      	strh	r3, [r4, #12]
 80024fc:	6126      	str	r6, [r4, #16]
 80024fe:	443e      	add	r6, r7
 8002500:	6026      	str	r6, [r4, #0]
 8002502:	464e      	mov	r6, r9
 8002504:	6165      	str	r5, [r4, #20]
 8002506:	1bed      	subs	r5, r5, r7
 8002508:	60a5      	str	r5, [r4, #8]
 800250a:	454e      	cmp	r6, r9
 800250c:	d900      	bls.n	8002510 <__ssputs_r+0x84>
 800250e:	464e      	mov	r6, r9
 8002510:	4632      	mov	r2, r6
 8002512:	4641      	mov	r1, r8
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	f000 faa1 	bl	8002a5c <memmove>
 800251a:	68a3      	ldr	r3, [r4, #8]
 800251c:	2000      	movs	r0, #0
 800251e:	1b9b      	subs	r3, r3, r6
 8002520:	60a3      	str	r3, [r4, #8]
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	441e      	add	r6, r3
 8002526:	6026      	str	r6, [r4, #0]
 8002528:	e7dc      	b.n	80024e4 <__ssputs_r+0x58>
 800252a:	462a      	mov	r2, r5
 800252c:	f000 fb56 	bl	8002bdc <_realloc_r>
 8002530:	4606      	mov	r6, r0
 8002532:	2800      	cmp	r0, #0
 8002534:	d1e2      	bne.n	80024fc <__ssputs_r+0x70>
 8002536:	6921      	ldr	r1, [r4, #16]
 8002538:	4650      	mov	r0, sl
 800253a:	f000 faa9 	bl	8002a90 <_free_r>
 800253e:	e7c8      	b.n	80024d2 <__ssputs_r+0x46>

08002540 <_svfiprintf_r>:
 8002540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002544:	461d      	mov	r5, r3
 8002546:	898b      	ldrh	r3, [r1, #12]
 8002548:	b09d      	sub	sp, #116	; 0x74
 800254a:	061f      	lsls	r7, r3, #24
 800254c:	4680      	mov	r8, r0
 800254e:	460c      	mov	r4, r1
 8002550:	4616      	mov	r6, r2
 8002552:	d50f      	bpl.n	8002574 <_svfiprintf_r+0x34>
 8002554:	690b      	ldr	r3, [r1, #16]
 8002556:	b96b      	cbnz	r3, 8002574 <_svfiprintf_r+0x34>
 8002558:	2140      	movs	r1, #64	; 0x40
 800255a:	f000 fae5 	bl	8002b28 <_malloc_r>
 800255e:	6020      	str	r0, [r4, #0]
 8002560:	6120      	str	r0, [r4, #16]
 8002562:	b928      	cbnz	r0, 8002570 <_svfiprintf_r+0x30>
 8002564:	230c      	movs	r3, #12
 8002566:	f8c8 3000 	str.w	r3, [r8]
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	e0c8      	b.n	8002702 <_svfiprintf_r+0x1c2>
 8002570:	2340      	movs	r3, #64	; 0x40
 8002572:	6163      	str	r3, [r4, #20]
 8002574:	2300      	movs	r3, #0
 8002576:	9309      	str	r3, [sp, #36]	; 0x24
 8002578:	2320      	movs	r3, #32
 800257a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800257e:	2330      	movs	r3, #48	; 0x30
 8002580:	f04f 0b01 	mov.w	fp, #1
 8002584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002588:	9503      	str	r5, [sp, #12]
 800258a:	4637      	mov	r7, r6
 800258c:	463d      	mov	r5, r7
 800258e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002592:	b10b      	cbz	r3, 8002598 <_svfiprintf_r+0x58>
 8002594:	2b25      	cmp	r3, #37	; 0x25
 8002596:	d13e      	bne.n	8002616 <_svfiprintf_r+0xd6>
 8002598:	ebb7 0a06 	subs.w	sl, r7, r6
 800259c:	d00b      	beq.n	80025b6 <_svfiprintf_r+0x76>
 800259e:	4653      	mov	r3, sl
 80025a0:	4632      	mov	r2, r6
 80025a2:	4621      	mov	r1, r4
 80025a4:	4640      	mov	r0, r8
 80025a6:	f7ff ff71 	bl	800248c <__ssputs_r>
 80025aa:	3001      	adds	r0, #1
 80025ac:	f000 80a4 	beq.w	80026f8 <_svfiprintf_r+0x1b8>
 80025b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025b2:	4453      	add	r3, sl
 80025b4:	9309      	str	r3, [sp, #36]	; 0x24
 80025b6:	783b      	ldrb	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 809d 	beq.w	80026f8 <_svfiprintf_r+0x1b8>
 80025be:	2300      	movs	r3, #0
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025c8:	9304      	str	r3, [sp, #16]
 80025ca:	9307      	str	r3, [sp, #28]
 80025cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025d0:	931a      	str	r3, [sp, #104]	; 0x68
 80025d2:	462f      	mov	r7, r5
 80025d4:	2205      	movs	r2, #5
 80025d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80025da:	4850      	ldr	r0, [pc, #320]	; (800271c <_svfiprintf_r+0x1dc>)
 80025dc:	f000 fa30 	bl	8002a40 <memchr>
 80025e0:	9b04      	ldr	r3, [sp, #16]
 80025e2:	b9d0      	cbnz	r0, 800261a <_svfiprintf_r+0xda>
 80025e4:	06d9      	lsls	r1, r3, #27
 80025e6:	bf44      	itt	mi
 80025e8:	2220      	movmi	r2, #32
 80025ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025ee:	071a      	lsls	r2, r3, #28
 80025f0:	bf44      	itt	mi
 80025f2:	222b      	movmi	r2, #43	; 0x2b
 80025f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025f8:	782a      	ldrb	r2, [r5, #0]
 80025fa:	2a2a      	cmp	r2, #42	; 0x2a
 80025fc:	d015      	beq.n	800262a <_svfiprintf_r+0xea>
 80025fe:	462f      	mov	r7, r5
 8002600:	2000      	movs	r0, #0
 8002602:	250a      	movs	r5, #10
 8002604:	9a07      	ldr	r2, [sp, #28]
 8002606:	4639      	mov	r1, r7
 8002608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800260c:	3b30      	subs	r3, #48	; 0x30
 800260e:	2b09      	cmp	r3, #9
 8002610:	d94d      	bls.n	80026ae <_svfiprintf_r+0x16e>
 8002612:	b1b8      	cbz	r0, 8002644 <_svfiprintf_r+0x104>
 8002614:	e00f      	b.n	8002636 <_svfiprintf_r+0xf6>
 8002616:	462f      	mov	r7, r5
 8002618:	e7b8      	b.n	800258c <_svfiprintf_r+0x4c>
 800261a:	4a40      	ldr	r2, [pc, #256]	; (800271c <_svfiprintf_r+0x1dc>)
 800261c:	463d      	mov	r5, r7
 800261e:	1a80      	subs	r0, r0, r2
 8002620:	fa0b f000 	lsl.w	r0, fp, r0
 8002624:	4318      	orrs	r0, r3
 8002626:	9004      	str	r0, [sp, #16]
 8002628:	e7d3      	b.n	80025d2 <_svfiprintf_r+0x92>
 800262a:	9a03      	ldr	r2, [sp, #12]
 800262c:	1d11      	adds	r1, r2, #4
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	9103      	str	r1, [sp, #12]
 8002632:	2a00      	cmp	r2, #0
 8002634:	db01      	blt.n	800263a <_svfiprintf_r+0xfa>
 8002636:	9207      	str	r2, [sp, #28]
 8002638:	e004      	b.n	8002644 <_svfiprintf_r+0x104>
 800263a:	4252      	negs	r2, r2
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	9207      	str	r2, [sp, #28]
 8002642:	9304      	str	r3, [sp, #16]
 8002644:	783b      	ldrb	r3, [r7, #0]
 8002646:	2b2e      	cmp	r3, #46	; 0x2e
 8002648:	d10c      	bne.n	8002664 <_svfiprintf_r+0x124>
 800264a:	787b      	ldrb	r3, [r7, #1]
 800264c:	2b2a      	cmp	r3, #42	; 0x2a
 800264e:	d133      	bne.n	80026b8 <_svfiprintf_r+0x178>
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	3702      	adds	r7, #2
 8002654:	1d1a      	adds	r2, r3, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	9203      	str	r2, [sp, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bfb8      	it	lt
 800265e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002662:	9305      	str	r3, [sp, #20]
 8002664:	4d2e      	ldr	r5, [pc, #184]	; (8002720 <_svfiprintf_r+0x1e0>)
 8002666:	2203      	movs	r2, #3
 8002668:	7839      	ldrb	r1, [r7, #0]
 800266a:	4628      	mov	r0, r5
 800266c:	f000 f9e8 	bl	8002a40 <memchr>
 8002670:	b138      	cbz	r0, 8002682 <_svfiprintf_r+0x142>
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	1b40      	subs	r0, r0, r5
 8002676:	fa03 f000 	lsl.w	r0, r3, r0
 800267a:	9b04      	ldr	r3, [sp, #16]
 800267c:	3701      	adds	r7, #1
 800267e:	4303      	orrs	r3, r0
 8002680:	9304      	str	r3, [sp, #16]
 8002682:	7839      	ldrb	r1, [r7, #0]
 8002684:	2206      	movs	r2, #6
 8002686:	4827      	ldr	r0, [pc, #156]	; (8002724 <_svfiprintf_r+0x1e4>)
 8002688:	1c7e      	adds	r6, r7, #1
 800268a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800268e:	f000 f9d7 	bl	8002a40 <memchr>
 8002692:	2800      	cmp	r0, #0
 8002694:	d038      	beq.n	8002708 <_svfiprintf_r+0x1c8>
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <_svfiprintf_r+0x1e8>)
 8002698:	bb13      	cbnz	r3, 80026e0 <_svfiprintf_r+0x1a0>
 800269a:	9b03      	ldr	r3, [sp, #12]
 800269c:	3307      	adds	r3, #7
 800269e:	f023 0307 	bic.w	r3, r3, #7
 80026a2:	3308      	adds	r3, #8
 80026a4:	9303      	str	r3, [sp, #12]
 80026a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a8:	444b      	add	r3, r9
 80026aa:	9309      	str	r3, [sp, #36]	; 0x24
 80026ac:	e76d      	b.n	800258a <_svfiprintf_r+0x4a>
 80026ae:	fb05 3202 	mla	r2, r5, r2, r3
 80026b2:	2001      	movs	r0, #1
 80026b4:	460f      	mov	r7, r1
 80026b6:	e7a6      	b.n	8002606 <_svfiprintf_r+0xc6>
 80026b8:	2300      	movs	r3, #0
 80026ba:	250a      	movs	r5, #10
 80026bc:	4619      	mov	r1, r3
 80026be:	3701      	adds	r7, #1
 80026c0:	9305      	str	r3, [sp, #20]
 80026c2:	4638      	mov	r0, r7
 80026c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026c8:	3a30      	subs	r2, #48	; 0x30
 80026ca:	2a09      	cmp	r2, #9
 80026cc:	d903      	bls.n	80026d6 <_svfiprintf_r+0x196>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0c8      	beq.n	8002664 <_svfiprintf_r+0x124>
 80026d2:	9105      	str	r1, [sp, #20]
 80026d4:	e7c6      	b.n	8002664 <_svfiprintf_r+0x124>
 80026d6:	fb05 2101 	mla	r1, r5, r1, r2
 80026da:	2301      	movs	r3, #1
 80026dc:	4607      	mov	r7, r0
 80026de:	e7f0      	b.n	80026c2 <_svfiprintf_r+0x182>
 80026e0:	ab03      	add	r3, sp, #12
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4622      	mov	r2, r4
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <_svfiprintf_r+0x1ec>)
 80026e8:	a904      	add	r1, sp, #16
 80026ea:	4640      	mov	r0, r8
 80026ec:	f3af 8000 	nop.w
 80026f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026f4:	4681      	mov	r9, r0
 80026f6:	d1d6      	bne.n	80026a6 <_svfiprintf_r+0x166>
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	065b      	lsls	r3, r3, #25
 80026fc:	f53f af35 	bmi.w	800256a <_svfiprintf_r+0x2a>
 8002700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002702:	b01d      	add	sp, #116	; 0x74
 8002704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002708:	ab03      	add	r3, sp, #12
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4622      	mov	r2, r4
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_svfiprintf_r+0x1ec>)
 8002710:	a904      	add	r1, sp, #16
 8002712:	4640      	mov	r0, r8
 8002714:	f000 f882 	bl	800281c <_printf_i>
 8002718:	e7ea      	b.n	80026f0 <_svfiprintf_r+0x1b0>
 800271a:	bf00      	nop
 800271c:	080037ab 	.word	0x080037ab
 8002720:	080037b1 	.word	0x080037b1
 8002724:	080037b5 	.word	0x080037b5
 8002728:	00000000 	.word	0x00000000
 800272c:	0800248d 	.word	0x0800248d

08002730 <_printf_common>:
 8002730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002734:	4691      	mov	r9, r2
 8002736:	461f      	mov	r7, r3
 8002738:	688a      	ldr	r2, [r1, #8]
 800273a:	690b      	ldr	r3, [r1, #16]
 800273c:	4606      	mov	r6, r0
 800273e:	4293      	cmp	r3, r2
 8002740:	bfb8      	it	lt
 8002742:	4613      	movlt	r3, r2
 8002744:	f8c9 3000 	str.w	r3, [r9]
 8002748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800274c:	460c      	mov	r4, r1
 800274e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002752:	b112      	cbz	r2, 800275a <_printf_common+0x2a>
 8002754:	3301      	adds	r3, #1
 8002756:	f8c9 3000 	str.w	r3, [r9]
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	0699      	lsls	r1, r3, #26
 800275e:	bf42      	ittt	mi
 8002760:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002764:	3302      	addmi	r3, #2
 8002766:	f8c9 3000 	strmi.w	r3, [r9]
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	f015 0506 	ands.w	r5, r5, #6
 8002770:	d107      	bne.n	8002782 <_printf_common+0x52>
 8002772:	f104 0a19 	add.w	sl, r4, #25
 8002776:	68e3      	ldr	r3, [r4, #12]
 8002778:	f8d9 2000 	ldr.w	r2, [r9]
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	42ab      	cmp	r3, r5
 8002780:	dc29      	bgt.n	80027d6 <_printf_common+0xa6>
 8002782:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	3300      	adds	r3, #0
 800278a:	bf18      	it	ne
 800278c:	2301      	movne	r3, #1
 800278e:	0692      	lsls	r2, r2, #26
 8002790:	d42e      	bmi.n	80027f0 <_printf_common+0xc0>
 8002792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002796:	4639      	mov	r1, r7
 8002798:	4630      	mov	r0, r6
 800279a:	47c0      	blx	r8
 800279c:	3001      	adds	r0, #1
 800279e:	d021      	beq.n	80027e4 <_printf_common+0xb4>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	68e5      	ldr	r5, [r4, #12]
 80027a4:	f003 0306 	and.w	r3, r3, #6
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	bf18      	it	ne
 80027ac:	2500      	movne	r5, #0
 80027ae:	f8d9 2000 	ldr.w	r2, [r9]
 80027b2:	f04f 0900 	mov.w	r9, #0
 80027b6:	bf08      	it	eq
 80027b8:	1aad      	subeq	r5, r5, r2
 80027ba:	68a3      	ldr	r3, [r4, #8]
 80027bc:	6922      	ldr	r2, [r4, #16]
 80027be:	bf08      	it	eq
 80027c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bfc4      	itt	gt
 80027c8:	1a9b      	subgt	r3, r3, r2
 80027ca:	18ed      	addgt	r5, r5, r3
 80027cc:	341a      	adds	r4, #26
 80027ce:	454d      	cmp	r5, r9
 80027d0:	d11a      	bne.n	8002808 <_printf_common+0xd8>
 80027d2:	2000      	movs	r0, #0
 80027d4:	e008      	b.n	80027e8 <_printf_common+0xb8>
 80027d6:	2301      	movs	r3, #1
 80027d8:	4652      	mov	r2, sl
 80027da:	4639      	mov	r1, r7
 80027dc:	4630      	mov	r0, r6
 80027de:	47c0      	blx	r8
 80027e0:	3001      	adds	r0, #1
 80027e2:	d103      	bne.n	80027ec <_printf_common+0xbc>
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ec:	3501      	adds	r5, #1
 80027ee:	e7c2      	b.n	8002776 <_printf_common+0x46>
 80027f0:	2030      	movs	r0, #48	; 0x30
 80027f2:	18e1      	adds	r1, r4, r3
 80027f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027fe:	4422      	add	r2, r4
 8002800:	3302      	adds	r3, #2
 8002802:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002806:	e7c4      	b.n	8002792 <_printf_common+0x62>
 8002808:	2301      	movs	r3, #1
 800280a:	4622      	mov	r2, r4
 800280c:	4639      	mov	r1, r7
 800280e:	4630      	mov	r0, r6
 8002810:	47c0      	blx	r8
 8002812:	3001      	adds	r0, #1
 8002814:	d0e6      	beq.n	80027e4 <_printf_common+0xb4>
 8002816:	f109 0901 	add.w	r9, r9, #1
 800281a:	e7d8      	b.n	80027ce <_printf_common+0x9e>

0800281c <_printf_i>:
 800281c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002820:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002824:	460c      	mov	r4, r1
 8002826:	7e09      	ldrb	r1, [r1, #24]
 8002828:	b085      	sub	sp, #20
 800282a:	296e      	cmp	r1, #110	; 0x6e
 800282c:	4617      	mov	r7, r2
 800282e:	4606      	mov	r6, r0
 8002830:	4698      	mov	r8, r3
 8002832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002834:	f000 80b3 	beq.w	800299e <_printf_i+0x182>
 8002838:	d822      	bhi.n	8002880 <_printf_i+0x64>
 800283a:	2963      	cmp	r1, #99	; 0x63
 800283c:	d036      	beq.n	80028ac <_printf_i+0x90>
 800283e:	d80a      	bhi.n	8002856 <_printf_i+0x3a>
 8002840:	2900      	cmp	r1, #0
 8002842:	f000 80b9 	beq.w	80029b8 <_printf_i+0x19c>
 8002846:	2958      	cmp	r1, #88	; 0x58
 8002848:	f000 8083 	beq.w	8002952 <_printf_i+0x136>
 800284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002850:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002854:	e032      	b.n	80028bc <_printf_i+0xa0>
 8002856:	2964      	cmp	r1, #100	; 0x64
 8002858:	d001      	beq.n	800285e <_printf_i+0x42>
 800285a:	2969      	cmp	r1, #105	; 0x69
 800285c:	d1f6      	bne.n	800284c <_printf_i+0x30>
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	0605      	lsls	r5, r0, #24
 8002864:	f103 0104 	add.w	r1, r3, #4
 8002868:	d52a      	bpl.n	80028c0 <_printf_i+0xa4>
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6011      	str	r1, [r2, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	da03      	bge.n	800287a <_printf_i+0x5e>
 8002872:	222d      	movs	r2, #45	; 0x2d
 8002874:	425b      	negs	r3, r3
 8002876:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800287a:	486f      	ldr	r0, [pc, #444]	; (8002a38 <_printf_i+0x21c>)
 800287c:	220a      	movs	r2, #10
 800287e:	e039      	b.n	80028f4 <_printf_i+0xd8>
 8002880:	2973      	cmp	r1, #115	; 0x73
 8002882:	f000 809d 	beq.w	80029c0 <_printf_i+0x1a4>
 8002886:	d808      	bhi.n	800289a <_printf_i+0x7e>
 8002888:	296f      	cmp	r1, #111	; 0x6f
 800288a:	d020      	beq.n	80028ce <_printf_i+0xb2>
 800288c:	2970      	cmp	r1, #112	; 0x70
 800288e:	d1dd      	bne.n	800284c <_printf_i+0x30>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	e003      	b.n	80028a2 <_printf_i+0x86>
 800289a:	2975      	cmp	r1, #117	; 0x75
 800289c:	d017      	beq.n	80028ce <_printf_i+0xb2>
 800289e:	2978      	cmp	r1, #120	; 0x78
 80028a0:	d1d4      	bne.n	800284c <_printf_i+0x30>
 80028a2:	2378      	movs	r3, #120	; 0x78
 80028a4:	4865      	ldr	r0, [pc, #404]	; (8002a3c <_printf_i+0x220>)
 80028a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028aa:	e055      	b.n	8002958 <_printf_i+0x13c>
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b2:	1d19      	adds	r1, r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6011      	str	r1, [r2, #0]
 80028b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028bc:	2301      	movs	r3, #1
 80028be:	e08c      	b.n	80029da <_printf_i+0x1be>
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028c6:	6011      	str	r1, [r2, #0]
 80028c8:	bf18      	it	ne
 80028ca:	b21b      	sxthne	r3, r3
 80028cc:	e7cf      	b.n	800286e <_printf_i+0x52>
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	6825      	ldr	r5, [r4, #0]
 80028d2:	1d18      	adds	r0, r3, #4
 80028d4:	6010      	str	r0, [r2, #0]
 80028d6:	0628      	lsls	r0, r5, #24
 80028d8:	d501      	bpl.n	80028de <_printf_i+0xc2>
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e002      	b.n	80028e4 <_printf_i+0xc8>
 80028de:	0668      	lsls	r0, r5, #25
 80028e0:	d5fb      	bpl.n	80028da <_printf_i+0xbe>
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	296f      	cmp	r1, #111	; 0x6f
 80028e6:	bf14      	ite	ne
 80028e8:	220a      	movne	r2, #10
 80028ea:	2208      	moveq	r2, #8
 80028ec:	4852      	ldr	r0, [pc, #328]	; (8002a38 <_printf_i+0x21c>)
 80028ee:	2100      	movs	r1, #0
 80028f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028f4:	6865      	ldr	r5, [r4, #4]
 80028f6:	2d00      	cmp	r5, #0
 80028f8:	60a5      	str	r5, [r4, #8]
 80028fa:	f2c0 8095 	blt.w	8002a28 <_printf_i+0x20c>
 80028fe:	6821      	ldr	r1, [r4, #0]
 8002900:	f021 0104 	bic.w	r1, r1, #4
 8002904:	6021      	str	r1, [r4, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13d      	bne.n	8002986 <_printf_i+0x16a>
 800290a:	2d00      	cmp	r5, #0
 800290c:	f040 808e 	bne.w	8002a2c <_printf_i+0x210>
 8002910:	4665      	mov	r5, ip
 8002912:	2a08      	cmp	r2, #8
 8002914:	d10b      	bne.n	800292e <_printf_i+0x112>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	07db      	lsls	r3, r3, #31
 800291a:	d508      	bpl.n	800292e <_printf_i+0x112>
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	6862      	ldr	r2, [r4, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	bfde      	ittt	le
 8002924:	2330      	movle	r3, #48	; 0x30
 8002926:	f805 3c01 	strble.w	r3, [r5, #-1]
 800292a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800292e:	ebac 0305 	sub.w	r3, ip, r5
 8002932:	6123      	str	r3, [r4, #16]
 8002934:	f8cd 8000 	str.w	r8, [sp]
 8002938:	463b      	mov	r3, r7
 800293a:	aa03      	add	r2, sp, #12
 800293c:	4621      	mov	r1, r4
 800293e:	4630      	mov	r0, r6
 8002940:	f7ff fef6 	bl	8002730 <_printf_common>
 8002944:	3001      	adds	r0, #1
 8002946:	d14d      	bne.n	80029e4 <_printf_i+0x1c8>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	b005      	add	sp, #20
 800294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002952:	4839      	ldr	r0, [pc, #228]	; (8002a38 <_printf_i+0x21c>)
 8002954:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002958:	6813      	ldr	r3, [r2, #0]
 800295a:	6821      	ldr	r1, [r4, #0]
 800295c:	1d1d      	adds	r5, r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6015      	str	r5, [r2, #0]
 8002962:	060a      	lsls	r2, r1, #24
 8002964:	d50b      	bpl.n	800297e <_printf_i+0x162>
 8002966:	07ca      	lsls	r2, r1, #31
 8002968:	bf44      	itt	mi
 800296a:	f041 0120 	orrmi.w	r1, r1, #32
 800296e:	6021      	strmi	r1, [r4, #0]
 8002970:	b91b      	cbnz	r3, 800297a <_printf_i+0x15e>
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	f022 0220 	bic.w	r2, r2, #32
 8002978:	6022      	str	r2, [r4, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	e7b7      	b.n	80028ee <_printf_i+0xd2>
 800297e:	064d      	lsls	r5, r1, #25
 8002980:	bf48      	it	mi
 8002982:	b29b      	uxthmi	r3, r3
 8002984:	e7ef      	b.n	8002966 <_printf_i+0x14a>
 8002986:	4665      	mov	r5, ip
 8002988:	fbb3 f1f2 	udiv	r1, r3, r2
 800298c:	fb02 3311 	mls	r3, r2, r1, r3
 8002990:	5cc3      	ldrb	r3, [r0, r3]
 8002992:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002996:	460b      	mov	r3, r1
 8002998:	2900      	cmp	r1, #0
 800299a:	d1f5      	bne.n	8002988 <_printf_i+0x16c>
 800299c:	e7b9      	b.n	8002912 <_printf_i+0xf6>
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	6825      	ldr	r5, [r4, #0]
 80029a2:	1d18      	adds	r0, r3, #4
 80029a4:	6961      	ldr	r1, [r4, #20]
 80029a6:	6010      	str	r0, [r2, #0]
 80029a8:	0628      	lsls	r0, r5, #24
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	d501      	bpl.n	80029b2 <_printf_i+0x196>
 80029ae:	6019      	str	r1, [r3, #0]
 80029b0:	e002      	b.n	80029b8 <_printf_i+0x19c>
 80029b2:	066a      	lsls	r2, r5, #25
 80029b4:	d5fb      	bpl.n	80029ae <_printf_i+0x192>
 80029b6:	8019      	strh	r1, [r3, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	4665      	mov	r5, ip
 80029bc:	6123      	str	r3, [r4, #16]
 80029be:	e7b9      	b.n	8002934 <_printf_i+0x118>
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	1d19      	adds	r1, r3, #4
 80029c4:	6011      	str	r1, [r2, #0]
 80029c6:	681d      	ldr	r5, [r3, #0]
 80029c8:	6862      	ldr	r2, [r4, #4]
 80029ca:	2100      	movs	r1, #0
 80029cc:	4628      	mov	r0, r5
 80029ce:	f000 f837 	bl	8002a40 <memchr>
 80029d2:	b108      	cbz	r0, 80029d8 <_printf_i+0x1bc>
 80029d4:	1b40      	subs	r0, r0, r5
 80029d6:	6060      	str	r0, [r4, #4]
 80029d8:	6863      	ldr	r3, [r4, #4]
 80029da:	6123      	str	r3, [r4, #16]
 80029dc:	2300      	movs	r3, #0
 80029de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e2:	e7a7      	b.n	8002934 <_printf_i+0x118>
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	462a      	mov	r2, r5
 80029e8:	4639      	mov	r1, r7
 80029ea:	4630      	mov	r0, r6
 80029ec:	47c0      	blx	r8
 80029ee:	3001      	adds	r0, #1
 80029f0:	d0aa      	beq.n	8002948 <_printf_i+0x12c>
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	079b      	lsls	r3, r3, #30
 80029f6:	d413      	bmi.n	8002a20 <_printf_i+0x204>
 80029f8:	68e0      	ldr	r0, [r4, #12]
 80029fa:	9b03      	ldr	r3, [sp, #12]
 80029fc:	4298      	cmp	r0, r3
 80029fe:	bfb8      	it	lt
 8002a00:	4618      	movlt	r0, r3
 8002a02:	e7a3      	b.n	800294c <_printf_i+0x130>
 8002a04:	2301      	movs	r3, #1
 8002a06:	464a      	mov	r2, r9
 8002a08:	4639      	mov	r1, r7
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	47c0      	blx	r8
 8002a0e:	3001      	adds	r0, #1
 8002a10:	d09a      	beq.n	8002948 <_printf_i+0x12c>
 8002a12:	3501      	adds	r5, #1
 8002a14:	68e3      	ldr	r3, [r4, #12]
 8002a16:	9a03      	ldr	r2, [sp, #12]
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	42ab      	cmp	r3, r5
 8002a1c:	dcf2      	bgt.n	8002a04 <_printf_i+0x1e8>
 8002a1e:	e7eb      	b.n	80029f8 <_printf_i+0x1dc>
 8002a20:	2500      	movs	r5, #0
 8002a22:	f104 0919 	add.w	r9, r4, #25
 8002a26:	e7f5      	b.n	8002a14 <_printf_i+0x1f8>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ac      	bne.n	8002986 <_printf_i+0x16a>
 8002a2c:	7803      	ldrb	r3, [r0, #0]
 8002a2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a36:	e76c      	b.n	8002912 <_printf_i+0xf6>
 8002a38:	080037bc 	.word	0x080037bc
 8002a3c:	080037cd 	.word	0x080037cd

08002a40 <memchr>:
 8002a40:	b510      	push	{r4, lr}
 8002a42:	b2c9      	uxtb	r1, r1
 8002a44:	4402      	add	r2, r0
 8002a46:	4290      	cmp	r0, r2
 8002a48:	4603      	mov	r3, r0
 8002a4a:	d101      	bne.n	8002a50 <memchr+0x10>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e003      	b.n	8002a58 <memchr+0x18>
 8002a50:	781c      	ldrb	r4, [r3, #0]
 8002a52:	3001      	adds	r0, #1
 8002a54:	428c      	cmp	r4, r1
 8002a56:	d1f6      	bne.n	8002a46 <memchr+0x6>
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <memmove>:
 8002a5c:	4288      	cmp	r0, r1
 8002a5e:	b510      	push	{r4, lr}
 8002a60:	eb01 0302 	add.w	r3, r1, r2
 8002a64:	d807      	bhi.n	8002a76 <memmove+0x1a>
 8002a66:	1e42      	subs	r2, r0, #1
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	d00a      	beq.n	8002a82 <memmove+0x26>
 8002a6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a74:	e7f8      	b.n	8002a68 <memmove+0xc>
 8002a76:	4283      	cmp	r3, r0
 8002a78:	d9f5      	bls.n	8002a66 <memmove+0xa>
 8002a7a:	1881      	adds	r1, r0, r2
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	42d3      	cmn	r3, r2
 8002a80:	d100      	bne.n	8002a84 <memmove+0x28>
 8002a82:	bd10      	pop	{r4, pc}
 8002a84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a8c:	e7f7      	b.n	8002a7e <memmove+0x22>
	...

08002a90 <_free_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4605      	mov	r5, r0
 8002a94:	2900      	cmp	r1, #0
 8002a96:	d043      	beq.n	8002b20 <_free_r+0x90>
 8002a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a9c:	1f0c      	subs	r4, r1, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bfb8      	it	lt
 8002aa2:	18e4      	addlt	r4, r4, r3
 8002aa4:	f000 f8d0 	bl	8002c48 <__malloc_lock>
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <_free_r+0x94>)
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	4610      	mov	r0, r2
 8002aae:	b933      	cbnz	r3, 8002abe <_free_r+0x2e>
 8002ab0:	6063      	str	r3, [r4, #4]
 8002ab2:	6014      	str	r4, [r2, #0]
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aba:	f000 b8c6 	b.w	8002c4a <__malloc_unlock>
 8002abe:	42a3      	cmp	r3, r4
 8002ac0:	d90b      	bls.n	8002ada <_free_r+0x4a>
 8002ac2:	6821      	ldr	r1, [r4, #0]
 8002ac4:	1862      	adds	r2, r4, r1
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	bf01      	itttt	eq
 8002aca:	681a      	ldreq	r2, [r3, #0]
 8002acc:	685b      	ldreq	r3, [r3, #4]
 8002ace:	1852      	addeq	r2, r2, r1
 8002ad0:	6022      	streq	r2, [r4, #0]
 8002ad2:	6063      	str	r3, [r4, #4]
 8002ad4:	6004      	str	r4, [r0, #0]
 8002ad6:	e7ed      	b.n	8002ab4 <_free_r+0x24>
 8002ad8:	4613      	mov	r3, r2
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	b10a      	cbz	r2, 8002ae2 <_free_r+0x52>
 8002ade:	42a2      	cmp	r2, r4
 8002ae0:	d9fa      	bls.n	8002ad8 <_free_r+0x48>
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	1858      	adds	r0, r3, r1
 8002ae6:	42a0      	cmp	r0, r4
 8002ae8:	d10b      	bne.n	8002b02 <_free_r+0x72>
 8002aea:	6820      	ldr	r0, [r4, #0]
 8002aec:	4401      	add	r1, r0
 8002aee:	1858      	adds	r0, r3, r1
 8002af0:	4282      	cmp	r2, r0
 8002af2:	6019      	str	r1, [r3, #0]
 8002af4:	d1de      	bne.n	8002ab4 <_free_r+0x24>
 8002af6:	6810      	ldr	r0, [r2, #0]
 8002af8:	6852      	ldr	r2, [r2, #4]
 8002afa:	4401      	add	r1, r0
 8002afc:	6019      	str	r1, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	e7d8      	b.n	8002ab4 <_free_r+0x24>
 8002b02:	d902      	bls.n	8002b0a <_free_r+0x7a>
 8002b04:	230c      	movs	r3, #12
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	e7d4      	b.n	8002ab4 <_free_r+0x24>
 8002b0a:	6820      	ldr	r0, [r4, #0]
 8002b0c:	1821      	adds	r1, r4, r0
 8002b0e:	428a      	cmp	r2, r1
 8002b10:	bf01      	itttt	eq
 8002b12:	6811      	ldreq	r1, [r2, #0]
 8002b14:	6852      	ldreq	r2, [r2, #4]
 8002b16:	1809      	addeq	r1, r1, r0
 8002b18:	6021      	streq	r1, [r4, #0]
 8002b1a:	6062      	str	r2, [r4, #4]
 8002b1c:	605c      	str	r4, [r3, #4]
 8002b1e:	e7c9      	b.n	8002ab4 <_free_r+0x24>
 8002b20:	bd38      	pop	{r3, r4, r5, pc}
 8002b22:	bf00      	nop
 8002b24:	20000dd4 	.word	0x20000dd4

08002b28 <_malloc_r>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	1ccd      	adds	r5, r1, #3
 8002b2c:	f025 0503 	bic.w	r5, r5, #3
 8002b30:	3508      	adds	r5, #8
 8002b32:	2d0c      	cmp	r5, #12
 8002b34:	bf38      	it	cc
 8002b36:	250c      	movcc	r5, #12
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	4606      	mov	r6, r0
 8002b3c:	db01      	blt.n	8002b42 <_malloc_r+0x1a>
 8002b3e:	42a9      	cmp	r1, r5
 8002b40:	d903      	bls.n	8002b4a <_malloc_r+0x22>
 8002b42:	230c      	movs	r3, #12
 8002b44:	6033      	str	r3, [r6, #0]
 8002b46:	2000      	movs	r0, #0
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	f000 f87d 	bl	8002c48 <__malloc_lock>
 8002b4e:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <_malloc_r+0xac>)
 8002b50:	6814      	ldr	r4, [r2, #0]
 8002b52:	4621      	mov	r1, r4
 8002b54:	b991      	cbnz	r1, 8002b7c <_malloc_r+0x54>
 8002b56:	4c20      	ldr	r4, [pc, #128]	; (8002bd8 <_malloc_r+0xb0>)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	b91b      	cbnz	r3, 8002b64 <_malloc_r+0x3c>
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f000 f863 	bl	8002c28 <_sbrk_r>
 8002b62:	6020      	str	r0, [r4, #0]
 8002b64:	4629      	mov	r1, r5
 8002b66:	4630      	mov	r0, r6
 8002b68:	f000 f85e 	bl	8002c28 <_sbrk_r>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d124      	bne.n	8002bba <_malloc_r+0x92>
 8002b70:	230c      	movs	r3, #12
 8002b72:	4630      	mov	r0, r6
 8002b74:	6033      	str	r3, [r6, #0]
 8002b76:	f000 f868 	bl	8002c4a <__malloc_unlock>
 8002b7a:	e7e4      	b.n	8002b46 <_malloc_r+0x1e>
 8002b7c:	680b      	ldr	r3, [r1, #0]
 8002b7e:	1b5b      	subs	r3, r3, r5
 8002b80:	d418      	bmi.n	8002bb4 <_malloc_r+0x8c>
 8002b82:	2b0b      	cmp	r3, #11
 8002b84:	d90f      	bls.n	8002ba6 <_malloc_r+0x7e>
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	18cc      	adds	r4, r1, r3
 8002b8a:	50cd      	str	r5, [r1, r3]
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f000 f85c 	bl	8002c4a <__malloc_unlock>
 8002b92:	f104 000b 	add.w	r0, r4, #11
 8002b96:	1d23      	adds	r3, r4, #4
 8002b98:	f020 0007 	bic.w	r0, r0, #7
 8002b9c:	1ac3      	subs	r3, r0, r3
 8002b9e:	d0d3      	beq.n	8002b48 <_malloc_r+0x20>
 8002ba0:	425a      	negs	r2, r3
 8002ba2:	50e2      	str	r2, [r4, r3]
 8002ba4:	e7d0      	b.n	8002b48 <_malloc_r+0x20>
 8002ba6:	684b      	ldr	r3, [r1, #4]
 8002ba8:	428c      	cmp	r4, r1
 8002baa:	bf16      	itet	ne
 8002bac:	6063      	strne	r3, [r4, #4]
 8002bae:	6013      	streq	r3, [r2, #0]
 8002bb0:	460c      	movne	r4, r1
 8002bb2:	e7eb      	b.n	8002b8c <_malloc_r+0x64>
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	6849      	ldr	r1, [r1, #4]
 8002bb8:	e7cc      	b.n	8002b54 <_malloc_r+0x2c>
 8002bba:	1cc4      	adds	r4, r0, #3
 8002bbc:	f024 0403 	bic.w	r4, r4, #3
 8002bc0:	42a0      	cmp	r0, r4
 8002bc2:	d005      	beq.n	8002bd0 <_malloc_r+0xa8>
 8002bc4:	1a21      	subs	r1, r4, r0
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f000 f82e 	bl	8002c28 <_sbrk_r>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d0cf      	beq.n	8002b70 <_malloc_r+0x48>
 8002bd0:	6025      	str	r5, [r4, #0]
 8002bd2:	e7db      	b.n	8002b8c <_malloc_r+0x64>
 8002bd4:	20000dd4 	.word	0x20000dd4
 8002bd8:	20000dd8 	.word	0x20000dd8

08002bdc <_realloc_r>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	4607      	mov	r7, r0
 8002be0:	4614      	mov	r4, r2
 8002be2:	460e      	mov	r6, r1
 8002be4:	b921      	cbnz	r1, 8002bf0 <_realloc_r+0x14>
 8002be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002bea:	4611      	mov	r1, r2
 8002bec:	f7ff bf9c 	b.w	8002b28 <_malloc_r>
 8002bf0:	b922      	cbnz	r2, 8002bfc <_realloc_r+0x20>
 8002bf2:	f7ff ff4d 	bl	8002a90 <_free_r>
 8002bf6:	4625      	mov	r5, r4
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfc:	f000 f826 	bl	8002c4c <_malloc_usable_size_r>
 8002c00:	42a0      	cmp	r0, r4
 8002c02:	d20f      	bcs.n	8002c24 <_realloc_r+0x48>
 8002c04:	4621      	mov	r1, r4
 8002c06:	4638      	mov	r0, r7
 8002c08:	f7ff ff8e 	bl	8002b28 <_malloc_r>
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d0f2      	beq.n	8002bf8 <_realloc_r+0x1c>
 8002c12:	4631      	mov	r1, r6
 8002c14:	4622      	mov	r2, r4
 8002c16:	f7ff fbe3 	bl	80023e0 <memcpy>
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f7ff ff37 	bl	8002a90 <_free_r>
 8002c22:	e7e9      	b.n	8002bf8 <_realloc_r+0x1c>
 8002c24:	4635      	mov	r5, r6
 8002c26:	e7e7      	b.n	8002bf8 <_realloc_r+0x1c>

08002c28 <_sbrk_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	4c05      	ldr	r4, [pc, #20]	; (8002c44 <_sbrk_r+0x1c>)
 8002c2e:	4605      	mov	r5, r0
 8002c30:	4608      	mov	r0, r1
 8002c32:	6023      	str	r3, [r4, #0]
 8002c34:	f7fe fb52 	bl	80012dc <_sbrk>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d102      	bne.n	8002c42 <_sbrk_r+0x1a>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	b103      	cbz	r3, 8002c42 <_sbrk_r+0x1a>
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	20000e84 	.word	0x20000e84

08002c48 <__malloc_lock>:
 8002c48:	4770      	bx	lr

08002c4a <__malloc_unlock>:
 8002c4a:	4770      	bx	lr

08002c4c <_malloc_usable_size_r>:
 8002c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c50:	1f18      	subs	r0, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bfbc      	itt	lt
 8002c56:	580b      	ldrlt	r3, [r1, r0]
 8002c58:	18c0      	addlt	r0, r0, r3
 8002c5a:	4770      	bx	lr

08002c5c <_init>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr

08002c68 <_fini>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr
