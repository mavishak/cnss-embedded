
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b0  080024b0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080024b0  080024b0  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b0  080024b0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080024b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b7c  200000d4  0800258c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  0800258c  00020c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a89  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000153c  00000000  00000000  00027b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  000290c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000308  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020ca  00000000  00000000  00029770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000043d0  00000000  00000000  0002b83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000593a5  00000000  00000000  0002fc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00088faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa8  00000000  00000000  0008902c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002108 	.word	0x08002108

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08002108 	.word	0x08002108

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <setImagePath>:

static BOOL connection_closed;
static SWITCH_STATE state;


void setImagePath(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	2100      	movs	r1, #0
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <setImagePath+0x24>)
 800018a:	f001 fb81 	bl	8001890 <memset>
	sprintf((char*)image_path, "image/path");
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <setImagePath+0x24>)
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <setImagePath+0x28>)
 8000192:	ca07      	ldmia	r2, {r0, r1, r2}
 8000194:	c303      	stmia	r3!, {r0, r1}
 8000196:	801a      	strh	r2, [r3, #0]
 8000198:	3302      	adds	r3, #2
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000478 	.word	0x20000478
 80001a8:	08002120 	.word	0x08002120

080001ac <alert_Handler>:

void *alert_Handler(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 80001b2:	2303      	movs	r3, #3
 80001b4:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 80001b6:	e002      	b.n	80001be <alert_Handler+0x12>
		i--;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d008      	beq.n	80001d6 <alert_Handler+0x2a>
 80001c4:	f000 f852 	bl	800026c <recordAlert>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d103      	bne.n	80001d6 <alert_Handler+0x2a>
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <alert_Handler+0x34>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d1f0      	bne.n	80001b8 <alert_Handler+0xc>
	}
	return NULL;
 80001d6:	2300      	movs	r3, #0

}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200004f8 	.word	0x200004f8

080001e4 <control_Handler>:

void *control_Handler(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 80001ea:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <control_Handler+0x74>)
 80001ec:	2203      	movs	r2, #3
 80001ee:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 80001f0:	2303      	movs	r3, #3
 80001f2:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001f4:	e002      	b.n	80001fc <control_Handler+0x18>
		i--;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d008      	beq.n	8000214 <control_Handler+0x30>
 8000202:	f000 f8a9 	bl	8000358 <checkSwitchState>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d103      	bne.n	8000214 <control_Handler+0x30>
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <control_Handler+0x78>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f0      	bne.n	80001f6 <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <control_Handler+0x74>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <control_Handler+0x40>
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <control_Handler+0x74>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b02      	cmp	r3, #2
 8000222:	d105      	bne.n	8000230 <control_Handler+0x4c>
		disable_sensor();
 8000224:	f000 fd96 	bl	8000d54 <disable_sensor>
		write_usart2((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 8000228:	480d      	ldr	r0, [pc, #52]	; (8000260 <control_Handler+0x7c>)
 800022a:	f001 f967 	bl	80014fc <write_usart2>
 800022e:	e00e      	b.n	800024e <control_Handler+0x6a>
	}

	else if(state == ON){
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <control_Handler+0x74>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d105      	bne.n	8000244 <control_Handler+0x60>
		enable_sensor();
 8000238:	f000 fd80 	bl	8000d3c <enable_sensor>
		write_usart2((uint8_t*)("\r\nON\r\n"));
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <control_Handler+0x80>)
 800023e:	f001 f95d 	bl	80014fc <write_usart2>
 8000242:	e004      	b.n	800024e <control_Handler+0x6a>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 8000244:	f000 fd86 	bl	8000d54 <disable_sensor>
		write_usart2((uint8_t*)("\r\nNON\r\n"));
 8000248:	4807      	ldr	r0, [pc, #28]	; (8000268 <control_Handler+0x84>)
 800024a:	f001 f957 	bl	80014fc <write_usart2>
	}

	return NULL;
 800024e:	2300      	movs	r3, #0


}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	200004f9 	.word	0x200004f9
 800025c:	200004f8 	.word	0x200004f8
 8000260:	0800212c 	.word	0x0800212c
 8000264:	0800213c 	.word	0x0800213c
 8000268:	08002144 	.word	0x08002144

0800026c <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In recordAlert()\r\n"); // for debugging
 8000270:	4830      	ldr	r0, [pc, #192]	; (8000334 <recordAlert+0xc8>)
 8000272:	f001 f943 	bl	80014fc <write_usart2>

	connection_closed = TRUE;
 8000276:	4b30      	ldr	r3, [pc, #192]	; (8000338 <recordAlert+0xcc>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 800027c:	2106      	movs	r1, #6
 800027e:	2003      	movs	r0, #3
 8000280:	f000 f8da 	bl	8000438 <setClientMode>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <recordAlert+0x22>
		return FALSE;
 800028a:	2300      	movs	r3, #0
 800028c:	e050      	b.n	8000330 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"1\r\n");
 800028e:	482b      	ldr	r0, [pc, #172]	; (800033c <recordAlert+0xd0>)
 8000290:	f001 f934 	bl	80014fc <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 8000294:	2106      	movs	r1, #6
 8000296:	2003      	movs	r0, #3
 8000298:	f000 f908 	bl	80004ac <joinAccessPoint>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <recordAlert+0x3a>
		return FALSE;
 80002a2:	2300      	movs	r3, #0
 80002a4:	e044      	b.n	8000330 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"2\r\n");
 80002a6:	4826      	ldr	r0, [pc, #152]	; (8000340 <recordAlert+0xd4>)
 80002a8:	f001 f928 	bl	80014fc <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 80002ac:	2314      	movs	r3, #20
 80002ae:	2206      	movs	r2, #6
 80002b0:	2103      	movs	r1, #3
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 f946 	bl	8000544 <connectFirebaseHost>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <recordAlert+0x56>
		return FALSE;
 80002be:	2300      	movs	r3, #0
 80002c0:	e036      	b.n	8000330 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"3\r\n");
 80002c2:	4820      	ldr	r0, [pc, #128]	; (8000344 <recordAlert+0xd8>)
 80002c4:	f001 f91a 	bl	80014fc <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 80002c8:	f7ff ff5a 	bl	8000180 <setImagePath>
	write_usart2((uint8_t*)"4\r\n");
 80002cc:	481e      	ldr	r0, [pc, #120]	; (8000348 <recordAlert+0xdc>)
 80002ce:	f001 f915 	bl	80014fc <write_usart2>

	//Create HTTP request
	createPostMsg();
 80002d2:	f000 f9c9 	bl	8000668 <createPostMsg>
	write_usart2((uint8_t*)"5\r\n");
 80002d6:	481d      	ldr	r0, [pc, #116]	; (800034c <recordAlert+0xe0>)
 80002d8:	f001 f910 	bl	80014fc <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 80002dc:	233c      	movs	r3, #60	; 0x3c
 80002de:	221e      	movs	r2, #30
 80002e0:	2103      	movs	r1, #3
 80002e2:	2003      	movs	r0, #3
 80002e4:	f000 fa2c 	bl	8000740 <sendRequest>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d109      	bne.n	8000302 <recordAlert+0x96>
		//closeCunnection(3,3); // original line
		connection_closed = closeCunnection(3,3);
 80002ee:	2103      	movs	r1, #3
 80002f0:	2003      	movs	r0, #3
 80002f2:	f000 fb29 	bl	8000948 <closeCunnection>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <recordAlert+0xcc>)
 80002fc:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002fe:	2300      	movs	r3, #0
 8000300:	e016      	b.n	8000330 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"6\r\n");
 8000302:	4813      	ldr	r0, [pc, #76]	; (8000350 <recordAlert+0xe4>)
 8000304:	f001 f8fa 	bl	80014fc <write_usart2>

	//Read response
	if(!readResponse(180)){ //timeout set t0 3 minutes
 8000308:	20b4      	movs	r0, #180	; 0xb4
 800030a:	f000 faad 	bl	8000868 <readResponse>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <recordAlert+0xbc>
		//closeCunnection(3,3); //original line
		connection_closed = closeCunnection(3,3);
 8000314:	2103      	movs	r1, #3
 8000316:	2003      	movs	r0, #3
 8000318:	f000 fb16 	bl	8000948 <closeCunnection>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <recordAlert+0xcc>)
 8000322:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000324:	2300      	movs	r3, #0
 8000326:	e003      	b.n	8000330 <recordAlert+0xc4>
	}

	write_usart2((uint8_t*)"7\r\n");
 8000328:	480a      	ldr	r0, [pc, #40]	; (8000354 <recordAlert+0xe8>)
 800032a:	f001 f8e7 	bl	80014fc <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"8\r\n");

	return TRUE;
 800032e:	2301      	movs	r3, #1

}
 8000330:	4618      	mov	r0, r3
 8000332:	bd80      	pop	{r7, pc}
 8000334:	0800214c 	.word	0x0800214c
 8000338:	200004f8 	.word	0x200004f8
 800033c:	08002160 	.word	0x08002160
 8000340:	08002164 	.word	0x08002164
 8000344:	08002168 	.word	0x08002168
 8000348:	0800216c 	.word	0x0800216c
 800034c:	08002170 	.word	0x08002170
 8000350:	08002174 	.word	0x08002174
 8000354:	08002178 	.word	0x08002178

08000358 <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 800035c:	482e      	ldr	r0, [pc, #184]	; (8000418 <checkSwitchState+0xc0>)
 800035e:	f001 f8cd 	bl	80014fc <write_usart2>

	connection_closed = TRUE;//added 30.4.21
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <checkSwitchState+0xc4>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 8000368:	2106      	movs	r1, #6
 800036a:	2003      	movs	r0, #3
 800036c:	f000 f864 	bl	8000438 <setClientMode>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d101      	bne.n	800037a <checkSwitchState+0x22>
		return FALSE;
 8000376:	2300      	movs	r3, #0
 8000378:	e04b      	b.n	8000412 <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"1\r\n");
 800037a:	4829      	ldr	r0, [pc, #164]	; (8000420 <checkSwitchState+0xc8>)
 800037c:	f001 f8be 	bl	80014fc <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 8000380:	2106      	movs	r1, #6
 8000382:	2003      	movs	r0, #3
 8000384:	f000 f892 	bl	80004ac <joinAccessPoint>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <checkSwitchState+0x3a>
		return FALSE;
 800038e:	2300      	movs	r3, #0
 8000390:	e03f      	b.n	8000412 <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"2\r\n");
 8000392:	4824      	ldr	r0, [pc, #144]	; (8000424 <checkSwitchState+0xcc>)
 8000394:	f001 f8b2 	bl	80014fc <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 8000398:	2314      	movs	r3, #20
 800039a:	2206      	movs	r2, #6
 800039c:	2103      	movs	r1, #3
 800039e:	2003      	movs	r0, #3
 80003a0:	f000 f8d0 	bl	8000544 <connectFirebaseHost>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d101      	bne.n	80003ae <checkSwitchState+0x56>
		return FALSE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	e031      	b.n	8000412 <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"3\r\n");
 80003ae:	481e      	ldr	r0, [pc, #120]	; (8000428 <checkSwitchState+0xd0>)
 80003b0:	f001 f8a4 	bl	80014fc <write_usart2>


	//Create HTTP request
	createGetMsg();
 80003b4:	f000 f99c 	bl	80006f0 <createGetMsg>
	write_usart2((uint8_t*)"4\r\n");
 80003b8:	481c      	ldr	r0, [pc, #112]	; (800042c <checkSwitchState+0xd4>)
 80003ba:	f001 f89f 	bl	80014fc <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 80003be:	233c      	movs	r3, #60	; 0x3c
 80003c0:	221e      	movs	r2, #30
 80003c2:	2103      	movs	r1, #3
 80003c4:	2003      	movs	r0, #3
 80003c6:	f000 f9bb 	bl	8000740 <sendRequest>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d109      	bne.n	80003e4 <checkSwitchState+0x8c>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 80003d0:	2103      	movs	r1, #3
 80003d2:	2003      	movs	r0, #3
 80003d4:	f000 fab8 	bl	8000948 <closeCunnection>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <checkSwitchState+0xc4>)
 80003de:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	e016      	b.n	8000412 <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"5\r\n");
 80003e4:	4812      	ldr	r0, [pc, #72]	; (8000430 <checkSwitchState+0xd8>)
 80003e6:	f001 f889 	bl	80014fc <write_usart2>

	//Read response
	if(!parseResponse(180)){//timeout set t0 3 minutes
 80003ea:	20b4      	movs	r0, #180	; 0xb4
 80003ec:	f000 fa68 	bl	80008c0 <parseResponse>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d109      	bne.n	800040a <checkSwitchState+0xb2>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 80003f6:	2103      	movs	r1, #3
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 faa5 	bl	8000948 <closeCunnection>
 80003fe:	4603      	mov	r3, r0
 8000400:	461a      	mov	r2, r3
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <checkSwitchState+0xc4>)
 8000404:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000406:	2300      	movs	r3, #0
 8000408:	e003      	b.n	8000412 <checkSwitchState+0xba>
	}

	write_usart2((uint8_t*)"6\r\n");
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <checkSwitchState+0xdc>)
 800040c:	f001 f876 	bl	80014fc <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"7\r\n");

	return TRUE;
 8000410:	2301      	movs	r3, #1


}
 8000412:	4618      	mov	r0, r3
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	0800217c 	.word	0x0800217c
 800041c:	200004f8 	.word	0x200004f8
 8000420:	08002160 	.word	0x08002160
 8000424:	08002164 	.word	0x08002164
 8000428:	08002168 	.word	0x08002168
 800042c:	0800216c 	.word	0x0800216c
 8000430:	08002170 	.word	0x08002170
 8000434:	08002174 	.word	0x08002174

08000438 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <setClientMode+0x64>)
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 8000448:	4815      	ldr	r0, [pc, #84]	; (80004a0 <setClientMode+0x68>)
 800044a:	f001 f893 	bl	8001574 <write_usart1>
	while(tries > 0){
 800044e:	e01d      	b.n	800048c <setClientMode+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000450:	4914      	ldr	r1, [pc, #80]	; (80004a4 <setClientMode+0x6c>)
 8000452:	4815      	ldr	r0, [pc, #84]	; (80004a8 <setClientMode+0x70>)
 8000454:	f001 f900 	bl	8001658 <search_usart1_buffer_Rx>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <setClientMode+0x64>)
 800045e:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <setClientMode+0x64>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d105      	bne.n	8000474 <setClientMode+0x3c>
 8000468:	6838      	ldr	r0, [r7, #0]
 800046a:	f000 fe6d 	bl	8001148 <timeout_with_timer4>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0ed      	beq.n	8000450 <setClientMode+0x18>
		}
		if(found == PASS){
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <setClientMode+0x64>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d101      	bne.n	8000480 <setClientMode+0x48>
			return TRUE;
 800047c:	2301      	movs	r3, #1
 800047e:	e009      	b.n	8000494 <setClientMode+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <setClientMode+0x68>)
 8000488:	f001 f874 	bl	8001574 <write_usart1>
	while(tries > 0){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1e6      	bne.n	8000460 <setClientMode+0x28>
		}
	}
	return FALSE;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000006c 	.word	0x2000006c
 80004a0:	080021b8 	.word	0x080021b8
 80004a4:	0800219c 	.word	0x0800219c
 80004a8:	080021a4 	.word	0x080021a4

080004ac <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80004b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ba:	2100      	movs	r1, #0
 80004bc:	481a      	ldr	r0, [pc, #104]	; (8000528 <joinAccessPoint+0x7c>)
 80004be:	f001 f9e7 	bl	8001890 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <joinAccessPoint+0x80>)
 80004c4:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <joinAccessPoint+0x84>)
 80004c6:	491b      	ldr	r1, [pc, #108]	; (8000534 <joinAccessPoint+0x88>)
 80004c8:	4817      	ldr	r0, [pc, #92]	; (8000528 <joinAccessPoint+0x7c>)
 80004ca:	f001 f9e9 	bl	80018a0 <siprintf>

	found = STANDBY;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <joinAccessPoint+0x8c>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80004d4:	4814      	ldr	r0, [pc, #80]	; (8000528 <joinAccessPoint+0x7c>)
 80004d6:	f001 f84d 	bl	8001574 <write_usart1>
	while(tries > 0){
 80004da:	e01d      	b.n	8000518 <joinAccessPoint+0x6c>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80004dc:	4917      	ldr	r1, [pc, #92]	; (800053c <joinAccessPoint+0x90>)
 80004de:	4818      	ldr	r0, [pc, #96]	; (8000540 <joinAccessPoint+0x94>)
 80004e0:	f001 f8ba 	bl	8001658 <search_usart1_buffer_Rx>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <joinAccessPoint+0x8c>)
 80004ea:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <joinAccessPoint+0x8c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d105      	bne.n	8000500 <joinAccessPoint+0x54>
 80004f4:	6838      	ldr	r0, [r7, #0]
 80004f6:	f000 fe27 	bl	8001148 <timeout_with_timer4>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0ed      	beq.n	80004dc <joinAccessPoint+0x30>
		}
		if(found == PASS){
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <joinAccessPoint+0x8c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d101      	bne.n	800050c <joinAccessPoint+0x60>
			return TRUE;
 8000508:	2301      	movs	r3, #1
 800050a:	e009      	b.n	8000520 <joinAccessPoint+0x74>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b01      	subs	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <joinAccessPoint+0x7c>)
 8000514:	f001 f82e 	bl	8001574 <write_usart1>
	while(tries > 0){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1e6      	bne.n	80004ec <joinAccessPoint+0x40>
		}
	}
	return FALSE;
 800051e:	2300      	movs	r3, #0

}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000f0 	.word	0x200000f0
 800052c:	080021c8 	.word	0x080021c8
 8000530:	080021d4 	.word	0x080021d4
 8000534:	080021e0 	.word	0x080021e0
 8000538:	2000006c 	.word	0x2000006c
 800053c:	080021f8 	.word	0x080021f8
 8000540:	080021a4 	.word	0x080021a4

08000544 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <connectFirebaseHost+0x100>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000558:	483b      	ldr	r0, [pc, #236]	; (8000648 <connectFirebaseHost+0x104>)
 800055a:	f001 f80b 	bl	8001574 <write_usart1>
	while(_ssl_tries > 0){
 800055e:	e01b      	b.n	8000598 <connectFirebaseHost+0x54>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000560:	493a      	ldr	r1, [pc, #232]	; (800064c <connectFirebaseHost+0x108>)
 8000562:	483b      	ldr	r0, [pc, #236]	; (8000650 <connectFirebaseHost+0x10c>)
 8000564:	f001 f878 	bl	8001658 <search_usart1_buffer_Rx>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <connectFirebaseHost+0x100>)
 800056e:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <connectFirebaseHost+0x100>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d105      	bne.n	8000584 <connectFirebaseHost+0x40>
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 fde5 	bl	8001148 <timeout_with_timer4>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0ed      	beq.n	8000560 <connectFirebaseHost+0x1c>
		}
		if(found == PASS){
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <connectFirebaseHost+0x100>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d009      	beq.n	80005a0 <connectFirebaseHost+0x5c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3b01      	subs	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 8000592:	482d      	ldr	r0, [pc, #180]	; (8000648 <connectFirebaseHost+0x104>)
 8000594:	f000 ffee 	bl	8001574 <write_usart1>
	while(_ssl_tries > 0){
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1e8      	bne.n	8000570 <connectFirebaseHost+0x2c>
 800059e:	e000      	b.n	80005a2 <connectFirebaseHost+0x5e>
			break; //move on to next command
 80005a0:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <connectFirebaseHost+0x100>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d003      	beq.n	80005b2 <connectFirebaseHost+0x6e>
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <connectFirebaseHost+0x100>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <connectFirebaseHost+0x72>
		return FALSE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e041      	b.n	800063a <connectFirebaseHost+0xf6>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	2100      	movs	r1, #0
 80005bc:	4825      	ldr	r0, [pc, #148]	; (8000654 <connectFirebaseHost+0x110>)
 80005be:	f001 f967 	bl	8001890 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <connectFirebaseHost+0x114>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a25      	ldr	r2, [pc, #148]	; (800065c <connectFirebaseHost+0x118>)
 80005c8:	4925      	ldr	r1, [pc, #148]	; (8000660 <connectFirebaseHost+0x11c>)
 80005ca:	4822      	ldr	r0, [pc, #136]	; (8000654 <connectFirebaseHost+0x110>)
 80005cc:	f001 f968 	bl	80018a0 <siprintf>

	found = STANDBY;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <connectFirebaseHost+0x100>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80005d6:	481f      	ldr	r0, [pc, #124]	; (8000654 <connectFirebaseHost+0x110>)
 80005d8:	f000 ffcc 	bl	8001574 <write_usart1>
	while(_cipstart_tries > 0){
 80005dc:	e029      	b.n	8000632 <connectFirebaseHost+0xee>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80005de:	491b      	ldr	r1, [pc, #108]	; (800064c <connectFirebaseHost+0x108>)
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <connectFirebaseHost+0x10c>)
 80005e2:	f001 f839 	bl	8001658 <search_usart1_buffer_Rx>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <connectFirebaseHost+0x100>)
 80005ec:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <connectFirebaseHost+0x100>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d107      	bne.n	8000606 <connectFirebaseHost+0xc2>
				found = search_usart1_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);//NO IDEA WHY THIS IS SO CRITICAL BUT IT IS!
 80005f6:	4915      	ldr	r1, [pc, #84]	; (800064c <connectFirebaseHost+0x108>)
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <connectFirebaseHost+0x120>)
 80005fa:	f001 f82d 	bl	8001658 <search_usart1_buffer_Rx>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <connectFirebaseHost+0x100>)
 8000604:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <connectFirebaseHost+0x100>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d105      	bne.n	800061a <connectFirebaseHost+0xd6>
 800060e:	6838      	ldr	r0, [r7, #0]
 8000610:	f000 fd9a 	bl	8001148 <timeout_with_timer4>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0e1      	beq.n	80005de <connectFirebaseHost+0x9a>
			}
		}
		if(found == PASS){
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <connectFirebaseHost+0x100>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <connectFirebaseHost+0xe2>
			return TRUE;
 8000622:	2301      	movs	r3, #1
 8000624:	e009      	b.n	800063a <connectFirebaseHost+0xf6>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	3b01      	subs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <connectFirebaseHost+0x110>)
 800062e:	f000 ffa1 	bl	8001574 <write_usart1>
	while(_cipstart_tries > 0){
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1e6      	bne.n	8000606 <connectFirebaseHost+0xc2>
		}
	}
	return FALSE;
 8000638:	2300      	movs	r3, #0



}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000006c 	.word	0x2000006c
 8000648:	08002200 	.word	0x08002200
 800064c:	0800219c 	.word	0x0800219c
 8000650:	080021a4 	.word	0x080021a4
 8000654:	200000f0 	.word	0x200000f0
 8000658:	20000058 	.word	0x20000058
 800065c:	20000000 	.word	0x20000000
 8000660:	08002218 	.word	0x08002218
 8000664:	08002238 	.word	0x08002238

08000668 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	2100      	movs	r1, #0
 8000672:	4815      	ldr	r0, [pc, #84]	; (80006c8 <createPostMsg+0x60>)
 8000674:	f001 f90c 	bl	8001890 <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <createPostMsg+0x64>)
 800067a:	4915      	ldr	r1, [pc, #84]	; (80006d0 <createPostMsg+0x68>)
 800067c:	4812      	ldr	r0, [pc, #72]	; (80006c8 <createPostMsg+0x60>)
 800067e:	f001 f90f 	bl	80018a0 <siprintf>
	content_len = strlen((char*)content);
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <createPostMsg+0x60>)
 8000684:	f7ff fd74 	bl	8000170 <strlen>
 8000688:	4602      	mov	r2, r0
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <createPostMsg+0x6c>)
 800068c:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 800068e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000692:	2100      	movs	r1, #0
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <createPostMsg+0x70>)
 8000696:	f001 f8fb 	bl	8001890 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <createPostMsg+0x6c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <createPostMsg+0x60>)
 80006a0:	9202      	str	r2, [sp, #8]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <createPostMsg+0x74>)
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <createPostMsg+0x78>)
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <createPostMsg+0x7c>)
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <createPostMsg+0x80>)
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <createPostMsg+0x70>)
 80006b0:	f001 f8f6 	bl	80018a0 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <createPostMsg+0x70>)
 80006b6:	f7ff fd5b 	bl	8000170 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	3b02      	subs	r3, #2
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <createPostMsg+0x84>)
 80006c0:	6013      	str	r3, [r2, #0]

}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200003f4 	.word	0x200003f4
 80006cc:	20000478 	.word	0x20000478
 80006d0:	0800224c 	.word	0x0800224c
 80006d4:	20000474 	.word	0x20000474
 80006d8:	200001f0 	.word	0x200001f0
 80006dc:	20000000 	.word	0x20000000
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	2000005c 	.word	0x2000005c
 80006e8:	080022a0 	.word	0x080022a0
 80006ec:	200003f0 	.word	0x200003f0

080006f0 <createGetMsg>:

void createGetMsg(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80006f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fa:	2100      	movs	r1, #0
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <createGetMsg+0x38>)
 80006fe:	f001 f8c7 	bl	8001890 <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <createGetMsg+0x3c>)
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <createGetMsg+0x40>)
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <createGetMsg+0x44>)
 800070a:	490b      	ldr	r1, [pc, #44]	; (8000738 <createGetMsg+0x48>)
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <createGetMsg+0x38>)
 800070e:	f001 f8c7 	bl	80018a0 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <createGetMsg+0x38>)
 8000714:	f7ff fd2c 	bl	8000170 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	3b02      	subs	r3, #2
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <createGetMsg+0x4c>)
 800071e:	6013      	str	r3, [r2, #0]

}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001f0 	.word	0x200001f0
 800072c:	20000000 	.word	0x20000000
 8000730:	2000002c 	.word	0x2000002c
 8000734:	2000005c 	.word	0x2000005c
 8000738:	08002318 	.word	0x08002318
 800073c:	200003f0 	.word	0x200003f0

08000740 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800074e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000752:	2100      	movs	r1, #0
 8000754:	483a      	ldr	r0, [pc, #232]	; (8000840 <sendRequest+0x100>)
 8000756:	f001 f89b 	bl	8001890 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <sendRequest+0x104>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	4939      	ldr	r1, [pc, #228]	; (8000848 <sendRequest+0x108>)
 8000762:	4837      	ldr	r0, [pc, #220]	; (8000840 <sendRequest+0x100>)
 8000764:	f001 f89c 	bl	80018a0 <siprintf>

	found = STANDBY;
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <sendRequest+0x10c>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800076e:	4834      	ldr	r0, [pc, #208]	; (8000840 <sendRequest+0x100>)
 8000770:	f000 ff00 	bl	8001574 <write_usart1>
	while(_CIPSEND_tries > 0){
 8000774:	e027      	b.n	80007c6 <sendRequest+0x86>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000776:	4936      	ldr	r1, [pc, #216]	; (8000850 <sendRequest+0x110>)
 8000778:	4836      	ldr	r0, [pc, #216]	; (8000854 <sendRequest+0x114>)
 800077a:	f000 ff6d 	bl	8001658 <search_usart1_buffer_Rx>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <sendRequest+0x10c>)
 8000784:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <sendRequest+0x10c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d107      	bne.n	800079e <sendRequest+0x5e>
				found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 800078e:	4932      	ldr	r1, [pc, #200]	; (8000858 <sendRequest+0x118>)
 8000790:	4830      	ldr	r0, [pc, #192]	; (8000854 <sendRequest+0x114>)
 8000792:	f000 ff61 	bl	8001658 <search_usart1_buffer_Rx>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <sendRequest+0x10c>)
 800079c:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <sendRequest+0x10c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d105      	bne.n	80007b2 <sendRequest+0x72>
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fcce 	bl	8001148 <timeout_with_timer4>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0e1      	beq.n	8000776 <sendRequest+0x36>
			}
		}
		if(found == PASS){
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <sendRequest+0x10c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d009      	beq.n	80007ce <sendRequest+0x8e>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3b01      	subs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 80007c0:	481f      	ldr	r0, [pc, #124]	; (8000840 <sendRequest+0x100>)
 80007c2:	f000 fed7 	bl	8001574 <write_usart1>
	while(_CIPSEND_tries > 0){
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1e8      	bne.n	800079e <sendRequest+0x5e>
 80007cc:	e000      	b.n	80007d0 <sendRequest+0x90>
			break; //move on to next command
 80007ce:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <sendRequest+0x10c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d003      	beq.n	80007e0 <sendRequest+0xa0>
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <sendRequest+0x10c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d101      	bne.n	80007e4 <sendRequest+0xa4>
		return FALSE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e028      	b.n	8000836 <sendRequest+0xf6>
	}


	/*Send HTTP request*/
	found = STANDBY;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <sendRequest+0x10c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 80007ea:	481c      	ldr	r0, [pc, #112]	; (800085c <sendRequest+0x11c>)
 80007ec:	f000 fec2 	bl	8001574 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 80007f0:	e01d      	b.n	800082e <sendRequest+0xee>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 80007f2:	491b      	ldr	r1, [pc, #108]	; (8000860 <sendRequest+0x120>)
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <sendRequest+0x124>)
 80007f6:	f000 ff2f 	bl	8001658 <search_usart1_buffer_Rx>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <sendRequest+0x10c>)
 8000800:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <sendRequest+0x10c>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d105      	bne.n	8000816 <sendRequest+0xd6>
 800080a:	6838      	ldr	r0, [r7, #0]
 800080c:	f000 fc9c 	bl	8001148 <timeout_with_timer4>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0ed      	beq.n	80007f2 <sendRequest+0xb2>
		}
		if(found == PASS){
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <sendRequest+0x10c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <sendRequest+0xe2>
			return TRUE;
 800081e:	2301      	movs	r3, #1
 8000820:	e009      	b.n	8000836 <sendRequest+0xf6>
		}
		else{
			_SEND_OK_tries--;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <sendRequest+0x11c>)
 800082a:	f000 fea3 	bl	8001574 <write_usart1>
	while(_SEND_OK_tries > 0){
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1e6      	bne.n	8000802 <sendRequest+0xc2>
		}
	}
	return FALSE;
 8000834:	2300      	movs	r3, #0

}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000f0 	.word	0x200000f0
 8000844:	200003f0 	.word	0x200003f0
 8000848:	0800235c 	.word	0x0800235c
 800084c:	2000006c 	.word	0x2000006c
 8000850:	0800219c 	.word	0x0800219c
 8000854:	08002370 	.word	0x08002370
 8000858:	08002374 	.word	0x08002374
 800085c:	200001f0 	.word	0x200001f0
 8000860:	080021f8 	.word	0x080021f8
 8000864:	08002380 	.word	0x08002380

08000868 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <readResponse+0x4c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000876:	e007      	b.n	8000888 <readResponse+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000878:	490f      	ldr	r1, [pc, #60]	; (80008b8 <readResponse+0x50>)
 800087a:	4810      	ldr	r0, [pc, #64]	; (80008bc <readResponse+0x54>)
 800087c:	f000 feec 	bl	8001658 <search_usart1_buffer_Rx>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <readResponse+0x4c>)
 8000886:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <readResponse+0x4c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <readResponse+0x34>
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 fc59 	bl	8001148 <timeout_with_timer4>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0ed      	beq.n	8000878 <readResponse+0x10>
	}
	if(found == PASS){
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <readResponse+0x4c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <readResponse+0x40>
		return TRUE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <readResponse+0x42>
	}
	else{
		return FALSE;
 80008a8:	2300      	movs	r3, #0
	}

}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000006c 	.word	0x2000006c
 80008b8:	080021f8 	.word	0x080021f8
 80008bc:	08002374 	.word	0x08002374

080008c0 <parseResponse>:


// THIS NEEDS TO CHANGE NEED TO CHECK WETHER IT'S ON OR OFF for that we need to retreive the content.
BOOL parseResponse(uint32_t timeout){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <parseResponse+0x6c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
	state = NON;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <parseResponse+0x70>)
 80008d0:	2203      	movs	r2, #3
 80008d2:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80008d4:	e014      	b.n	8000900 <parseResponse+0x40>
		state = find_state_usart1_Buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <parseResponse+0x74>)
 80008d8:	4917      	ldr	r1, [pc, #92]	; (8000938 <parseResponse+0x78>)
 80008da:	4818      	ldr	r0, [pc, #96]	; (800093c <parseResponse+0x7c>)
 80008dc:	f000 ff02 	bl	80016e4 <find_state_usart1_Buffer_Rx>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <parseResponse+0x70>)
 80008e6:	701a      	strb	r2, [r3, #0]
		if(state != NON){
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <parseResponse+0x70>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d007      	beq.n	8000900 <parseResponse+0x40>
			found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80008f0:	4913      	ldr	r1, [pc, #76]	; (8000940 <parseResponse+0x80>)
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <parseResponse+0x84>)
 80008f4:	f000 feb0 	bl	8001658 <search_usart1_buffer_Rx>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <parseResponse+0x6c>)
 80008fe:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <parseResponse+0x6c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <parseResponse+0x54>
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fc1d 	bl	8001148 <timeout_with_timer4>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0e0      	beq.n	80008d6 <parseResponse+0x16>
		}
	}
	if(found == PASS){
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <parseResponse+0x6c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <parseResponse+0x60>
		return TRUE;
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <parseResponse+0x62>
	}
	else{
		return FALSE;
 8000920:	2300      	movs	r3, #0
	}

}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000006c 	.word	0x2000006c
 8000930:	200004f9 	.word	0x200004f9
 8000934:	0800238c 	.word	0x0800238c
 8000938:	08002398 	.word	0x08002398
 800093c:	080023a4 	.word	0x080023a4
 8000940:	080021f8 	.word	0x080021f8
 8000944:	08002374 	.word	0x08002374

08000948 <closeCunnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeCunnection(uint32_t tries, uint32_t timeout){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <closeCunnection+0x64>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <closeCunnection+0x68>)
 800095a:	f000 fe0b 	bl	8001574 <write_usart1>
	while(tries > 0){
 800095e:	e01d      	b.n	800099c <closeCunnection+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000960:	4914      	ldr	r1, [pc, #80]	; (80009b4 <closeCunnection+0x6c>)
 8000962:	4815      	ldr	r0, [pc, #84]	; (80009b8 <closeCunnection+0x70>)
 8000964:	f000 fe78 	bl	8001658 <search_usart1_buffer_Rx>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <closeCunnection+0x64>)
 800096e:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <closeCunnection+0x64>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d105      	bne.n	8000984 <closeCunnection+0x3c>
 8000978:	6838      	ldr	r0, [r7, #0]
 800097a:	f000 fbe5 	bl	8001148 <timeout_with_timer4>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0ed      	beq.n	8000960 <closeCunnection+0x18>
		}
		if(found == PASS){
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <closeCunnection+0x64>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <closeCunnection+0x48>
			return TRUE;
 800098c:	2301      	movs	r3, #1
 800098e:	e009      	b.n	80009a4 <closeCunnection+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <closeCunnection+0x68>)
 8000998:	f000 fdec 	bl	8001574 <write_usart1>
	while(tries > 0){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1e6      	bne.n	8000970 <closeCunnection+0x28>
		}
	}
	return FALSE;
 80009a2:	2300      	movs	r3, #0

}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000006c 	.word	0x2000006c
 80009b0:	080023b0 	.word	0x080023b0
 80009b4:	0800219c 	.word	0x0800219c
 80009b8:	080021a4 	.word	0x080021a4

080009bc <init_queue>:

static Queue queue;


void init_queue()
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <init_queue+0x24>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <init_queue+0x24>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <init_queue+0x24>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	200004fc 	.word	0x200004fc

080009e4 <add_event>:


void add_event(Handler handler)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 80009ec:	f000 f854 	bl	8000a98 <queue_isFull>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d118      	bne.n	8000a28 <add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <add_event+0x4c>)
 80009f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <add_event+0x4c>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <add_event+0x4c>)
 8000a06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8000a0c:	d807      	bhi.n	8000a1e <add_event+0x3a>
		queue.writeIndex++;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <add_event+0x4c>)
 8000a10:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <add_event+0x4c>)
 8000a18:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000a1c:	e005      	b.n	8000a2a <add_event+0x46>
	else
		queue.writeIndex = 0;
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <add_event+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000a26:	e000      	b.n	8000a2a <add_event+0x46>
		return;
 8000a28:	bf00      	nop

}
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200004fc 	.word	0x200004fc

08000a34 <do_event>:



void *do_event()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 8000a3a:	f000 f843 	bl	8000ac4 <queue_isEmpty>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <do_event+0x14>
		return NULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e020      	b.n	8000a8a <do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <do_event+0x60>)
 8000a4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <do_event+0x60>)
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	4798      	blx	r3
 8000a56:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <do_event+0x60>)
 8000a5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <do_event+0x60>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <do_event+0x60>)
 8000a68:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8000a6e:	d807      	bhi.n	8000a80 <do_event+0x4c>
      queue.readIndex++;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <do_event+0x60>)
 8000a72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <do_event+0x60>)
 8000a7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000a7e:	e003      	b.n	8000a88 <do_event+0x54>
   else
      queue.readIndex = 0;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <do_event+0x60>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000a88:	687b      	ldr	r3, [r7, #4]

}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200004fc 	.word	0x200004fc

08000a98 <queue_isFull>:


BOOL queue_isFull()
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <queue_isFull+0x28>)
 8000a9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <queue_isFull+0x28>)
 8000aa4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	200004fc 	.word	0x200004fc

08000ac4 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <queue_isEmpty+0x24>)
 8000aca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <queue_isEmpty+0x24>)
 8000ad0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200004fc 	.word	0x200004fc

08000aec <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <EXTI15_10_IRQHandler+0x24>)
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <EXTI15_10_IRQHandler+0x24>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <EXTI15_10_IRQHandler+0x24>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <EXTI15_10_IRQHandler+0x28>)
 8000b06:	f7ff ff6d 	bl	80009e4 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010400 	.word	0x40010400
 8000b14:	08000b19 	.word	0x08000b19

08000b18 <interrupt_handler>:

void *interrupt_handler(void){
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <interrupt_handler+0x3c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <interrupt_handler+0x40>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <interrupt_handler+0x40>)
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <interrupt_handler+0x3c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e008      	b.n	8000b4a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <interrupt_handler+0x40>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <interrupt_handler+0x40>)
 8000b3e:	f023 0320 	bic.w	r3, r3, #32
 8000b42:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <interrupt_handler+0x3c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000b4a:	2300      	movs	r3, #0

}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000c48 	.word	0x20000c48
 8000b58:	40010800 	.word	0x40010800

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <__NVIC_EnableIRQ+0x34>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db10      	blt.n	8000c10 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4909      	ldr	r1, [pc, #36]	; (8000c1c <__NVIC_DisableIRQ+0x40>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	3320      	adds	r3, #32
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c0c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0c      	blt.n	8000c4c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_ClearPendingIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	3360      	adds	r3, #96	; 0x60
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <init_sensor_with_interrupt>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void init_sensor_with_interrupt(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <init_sensor_with_interrupt+0x7c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <init_sensor_with_interrupt+0x7c>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <init_sensor_with_interrupt+0x7c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <init_sensor_with_interrupt+0x7c>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000cd2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000cd6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce2:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <init_sensor_with_interrupt+0x80>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <init_sensor_with_interrupt+0x84>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <init_sensor_with_interrupt+0x84>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <init_sensor_with_interrupt+0x88>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <init_sensor_with_interrupt+0x88>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <init_sensor_with_interrupt+0x88>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <init_sensor_with_interrupt+0x88>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000d16:	2007      	movs	r0, #7
 8000d18:	f7ff ff20 	bl	8000b5c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f7ff ff9c 	bl	8000c5c <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d24:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010c00 	.word	0x40010c00
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010400 	.word	0x40010400

08000d3c <enable_sensor>:

void enable_sensor(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 8000d42:	200a      	movs	r0, #10
 8000d44:	f7ff ff6c 	bl	8000c20 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f7ff ff2b 	bl	8000ba4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d4e:	b662      	cpsie	i
	__enable_irq();

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <disable_sensor>:

void disable_sensor(){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d60:	b662      	cpsie	i
	__enable_irq();

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	if(timeout_done_timer3())
 8000d6c:	f000 fa3e 	bl	80011ec <timeout_done_timer3>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <EXTI4_IRQHandler+0x26>
	{
		EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <EXTI4_IRQHandler+0x2c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <EXTI4_IRQHandler+0x2c>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	6153      	str	r3, [r2, #20]
		add_event(alert_Handler);
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <EXTI4_IRQHandler+0x30>)
 8000d84:	f7ff fe2e 	bl	80009e4 <add_event>
		set_timeout_timer3(60); //60 seconds = 1 minute
 8000d88:	203c      	movs	r0, #60	; 0x3c
 8000d8a:	f000 fa1f 	bl	80011cc <set_timeout_timer3>

	//toggle_led(); //This is temporary for testing.
	//write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue


}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010400 	.word	0x40010400
 8000d98:	080001ad 	.word	0x080001ad

08000d9c <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	init_usart2(); // for debugging
 8000da0:	f000 fafa 	bl	8001398 <init_usart2>

	init_queue();
 8000da4:	f7ff fe0a 	bl	80009bc <init_queue>
	init_sensor_with_interrupt(); // sensor interrupts are not inabled
 8000da8:	f7ff ff82 	bl	8000cb0 <init_sensor_with_interrupt>

	init_timer2(); // for monitoring switch state.
 8000dac:	f000 f8be 	bl	8000f2c <init_timer2>
	init_timer3(); // for sensor delay
 8000db0:	f000 f8fe 	bl	8000fb0 <init_timer3>
	init_timer4(); // for ESP8266 timeout
 8000db4:	f000 f938 	bl	8001028 <init_timer4>

	init_usart1(); // for ESP8266
 8000db8:	f000 fb22 	bl	8001400 <init_usart1>


	//init_i2c1();
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <main+0x34>)
 8000dbe:	f000 fb9d 	bl	80014fc <write_usart2>


	while(1)
	{

		do_event();
 8000dc2:	f7ff fe37 	bl	8000a34 <do_event>
		monitor_switch_state(120); // every 2 minutes
 8000dc6:	2078      	movs	r0, #120	; 0x78
 8000dc8:	f000 f830 	bl	8000e2c <monitor_switch_state>
		do_event();
 8000dcc:	e7f9      	b.n	8000dc2 <main+0x26>
 8000dce:	bf00      	nop
 8000dd0:	08002450 	.word	0x08002450

08000dd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x50>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x16>
		heap_end = &end;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <_sbrk+0x50>)
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <_sbrk+0x54>)
 8000de8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <_sbrk+0x50>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <_sbrk+0x50>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	466a      	mov	r2, sp
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d907      	bls.n	8000e0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dfe:	f000 fd1d 	bl	800183c <__errno>
 8000e02:	4602      	mov	r2, r0
 8000e04:	230c      	movs	r3, #12
 8000e06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	e006      	b.n	8000e1c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <_sbrk+0x50>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <_sbrk+0x50>)
 8000e18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000608 	.word	0x20000608
 8000e28:	20000c50 	.word	0x20000c50

08000e2c <monitor_switch_state>:
#include "timers.h"
#include "esp8266_Firebase.h"
#include "usart.h"
#include "event_queue.h"

void monitor_switch_state(uint32_t seconds){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	if(timeout_done_timer2()){
 8000e34:	f000 f9b2 	bl	800119c <timeout_done_timer2>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <monitor_switch_state+0x1e>
		add_event(control_Handler);
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <monitor_switch_state+0x28>)
 8000e40:	f7ff fdd0 	bl	80009e4 <add_event>
		set_timeout_timer2(seconds);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f999 	bl	800117c <set_timeout_timer2>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	080001e5 	.word	0x080001e5

08000e58 <__NVIC_SetPriorityGrouping>:
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <init_timer2>:
static TIMER timer3;
static TIMER timer4;


/*init's timer2 to  interrupt once a second when enabled*/
void init_timer2(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <init_timer2+0x7c>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <init_timer2+0x7c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 8000f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000f82:	2007      	movs	r0, #7
 8000f84:	f7ff ff68 	bl	8000e58 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000f88:	2100      	movs	r1, #0
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f7ff ffa4 	bl	8000ed8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8000f90:	201c      	movs	r0, #28
 8000f92:	f7ff ff85 	bl	8000ea0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f96:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <init_timer2+0x80>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <init_timer2+0x80>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	2000060c 	.word	0x2000060c

08000fb0 <init_timer3>:

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <init_timer3+0x6c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <init_timer3+0x6c>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <init_timer3+0x70>)
 8000fc2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <init_timer3+0x70>)
 8000fca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <init_timer3+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <init_timer3+0x70>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <init_timer3+0x70>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <init_timer3+0x70>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <init_timer3+0x70>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <init_timer3+0x70>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f7ff ff2e 	bl	8000e58 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201d      	movs	r0, #29
 8001000:	f7ff ff6a 	bl	8000ed8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8001004:	201d      	movs	r0, #29
 8001006:	f7ff ff4b 	bl	8000ea0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800100a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <init_timer3+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <init_timer3+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	40000400 	.word	0x40000400
 8001024:	20000614 	.word	0x20000614

08001028 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <init_timer4+0x6c>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <init_timer4+0x6c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <init_timer4+0x70>)
 800103a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <init_timer4+0x70>)
 8001042:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <init_timer4+0x70>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <init_timer4+0x70>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <init_timer4+0x70>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <init_timer4+0x70>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <init_timer4+0x70>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <init_timer4+0x70>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800106e:	2007      	movs	r0, #7
 8001070:	f7ff fef2 	bl	8000e58 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001074:	2100      	movs	r1, #0
 8001076:	201e      	movs	r0, #30
 8001078:	f7ff ff2e 	bl	8000ed8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 800107c:	201e      	movs	r0, #30
 800107e:	f7ff ff0f 	bl	8000ea0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001082:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <init_timer4+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <init_timer4+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40000800 	.word	0x40000800
 800109c:	2000061c 	.word	0x2000061c

080010a0 <enable_timer2>:


void enable_timer2(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <enable_timer3>:

void enable_timer3(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <enable_timer3+0x18>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <enable_timer3+0x18>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40000400 	.word	0x40000400

080010d8 <enable_timer4>:

void enable_timer4(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <enable_timer4+0x18>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <enable_timer4+0x18>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40000800 	.word	0x40000800

080010f4 <disable_timer2>:


void disable_timer2(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <disable_timer3>:

void disable_timer3(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <disable_timer3+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <disable_timer3+0x18>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40000400 	.word	0x40000400

0800112c <disable_timer4>:

void disable_timer4(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <disable_timer4+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <disable_timer4+0x18>)
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40000800 	.word	0x40000800

08001148 <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8001150:	f7ff ffc2 	bl	80010d8 <enable_timer4>

	if(timer4.countTicks >= num_of_sec){
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <timeout_with_timer4+0x30>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	d806      	bhi.n	800116c <timeout_with_timer4+0x24>
		disable_timer4();
 800115e:	f7ff ffe5 	bl	800112c <disable_timer4>
		timer4.countTicks = 0;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <timeout_with_timer4+0x30>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
		return TRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <timeout_with_timer4+0x26>
	}
	return FALSE;
 800116c:	2300      	movs	r3, #0

}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000061c 	.word	0x2000061c

0800117c <set_timeout_timer2>:


void set_timeout_timer2(uint32_t num_of_sec)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	enable_timer2();
 8001184:	f7ff ff8c 	bl	80010a0 <enable_timer2>
	timer2.targetTick = num_of_sec;
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <set_timeout_timer2+0x1c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6053      	str	r3, [r2, #4]
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000060c 	.word	0x2000060c

0800119c <timeout_done_timer2>:

BOOL timeout_done_timer2(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <timeout_done_timer2+0x2c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <timeout_done_timer2+0x2c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d309      	bcc.n	80011c0 <timeout_done_timer2+0x24>

		disable_timer2();
 80011ac:	f7ff ffa2 	bl	80010f4 <disable_timer2>
		timer2.countTicks = 0;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <timeout_done_timer2+0x2c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
		timer2.targetTick = 0; // cleanup
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <timeout_done_timer2+0x2c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
		return TRUE;
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <timeout_done_timer2+0x26>
	}
	return FALSE;
 80011c0:	2300      	movs	r3, #0

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000060c 	.word	0x2000060c

080011cc <set_timeout_timer3>:

/*This function sets timer3 num_of_sec_timer3 to param num_of_sec, and enables timer3 timeout*/
void set_timeout_timer3(uint32_t num_of_sec)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	enable_timer3();
 80011d4:	f7ff ff72 	bl	80010bc <enable_timer3>
	timer3.targetTick = num_of_sec;
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <set_timeout_timer3+0x1c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6053      	str	r3, [r2, #4]
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000614 	.word	0x20000614

080011ec <timeout_done_timer3>:

/*returns true if timeout is done, otherwise returns false*/
BOOL timeout_done_timer3(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <timeout_done_timer3+0x2c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <timeout_done_timer3+0x2c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d309      	bcc.n	8001210 <timeout_done_timer3+0x24>

		disable_timer3();
 80011fc:	f7ff ff88 	bl	8001110 <disable_timer3>
		timer3.countTicks = 0;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <timeout_done_timer3+0x2c>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
		timer3.targetTick = 0; // cleanup
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <timeout_done_timer3+0x2c>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
		return TRUE;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <timeout_done_timer3+0x26>
	}
	return FALSE;
 8001210:	2300      	movs	r3, #0

}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000614 	.word	0x20000614

0800121c <TIM2_IRQHandler>:
}



void TIM2_IRQHandler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8001220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10c      	bne.n	8001248 <TIM2_IRQHandler+0x2c>
	{
		TIM2->SR &= ~(0x0001);
 800122e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <TIM2_IRQHandler+0x34>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a02      	ldr	r2, [pc, #8]	; (8001250 <TIM2_IRQHandler+0x34>)
 8001246:	6013      	str	r3, [r2, #0]

	}
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	2000060c 	.word	0x2000060c

08001254 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <TIM3_IRQHandler+0x30>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10a      	bne.n	800127a <TIM3_IRQHandler+0x26>
	{
		TIM3->SR &= ~(0x0001);
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <TIM3_IRQHandler+0x30>)
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <TIM3_IRQHandler+0x30>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <TIM3_IRQHandler+0x34>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <TIM3_IRQHandler+0x34>)
 8001278:	6013      	str	r3, [r2, #0]

	}
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40000400 	.word	0x40000400
 8001288:	20000614 	.word	0x20000614

0800128c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <TIM4_IRQHandler+0x30>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10a      	bne.n	80012b2 <TIM4_IRQHandler+0x26>
	{
		TIM4->SR &= ~(0x0001);
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <TIM4_IRQHandler+0x30>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <TIM4_IRQHandler+0x30>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <TIM4_IRQHandler+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <TIM4_IRQHandler+0x34>)
 80012b0:	6013      	str	r3, [r2, #0]

	}
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40000800 	.word	0x40000800
 80012c0:	2000061c 	.word	0x2000061c

080012c4 <__NVIC_SetPriorityGrouping>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <__NVIC_EnableIRQ+0x34>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <init_usart2+0x5c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <init_usart2+0x5c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <init_usart2+0x60>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <init_usart2+0x60>)
 80013ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013b2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <init_usart2+0x60>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <init_usart2+0x60>)
 80013ba:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80013be:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <init_usart2+0x5c>)
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <init_usart2+0x5c>)
 80013c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ca:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <init_usart2+0x64>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <init_usart2+0x64>)
 80013d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013d6:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <init_usart2+0x64>)
 80013da:	f240 324d 	movw	r2, #845	; 0x34d
 80013de:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <init_usart2+0x64>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <init_usart2+0x64>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40004400 	.word	0x40004400

08001400 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <init_usart1+0xb0>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <init_usart1+0xb0>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <init_usart1+0xb4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <init_usart1+0xb4>)
 8001416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800141a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <init_usart1+0xb4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <init_usart1+0xb4>)
 8001422:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001426:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <init_usart1+0xb4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <init_usart1+0xb4>)
 800142e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001432:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <init_usart1+0xb4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <init_usart1+0xb4>)
 800143a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800143e:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <init_usart1+0xb4>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <init_usart1+0xb4>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <init_usart1+0xb0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <init_usart1+0xb0>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001456:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <init_usart1+0xb8>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <init_usart1+0xb8>)
 800145e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001462:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <init_usart1+0xb8>)
 8001466:	2245      	movs	r2, #69	; 0x45
 8001468:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <init_usart1+0xb8>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <init_usart1+0xb8>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 8001476:	f000 f8d9 	bl	800162c <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <init_usart1+0xb8>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <init_usart1+0xb8>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001486:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <init_usart1+0xb8>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <init_usart1+0xb8>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001494:	2007      	movs	r0, #7
 8001496:	f7ff ff15 	bl	80012c4 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800149a:	2100      	movs	r1, #0
 800149c:	2025      	movs	r0, #37	; 0x25
 800149e:	f7ff ff51 	bl	8001344 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 80014a2:	2025      	movs	r0, #37	; 0x25
 80014a4:	f7ff ff32 	bl	800130c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80014a8:	b662      	cpsie	i
	__enable_irq();

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40013800 	.word	0x40013800

080014bc <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	2100      	movs	r1, #0
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <set_usart2_buffer_Tx+0x3c>)
 80014cc:	f000 f9e0 	bl	8001890 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <set_usart2_buffer_Tx+0x3c>)
 80014d4:	f000 fa04 	bl	80018e0 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7fe fe49 	bl	8000170 <strlen>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <set_usart2_buffer_Tx+0x3c>)
 80014e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <set_usart2_buffer_Tx+0x3c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000624 	.word	0x20000624

080014fc <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ffd9 	bl	80014bc <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 800150a:	e014      	b.n	8001536 <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 800150c:	bf00      	nop
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <write_usart2+0x70>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f9      	beq.n	800150e <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <write_usart2+0x74>)
 800151c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <write_usart2+0x74>)
 8001522:	5cd2      	ldrb	r2, [r2, r3]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <write_usart2+0x70>)
 8001526:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <write_usart2+0x74>)
 800152a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800152e:	3301      	adds	r3, #1
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <write_usart2+0x74>)
 8001532:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <write_usart2+0x74>)
 8001538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <write_usart2+0x74>)
 800153e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001542:	429a      	cmp	r2, r3
 8001544:	d3e2      	bcc.n	800150c <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001546:	bf00      	nop
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <write_usart2+0x70>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001550:	2b40      	cmp	r3, #64	; 0x40
 8001552:	d1f9      	bne.n	8001548 <write_usart2+0x4c>
	usart2.write_index = 0;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <write_usart2+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <write_usart2+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	20000624 	.word	0x20000624

08001574 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f835 	bl	80015ec <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001582:	e014      	b.n	80015ae <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001584:	bf00      	nop
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <write_usart1+0x70>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f9      	beq.n	8001586 <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <write_usart1+0x74>)
 8001594:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <write_usart1+0x74>)
 800159a:	5cd2      	ldrb	r2, [r2, r3]
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <write_usart1+0x70>)
 800159e:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <write_usart1+0x74>)
 80015a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <write_usart1+0x74>)
 80015aa:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <write_usart1+0x74>)
 80015b0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <write_usart1+0x74>)
 80015b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3e2      	bcc.n	8001584 <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80015be:	bf00      	nop
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <write_usart1+0x70>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c8:	2b40      	cmp	r3, #64	; 0x40
 80015ca:	d1f9      	bne.n	80015c0 <write_usart1+0x4c>
	usart1.write_index = 0;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <write_usart1+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <write_usart1+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40013800 	.word	0x40013800
 80015e8:	2000082c 	.word	0x2000082c

080015ec <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	2100      	movs	r1, #0
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <set_usart1_buffer_Tx+0x3c>)
 80015fc:	f000 f948 	bl	8001890 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <set_usart1_buffer_Tx+0x3c>)
 8001604:	f000 f96c 	bl	80018e0 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe fdb1 	bl	8000170 <strlen>
 800160e:	4602      	mov	r2, r0
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <set_usart1_buffer_Tx+0x3c>)
 8001612:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <set_usart1_buffer_Tx+0x3c>)
 8001618:	2200      	movs	r2, #0
 800161a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000082c 	.word	0x2000082c

0800162c <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001634:	2100      	movs	r1, #0
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <set_usart1_buffer_Rx+0x24>)
 8001638:	f000 f92a 	bl	8001890 <memset>
	usart1.Rx_len = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <set_usart1_buffer_Rx+0x28>)
 800163e:	2200      	movs	r2, #0
 8001640:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <set_usart1_buffer_Rx+0x28>)
 8001646:	2200      	movs	r2, #0
 8001648:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000a2c 	.word	0x20000a2c
 8001654:	2000082c 	.word	0x2000082c

08001658 <search_usart1_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <search_usart1_buffer_Rx+0x7c>)
 8001664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001668:	3301      	adds	r3, #1
 800166a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166e:	d223      	bcs.n	80016b8 <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 8001674:	f000 f93c 	bl	80018f0 <strstr>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 800167e:	4816      	ldr	r0, [pc, #88]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 8001680:	f7ff ff3c 	bl	80014fc <write_usart2>
			set_usart1_buffer_Rx();
 8001684:	f7ff ffd2 	bl	800162c <set_usart1_buffer_Rx>
			return (uint32_t)PASS;
 8001688:	2300      	movs	r3, #0
 800168a:	e01e      	b.n	80016ca <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 8001690:	f000 f92e 	bl	80018f0 <strstr>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 800169a:	480f      	ldr	r0, [pc, #60]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 800169c:	f7ff ff2e 	bl	80014fc <write_usart2>
			set_usart1_buffer_Rx();
 80016a0:	f7ff ffc4 	bl	800162c <set_usart1_buffer_Rx>
			return (uint32_t)FAIL;
 80016a4:	2302      	movs	r3, #2
 80016a6:	e010      	b.n	80016ca <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 80016aa:	f7ff ff27 	bl	80014fc <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <search_usart1_buffer_Rx+0x84>)
 80016b0:	f7ff ff24 	bl	80014fc <write_usart2>
			return (uint32_t)STANDBY;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e008      	b.n	80016ca <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <search_usart1_buffer_Rx+0x88>)
 80016ba:	f7ff ff1f 	bl	80014fc <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <search_usart1_buffer_Rx+0x80>)
 80016c0:	f7ff ff1c 	bl	80014fc <write_usart2>
		set_usart1_buffer_Rx();
 80016c4:	f7ff ffb2 	bl	800162c <set_usart1_buffer_Rx>
		return (uint32_t)STANDBY;
 80016c8:	2301      	movs	r3, #1
	}

}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000082c 	.word	0x2000082c
 80016d8:	20000a2c 	.word	0x20000a2c
 80016dc:	08002464 	.word	0x08002464
 80016e0:	08002468 	.word	0x08002468

080016e4 <find_state_usart1_Buffer_Rx>:

/*this function searches USART1 buffer Rx for on or off, to be used
 * in esp8266_Firebase.c in searchSwitchState() -> parseResponse.
 * This function does NOT clean buffer*/
SWITCH_STATE find_state_usart1_Buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <find_state_usart1_Buffer_Rx+0x84>)
 80016f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80016f6:	3301      	adds	r3, #1
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fc:	d228      	bcs.n	8001750 <find_state_usart1_Buffer_Rx+0x6c>

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 80016fe:	68f9      	ldr	r1, [r7, #12]
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 8001702:	f000 f8f5 	bl	80018f0 <strstr>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <find_state_usart1_Buffer_Rx+0x32>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 800170e:	f7ff fef5 	bl	80014fc <write_usart2>
			return (uint32_t)ON;
 8001712:	2301      	movs	r3, #1
 8001714:	e023      	b.n	800175e <find_state_usart1_Buffer_Rx+0x7a>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 800171a:	f000 f8e9 	bl	80018f0 <strstr>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <find_state_usart1_Buffer_Rx+0x4a>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8001724:	4811      	ldr	r0, [pc, #68]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 8001726:	f7ff fee9 	bl	80014fc <write_usart2>
			return (uint32_t)OFF;
 800172a:	2300      	movs	r3, #0
 800172c:	e017      	b.n	800175e <find_state_usart1_Buffer_Rx+0x7a>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	480e      	ldr	r0, [pc, #56]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 8001732:	f000 f8dd 	bl	80018f0 <strstr>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <find_state_usart1_Buffer_Rx+0x62>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 800173e:	f7ff fedd 	bl	80014fc <write_usart2>
			return (uint32_t)NO_PATH;
 8001742:	2302      	movs	r3, #2
 8001744:	e00b      	b.n	800175e <find_state_usart1_Buffer_Rx+0x7a>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 8001748:	f7ff fed8 	bl	80014fc <write_usart2>
			return (uint32_t)NON;
 800174c:	2303      	movs	r3, #3
 800174e:	e006      	b.n	800175e <find_state_usart1_Buffer_Rx+0x7a>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 8001750:	4807      	ldr	r0, [pc, #28]	; (8001770 <find_state_usart1_Buffer_Rx+0x8c>)
 8001752:	f7ff fed3 	bl	80014fc <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <find_state_usart1_Buffer_Rx+0x88>)
 8001758:	f7ff fed0 	bl	80014fc <write_usart2>
		return (uint32_t)NON;
 800175c:	2303      	movs	r3, #3
	}

}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000082c 	.word	0x2000082c
 800176c:	20000a2c 	.word	0x20000a2c
 8001770:	08002468 	.word	0x08002468

08001774 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <USART1_IRQHandler+0x68>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b20      	cmp	r3, #32
 8001782:	d127      	bne.n	80017d4 <USART1_IRQHandler+0x60>

		c = USART1->DR; //This clear RXNE bit
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <USART1_IRQHandler+0x68>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <USART1_IRQHandler+0x6c>)
 800178c:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <USART1_IRQHandler+0x70>)
 8001790:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001794:	3301      	adds	r3, #1
 8001796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179a:	d303      	bcc.n	80017a4 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <USART1_IRQHandler+0x70>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <USART1_IRQHandler+0x6c>)
 80017ac:	7811      	ldrb	r1, [r2, #0]
 80017ae:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017b0:	4413      	add	r3, r2
 80017b2:	460a      	mov	r2, r1
 80017b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017be:	3301      	adds	r3, #1
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017c2:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017cc:	3301      	adds	r3, #1
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <USART1_IRQHandler+0x70>)
 80017d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40013800 	.word	0x40013800
 80017e0:	20000c3c 	.word	0x20000c3c
 80017e4:	2000082c 	.word	0x2000082c

080017e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001812:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001816:	f000 f817 	bl	8001848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181a:	f7ff fabf 	bl	8000d9c <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   r0, =_estack
 8001820:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800182c:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 8001830:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001834:	20000c50 	.word	0x20000c50

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <__errno>:
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <__errno+0x8>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000070 	.word	0x20000070

08001848 <__libc_init_array>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	2500      	movs	r5, #0
 800184c:	4e0c      	ldr	r6, [pc, #48]	; (8001880 <__libc_init_array+0x38>)
 800184e:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <__libc_init_array+0x3c>)
 8001850:	1ba4      	subs	r4, r4, r6
 8001852:	10a4      	asrs	r4, r4, #2
 8001854:	42a5      	cmp	r5, r4
 8001856:	d109      	bne.n	800186c <__libc_init_array+0x24>
 8001858:	f000 fc56 	bl	8002108 <_init>
 800185c:	2500      	movs	r5, #0
 800185e:	4e0a      	ldr	r6, [pc, #40]	; (8001888 <__libc_init_array+0x40>)
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <__libc_init_array+0x44>)
 8001862:	1ba4      	subs	r4, r4, r6
 8001864:	10a4      	asrs	r4, r4, #2
 8001866:	42a5      	cmp	r5, r4
 8001868:	d105      	bne.n	8001876 <__libc_init_array+0x2e>
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001870:	4798      	blx	r3
 8001872:	3501      	adds	r5, #1
 8001874:	e7ee      	b.n	8001854 <__libc_init_array+0xc>
 8001876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800187a:	4798      	blx	r3
 800187c:	3501      	adds	r5, #1
 800187e:	e7f2      	b.n	8001866 <__libc_init_array+0x1e>
 8001880:	080024b0 	.word	0x080024b0
 8001884:	080024b0 	.word	0x080024b0
 8001888:	080024b0 	.word	0x080024b0
 800188c:	080024b4 	.word	0x080024b4

08001890 <memset>:
 8001890:	4603      	mov	r3, r0
 8001892:	4402      	add	r2, r0
 8001894:	4293      	cmp	r3, r2
 8001896:	d100      	bne.n	800189a <memset+0xa>
 8001898:	4770      	bx	lr
 800189a:	f803 1b01 	strb.w	r1, [r3], #1
 800189e:	e7f9      	b.n	8001894 <memset+0x4>

080018a0 <siprintf>:
 80018a0:	b40e      	push	{r1, r2, r3}
 80018a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018a6:	b500      	push	{lr}
 80018a8:	b09c      	sub	sp, #112	; 0x70
 80018aa:	ab1d      	add	r3, sp, #116	; 0x74
 80018ac:	9002      	str	r0, [sp, #8]
 80018ae:	9006      	str	r0, [sp, #24]
 80018b0:	9107      	str	r1, [sp, #28]
 80018b2:	9104      	str	r1, [sp, #16]
 80018b4:	4808      	ldr	r0, [pc, #32]	; (80018d8 <siprintf+0x38>)
 80018b6:	4909      	ldr	r1, [pc, #36]	; (80018dc <siprintf+0x3c>)
 80018b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80018bc:	9105      	str	r1, [sp, #20]
 80018be:	6800      	ldr	r0, [r0, #0]
 80018c0:	a902      	add	r1, sp, #8
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f000 f888 	bl	80019d8 <_svfiprintf_r>
 80018c8:	2200      	movs	r2, #0
 80018ca:	9b02      	ldr	r3, [sp, #8]
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	b01c      	add	sp, #112	; 0x70
 80018d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80018d4:	b003      	add	sp, #12
 80018d6:	4770      	bx	lr
 80018d8:	20000070 	.word	0x20000070
 80018dc:	ffff0208 	.word	0xffff0208

080018e0 <strcpy>:
 80018e0:	4603      	mov	r3, r0
 80018e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80018e6:	f803 2b01 	strb.w	r2, [r3], #1
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d1f9      	bne.n	80018e2 <strcpy+0x2>
 80018ee:	4770      	bx	lr

080018f0 <strstr>:
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	7803      	ldrb	r3, [r0, #0]
 80018f4:	b17b      	cbz	r3, 8001916 <strstr+0x26>
 80018f6:	4604      	mov	r4, r0
 80018f8:	7823      	ldrb	r3, [r4, #0]
 80018fa:	4620      	mov	r0, r4
 80018fc:	1c66      	adds	r6, r4, #1
 80018fe:	b17b      	cbz	r3, 8001920 <strstr+0x30>
 8001900:	1e4a      	subs	r2, r1, #1
 8001902:	1e63      	subs	r3, r4, #1
 8001904:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001908:	b14d      	cbz	r5, 800191e <strstr+0x2e>
 800190a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800190e:	4634      	mov	r4, r6
 8001910:	42af      	cmp	r7, r5
 8001912:	d0f7      	beq.n	8001904 <strstr+0x14>
 8001914:	e7f0      	b.n	80018f8 <strstr+0x8>
 8001916:	780b      	ldrb	r3, [r1, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf18      	it	ne
 800191c:	2000      	movne	r0, #0
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001920:	4618      	mov	r0, r3
 8001922:	e7fc      	b.n	800191e <strstr+0x2e>

08001924 <__ssputs_r>:
 8001924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001928:	688e      	ldr	r6, [r1, #8]
 800192a:	4682      	mov	sl, r0
 800192c:	429e      	cmp	r6, r3
 800192e:	460c      	mov	r4, r1
 8001930:	4690      	mov	r8, r2
 8001932:	4699      	mov	r9, r3
 8001934:	d837      	bhi.n	80019a6 <__ssputs_r+0x82>
 8001936:	898a      	ldrh	r2, [r1, #12]
 8001938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800193c:	d031      	beq.n	80019a2 <__ssputs_r+0x7e>
 800193e:	2302      	movs	r3, #2
 8001940:	6825      	ldr	r5, [r4, #0]
 8001942:	6909      	ldr	r1, [r1, #16]
 8001944:	1a6f      	subs	r7, r5, r1
 8001946:	6965      	ldr	r5, [r4, #20]
 8001948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800194c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001950:	f109 0301 	add.w	r3, r9, #1
 8001954:	443b      	add	r3, r7
 8001956:	429d      	cmp	r5, r3
 8001958:	bf38      	it	cc
 800195a:	461d      	movcc	r5, r3
 800195c:	0553      	lsls	r3, r2, #21
 800195e:	d530      	bpl.n	80019c2 <__ssputs_r+0x9e>
 8001960:	4629      	mov	r1, r5
 8001962:	f000 fb37 	bl	8001fd4 <_malloc_r>
 8001966:	4606      	mov	r6, r0
 8001968:	b950      	cbnz	r0, 8001980 <__ssputs_r+0x5c>
 800196a:	230c      	movs	r3, #12
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f8ca 3000 	str.w	r3, [sl]
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197a:	81a3      	strh	r3, [r4, #12]
 800197c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001980:	463a      	mov	r2, r7
 8001982:	6921      	ldr	r1, [r4, #16]
 8001984:	f000 fab6 	bl	8001ef4 <memcpy>
 8001988:	89a3      	ldrh	r3, [r4, #12]
 800198a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	81a3      	strh	r3, [r4, #12]
 8001994:	6126      	str	r6, [r4, #16]
 8001996:	443e      	add	r6, r7
 8001998:	6026      	str	r6, [r4, #0]
 800199a:	464e      	mov	r6, r9
 800199c:	6165      	str	r5, [r4, #20]
 800199e:	1bed      	subs	r5, r5, r7
 80019a0:	60a5      	str	r5, [r4, #8]
 80019a2:	454e      	cmp	r6, r9
 80019a4:	d900      	bls.n	80019a8 <__ssputs_r+0x84>
 80019a6:	464e      	mov	r6, r9
 80019a8:	4632      	mov	r2, r6
 80019aa:	4641      	mov	r1, r8
 80019ac:	6820      	ldr	r0, [r4, #0]
 80019ae:	f000 faac 	bl	8001f0a <memmove>
 80019b2:	68a3      	ldr	r3, [r4, #8]
 80019b4:	2000      	movs	r0, #0
 80019b6:	1b9b      	subs	r3, r3, r6
 80019b8:	60a3      	str	r3, [r4, #8]
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	441e      	add	r6, r3
 80019be:	6026      	str	r6, [r4, #0]
 80019c0:	e7dc      	b.n	800197c <__ssputs_r+0x58>
 80019c2:	462a      	mov	r2, r5
 80019c4:	f000 fb60 	bl	8002088 <_realloc_r>
 80019c8:	4606      	mov	r6, r0
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d1e2      	bne.n	8001994 <__ssputs_r+0x70>
 80019ce:	6921      	ldr	r1, [r4, #16]
 80019d0:	4650      	mov	r0, sl
 80019d2:	f000 fab3 	bl	8001f3c <_free_r>
 80019d6:	e7c8      	b.n	800196a <__ssputs_r+0x46>

080019d8 <_svfiprintf_r>:
 80019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019dc:	461d      	mov	r5, r3
 80019de:	898b      	ldrh	r3, [r1, #12]
 80019e0:	b09d      	sub	sp, #116	; 0x74
 80019e2:	061f      	lsls	r7, r3, #24
 80019e4:	4680      	mov	r8, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4616      	mov	r6, r2
 80019ea:	d50f      	bpl.n	8001a0c <_svfiprintf_r+0x34>
 80019ec:	690b      	ldr	r3, [r1, #16]
 80019ee:	b96b      	cbnz	r3, 8001a0c <_svfiprintf_r+0x34>
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	f000 faef 	bl	8001fd4 <_malloc_r>
 80019f6:	6020      	str	r0, [r4, #0]
 80019f8:	6120      	str	r0, [r4, #16]
 80019fa:	b928      	cbnz	r0, 8001a08 <_svfiprintf_r+0x30>
 80019fc:	230c      	movs	r3, #12
 80019fe:	f8c8 3000 	str.w	r3, [r8]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	e0c8      	b.n	8001b9a <_svfiprintf_r+0x1c2>
 8001a08:	2340      	movs	r3, #64	; 0x40
 8001a0a:	6163      	str	r3, [r4, #20]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a10:	2320      	movs	r3, #32
 8001a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a16:	2330      	movs	r3, #48	; 0x30
 8001a18:	f04f 0b01 	mov.w	fp, #1
 8001a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a20:	9503      	str	r5, [sp, #12]
 8001a22:	4637      	mov	r7, r6
 8001a24:	463d      	mov	r5, r7
 8001a26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001a2a:	b10b      	cbz	r3, 8001a30 <_svfiprintf_r+0x58>
 8001a2c:	2b25      	cmp	r3, #37	; 0x25
 8001a2e:	d13e      	bne.n	8001aae <_svfiprintf_r+0xd6>
 8001a30:	ebb7 0a06 	subs.w	sl, r7, r6
 8001a34:	d00b      	beq.n	8001a4e <_svfiprintf_r+0x76>
 8001a36:	4653      	mov	r3, sl
 8001a38:	4632      	mov	r2, r6
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	f7ff ff71 	bl	8001924 <__ssputs_r>
 8001a42:	3001      	adds	r0, #1
 8001a44:	f000 80a4 	beq.w	8001b90 <_svfiprintf_r+0x1b8>
 8001a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a4a:	4453      	add	r3, sl
 8001a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a4e:	783b      	ldrb	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 809d 	beq.w	8001b90 <_svfiprintf_r+0x1b8>
 8001a56:	2300      	movs	r3, #0
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a60:	9304      	str	r3, [sp, #16]
 8001a62:	9307      	str	r3, [sp, #28]
 8001a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a68:	931a      	str	r3, [sp, #104]	; 0x68
 8001a6a:	462f      	mov	r7, r5
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001a72:	4850      	ldr	r0, [pc, #320]	; (8001bb4 <_svfiprintf_r+0x1dc>)
 8001a74:	f000 fa30 	bl	8001ed8 <memchr>
 8001a78:	9b04      	ldr	r3, [sp, #16]
 8001a7a:	b9d0      	cbnz	r0, 8001ab2 <_svfiprintf_r+0xda>
 8001a7c:	06d9      	lsls	r1, r3, #27
 8001a7e:	bf44      	itt	mi
 8001a80:	2220      	movmi	r2, #32
 8001a82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a86:	071a      	lsls	r2, r3, #28
 8001a88:	bf44      	itt	mi
 8001a8a:	222b      	movmi	r2, #43	; 0x2b
 8001a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a90:	782a      	ldrb	r2, [r5, #0]
 8001a92:	2a2a      	cmp	r2, #42	; 0x2a
 8001a94:	d015      	beq.n	8001ac2 <_svfiprintf_r+0xea>
 8001a96:	462f      	mov	r7, r5
 8001a98:	2000      	movs	r0, #0
 8001a9a:	250a      	movs	r5, #10
 8001a9c:	9a07      	ldr	r2, [sp, #28]
 8001a9e:	4639      	mov	r1, r7
 8001aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d94d      	bls.n	8001b46 <_svfiprintf_r+0x16e>
 8001aaa:	b1b8      	cbz	r0, 8001adc <_svfiprintf_r+0x104>
 8001aac:	e00f      	b.n	8001ace <_svfiprintf_r+0xf6>
 8001aae:	462f      	mov	r7, r5
 8001ab0:	e7b8      	b.n	8001a24 <_svfiprintf_r+0x4c>
 8001ab2:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <_svfiprintf_r+0x1dc>)
 8001ab4:	463d      	mov	r5, r7
 8001ab6:	1a80      	subs	r0, r0, r2
 8001ab8:	fa0b f000 	lsl.w	r0, fp, r0
 8001abc:	4318      	orrs	r0, r3
 8001abe:	9004      	str	r0, [sp, #16]
 8001ac0:	e7d3      	b.n	8001a6a <_svfiprintf_r+0x92>
 8001ac2:	9a03      	ldr	r2, [sp, #12]
 8001ac4:	1d11      	adds	r1, r2, #4
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	9103      	str	r1, [sp, #12]
 8001aca:	2a00      	cmp	r2, #0
 8001acc:	db01      	blt.n	8001ad2 <_svfiprintf_r+0xfa>
 8001ace:	9207      	str	r2, [sp, #28]
 8001ad0:	e004      	b.n	8001adc <_svfiprintf_r+0x104>
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	9207      	str	r2, [sp, #28]
 8001ada:	9304      	str	r3, [sp, #16]
 8001adc:	783b      	ldrb	r3, [r7, #0]
 8001ade:	2b2e      	cmp	r3, #46	; 0x2e
 8001ae0:	d10c      	bne.n	8001afc <_svfiprintf_r+0x124>
 8001ae2:	787b      	ldrb	r3, [r7, #1]
 8001ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8001ae6:	d133      	bne.n	8001b50 <_svfiprintf_r+0x178>
 8001ae8:	9b03      	ldr	r3, [sp, #12]
 8001aea:	3702      	adds	r7, #2
 8001aec:	1d1a      	adds	r2, r3, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	9203      	str	r2, [sp, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bfb8      	it	lt
 8001af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	4d2e      	ldr	r5, [pc, #184]	; (8001bb8 <_svfiprintf_r+0x1e0>)
 8001afe:	2203      	movs	r2, #3
 8001b00:	7839      	ldrb	r1, [r7, #0]
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 f9e8 	bl	8001ed8 <memchr>
 8001b08:	b138      	cbz	r0, 8001b1a <_svfiprintf_r+0x142>
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	3701      	adds	r7, #1
 8001b16:	4303      	orrs	r3, r0
 8001b18:	9304      	str	r3, [sp, #16]
 8001b1a:	7839      	ldrb	r1, [r7, #0]
 8001b1c:	2206      	movs	r2, #6
 8001b1e:	4827      	ldr	r0, [pc, #156]	; (8001bbc <_svfiprintf_r+0x1e4>)
 8001b20:	1c7e      	adds	r6, r7, #1
 8001b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b26:	f000 f9d7 	bl	8001ed8 <memchr>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d038      	beq.n	8001ba0 <_svfiprintf_r+0x1c8>
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <_svfiprintf_r+0x1e8>)
 8001b30:	bb13      	cbnz	r3, 8001b78 <_svfiprintf_r+0x1a0>
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	3307      	adds	r3, #7
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b40:	444b      	add	r3, r9
 8001b42:	9309      	str	r3, [sp, #36]	; 0x24
 8001b44:	e76d      	b.n	8001a22 <_svfiprintf_r+0x4a>
 8001b46:	fb05 3202 	mla	r2, r5, r2, r3
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	460f      	mov	r7, r1
 8001b4e:	e7a6      	b.n	8001a9e <_svfiprintf_r+0xc6>
 8001b50:	2300      	movs	r3, #0
 8001b52:	250a      	movs	r5, #10
 8001b54:	4619      	mov	r1, r3
 8001b56:	3701      	adds	r7, #1
 8001b58:	9305      	str	r3, [sp, #20]
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b60:	3a30      	subs	r2, #48	; 0x30
 8001b62:	2a09      	cmp	r2, #9
 8001b64:	d903      	bls.n	8001b6e <_svfiprintf_r+0x196>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0c8      	beq.n	8001afc <_svfiprintf_r+0x124>
 8001b6a:	9105      	str	r1, [sp, #20]
 8001b6c:	e7c6      	b.n	8001afc <_svfiprintf_r+0x124>
 8001b6e:	fb05 2101 	mla	r1, r5, r1, r2
 8001b72:	2301      	movs	r3, #1
 8001b74:	4607      	mov	r7, r0
 8001b76:	e7f0      	b.n	8001b5a <_svfiprintf_r+0x182>
 8001b78:	ab03      	add	r3, sp, #12
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <_svfiprintf_r+0x1ec>)
 8001b80:	a904      	add	r1, sp, #16
 8001b82:	4640      	mov	r0, r8
 8001b84:	f3af 8000 	nop.w
 8001b88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b8c:	4681      	mov	r9, r0
 8001b8e:	d1d6      	bne.n	8001b3e <_svfiprintf_r+0x166>
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	065b      	lsls	r3, r3, #25
 8001b94:	f53f af35 	bmi.w	8001a02 <_svfiprintf_r+0x2a>
 8001b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b9a:	b01d      	add	sp, #116	; 0x74
 8001b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba0:	ab03      	add	r3, sp, #12
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <_svfiprintf_r+0x1ec>)
 8001ba8:	a904      	add	r1, sp, #16
 8001baa:	4640      	mov	r0, r8
 8001bac:	f000 f882 	bl	8001cb4 <_printf_i>
 8001bb0:	e7ea      	b.n	8001b88 <_svfiprintf_r+0x1b0>
 8001bb2:	bf00      	nop
 8001bb4:	0800247c 	.word	0x0800247c
 8001bb8:	08002482 	.word	0x08002482
 8001bbc:	08002486 	.word	0x08002486
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	08001925 	.word	0x08001925

08001bc8 <_printf_common>:
 8001bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bcc:	4691      	mov	r9, r2
 8001bce:	461f      	mov	r7, r3
 8001bd0:	688a      	ldr	r2, [r1, #8]
 8001bd2:	690b      	ldr	r3, [r1, #16]
 8001bd4:	4606      	mov	r6, r0
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	bfb8      	it	lt
 8001bda:	4613      	movlt	r3, r2
 8001bdc:	f8c9 3000 	str.w	r3, [r9]
 8001be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001be4:	460c      	mov	r4, r1
 8001be6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bea:	b112      	cbz	r2, 8001bf2 <_printf_common+0x2a>
 8001bec:	3301      	adds	r3, #1
 8001bee:	f8c9 3000 	str.w	r3, [r9]
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	0699      	lsls	r1, r3, #26
 8001bf6:	bf42      	ittt	mi
 8001bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bfc:	3302      	addmi	r3, #2
 8001bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	f015 0506 	ands.w	r5, r5, #6
 8001c08:	d107      	bne.n	8001c1a <_printf_common+0x52>
 8001c0a:	f104 0a19 	add.w	sl, r4, #25
 8001c0e:	68e3      	ldr	r3, [r4, #12]
 8001c10:	f8d9 2000 	ldr.w	r2, [r9]
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	42ab      	cmp	r3, r5
 8001c18:	dc29      	bgt.n	8001c6e <_printf_common+0xa6>
 8001c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	3300      	adds	r3, #0
 8001c22:	bf18      	it	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	0692      	lsls	r2, r2, #26
 8001c28:	d42e      	bmi.n	8001c88 <_printf_common+0xc0>
 8001c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c2e:	4639      	mov	r1, r7
 8001c30:	4630      	mov	r0, r6
 8001c32:	47c0      	blx	r8
 8001c34:	3001      	adds	r0, #1
 8001c36:	d021      	beq.n	8001c7c <_printf_common+0xb4>
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	68e5      	ldr	r5, [r4, #12]
 8001c3c:	f003 0306 	and.w	r3, r3, #6
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	bf18      	it	ne
 8001c44:	2500      	movne	r5, #0
 8001c46:	f8d9 2000 	ldr.w	r2, [r9]
 8001c4a:	f04f 0900 	mov.w	r9, #0
 8001c4e:	bf08      	it	eq
 8001c50:	1aad      	subeq	r5, r5, r2
 8001c52:	68a3      	ldr	r3, [r4, #8]
 8001c54:	6922      	ldr	r2, [r4, #16]
 8001c56:	bf08      	it	eq
 8001c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bfc4      	itt	gt
 8001c60:	1a9b      	subgt	r3, r3, r2
 8001c62:	18ed      	addgt	r5, r5, r3
 8001c64:	341a      	adds	r4, #26
 8001c66:	454d      	cmp	r5, r9
 8001c68:	d11a      	bne.n	8001ca0 <_printf_common+0xd8>
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	e008      	b.n	8001c80 <_printf_common+0xb8>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4652      	mov	r2, sl
 8001c72:	4639      	mov	r1, r7
 8001c74:	4630      	mov	r0, r6
 8001c76:	47c0      	blx	r8
 8001c78:	3001      	adds	r0, #1
 8001c7a:	d103      	bne.n	8001c84 <_printf_common+0xbc>
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	3501      	adds	r5, #1
 8001c86:	e7c2      	b.n	8001c0e <_printf_common+0x46>
 8001c88:	2030      	movs	r0, #48	; 0x30
 8001c8a:	18e1      	adds	r1, r4, r3
 8001c8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c96:	4422      	add	r2, r4
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c9e:	e7c4      	b.n	8001c2a <_printf_common+0x62>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	47c0      	blx	r8
 8001caa:	3001      	adds	r0, #1
 8001cac:	d0e6      	beq.n	8001c7c <_printf_common+0xb4>
 8001cae:	f109 0901 	add.w	r9, r9, #1
 8001cb2:	e7d8      	b.n	8001c66 <_printf_common+0x9e>

08001cb4 <_printf_i>:
 8001cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	7e09      	ldrb	r1, [r1, #24]
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	296e      	cmp	r1, #110	; 0x6e
 8001cc4:	4617      	mov	r7, r2
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	4698      	mov	r8, r3
 8001cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ccc:	f000 80b3 	beq.w	8001e36 <_printf_i+0x182>
 8001cd0:	d822      	bhi.n	8001d18 <_printf_i+0x64>
 8001cd2:	2963      	cmp	r1, #99	; 0x63
 8001cd4:	d036      	beq.n	8001d44 <_printf_i+0x90>
 8001cd6:	d80a      	bhi.n	8001cee <_printf_i+0x3a>
 8001cd8:	2900      	cmp	r1, #0
 8001cda:	f000 80b9 	beq.w	8001e50 <_printf_i+0x19c>
 8001cde:	2958      	cmp	r1, #88	; 0x58
 8001ce0:	f000 8083 	beq.w	8001dea <_printf_i+0x136>
 8001ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ce8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001cec:	e032      	b.n	8001d54 <_printf_i+0xa0>
 8001cee:	2964      	cmp	r1, #100	; 0x64
 8001cf0:	d001      	beq.n	8001cf6 <_printf_i+0x42>
 8001cf2:	2969      	cmp	r1, #105	; 0x69
 8001cf4:	d1f6      	bne.n	8001ce4 <_printf_i+0x30>
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	0605      	lsls	r5, r0, #24
 8001cfc:	f103 0104 	add.w	r1, r3, #4
 8001d00:	d52a      	bpl.n	8001d58 <_printf_i+0xa4>
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	da03      	bge.n	8001d12 <_printf_i+0x5e>
 8001d0a:	222d      	movs	r2, #45	; 0x2d
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d12:	486f      	ldr	r0, [pc, #444]	; (8001ed0 <_printf_i+0x21c>)
 8001d14:	220a      	movs	r2, #10
 8001d16:	e039      	b.n	8001d8c <_printf_i+0xd8>
 8001d18:	2973      	cmp	r1, #115	; 0x73
 8001d1a:	f000 809d 	beq.w	8001e58 <_printf_i+0x1a4>
 8001d1e:	d808      	bhi.n	8001d32 <_printf_i+0x7e>
 8001d20:	296f      	cmp	r1, #111	; 0x6f
 8001d22:	d020      	beq.n	8001d66 <_printf_i+0xb2>
 8001d24:	2970      	cmp	r1, #112	; 0x70
 8001d26:	d1dd      	bne.n	8001ce4 <_printf_i+0x30>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f043 0320 	orr.w	r3, r3, #32
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	e003      	b.n	8001d3a <_printf_i+0x86>
 8001d32:	2975      	cmp	r1, #117	; 0x75
 8001d34:	d017      	beq.n	8001d66 <_printf_i+0xb2>
 8001d36:	2978      	cmp	r1, #120	; 0x78
 8001d38:	d1d4      	bne.n	8001ce4 <_printf_i+0x30>
 8001d3a:	2378      	movs	r3, #120	; 0x78
 8001d3c:	4865      	ldr	r0, [pc, #404]	; (8001ed4 <_printf_i+0x220>)
 8001d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d42:	e055      	b.n	8001df0 <_printf_i+0x13c>
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d4a:	1d19      	adds	r1, r3, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6011      	str	r1, [r2, #0]
 8001d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d54:	2301      	movs	r3, #1
 8001d56:	e08c      	b.n	8001e72 <_printf_i+0x1be>
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d5e:	6011      	str	r1, [r2, #0]
 8001d60:	bf18      	it	ne
 8001d62:	b21b      	sxthne	r3, r3
 8001d64:	e7cf      	b.n	8001d06 <_printf_i+0x52>
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	6825      	ldr	r5, [r4, #0]
 8001d6a:	1d18      	adds	r0, r3, #4
 8001d6c:	6010      	str	r0, [r2, #0]
 8001d6e:	0628      	lsls	r0, r5, #24
 8001d70:	d501      	bpl.n	8001d76 <_printf_i+0xc2>
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e002      	b.n	8001d7c <_printf_i+0xc8>
 8001d76:	0668      	lsls	r0, r5, #25
 8001d78:	d5fb      	bpl.n	8001d72 <_printf_i+0xbe>
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	296f      	cmp	r1, #111	; 0x6f
 8001d7e:	bf14      	ite	ne
 8001d80:	220a      	movne	r2, #10
 8001d82:	2208      	moveq	r2, #8
 8001d84:	4852      	ldr	r0, [pc, #328]	; (8001ed0 <_printf_i+0x21c>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d8c:	6865      	ldr	r5, [r4, #4]
 8001d8e:	2d00      	cmp	r5, #0
 8001d90:	60a5      	str	r5, [r4, #8]
 8001d92:	f2c0 8095 	blt.w	8001ec0 <_printf_i+0x20c>
 8001d96:	6821      	ldr	r1, [r4, #0]
 8001d98:	f021 0104 	bic.w	r1, r1, #4
 8001d9c:	6021      	str	r1, [r4, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <_printf_i+0x16a>
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	f040 808e 	bne.w	8001ec4 <_printf_i+0x210>
 8001da8:	4665      	mov	r5, ip
 8001daa:	2a08      	cmp	r2, #8
 8001dac:	d10b      	bne.n	8001dc6 <_printf_i+0x112>
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	07db      	lsls	r3, r3, #31
 8001db2:	d508      	bpl.n	8001dc6 <_printf_i+0x112>
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	6862      	ldr	r2, [r4, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	bfde      	ittt	le
 8001dbc:	2330      	movle	r3, #48	; 0x30
 8001dbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dc6:	ebac 0305 	sub.w	r3, ip, r5
 8001dca:	6123      	str	r3, [r4, #16]
 8001dcc:	f8cd 8000 	str.w	r8, [sp]
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	aa03      	add	r2, sp, #12
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fef6 	bl	8001bc8 <_printf_common>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d14d      	bne.n	8001e7c <_printf_i+0x1c8>
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	b005      	add	sp, #20
 8001de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dea:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <_printf_i+0x21c>)
 8001dec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	1d1d      	adds	r5, r3, #4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6015      	str	r5, [r2, #0]
 8001dfa:	060a      	lsls	r2, r1, #24
 8001dfc:	d50b      	bpl.n	8001e16 <_printf_i+0x162>
 8001dfe:	07ca      	lsls	r2, r1, #31
 8001e00:	bf44      	itt	mi
 8001e02:	f041 0120 	orrmi.w	r1, r1, #32
 8001e06:	6021      	strmi	r1, [r4, #0]
 8001e08:	b91b      	cbnz	r3, 8001e12 <_printf_i+0x15e>
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	f022 0220 	bic.w	r2, r2, #32
 8001e10:	6022      	str	r2, [r4, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	e7b7      	b.n	8001d86 <_printf_i+0xd2>
 8001e16:	064d      	lsls	r5, r1, #25
 8001e18:	bf48      	it	mi
 8001e1a:	b29b      	uxthmi	r3, r3
 8001e1c:	e7ef      	b.n	8001dfe <_printf_i+0x14a>
 8001e1e:	4665      	mov	r5, ip
 8001e20:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e24:	fb02 3311 	mls	r3, r2, r1, r3
 8001e28:	5cc3      	ldrb	r3, [r0, r3]
 8001e2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e2e:	460b      	mov	r3, r1
 8001e30:	2900      	cmp	r1, #0
 8001e32:	d1f5      	bne.n	8001e20 <_printf_i+0x16c>
 8001e34:	e7b9      	b.n	8001daa <_printf_i+0xf6>
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	6825      	ldr	r5, [r4, #0]
 8001e3a:	1d18      	adds	r0, r3, #4
 8001e3c:	6961      	ldr	r1, [r4, #20]
 8001e3e:	6010      	str	r0, [r2, #0]
 8001e40:	0628      	lsls	r0, r5, #24
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	d501      	bpl.n	8001e4a <_printf_i+0x196>
 8001e46:	6019      	str	r1, [r3, #0]
 8001e48:	e002      	b.n	8001e50 <_printf_i+0x19c>
 8001e4a:	066a      	lsls	r2, r5, #25
 8001e4c:	d5fb      	bpl.n	8001e46 <_printf_i+0x192>
 8001e4e:	8019      	strh	r1, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	4665      	mov	r5, ip
 8001e54:	6123      	str	r3, [r4, #16]
 8001e56:	e7b9      	b.n	8001dcc <_printf_i+0x118>
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	1d19      	adds	r1, r3, #4
 8001e5c:	6011      	str	r1, [r2, #0]
 8001e5e:	681d      	ldr	r5, [r3, #0]
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4628      	mov	r0, r5
 8001e66:	f000 f837 	bl	8001ed8 <memchr>
 8001e6a:	b108      	cbz	r0, 8001e70 <_printf_i+0x1bc>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	6060      	str	r0, [r4, #4]
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	6123      	str	r3, [r4, #16]
 8001e74:	2300      	movs	r3, #0
 8001e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e7a:	e7a7      	b.n	8001dcc <_printf_i+0x118>
 8001e7c:	6923      	ldr	r3, [r4, #16]
 8001e7e:	462a      	mov	r2, r5
 8001e80:	4639      	mov	r1, r7
 8001e82:	4630      	mov	r0, r6
 8001e84:	47c0      	blx	r8
 8001e86:	3001      	adds	r0, #1
 8001e88:	d0aa      	beq.n	8001de0 <_printf_i+0x12c>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	079b      	lsls	r3, r3, #30
 8001e8e:	d413      	bmi.n	8001eb8 <_printf_i+0x204>
 8001e90:	68e0      	ldr	r0, [r4, #12]
 8001e92:	9b03      	ldr	r3, [sp, #12]
 8001e94:	4298      	cmp	r0, r3
 8001e96:	bfb8      	it	lt
 8001e98:	4618      	movlt	r0, r3
 8001e9a:	e7a3      	b.n	8001de4 <_printf_i+0x130>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	464a      	mov	r2, r9
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	47c0      	blx	r8
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d09a      	beq.n	8001de0 <_printf_i+0x12c>
 8001eaa:	3501      	adds	r5, #1
 8001eac:	68e3      	ldr	r3, [r4, #12]
 8001eae:	9a03      	ldr	r2, [sp, #12]
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	42ab      	cmp	r3, r5
 8001eb4:	dcf2      	bgt.n	8001e9c <_printf_i+0x1e8>
 8001eb6:	e7eb      	b.n	8001e90 <_printf_i+0x1dc>
 8001eb8:	2500      	movs	r5, #0
 8001eba:	f104 0919 	add.w	r9, r4, #25
 8001ebe:	e7f5      	b.n	8001eac <_printf_i+0x1f8>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ac      	bne.n	8001e1e <_printf_i+0x16a>
 8001ec4:	7803      	ldrb	r3, [r0, #0]
 8001ec6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ece:	e76c      	b.n	8001daa <_printf_i+0xf6>
 8001ed0:	0800248d 	.word	0x0800248d
 8001ed4:	0800249e 	.word	0x0800249e

08001ed8 <memchr>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	b2c9      	uxtb	r1, r1
 8001edc:	4402      	add	r2, r0
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	d101      	bne.n	8001ee8 <memchr+0x10>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e003      	b.n	8001ef0 <memchr+0x18>
 8001ee8:	781c      	ldrb	r4, [r3, #0]
 8001eea:	3001      	adds	r0, #1
 8001eec:	428c      	cmp	r4, r1
 8001eee:	d1f6      	bne.n	8001ede <memchr+0x6>
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <memcpy>:
 8001ef4:	b510      	push	{r4, lr}
 8001ef6:	1e43      	subs	r3, r0, #1
 8001ef8:	440a      	add	r2, r1
 8001efa:	4291      	cmp	r1, r2
 8001efc:	d100      	bne.n	8001f00 <memcpy+0xc>
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f08:	e7f7      	b.n	8001efa <memcpy+0x6>

08001f0a <memmove>:
 8001f0a:	4288      	cmp	r0, r1
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	eb01 0302 	add.w	r3, r1, r2
 8001f12:	d807      	bhi.n	8001f24 <memmove+0x1a>
 8001f14:	1e42      	subs	r2, r0, #1
 8001f16:	4299      	cmp	r1, r3
 8001f18:	d00a      	beq.n	8001f30 <memmove+0x26>
 8001f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001f22:	e7f8      	b.n	8001f16 <memmove+0xc>
 8001f24:	4283      	cmp	r3, r0
 8001f26:	d9f5      	bls.n	8001f14 <memmove+0xa>
 8001f28:	1881      	adds	r1, r0, r2
 8001f2a:	1ad2      	subs	r2, r2, r3
 8001f2c:	42d3      	cmn	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memmove+0x28>
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001f3a:	e7f7      	b.n	8001f2c <memmove+0x22>

08001f3c <_free_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4605      	mov	r5, r0
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d043      	beq.n	8001fcc <_free_r+0x90>
 8001f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f48:	1f0c      	subs	r4, r1, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	18e4      	addlt	r4, r4, r3
 8001f50:	f000 f8d0 	bl	80020f4 <__malloc_lock>
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <_free_r+0x94>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	4610      	mov	r0, r2
 8001f5a:	b933      	cbnz	r3, 8001f6a <_free_r+0x2e>
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	6014      	str	r4, [r2, #0]
 8001f60:	4628      	mov	r0, r5
 8001f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f66:	f000 b8c6 	b.w	80020f6 <__malloc_unlock>
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	d90b      	bls.n	8001f86 <_free_r+0x4a>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	1862      	adds	r2, r4, r1
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bf01      	itttt	eq
 8001f76:	681a      	ldreq	r2, [r3, #0]
 8001f78:	685b      	ldreq	r3, [r3, #4]
 8001f7a:	1852      	addeq	r2, r2, r1
 8001f7c:	6022      	streq	r2, [r4, #0]
 8001f7e:	6063      	str	r3, [r4, #4]
 8001f80:	6004      	str	r4, [r0, #0]
 8001f82:	e7ed      	b.n	8001f60 <_free_r+0x24>
 8001f84:	4613      	mov	r3, r2
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	b10a      	cbz	r2, 8001f8e <_free_r+0x52>
 8001f8a:	42a2      	cmp	r2, r4
 8001f8c:	d9fa      	bls.n	8001f84 <_free_r+0x48>
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	1858      	adds	r0, r3, r1
 8001f92:	42a0      	cmp	r0, r4
 8001f94:	d10b      	bne.n	8001fae <_free_r+0x72>
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	4401      	add	r1, r0
 8001f9a:	1858      	adds	r0, r3, r1
 8001f9c:	4282      	cmp	r2, r0
 8001f9e:	6019      	str	r1, [r3, #0]
 8001fa0:	d1de      	bne.n	8001f60 <_free_r+0x24>
 8001fa2:	6810      	ldr	r0, [r2, #0]
 8001fa4:	6852      	ldr	r2, [r2, #4]
 8001fa6:	4401      	add	r1, r0
 8001fa8:	6019      	str	r1, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	e7d8      	b.n	8001f60 <_free_r+0x24>
 8001fae:	d902      	bls.n	8001fb6 <_free_r+0x7a>
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	e7d4      	b.n	8001f60 <_free_r+0x24>
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	1821      	adds	r1, r4, r0
 8001fba:	428a      	cmp	r2, r1
 8001fbc:	bf01      	itttt	eq
 8001fbe:	6811      	ldreq	r1, [r2, #0]
 8001fc0:	6852      	ldreq	r2, [r2, #4]
 8001fc2:	1809      	addeq	r1, r1, r0
 8001fc4:	6021      	streq	r1, [r4, #0]
 8001fc6:	6062      	str	r2, [r4, #4]
 8001fc8:	605c      	str	r4, [r3, #4]
 8001fca:	e7c9      	b.n	8001f60 <_free_r+0x24>
 8001fcc:	bd38      	pop	{r3, r4, r5, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000c40 	.word	0x20000c40

08001fd4 <_malloc_r>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	1ccd      	adds	r5, r1, #3
 8001fd8:	f025 0503 	bic.w	r5, r5, #3
 8001fdc:	3508      	adds	r5, #8
 8001fde:	2d0c      	cmp	r5, #12
 8001fe0:	bf38      	it	cc
 8001fe2:	250c      	movcc	r5, #12
 8001fe4:	2d00      	cmp	r5, #0
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	db01      	blt.n	8001fee <_malloc_r+0x1a>
 8001fea:	42a9      	cmp	r1, r5
 8001fec:	d903      	bls.n	8001ff6 <_malloc_r+0x22>
 8001fee:	230c      	movs	r3, #12
 8001ff0:	6033      	str	r3, [r6, #0]
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	f000 f87d 	bl	80020f4 <__malloc_lock>
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <_malloc_r+0xac>)
 8001ffc:	6814      	ldr	r4, [r2, #0]
 8001ffe:	4621      	mov	r1, r4
 8002000:	b991      	cbnz	r1, 8002028 <_malloc_r+0x54>
 8002002:	4c20      	ldr	r4, [pc, #128]	; (8002084 <_malloc_r+0xb0>)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	b91b      	cbnz	r3, 8002010 <_malloc_r+0x3c>
 8002008:	4630      	mov	r0, r6
 800200a:	f000 f863 	bl	80020d4 <_sbrk_r>
 800200e:	6020      	str	r0, [r4, #0]
 8002010:	4629      	mov	r1, r5
 8002012:	4630      	mov	r0, r6
 8002014:	f000 f85e 	bl	80020d4 <_sbrk_r>
 8002018:	1c43      	adds	r3, r0, #1
 800201a:	d124      	bne.n	8002066 <_malloc_r+0x92>
 800201c:	230c      	movs	r3, #12
 800201e:	4630      	mov	r0, r6
 8002020:	6033      	str	r3, [r6, #0]
 8002022:	f000 f868 	bl	80020f6 <__malloc_unlock>
 8002026:	e7e4      	b.n	8001ff2 <_malloc_r+0x1e>
 8002028:	680b      	ldr	r3, [r1, #0]
 800202a:	1b5b      	subs	r3, r3, r5
 800202c:	d418      	bmi.n	8002060 <_malloc_r+0x8c>
 800202e:	2b0b      	cmp	r3, #11
 8002030:	d90f      	bls.n	8002052 <_malloc_r+0x7e>
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	18cc      	adds	r4, r1, r3
 8002036:	50cd      	str	r5, [r1, r3]
 8002038:	4630      	mov	r0, r6
 800203a:	f000 f85c 	bl	80020f6 <__malloc_unlock>
 800203e:	f104 000b 	add.w	r0, r4, #11
 8002042:	1d23      	adds	r3, r4, #4
 8002044:	f020 0007 	bic.w	r0, r0, #7
 8002048:	1ac3      	subs	r3, r0, r3
 800204a:	d0d3      	beq.n	8001ff4 <_malloc_r+0x20>
 800204c:	425a      	negs	r2, r3
 800204e:	50e2      	str	r2, [r4, r3]
 8002050:	e7d0      	b.n	8001ff4 <_malloc_r+0x20>
 8002052:	684b      	ldr	r3, [r1, #4]
 8002054:	428c      	cmp	r4, r1
 8002056:	bf16      	itet	ne
 8002058:	6063      	strne	r3, [r4, #4]
 800205a:	6013      	streq	r3, [r2, #0]
 800205c:	460c      	movne	r4, r1
 800205e:	e7eb      	b.n	8002038 <_malloc_r+0x64>
 8002060:	460c      	mov	r4, r1
 8002062:	6849      	ldr	r1, [r1, #4]
 8002064:	e7cc      	b.n	8002000 <_malloc_r+0x2c>
 8002066:	1cc4      	adds	r4, r0, #3
 8002068:	f024 0403 	bic.w	r4, r4, #3
 800206c:	42a0      	cmp	r0, r4
 800206e:	d005      	beq.n	800207c <_malloc_r+0xa8>
 8002070:	1a21      	subs	r1, r4, r0
 8002072:	4630      	mov	r0, r6
 8002074:	f000 f82e 	bl	80020d4 <_sbrk_r>
 8002078:	3001      	adds	r0, #1
 800207a:	d0cf      	beq.n	800201c <_malloc_r+0x48>
 800207c:	6025      	str	r5, [r4, #0]
 800207e:	e7db      	b.n	8002038 <_malloc_r+0x64>
 8002080:	20000c40 	.word	0x20000c40
 8002084:	20000c44 	.word	0x20000c44

08002088 <_realloc_r>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	4607      	mov	r7, r0
 800208c:	4614      	mov	r4, r2
 800208e:	460e      	mov	r6, r1
 8002090:	b921      	cbnz	r1, 800209c <_realloc_r+0x14>
 8002092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002096:	4611      	mov	r1, r2
 8002098:	f7ff bf9c 	b.w	8001fd4 <_malloc_r>
 800209c:	b922      	cbnz	r2, 80020a8 <_realloc_r+0x20>
 800209e:	f7ff ff4d 	bl	8001f3c <_free_r>
 80020a2:	4625      	mov	r5, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a8:	f000 f826 	bl	80020f8 <_malloc_usable_size_r>
 80020ac:	42a0      	cmp	r0, r4
 80020ae:	d20f      	bcs.n	80020d0 <_realloc_r+0x48>
 80020b0:	4621      	mov	r1, r4
 80020b2:	4638      	mov	r0, r7
 80020b4:	f7ff ff8e 	bl	8001fd4 <_malloc_r>
 80020b8:	4605      	mov	r5, r0
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d0f2      	beq.n	80020a4 <_realloc_r+0x1c>
 80020be:	4631      	mov	r1, r6
 80020c0:	4622      	mov	r2, r4
 80020c2:	f7ff ff17 	bl	8001ef4 <memcpy>
 80020c6:	4631      	mov	r1, r6
 80020c8:	4638      	mov	r0, r7
 80020ca:	f7ff ff37 	bl	8001f3c <_free_r>
 80020ce:	e7e9      	b.n	80020a4 <_realloc_r+0x1c>
 80020d0:	4635      	mov	r5, r6
 80020d2:	e7e7      	b.n	80020a4 <_realloc_r+0x1c>

080020d4 <_sbrk_r>:
 80020d4:	b538      	push	{r3, r4, r5, lr}
 80020d6:	2300      	movs	r3, #0
 80020d8:	4c05      	ldr	r4, [pc, #20]	; (80020f0 <_sbrk_r+0x1c>)
 80020da:	4605      	mov	r5, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	6023      	str	r3, [r4, #0]
 80020e0:	f7fe fe78 	bl	8000dd4 <_sbrk>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d102      	bne.n	80020ee <_sbrk_r+0x1a>
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	b103      	cbz	r3, 80020ee <_sbrk_r+0x1a>
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	20000c4c 	.word	0x20000c4c

080020f4 <__malloc_lock>:
 80020f4:	4770      	bx	lr

080020f6 <__malloc_unlock>:
 80020f6:	4770      	bx	lr

080020f8 <_malloc_usable_size_r>:
 80020f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020fc:	1f18      	subs	r0, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bfbc      	itt	lt
 8002102:	580b      	ldrlt	r3, [r1, r0]
 8002104:	18c0      	addlt	r0, r0, r3
 8002106:	4770      	bx	lr

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
