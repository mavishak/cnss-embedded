
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002200  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d98  08002d98  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08002d98  08002d98  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d98  08002d98  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08002da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  200000e4  08002e84  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e7c  08002e84  00020e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e1b  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000160b  00000000  00000000  00027f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000400  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00029938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002124  00000000  00000000  00029ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004679  00000000  00000000  0002bdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059445  00000000  00000000  0003043d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00089882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001120  00000000  00000000  00089900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000e4 	.word	0x200000e4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002318 	.word	0x08002318

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000e8 	.word	0x200000e8
 800016c:	08002318 	.word	0x08002318

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <alert_Handler>:
	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");

}

void *alert_Handler(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 8000186:	2303      	movs	r3, #3
 8000188:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800018a:	e002      	b.n	8000192 <alert_Handler+0x12>
		i--;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3b01      	subs	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d008      	beq.n	80001aa <alert_Handler+0x2a>
 8000198:	f000 f834 	bl	8000204 <recordAlert>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d103      	bne.n	80001aa <alert_Handler+0x2a>
 80001a2:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <alert_Handler+0x38>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f0      	bne.n	800018c <alert_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80001aa:	f000 ff01 	bl	8000fb0 <TIMER4_disable>

	return NULL;
 80001ae:	2300      	movs	r3, #0

}
 80001b0:	4618      	mov	r0, r3
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000488 	.word	0x20000488

080001bc <registeration_Handler>:

	return NULL;

}

BOOL registeration_Handler(void){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 80001c2:	2303      	movs	r3, #3
 80001c4:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 80001c6:	e002      	b.n	80001ce <registeration_Handler+0x12>
		i--;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3b01      	subs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
	while(i > 0  && !registerDeviceID() && connection_closed){
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d008      	beq.n	80001e6 <registeration_Handler+0x2a>
 80001d4:	f000 f896 	bl	8000304 <registerDeviceID>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d103      	bne.n	80001e6 <registeration_Handler+0x2a>
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <registeration_Handler+0x44>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d1f0      	bne.n	80001c8 <registeration_Handler+0xc>
	}

	TIMER4_disable(); // timer 4 is used as timeout for AT commands
 80001e6:	f000 fee3 	bl	8000fb0 <TIMER4_disable>

	if(i == 0){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d101      	bne.n	80001f4 <registeration_Handler+0x38>
		return FALSE;
 80001f0:	2300      	movs	r3, #0
 80001f2:	e000      	b.n	80001f6 <registeration_Handler+0x3a>
	}
	return TRUE;
 80001f4:	2301      	movs	r3, #1
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000488 	.word	0x20000488

08000204 <recordAlert>:

/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"In recordAlert()\r\n"); // for debugging
 8000208:	4835      	ldr	r0, [pc, #212]	; (80002e0 <recordAlert+0xdc>)
 800020a:	f001 f94b 	bl	80014a4 <USART2_write>

	connection_closed = TRUE;
 800020e:	4b35      	ldr	r3, [pc, #212]	; (80002e4 <recordAlert+0xe0>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){
 8000214:	2106      	movs	r1, #6
 8000216:	2003      	movs	r0, #3
 8000218:	f000 f8f4 	bl	8000404 <reset>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d101      	bne.n	8000226 <recordAlert+0x22>
		return FALSE;
 8000222:	2300      	movs	r3, #0
 8000224:	e05a      	b.n	80002dc <recordAlert+0xd8>
	 }
	 TIMER4_delay(1);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fed0 	bl	8000fcc <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 800022c:	482e      	ldr	r0, [pc, #184]	; (80002e8 <recordAlert+0xe4>)
 800022e:	f001 f939 	bl	80014a4 <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 8000232:	2106      	movs	r1, #6
 8000234:	2002      	movs	r0, #2
 8000236:	f000 f929 	bl	800048c <setClientMode>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d101      	bne.n	8000244 <recordAlert+0x40>
		return FALSE;
 8000240:	2300      	movs	r3, #0
 8000242:	e04b      	b.n	80002dc <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 8000244:	4829      	ldr	r0, [pc, #164]	; (80002ec <recordAlert+0xe8>)
 8000246:	f001 f92d 	bl	80014a4 <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,10)){
 800024a:	210a      	movs	r1, #10
 800024c:	2002      	movs	r0, #2
 800024e:	f000 f961 	bl	8000514 <joinAccessPoint>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <recordAlert+0x58>
		return FALSE;
 8000258:	2300      	movs	r3, #0
 800025a:	e03f      	b.n	80002dc <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 800025c:	4824      	ldr	r0, [pc, #144]	; (80002f0 <recordAlert+0xec>)
 800025e:	f001 f921 	bl	80014a4 <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000262:	231e      	movs	r3, #30
 8000264:	2206      	movs	r2, #6
 8000266:	2102      	movs	r1, #2
 8000268:	2002      	movs	r0, #2
 800026a:	f000 f9a9 	bl	80005c0 <connectFirebaseHost>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d101      	bne.n	8000278 <recordAlert+0x74>
		return FALSE;
 8000274:	2300      	movs	r3, #0
 8000276:	e031      	b.n	80002dc <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000278:	481e      	ldr	r0, [pc, #120]	; (80002f4 <recordAlert+0xf0>)
 800027a:	f001 f913 	bl	80014a4 <USART2_write>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//USART2_write((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 800027e:	f000 fa45 	bl	800070c <createPostMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000282:	481d      	ldr	r0, [pc, #116]	; (80002f8 <recordAlert+0xf4>)
 8000284:	f001 f90e 	bl	80014a4 <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000288:	2328      	movs	r3, #40	; 0x28
 800028a:	221e      	movs	r2, #30
 800028c:	2102      	movs	r1, #2
 800028e:	2002      	movs	r0, #2
 8000290:	f000 fac8 	bl	8000824 <sendRequest>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d109      	bne.n	80002ae <recordAlert+0xaa>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 800029a:	2106      	movs	r1, #6
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fb9d 	bl	80009dc <closeConnection>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <recordAlert+0xe0>)
 80002a8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	e016      	b.n	80002dc <recordAlert+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 80002ae:	4813      	ldr	r0, [pc, #76]	; (80002fc <recordAlert+0xf8>)
 80002b0:	f001 f8f8 	bl	80014a4 <USART2_write>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 80002b4:	2078      	movs	r0, #120	; 0x78
 80002b6:	f000 fb5d 	bl	8000974 <readResponse>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d109      	bne.n	80002d4 <recordAlert+0xd0>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 80002c0:	2106      	movs	r1, #6
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 fb8a 	bl	80009dc <closeConnection>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <recordAlert+0xe0>)
 80002ce:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	e003      	b.n	80002dc <recordAlert+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 80002d4:	480a      	ldr	r0, [pc, #40]	; (8000300 <recordAlert+0xfc>)
 80002d6:	f001 f8e5 	bl	80014a4 <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 80002da:	2301      	movs	r3, #1

}
 80002dc:	4618      	mov	r0, r3
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	0800235c 	.word	0x0800235c
 80002e4:	20000488 	.word	0x20000488
 80002e8:	08002370 	.word	0x08002370
 80002ec:	08002374 	.word	0x08002374
 80002f0:	08002378 	.word	0x08002378
 80002f4:	0800237c 	.word	0x0800237c
 80002f8:	08002380 	.word	0x08002380
 80002fc:	08002384 	.word	0x08002384
 8000300:	08002388 	.word	0x08002388

08000304 <registerDeviceID>:

}



BOOL registerDeviceID(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)"setDeviceID()\r\n"); // for debugging
 8000308:	4835      	ldr	r0, [pc, #212]	; (80003e0 <registerDeviceID+0xdc>)
 800030a:	f001 f8cb 	bl	80014a4 <USART2_write>

	connection_closed = TRUE;
 800030e:	4b35      	ldr	r3, [pc, #212]	; (80003e4 <registerDeviceID+0xe0>)
 8000310:	2201      	movs	r2, #1
 8000312:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){
 8000314:	2106      	movs	r1, #6
 8000316:	2003      	movs	r0, #3
 8000318:	f000 f874 	bl	8000404 <reset>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d101      	bne.n	8000326 <registerDeviceID+0x22>
		return FALSE;
 8000322:	2300      	movs	r3, #0
 8000324:	e05a      	b.n	80003dc <registerDeviceID+0xd8>
	 }
	 TIMER4_delay(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 fe50 	bl	8000fcc <TIMER4_delay>

	USART2_write((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 800032c:	482e      	ldr	r0, [pc, #184]	; (80003e8 <registerDeviceID+0xe4>)
 800032e:	f001 f8b9 	bl	80014a4 <USART2_write>


	//Set client mode
	if(!setClientMode(2,6)){
 8000332:	2106      	movs	r1, #6
 8000334:	2002      	movs	r0, #2
 8000336:	f000 f8a9 	bl	800048c <setClientMode>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d101      	bne.n	8000344 <registerDeviceID+0x40>
		return FALSE;
 8000340:	2300      	movs	r3, #0
 8000342:	e04b      	b.n	80003dc <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"1\r\n");
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <registerDeviceID+0xe8>)
 8000346:	f001 f8ad 	bl	80014a4 <USART2_write>

	//Join access point
	if(!joinAccessPoint(2,10)){
 800034a:	210a      	movs	r1, #10
 800034c:	2002      	movs	r0, #2
 800034e:	f000 f8e1 	bl	8000514 <joinAccessPoint>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d101      	bne.n	800035c <registerDeviceID+0x58>
		return FALSE;
 8000358:	2300      	movs	r3, #0
 800035a:	e03f      	b.n	80003dc <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"2\r\n");
 800035c:	4824      	ldr	r0, [pc, #144]	; (80003f0 <registerDeviceID+0xec>)
 800035e:	f001 f8a1 	bl	80014a4 <USART2_write>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000362:	231e      	movs	r3, #30
 8000364:	2206      	movs	r2, #6
 8000366:	2102      	movs	r1, #2
 8000368:	2002      	movs	r0, #2
 800036a:	f000 f929 	bl	80005c0 <connectFirebaseHost>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d101      	bne.n	8000378 <registerDeviceID+0x74>
		return FALSE;
 8000374:	2300      	movs	r3, #0
 8000376:	e031      	b.n	80003dc <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"3\r\n");
 8000378:	481e      	ldr	r0, [pc, #120]	; (80003f4 <registerDeviceID+0xf0>)
 800037a:	f001 f893 	bl	80014a4 <USART2_write>


	//Create HTTP request
	createPutMsg();
 800037e:	f000 fa0b 	bl	8000798 <createPutMsg>
	USART2_write((uint8_t*)"4\r\n");
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <registerDeviceID+0xf4>)
 8000384:	f001 f88e 	bl	80014a4 <USART2_write>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000388:	2328      	movs	r3, #40	; 0x28
 800038a:	221e      	movs	r2, #30
 800038c:	2102      	movs	r1, #2
 800038e:	2002      	movs	r0, #2
 8000390:	f000 fa48 	bl	8000824 <sendRequest>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d109      	bne.n	80003ae <registerDeviceID+0xaa>
		connection_closed = closeConnection(2,6);
 800039a:	2106      	movs	r1, #6
 800039c:	2002      	movs	r0, #2
 800039e:	f000 fb1d 	bl	80009dc <closeConnection>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <registerDeviceID+0xe0>)
 80003a8:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	e016      	b.n	80003dc <registerDeviceID+0xd8>
	}
	USART2_write((uint8_t*)"5\r\n");
 80003ae:	4813      	ldr	r0, [pc, #76]	; (80003fc <registerDeviceID+0xf8>)
 80003b0:	f001 f878 	bl	80014a4 <USART2_write>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 80003b4:	2078      	movs	r0, #120	; 0x78
 80003b6:	f000 fadd 	bl	8000974 <readResponse>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d109      	bne.n	80003d4 <registerDeviceID+0xd0>
		connection_closed = closeConnection(2,6);
 80003c0:	2106      	movs	r1, #6
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fb0a 	bl	80009dc <closeConnection>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <registerDeviceID+0xe0>)
 80003ce:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	e003      	b.n	80003dc <registerDeviceID+0xd8>
	}

	USART2_write((uint8_t*)"6\r\n");
 80003d4:	480a      	ldr	r0, [pc, #40]	; (8000400 <registerDeviceID+0xfc>)
 80003d6:	f001 f865 	bl	80014a4 <USART2_write>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//USART2_write((uint8_t*)"7\r\n");

	return TRUE;
 80003da:	2301      	movs	r3, #1

}
 80003dc:	4618      	mov	r0, r3
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	080023a4 	.word	0x080023a4
 80003e4:	20000488 	.word	0x20000488
 80003e8:	08002370 	.word	0x08002370
 80003ec:	08002374 	.word	0x08002374
 80003f0:	08002378 	.word	0x08002378
 80003f4:	0800237c 	.word	0x0800237c
 80003f8:	08002380 	.word	0x08002380
 80003fc:	08002384 	.word	0x08002384
 8000400:	08002388 	.word	0x08002388

08000404 <reset>:
/*This function resets ESP8266 modem with AT+RST command,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.
 * !TODO This functionality does not work properly - needs fixing.*/
BOOL reset(uint32_t tries, uint32_t timeout){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <reset+0x78>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_RST);
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <reset+0x7c>)
 8000416:	f001 f95b 	bl	80016d0 <USART1_write>
	while(tries > 0){
 800041a:	e027      	b.n	800046c <reset+0x68>
		TIMER4_set_timeout(timeout);
 800041c:	6838      	ldr	r0, [r7, #0]
 800041e:	f000 fe11 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000422:	e00e      	b.n	8000442 <reset+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 8000424:	f000 ff0a 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d009      	beq.n	8000442 <reset+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800042e:	4915      	ldr	r1, [pc, #84]	; (8000484 <reset+0x80>)
 8000430:	4815      	ldr	r0, [pc, #84]	; (8000488 <reset+0x84>)
 8000432:	f001 f9d3 	bl	80017dc <USART1_search_buffer_Rx>
 8000436:	4603      	mov	r3, r0
 8000438:	461a      	mov	r2, r3
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <reset+0x78>)
 800043c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800043e:	f000 ff09 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <reset+0x78>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d104      	bne.n	8000454 <reset+0x50>
 800044a:	f000 fe0d 	bl	8001068 <TIMER4_timeout_done>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0e7      	beq.n	8000424 <reset+0x20>
			}
		}
		if(found == PASS){
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <reset+0x78>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d101      	bne.n	8000460 <reset+0x5c>
			return TRUE;
 800045c:	2301      	movs	r3, #1
 800045e:	e009      	b.n	8000474 <reset+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_RST);
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <reset+0x7c>)
 8000468:	f001 f932 	bl	80016d0 <USART1_write>
	while(tries > 0){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1d4      	bne.n	800041c <reset+0x18>
		}
	}
	return FALSE;
 8000472:	2300      	movs	r3, #0

}
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000006c 	.word	0x2000006c
 8000480:	080023cc 	.word	0x080023cc
 8000484:	080023bc 	.word	0x080023bc
 8000488:	080023c4 	.word	0x080023c4

0800048c <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <setClientMode+0x78>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CWMODE);
 800049c:	481a      	ldr	r0, [pc, #104]	; (8000508 <setClientMode+0x7c>)
 800049e:	f001 f917 	bl	80016d0 <USART1_write>
	while(tries > 0){
 80004a2:	e027      	b.n	80004f4 <setClientMode+0x68>
		TIMER4_set_timeout(timeout);
 80004a4:	6838      	ldr	r0, [r7, #0]
 80004a6:	f000 fdcd 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80004aa:	e00e      	b.n	80004ca <setClientMode+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 80004ac:	f000 fec6 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d009      	beq.n	80004ca <setClientMode+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 80004b6:	4915      	ldr	r1, [pc, #84]	; (800050c <setClientMode+0x80>)
 80004b8:	4815      	ldr	r0, [pc, #84]	; (8000510 <setClientMode+0x84>)
 80004ba:	f001 f98f 	bl	80017dc <USART1_search_buffer_Rx>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <setClientMode+0x78>)
 80004c4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80004c6:	f000 fec5 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <setClientMode+0x78>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d104      	bne.n	80004dc <setClientMode+0x50>
 80004d2:	f000 fdc9 	bl	8001068 <TIMER4_timeout_done>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e7      	beq.n	80004ac <setClientMode+0x20>
			}
		}
		if(found == PASS){
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <setClientMode+0x78>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d101      	bne.n	80004e8 <setClientMode+0x5c>
			return TRUE;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e009      	b.n	80004fc <setClientMode+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CWMODE);
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <setClientMode+0x7c>)
 80004f0:	f001 f8ee 	bl	80016d0 <USART1_write>
	while(tries > 0){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1d4      	bne.n	80004a4 <setClientMode+0x18>
		}
	}
	return FALSE;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000006c 	.word	0x2000006c
 8000508:	080023d8 	.word	0x080023d8
 800050c:	080023bc 	.word	0x080023bc
 8000510:	080023c4 	.word	0x080023c4

08000514 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	2100      	movs	r1, #0
 8000524:	481f      	ldr	r0, [pc, #124]	; (80005a4 <joinAccessPoint+0x90>)
 8000526:	f001 fac4 	bl	8001ab2 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PWD);
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <joinAccessPoint+0x94>)
 800052c:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <joinAccessPoint+0x98>)
 800052e:	4920      	ldr	r1, [pc, #128]	; (80005b0 <joinAccessPoint+0x9c>)
 8000530:	481c      	ldr	r0, [pc, #112]	; (80005a4 <joinAccessPoint+0x90>)
 8000532:	f001 fac7 	bl	8001ac4 <siprintf>

	found = STANDBY;
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <joinAccessPoint+0xa0>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 800053c:	4819      	ldr	r0, [pc, #100]	; (80005a4 <joinAccessPoint+0x90>)
 800053e:	f001 f8c7 	bl	80016d0 <USART1_write>
	while(tries > 0){
 8000542:	e027      	b.n	8000594 <joinAccessPoint+0x80>
		TIMER4_set_timeout(timeout);
 8000544:	6838      	ldr	r0, [r7, #0]
 8000546:	f000 fd7d 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800054a:	e00e      	b.n	800056a <joinAccessPoint+0x56>
			if(USART1_NEW_LINE_FOUND_get()){
 800054c:	f000 fe76 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d009      	beq.n	800056a <joinAccessPoint+0x56>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 8000556:	4918      	ldr	r1, [pc, #96]	; (80005b8 <joinAccessPoint+0xa4>)
 8000558:	4818      	ldr	r0, [pc, #96]	; (80005bc <joinAccessPoint+0xa8>)
 800055a:	f001 f93f 	bl	80017dc <USART1_search_buffer_Rx>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <joinAccessPoint+0xa0>)
 8000564:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000566:	f000 fe75 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <joinAccessPoint+0xa0>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d104      	bne.n	800057c <joinAccessPoint+0x68>
 8000572:	f000 fd79 	bl	8001068 <TIMER4_timeout_done>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0e7      	beq.n	800054c <joinAccessPoint+0x38>
			}
		}
		if(found == PASS){
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <joinAccessPoint+0xa0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <joinAccessPoint+0x74>
			return TRUE;
 8000584:	2301      	movs	r3, #1
 8000586:	e009      	b.n	800059c <joinAccessPoint+0x88>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)command);
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <joinAccessPoint+0x90>)
 8000590:	f001 f89e 	bl	80016d0 <USART1_write>
	while(tries > 0){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1d4      	bne.n	8000544 <joinAccessPoint+0x30>
		}
	}
	return FALSE;
 800059a:	2300      	movs	r3, #0

}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000100 	.word	0x20000100
 80005a8:	20000df0 	.word	0x20000df0
 80005ac:	20000e34 	.word	0x20000e34
 80005b0:	080023e8 	.word	0x080023e8
 80005b4:	2000006c 	.word	0x2000006c
 80005b8:	08002400 	.word	0x08002400
 80005bc:	080023c4 	.word	0x080023c4

080005c0 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 80005ce:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <connectFirebaseHost+0x128>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 80005d4:	4845      	ldr	r0, [pc, #276]	; (80006ec <connectFirebaseHost+0x12c>)
 80005d6:	f001 f87b 	bl	80016d0 <USART1_write>
	while(_ssl_tries > 0){
 80005da:	e025      	b.n	8000628 <connectFirebaseHost+0x68>
		TIMER4_set_timeout(_ssl_timeout);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fd31 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80005e2:	e00e      	b.n	8000602 <connectFirebaseHost+0x42>
			if(USART1_NEW_LINE_FOUND_get()){
 80005e4:	f000 fe2a 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d009      	beq.n	8000602 <connectFirebaseHost+0x42>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80005ee:	4940      	ldr	r1, [pc, #256]	; (80006f0 <connectFirebaseHost+0x130>)
 80005f0:	4840      	ldr	r0, [pc, #256]	; (80006f4 <connectFirebaseHost+0x134>)
 80005f2:	f001 f8f3 	bl	80017dc <USART1_search_buffer_Rx>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <connectFirebaseHost+0x128>)
 80005fc:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80005fe:	f000 fe29 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <connectFirebaseHost+0x128>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d104      	bne.n	8000614 <connectFirebaseHost+0x54>
 800060a:	f000 fd2d 	bl	8001068 <TIMER4_timeout_done>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0e7      	beq.n	80005e4 <connectFirebaseHost+0x24>
			}
		}
		if(found == PASS){
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <connectFirebaseHost+0x128>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d009      	beq.n	8000630 <connectFirebaseHost+0x70>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3b01      	subs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 8000622:	4832      	ldr	r0, [pc, #200]	; (80006ec <connectFirebaseHost+0x12c>)
 8000624:	f001 f854 	bl	80016d0 <USART1_write>
	while(_ssl_tries > 0){
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1d6      	bne.n	80005dc <connectFirebaseHost+0x1c>
 800062e:	e000      	b.n	8000632 <connectFirebaseHost+0x72>
			break; //move on to next command
 8000630:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <connectFirebaseHost+0x128>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d003      	beq.n	8000642 <connectFirebaseHost+0x82>
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <connectFirebaseHost+0x128>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d101      	bne.n	8000646 <connectFirebaseHost+0x86>
		return FALSE;
 8000642:	2300      	movs	r3, #0
 8000644:	e04b      	b.n	80006de <connectFirebaseHost+0x11e>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064a:	2100      	movs	r1, #0
 800064c:	482a      	ldr	r0, [pc, #168]	; (80006f8 <connectFirebaseHost+0x138>)
 800064e:	f001 fa30 	bl	8001ab2 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <connectFirebaseHost+0x13c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <connectFirebaseHost+0x140>)
 8000658:	492a      	ldr	r1, [pc, #168]	; (8000704 <connectFirebaseHost+0x144>)
 800065a:	4827      	ldr	r0, [pc, #156]	; (80006f8 <connectFirebaseHost+0x138>)
 800065c:	f001 fa32 	bl	8001ac4 <siprintf>

	found = STANDBY;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <connectFirebaseHost+0x128>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <connectFirebaseHost+0x138>)
 8000668:	f001 f832 	bl	80016d0 <USART1_write>
	while(_cipstart_tries > 0){
 800066c:	e033      	b.n	80006d6 <connectFirebaseHost+0x116>
		TIMER4_set_timeout(_cipstart_timeout);
 800066e:	6838      	ldr	r0, [r7, #0]
 8000670:	f000 fce8 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000674:	e01a      	b.n	80006ac <connectFirebaseHost+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 8000676:	f000 fde1 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d015      	beq.n	80006ac <connectFirebaseHost+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000680:	491b      	ldr	r1, [pc, #108]	; (80006f0 <connectFirebaseHost+0x130>)
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <connectFirebaseHost+0x134>)
 8000684:	f001 f8aa 	bl	80017dc <USART1_search_buffer_Rx>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <connectFirebaseHost+0x128>)
 800068e:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <connectFirebaseHost+0x128>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d107      	bne.n	80006a8 <connectFirebaseHost+0xe8>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 8000698:	4915      	ldr	r1, [pc, #84]	; (80006f0 <connectFirebaseHost+0x130>)
 800069a:	481b      	ldr	r0, [pc, #108]	; (8000708 <connectFirebaseHost+0x148>)
 800069c:	f001 f89e 	bl	80017dc <USART1_search_buffer_Rx>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <connectFirebaseHost+0x128>)
 80006a6:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 80006a8:	f000 fdd4 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <connectFirebaseHost+0x128>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d104      	bne.n	80006be <connectFirebaseHost+0xfe>
 80006b4:	f000 fcd8 	bl	8001068 <TIMER4_timeout_done>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0db      	beq.n	8000676 <connectFirebaseHost+0xb6>
			}
		}
		if(found == PASS){
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <connectFirebaseHost+0x128>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <connectFirebaseHost+0x10a>
			return TRUE;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e009      	b.n	80006de <connectFirebaseHost+0x11e>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)command);
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <connectFirebaseHost+0x138>)
 80006d2:	f000 fffd 	bl	80016d0 <USART1_write>
	while(_cipstart_tries > 0){
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1c8      	bne.n	800066e <connectFirebaseHost+0xae>
		}
	}
	return FALSE;
 80006dc:	2300      	movs	r3, #0



}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000006c 	.word	0x2000006c
 80006ec:	08002408 	.word	0x08002408
 80006f0:	080023bc 	.word	0x080023bc
 80006f4:	080023c4 	.word	0x080023c4
 80006f8:	20000100 	.word	0x20000100
 80006fc:	20000058 	.word	0x20000058
 8000700:	20000000 	.word	0x20000000
 8000704:	08002420 	.word	0x08002420
 8000708:	08002440 	.word	0x08002440

0800070c <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	2100      	movs	r1, #0
 8000716:	4817      	ldr	r0, [pc, #92]	; (8000774 <createPostMsg+0x68>)
 8000718:	f001 f9cb 	bl	8001ab2 <memset>
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <createPostMsg+0x68>)
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <createPostMsg+0x6c>)
 8000720:	4610      	mov	r0, r2
 8000722:	4619      	mov	r1, r3
 8000724:	235c      	movs	r3, #92	; 0x5c
 8000726:	461a      	mov	r2, r3
 8000728:	f001 f9b8 	bl	8001a9c <memcpy>
	content_len = strlen((char*)content);
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <createPostMsg+0x68>)
 800072e:	f7ff fd1f 	bl	8000170 <strlen>
 8000732:	4602      	mov	r2, r0
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <createPostMsg+0x70>)
 8000736:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	2100      	movs	r1, #0
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <createPostMsg+0x74>)
 8000740:	f001 f9b7 	bl	8001ab2 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <createPostMsg+0x70>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <createPostMsg+0x68>)
 800074a:	9202      	str	r2, [sp, #8]
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <createPostMsg+0x78>)
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <createPostMsg+0x7c>)
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <createPostMsg+0x80>)
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <createPostMsg+0x84>)
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <createPostMsg+0x74>)
 800075a:	f001 f9b3 	bl	8001ac4 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <createPostMsg+0x74>)
 8000760:	f7ff fd06 	bl	8000170 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	3b02      	subs	r3, #2
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <createPostMsg+0x88>)
 800076a:	6013      	str	r3, [r2, #0]

}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000404 	.word	0x20000404
 8000778:	08002454 	.word	0x08002454
 800077c:	20000484 	.word	0x20000484
 8000780:	20000200 	.word	0x20000200
 8000784:	20000000 	.word	0x20000000
 8000788:	2000002c 	.word	0x2000002c
 800078c:	2000005c 	.word	0x2000005c
 8000790:	080024b0 	.word	0x080024b0
 8000794:	20000400 	.word	0x20000400

08000798 <createPutMsg>:
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length

}

void createPutMsg(void){
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	2100      	movs	r1, #0
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <createPutMsg+0x68>)
 80007a4:	f001 f985 	bl	8001ab2 <memset>
	sprintf((char*)content,"{\"is_in_use\": true}");
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <createPutMsg+0x68>)
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <createPutMsg+0x6c>)
 80007ac:	4614      	mov	r4, r2
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	6023      	str	r3, [r4, #0]
	content_len = strlen((char*)content);
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <createPutMsg+0x68>)
 80007ba:	f7ff fcd9 	bl	8000170 <strlen>
 80007be:	4602      	mov	r2, r0
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <createPutMsg+0x70>)
 80007c2:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	2100      	movs	r1, #0
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <createPutMsg+0x74>)
 80007cc:	f001 f971 	bl	8001ab2 <memset>
	sprintf((char*)http,"PUT /device-list/%s.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <createPutMsg+0x70>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <createPutMsg+0x68>)
 80007d6:	9202      	str	r2, [sp, #8]
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <createPutMsg+0x78>)
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <createPutMsg+0x7c>)
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <createPutMsg+0x80>)
 80007e2:	490e      	ldr	r1, [pc, #56]	; (800081c <createPutMsg+0x84>)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <createPutMsg+0x74>)
 80007e6:	f001 f96d 	bl	8001ac4 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80007ea:	4808      	ldr	r0, [pc, #32]	; (800080c <createPutMsg+0x74>)
 80007ec:	f7ff fcc0 	bl	8000170 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	3b02      	subs	r3, #2
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <createPutMsg+0x88>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bdb0      	pop	{r4, r5, r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000404 	.word	0x20000404
 8000804:	0800256c 	.word	0x0800256c
 8000808:	20000484 	.word	0x20000484
 800080c:	20000200 	.word	0x20000200
 8000810:	20000000 	.word	0x20000000
 8000814:	2000002c 	.word	0x2000002c
 8000818:	2000005c 	.word	0x2000005c
 800081c:	08002580 	.word	0x08002580
 8000820:	20000400 	.word	0x20000400

08000824 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	2100      	movs	r1, #0
 8000838:	4844      	ldr	r0, [pc, #272]	; (800094c <sendRequest+0x128>)
 800083a:	f001 f93a 	bl	8001ab2 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <sendRequest+0x12c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4943      	ldr	r1, [pc, #268]	; (8000954 <sendRequest+0x130>)
 8000846:	4841      	ldr	r0, [pc, #260]	; (800094c <sendRequest+0x128>)
 8000848:	f001 f93c 	bl	8001ac4 <siprintf>

	found = STANDBY;
 800084c:	4b42      	ldr	r3, [pc, #264]	; (8000958 <sendRequest+0x134>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)command);
 8000852:	483e      	ldr	r0, [pc, #248]	; (800094c <sendRequest+0x128>)
 8000854:	f000 ff3c 	bl	80016d0 <USART1_write>
	while(_CIPSEND_tries > 0){
 8000858:	e031      	b.n	80008be <sendRequest+0x9a>
		TIMER4_set_timeout(_CIPSEND_timeout);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 fbf2 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000860:	e01a      	b.n	8000898 <sendRequest+0x74>
			if(USART1_NEW_LINE_FOUND_get()){
 8000862:	f000 fceb 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d015      	beq.n	8000898 <sendRequest+0x74>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 800086c:	493b      	ldr	r1, [pc, #236]	; (800095c <sendRequest+0x138>)
 800086e:	483c      	ldr	r0, [pc, #240]	; (8000960 <sendRequest+0x13c>)
 8000870:	f000 ffb4 	bl	80017dc <USART1_search_buffer_Rx>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b37      	ldr	r3, [pc, #220]	; (8000958 <sendRequest+0x134>)
 800087a:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <sendRequest+0x134>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d107      	bne.n	8000894 <sendRequest+0x70>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000884:	4937      	ldr	r1, [pc, #220]	; (8000964 <sendRequest+0x140>)
 8000886:	4836      	ldr	r0, [pc, #216]	; (8000960 <sendRequest+0x13c>)
 8000888:	f000 ffa8 	bl	80017dc <USART1_search_buffer_Rx>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <sendRequest+0x134>)
 8000892:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000894:	f000 fcde 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <sendRequest+0x134>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d104      	bne.n	80008aa <sendRequest+0x86>
 80008a0:	f000 fbe2 	bl	8001068 <TIMER4_timeout_done>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0db      	beq.n	8000862 <sendRequest+0x3e>
			}
		}
		if(found == PASS){
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <sendRequest+0x134>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d009      	beq.n	80008c6 <sendRequest+0xa2>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
			USART1_write((uint8_t*)command);
 80008b8:	4824      	ldr	r0, [pc, #144]	; (800094c <sendRequest+0x128>)
 80008ba:	f000 ff09 	bl	80016d0 <USART1_write>
	while(_CIPSEND_tries > 0){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1ca      	bne.n	800085a <sendRequest+0x36>
 80008c4:	e000      	b.n	80008c8 <sendRequest+0xa4>
			break; //move on to next command
 80008c6:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <sendRequest+0x134>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d003      	beq.n	80008d8 <sendRequest+0xb4>
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <sendRequest+0x134>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d101      	bne.n	80008dc <sendRequest+0xb8>
		return FALSE;
 80008d8:	2300      	movs	r3, #0
 80008da:	e032      	b.n	8000942 <sendRequest+0x11e>
	}


	/*Send HTTP request*/
	found = STANDBY;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <sendRequest+0x134>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)http);
 80008e2:	4821      	ldr	r0, [pc, #132]	; (8000968 <sendRequest+0x144>)
 80008e4:	f000 fef4 	bl	80016d0 <USART1_write>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 80008e8:	e027      	b.n	800093a <sendRequest+0x116>
		TIMER4_set_timeout(_SEND_OK_timeout);
 80008ea:	6838      	ldr	r0, [r7, #0]
 80008ec:	f000 fbaa 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80008f0:	e00e      	b.n	8000910 <sendRequest+0xec>
			if(USART1_NEW_LINE_FOUND_get()){
 80008f2:	f000 fca3 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d009      	beq.n	8000910 <sendRequest+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 80008fc:	491b      	ldr	r1, [pc, #108]	; (800096c <sendRequest+0x148>)
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <sendRequest+0x14c>)
 8000900:	f000 ff6c 	bl	80017dc <USART1_search_buffer_Rx>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <sendRequest+0x134>)
 800090a:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800090c:	f000 fca2 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <sendRequest+0x134>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d104      	bne.n	8000922 <sendRequest+0xfe>
 8000918:	f000 fba6 	bl	8001068 <TIMER4_timeout_done>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0e7      	beq.n	80008f2 <sendRequest+0xce>
			}
		}
		if(found == PASS){
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <sendRequest+0x134>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <sendRequest+0x10a>
			return TRUE;
 800092a:	2301      	movs	r3, #1
 800092c:	e009      	b.n	8000942 <sendRequest+0x11e>
		}
		else{
			_SEND_OK_tries--;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	3b01      	subs	r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
			USART1_write((uint8_t*)http);
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <sendRequest+0x144>)
 8000936:	f000 fecb 	bl	80016d0 <USART1_write>
	while(_SEND_OK_tries > 0){
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1d4      	bne.n	80008ea <sendRequest+0xc6>
		}
	}
	return FALSE;
 8000940:	2300      	movs	r3, #0

}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000100 	.word	0x20000100
 8000950:	20000400 	.word	0x20000400
 8000954:	080025f4 	.word	0x080025f4
 8000958:	2000006c 	.word	0x2000006c
 800095c:	080023bc 	.word	0x080023bc
 8000960:	08002608 	.word	0x08002608
 8000964:	0800260c 	.word	0x0800260c
 8000968:	20000200 	.word	0x20000200
 800096c:	08002400 	.word	0x08002400
 8000970:	08002618 	.word	0x08002618

08000974 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <readResponse+0x5c>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
	TIMER4_set_timeout(timeout);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fb5e 	bl	8001044 <TIMER4_set_timeout>
	while(found == STANDBY && !TIMER4_timeout_done()){
 8000988:	e00e      	b.n	80009a8 <readResponse+0x34>
		if(USART1_NEW_LINE_FOUND_get()){
 800098a:	f000 fc57 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d009      	beq.n	80009a8 <readResponse+0x34>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000994:	490f      	ldr	r1, [pc, #60]	; (80009d4 <readResponse+0x60>)
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <readResponse+0x64>)
 8000998:	f000 ff20 	bl	80017dc <USART1_search_buffer_Rx>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <readResponse+0x5c>)
 80009a2:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 80009a4:	f000 fc56 	bl	8001254 <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !TIMER4_timeout_done()){
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <readResponse+0x5c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d104      	bne.n	80009ba <readResponse+0x46>
 80009b0:	f000 fb5a 	bl	8001068 <TIMER4_timeout_done>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0e7      	beq.n	800098a <readResponse+0x16>
		}
	}
	if(found == PASS){
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <readResponse+0x5c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <readResponse+0x52>
		return TRUE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <readResponse+0x54>
	}
	else{
		return FALSE;
 80009c6:	2300      	movs	r3, #0
	}

}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000006c 	.word	0x2000006c
 80009d4:	08002400 	.word	0x08002400
 80009d8:	0800260c 	.word	0x0800260c

080009dc <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <closeConnection+0x78>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
	USART1_write((uint8_t*)AT_CIPCLOSE);
 80009ec:	481a      	ldr	r0, [pc, #104]	; (8000a58 <closeConnection+0x7c>)
 80009ee:	f000 fe6f 	bl	80016d0 <USART1_write>
	while(tries > 0){
 80009f2:	e027      	b.n	8000a44 <closeConnection+0x68>
		TIMER4_set_timeout(timeout);
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fb25 	bl	8001044 <TIMER4_set_timeout>
		while(found == STANDBY && !TIMER4_timeout_done()){
 80009fa:	e00e      	b.n	8000a1a <closeConnection+0x3e>
			if(USART1_NEW_LINE_FOUND_get()){
 80009fc:	f000 fc1e 	bl	800123c <USART1_NEW_LINE_FOUND_get>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <closeConnection+0x3e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000a06:	4915      	ldr	r1, [pc, #84]	; (8000a5c <closeConnection+0x80>)
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <closeConnection+0x84>)
 8000a0a:	f000 fee7 	bl	80017dc <USART1_search_buffer_Rx>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <closeConnection+0x78>)
 8000a14:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000a16:	f000 fc1d 	bl	8001254 <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !TIMER4_timeout_done()){
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <closeConnection+0x78>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d104      	bne.n	8000a2c <closeConnection+0x50>
 8000a22:	f000 fb21 	bl	8001068 <TIMER4_timeout_done>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0e7      	beq.n	80009fc <closeConnection+0x20>
			}
		}
		if(found == PASS){
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <closeConnection+0x78>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <closeConnection+0x5c>
			return TRUE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e009      	b.n	8000a4c <closeConnection+0x70>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
			USART1_write((uint8_t*)AT_CIPCLOSE);
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <closeConnection+0x7c>)
 8000a40:	f000 fe46 	bl	80016d0 <USART1_write>
	while(tries > 0){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1d4      	bne.n	80009f4 <closeConnection+0x18>
		}
	}
	return FALSE;
 8000a4a:	2300      	movs	r3, #0

}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000006c 	.word	0x2000006c
 8000a58:	08002648 	.word	0x08002648
 8000a5c:	080023bc 	.word	0x080023bc
 8000a60:	080023c4 	.word	0x080023c4

08000a64 <add_event>:
	queue.accept = GO;
}


void add_event(Handler handler)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 8000a6c:	f000 f822 	bl	8000ab4 <queue_isFull>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d118      	bne.n	8000aa8 <add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <add_event+0x4c>)
 8000a78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <add_event+0x4c>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <add_event+0x4c>)
 8000a86:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8000a8c:	d807      	bhi.n	8000a9e <add_event+0x3a>
		queue.writeIndex++;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <add_event+0x4c>)
 8000a90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <add_event+0x4c>)
 8000a98:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000a9c:	e005      	b.n	8000aaa <add_event+0x46>
	else
		queue.writeIndex = 0;
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <add_event+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000aa6:	e000      	b.n	8000aaa <add_event+0x46>
		return;
 8000aa8:	bf00      	nop

}
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000048c 	.word	0x2000048c

08000ab4 <queue_isFull>:

}


BOOL queue_isFull()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <queue_isFull+0x28>)
 8000aba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <queue_isFull+0x28>)
 8000ac0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aca:	429a      	cmp	r2, r3
 8000acc:	bf0c      	ite	eq
 8000ace:	2301      	moveq	r3, #1
 8000ad0:	2300      	movne	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	2000048c 	.word	0x2000048c

08000ae0 <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <EXTI15_10_IRQHandler+0x24>)
 8000ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aea:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <EXTI15_10_IRQHandler+0x24>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <EXTI15_10_IRQHandler+0x24>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <EXTI15_10_IRQHandler+0x28>)
 8000afa:	f7ff ffb3 	bl	8000a64 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40010400 	.word	0x40010400
 8000b08:	08000b0d 	.word	0x08000b0d

08000b0c <interrupt_handler>:

void *interrupt_handler(void){
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <interrupt_handler+0x3c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <interrupt_handler+0x40>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <interrupt_handler+0x40>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <interrupt_handler+0x3c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e008      	b.n	8000b3e <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <interrupt_handler+0x40>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <interrupt_handler+0x40>)
 8000b32:	f023 0320 	bic.w	r3, r3, #32
 8000b36:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <interrupt_handler+0x3c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000b3e:	2300      	movs	r3, #0

}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000e74 	.word	0x20000e74
 8000b4c:	40010800 	.word	0x40010800

08000b50 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <EXTI4_IRQHandler+0x2c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <EXTI4_IRQHandler+0x2c>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6153      	str	r3, [r2, #20]
	if(TIMER3_timeout_done())
 8000b60:	f000 fa5e 	bl	8001020 <TIMER3_timeout_done>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <EXTI4_IRQHandler+0x26>
	{
		add_event(alert_Handler);
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <EXTI4_IRQHandler+0x30>)
 8000b6c:	f7ff ff7a 	bl	8000a64 <add_event>
		TIMER3_set_timeout(60); //60 seconds = 1 minute
 8000b70:	203c      	movs	r0, #60	; 0x3c
 8000b72:	f000 fa43 	bl	8000ffc <TIMER3_set_timeout>
	}

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	08000181 	.word	0x08000181

08000b84 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	USART2_init(); // for debugging
 8000b88:	f000 fb88 	bl	800129c <USART2_init>
//	init_queue();
//	init_sensor_with_interrupt(); // sensor interrupts are not inabled
//
//	TIMER2_init(); // for monitoring switch state.
//	TIMER3_init(); // for sensor delay
	TIMER4_init(); // for ESP8266 timeout
 8000b8c:	f000 f9aa 	bl	8000ee4 <TIMER4_init>

	USART1_init(); // for ESP8266
 8000b90:	f000 fbda 	bl	8001348 <USART1_init>


	//init_i2c1();
	USART2_write((uint8_t*)("\r\n_______________\r\n"));//For test
 8000b94:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <main+0x74>)
 8000b96:	f000 fc85 	bl	80014a4 <USART2_write>
	//enable_sensor(); // FOR TESTING

	while(1)
	{

	 	USART2_write((uint8_t*)("\r\nWord to the wise: if at some point nothing seems to be happening"));
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <main+0x78>)
 8000b9c:	f000 fc82 	bl	80014a4 <USART2_write>
	 	USART2_write((uint8_t*)("\r\nplease disconnect the device from your computer, wait a few minutes, and then reconnect."));
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <main+0x7c>)
 8000ba2:	f000 fc7f 	bl	80014a4 <USART2_write>


		while(!SYSTEM_CONTROL_set_up()){
 8000ba6:	bf00      	nop
 8000ba8:	f000 f86e 	bl	8000c88 <SYSTEM_CONTROL_set_up>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <main+0x4e>
		 	USART2_write((uint8_t*)("\r\nWe are sorry, but there seems to be a problem."));
 8000bb2:	4814      	ldr	r0, [pc, #80]	; (8000c04 <main+0x80>)
 8000bb4:	f000 fc76 	bl	80014a4 <USART2_write>
		 	USART2_write((uint8_t*)("\r\nIf you are sure you entered the correct network ssid and password\r\n please do the following:"));
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <main+0x84>)
 8000bba:	f000 fc73 	bl	80014a4 <USART2_write>
		 	USART2_write((uint8_t*)("\r\nCheck your network's signal, is it strong enough?"));
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <main+0x88>)
 8000bc0:	f000 fc70 	bl	80014a4 <USART2_write>
		 	USART2_write((uint8_t*)("\r\nIf it is not, please try again later."));
 8000bc4:	4812      	ldr	r0, [pc, #72]	; (8000c10 <main+0x8c>)
 8000bc6:	f000 fc6d 	bl	80014a4 <USART2_write>
		 	USART2_write((uint8_t*)("\r\nIf it is, please hit the reset button/disconnect your device from the computer, wait a few minutes, then reconnect and try again."));
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <main+0x90>)
 8000bcc:	f000 fc6a 	bl	80014a4 <USART2_write>
		 	while(1);
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x4c>
		}

 		USART2_write((uint8_t*)("\r\nHooray, your device was successfully registered."));
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <main+0x94>)
 8000bd4:	f000 fc66 	bl	80014a4 <USART2_write>
 		USART2_write((uint8_t*)("\r\nThis is your device ID: '"));
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <main+0x98>)
 8000bda:	f000 fc63 	bl	80014a4 <USART2_write>
 		USART2_write(device_id);
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <main+0x9c>)
 8000be0:	f000 fc60 	bl	80014a4 <USART2_write>
 		USART2_write((uint8_t*)("'\r\nPlease coppy it, you will need it later."));
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <main+0xa0>)
 8000be6:	f000 fc5d 	bl	80014a4 <USART2_write>
 		USART2_write((uint8_t*)"\r\nIf you ever wish to reset your network details, all you need to do is,\r\nopen 'TeraTerm' on a coputer and cunnect your device.");
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <main+0xa4>)
 8000bec:	f000 fc5a 	bl	80014a4 <USART2_write>
 		USART2_write((uint8_t*)("\r\n\r\nYou can now safely remove the  your device and connect it to an electric power supply."));
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <main+0xa8>)
 8000bf2:	f000 fc57 	bl	80014a4 <USART2_write>
	 	USART2_write((uint8_t*)("\r\nWord to the wise: if at some point nothing seems to be happening"));
 8000bf6:	e7d0      	b.n	8000b9a <main+0x16>
 8000bf8:	080026e8 	.word	0x080026e8
 8000bfc:	080026fc 	.word	0x080026fc
 8000c00:	08002740 	.word	0x08002740
 8000c04:	0800279c 	.word	0x0800279c
 8000c08:	080027d0 	.word	0x080027d0
 8000c0c:	08002830 	.word	0x08002830
 8000c10:	08002864 	.word	0x08002864
 8000c14:	0800288c 	.word	0x0800288c
 8000c18:	08002910 	.word	0x08002910
 8000c1c:	08002944 	.word	0x08002944
 8000c20:	20000070 	.word	0x20000070
 8000c24:	08002960 	.word	0x08002960
 8000c28:	0800298c 	.word	0x0800298c
 8000c2c:	08002a0c 	.word	0x08002a0c

08000c30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x50>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x16>
		heap_end = &end;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <_sbrk+0x50>)
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <_sbrk+0x54>)
 8000c44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <_sbrk+0x50>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <_sbrk+0x50>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	466a      	mov	r2, sp
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d907      	bls.n	8000c6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c5a:	f000 fef5 	bl	8001a48 <__errno>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	230c      	movs	r3, #12
 8000c62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e006      	b.n	8000c78 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <_sbrk+0x50>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <_sbrk+0x50>)
 8000c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000598 	.word	0x20000598
 8000c84:	20000e80 	.word	0x20000e80

08000c88 <SYSTEM_CONTROL_set_up>:

uint8_t SSID[SIZE];
uint8_t PWD[SIZE];


BOOL SYSTEM_CONTROL_set_up(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

	USART2_write((uint8_t*)("\r\nDear user, thankyou for being a part of our project!\r\n"));
 8000c8c:	4850      	ldr	r0, [pc, #320]	; (8000dd0 <SYSTEM_CONTROL_set_up+0x148>)
 8000c8e:	f000 fc09 	bl	80014a4 <USART2_write>
	USART2_write((uint8_t*)("Just a few more steps...\r\n\r\n"));
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <SYSTEM_CONTROL_set_up+0x14c>)
 8000c94:	f000 fc06 	bl	80014a4 <USART2_write>
	USART2_write((uint8_t*)("In order to register your device we need to set your network details.\r\n"));
 8000c98:	484f      	ldr	r0, [pc, #316]	; (8000dd8 <SYSTEM_CONTROL_set_up+0x150>)
 8000c9a:	f000 fc03 	bl	80014a4 <USART2_write>
	USART2_write((uint8_t*)("For your assurance, this information will not be saved in any database!\r\n"));
 8000c9e:	484f      	ldr	r0, [pc, #316]	; (8000ddc <SYSTEM_CONTROL_set_up+0x154>)
 8000ca0:	f000 fc00 	bl	80014a4 <USART2_write>

	// set network ssid
	while(!USART2_ok()){
 8000ca4:	e03d      	b.n	8000d22 <SYSTEM_CONTROL_set_up+0x9a>
		USART2_NEW_LINE_READ_set();
 8000ca6:	f000 faed 	bl	8001284 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\r\nPlease enter your network ssid: ");
 8000caa:	484d      	ldr	r0, [pc, #308]	; (8000de0 <SYSTEM_CONTROL_set_up+0x158>)
 8000cac:	f000 fbfa 	bl	80014a4 <USART2_write>
		USART2_enable_Rx();
 8000cb0:	f000 fba6 	bl	8001400 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000cb4:	bf00      	nop
 8000cb6:	f000 fad9 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0fa      	beq.n	8000cb6 <SYSTEM_CONTROL_set_up+0x2e>
		USART2_disable_Rx();
 8000cc0:	f000 fbac 	bl	800141c <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(SIZE, SSID)){
 8000cc4:	e00e      	b.n	8000ce4 <SYSTEM_CONTROL_set_up+0x5c>
			USART2_NEW_LINE_READ_set();
 8000cc6:	f000 fadd 	bl	8001284 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\r\nThe network ssid is to long, please try again: ");
 8000cca:	4846      	ldr	r0, [pc, #280]	; (8000de4 <SYSTEM_CONTROL_set_up+0x15c>)
 8000ccc:	f000 fbea 	bl	80014a4 <USART2_write>
			USART2_enable_Rx();
 8000cd0:	f000 fb96 	bl	8001400 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000cd4:	bf00      	nop
 8000cd6:	f000 fac9 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0fa      	beq.n	8000cd6 <SYSTEM_CONTROL_set_up+0x4e>
			USART2_disable_Rx();
 8000ce0:	f000 fb9c 	bl	800141c <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(SIZE, SSID)){
 8000ce4:	4940      	ldr	r1, [pc, #256]	; (8000de8 <SYSTEM_CONTROL_set_up+0x160>)
 8000ce6:	2040      	movs	r0, #64	; 0x40
 8000ce8:	f000 fc98 	bl	800161c <USART2_read_buffer_Rx>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0e9      	beq.n	8000cc6 <SYSTEM_CONTROL_set_up+0x3e>
		}
		USART2_NEW_LINE_READ_set();
 8000cf2:	f000 fac7 	bl	8001284 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\r\nYour network ssid is '");
 8000cf6:	483d      	ldr	r0, [pc, #244]	; (8000dec <SYSTEM_CONTROL_set_up+0x164>)
 8000cf8:	f000 fbd4 	bl	80014a4 <USART2_write>
		USART2_write(SSID);
 8000cfc:	483a      	ldr	r0, [pc, #232]	; (8000de8 <SYSTEM_CONTROL_set_up+0x160>)
 8000cfe:	f000 fbd1 	bl	80014a4 <USART2_write>
		USART2_write((uint8_t*)"'\r\n");
 8000d02:	483b      	ldr	r0, [pc, #236]	; (8000df0 <SYSTEM_CONTROL_set_up+0x168>)
 8000d04:	f000 fbce 	bl	80014a4 <USART2_write>

		USART2_write((uint8_t*)"Enter 'ok' to continue or any other key to change network ssid: ");
 8000d08:	483a      	ldr	r0, [pc, #232]	; (8000df4 <SYSTEM_CONTROL_set_up+0x16c>)
 8000d0a:	f000 fbcb 	bl	80014a4 <USART2_write>
		USART2_enable_Rx();
 8000d0e:	f000 fb77 	bl	8001400 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000d12:	bf00      	nop
 8000d14:	f000 faaa 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0fa      	beq.n	8000d14 <SYSTEM_CONTROL_set_up+0x8c>
		USART2_disable_Rx();
 8000d1e:	f000 fb7d 	bl	800141c <USART2_disable_Rx>
	while(!USART2_ok()){
 8000d22:	f000 fcad 	bl	8001680 <USART2_ok>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0bc      	beq.n	8000ca6 <SYSTEM_CONTROL_set_up+0x1e>
	}
	USART2_NEW_LINE_READ_set();
 8000d2c:	f000 faaa 	bl	8001284 <USART2_NEW_LINE_READ_set>


	// set network password
	USART2_set_buffer_Rx(); // reset buffer
 8000d30:	f000 fba2 	bl	8001478 <USART2_set_buffer_Rx>
	while(!USART2_ok()){
 8000d34:	e03d      	b.n	8000db2 <SYSTEM_CONTROL_set_up+0x12a>
		USART2_NEW_LINE_READ_set();
 8000d36:	f000 faa5 	bl	8001284 <USART2_NEW_LINE_READ_set>

		USART2_write((uint8_t*)"\r\nPlease enter the network password: ");
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <SYSTEM_CONTROL_set_up+0x170>)
 8000d3c:	f000 fbb2 	bl	80014a4 <USART2_write>
		USART2_enable_Rx();
 8000d40:	f000 fb5e 	bl	8001400 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000d44:	bf00      	nop
 8000d46:	f000 fa91 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0fa      	beq.n	8000d46 <SYSTEM_CONTROL_set_up+0xbe>
		USART2_disable_Rx();
 8000d50:	f000 fb64 	bl	800141c <USART2_disable_Rx>

		while(!USART2_read_buffer_Rx(SIZE, PWD)){
 8000d54:	e00e      	b.n	8000d74 <SYSTEM_CONTROL_set_up+0xec>
			USART2_NEW_LINE_READ_set();
 8000d56:	f000 fa95 	bl	8001284 <USART2_NEW_LINE_READ_set>

			USART2_write((uint8_t*)"\r\nThe password is to long, please try again: ");
 8000d5a:	4828      	ldr	r0, [pc, #160]	; (8000dfc <SYSTEM_CONTROL_set_up+0x174>)
 8000d5c:	f000 fba2 	bl	80014a4 <USART2_write>
			USART2_enable_Rx();
 8000d60:	f000 fb4e 	bl	8001400 <USART2_enable_Rx>
			while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000d64:	bf00      	nop
 8000d66:	f000 fa81 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0fa      	beq.n	8000d66 <SYSTEM_CONTROL_set_up+0xde>
			USART2_disable_Rx();
 8000d70:	f000 fb54 	bl	800141c <USART2_disable_Rx>
		while(!USART2_read_buffer_Rx(SIZE, PWD)){
 8000d74:	4922      	ldr	r1, [pc, #136]	; (8000e00 <SYSTEM_CONTROL_set_up+0x178>)
 8000d76:	2040      	movs	r0, #64	; 0x40
 8000d78:	f000 fc50 	bl	800161c <USART2_read_buffer_Rx>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0e9      	beq.n	8000d56 <SYSTEM_CONTROL_set_up+0xce>
		}
		USART2_NEW_LINE_READ_set();
 8000d82:	f000 fa7f 	bl	8001284 <USART2_NEW_LINE_READ_set>


		USART2_write((uint8_t*)"\r\nYour network password is '");
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <SYSTEM_CONTROL_set_up+0x17c>)
 8000d88:	f000 fb8c 	bl	80014a4 <USART2_write>
		USART2_write(PWD);
 8000d8c:	481c      	ldr	r0, [pc, #112]	; (8000e00 <SYSTEM_CONTROL_set_up+0x178>)
 8000d8e:	f000 fb89 	bl	80014a4 <USART2_write>
		USART2_write((uint8_t*)"'\r\n");
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <SYSTEM_CONTROL_set_up+0x168>)
 8000d94:	f000 fb86 	bl	80014a4 <USART2_write>

		USART2_write((uint8_t*)"Enter 'ok' to continue or any other key to change password: ");
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <SYSTEM_CONTROL_set_up+0x180>)
 8000d9a:	f000 fb83 	bl	80014a4 <USART2_write>
		USART2_enable_Rx();
 8000d9e:	f000 fb2f 	bl	8001400 <USART2_enable_Rx>
		while(!USART2_NEW_LINE_FOUND_get()); // wait for users input
 8000da2:	bf00      	nop
 8000da4:	f000 fa62 	bl	800126c <USART2_NEW_LINE_FOUND_get>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0fa      	beq.n	8000da4 <SYSTEM_CONTROL_set_up+0x11c>
		USART2_disable_Rx();
 8000dae:	f000 fb35 	bl	800141c <USART2_disable_Rx>
	while(!USART2_ok()){
 8000db2:	f000 fc65 	bl	8001680 <USART2_ok>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0bc      	beq.n	8000d36 <SYSTEM_CONTROL_set_up+0xae>
	}
	USART2_NEW_LINE_READ_set();
 8000dbc:	f000 fa62 	bl	8001284 <USART2_NEW_LINE_READ_set>

	USART2_write((uint8_t*)"Trying to connect...\r\nPlease wait, this might take a few minutes.");
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <SYSTEM_CONTROL_set_up+0x184>)
 8000dc2:	f000 fb6f 	bl	80014a4 <USART2_write>
	return registeration_Handler();
 8000dc6:	f7ff f9f9 	bl	80001bc <registeration_Handler>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08002a68 	.word	0x08002a68
 8000dd4:	08002aa4 	.word	0x08002aa4
 8000dd8:	08002ac4 	.word	0x08002ac4
 8000ddc:	08002b0c 	.word	0x08002b0c
 8000de0:	08002b58 	.word	0x08002b58
 8000de4:	08002b7c 	.word	0x08002b7c
 8000de8:	20000e34 	.word	0x20000e34
 8000dec:	08002bb0 	.word	0x08002bb0
 8000df0:	08002bcc 	.word	0x08002bcc
 8000df4:	08002bd0 	.word	0x08002bd0
 8000df8:	08002c14 	.word	0x08002c14
 8000dfc:	08002c3c 	.word	0x08002c3c
 8000e00:	20000df0 	.word	0x20000df0
 8000e04:	08002c6c 	.word	0x08002c6c
 8000e08:	08002c8c 	.word	0x08002c8c
 8000e0c:	08002ccc 	.word	0x08002ccc

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4906      	ldr	r1, [pc, #24]	; (8000e8c <__NVIC_EnableIRQ+0x34>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <TIMER4_init>:
	timer3.targetTick = 0;

}

void TIMER4_init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <TIMER4_init+0x6c>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <TIMER4_init+0x6c>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <TIMER4_init+0x70>)
 8000ef6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <TIMER4_init+0x70>)
 8000efe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <TIMER4_init+0x70>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <TIMER4_init+0x70>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <TIMER4_init+0x70>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <TIMER4_init+0x70>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <TIMER4_init+0x70>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <TIMER4_init+0x70>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000f2a:	2007      	movs	r0, #7
 8000f2c:	f7ff ff70 	bl	8000e10 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000f30:	2100      	movs	r1, #0
 8000f32:	201e      	movs	r0, #30
 8000f34:	f7ff ffac 	bl	8000e90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 8000f38:	201e      	movs	r0, #30
 8000f3a:	f7ff ff8d 	bl	8000e58 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f3e:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <TIMER4_init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <TIMER4_init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40000800 	.word	0x40000800
 8000f58:	200005ac 	.word	0x200005ac

08000f5c <TIMER3_enable>:
{
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
}

void TIMER3_enable(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <TIMER3_enable+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <TIMER3_enable+0x18>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40000400 	.word	0x40000400

08000f78 <TIMER4_enable>:

void TIMER4_enable(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <TIMER4_enable+0x18>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <TIMER4_enable+0x18>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40000800 	.word	0x40000800

08000f94 <TIMER3_disable>:
{
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
}

void TIMER3_disable(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <TIMER3_disable+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <TIMER3_disable+0x18>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40000400 	.word	0x40000400

08000fb0 <TIMER4_disable>:

void TIMER4_disable(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <TIMER4_disable+0x18>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <TIMER4_disable+0x18>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40000800 	.word	0x40000800

08000fcc <TIMER4_delay>:
	TIMER3_disable();

}

void TIMER4_delay(uint32_t num_of_sec)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	TIMER4_enable();
 8000fd4:	f7ff ffd0 	bl	8000f78 <TIMER4_enable>

	timer4.countTicks = 0;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <TIMER4_delay+0x2c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 8000fde:	bf00      	nop
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <TIMER4_delay+0x2c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d8fa      	bhi.n	8000fe0 <TIMER4_delay+0x14>

	TIMER4_disable();
 8000fea:	f7ff ffe1 	bl	8000fb0 <TIMER4_disable>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200005ac 	.word	0x200005ac

08000ffc <TIMER3_set_timeout>:

}


void TIMER3_set_timeout(uint32_t num_of_sec)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <TIMER3_set_timeout+0x20>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6053      	str	r3, [r2, #4]
	timer3.countTicks = 0;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <TIMER3_set_timeout+0x20>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
	TIMER3_enable();
 8001010:	f7ff ffa4 	bl	8000f5c <TIMER3_enable>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200005a4 	.word	0x200005a4

08001020 <TIMER3_timeout_done>:

BOOL TIMER3_timeout_done(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <TIMER3_timeout_done+0x20>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <TIMER3_timeout_done+0x20>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d303      	bcc.n	8001038 <TIMER3_timeout_done+0x18>

		TIMER3_disable();
 8001030:	f7ff ffb0 	bl	8000f94 <TIMER3_disable>
		return TRUE;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <TIMER3_timeout_done+0x1a>
	}
	return FALSE;
 8001038:	2300      	movs	r3, #0

}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200005a4 	.word	0x200005a4

08001044 <TIMER4_set_timeout>:


void TIMER4_set_timeout(uint32_t num_of_seconds)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	timer4.targetTick = num_of_seconds;
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <TIMER4_set_timeout+0x20>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6053      	str	r3, [r2, #4]
	timer4.countTicks = 0;
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <TIMER4_set_timeout+0x20>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	TIMER4_enable();
 8001058:	f7ff ff8e 	bl	8000f78 <TIMER4_enable>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200005ac 	.word	0x200005ac

08001068 <TIMER4_timeout_done>:

BOOL TIMER4_timeout_done(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

	if(timer4.countTicks >= timer4.targetTick){
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <TIMER4_timeout_done+0x20>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <TIMER4_timeout_done+0x20>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d303      	bcc.n	8001080 <TIMER4_timeout_done+0x18>

		TIMER4_disable();
 8001078:	f7ff ff9a 	bl	8000fb0 <TIMER4_disable>
		return TRUE;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <TIMER4_timeout_done+0x1a>
	}
	return FALSE;
 8001080:	2300      	movs	r3, #0

}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200005ac 	.word	0x200005ac

0800108c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8001090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d115      	bne.n	80010ca <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~(0x0001);
 800109e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <TIM2_IRQHandler+0x48>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <TIM2_IRQHandler+0x48>)
 80010b6:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer2.countTicks == MAX_COUNT){
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <TIM2_IRQHandler+0x48>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d102      	bne.n	80010ca <TIM2_IRQHandler+0x3e>
			timer2.countTicks = 0;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <TIM2_IRQHandler+0x48>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER2\r\n"));//For test


}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000059c 	.word	0x2000059c

080010d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <TIM3_IRQHandler+0x40>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d113      	bne.n	8001110 <TIM3_IRQHandler+0x38>
	{
		TIM3->SR &= ~(0x0001);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <TIM3_IRQHandler+0x40>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <TIM3_IRQHandler+0x40>)
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <TIM3_IRQHandler+0x44>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <TIM3_IRQHandler+0x44>)
 80010fc:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer3.countTicks == MAX_COUNT){
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <TIM3_IRQHandler+0x44>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001106:	4293      	cmp	r3, r2
 8001108:	d102      	bne.n	8001110 <TIM3_IRQHandler+0x38>
			timer3.countTicks = 0;
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <TIM3_IRQHandler+0x44>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

	}
	// USART2_write((uint8_t*)("\r\nTIMER3\r\n"));//For test


}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40000400 	.word	0x40000400
 800111c:	200005a4 	.word	0x200005a4

08001120 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <TIM4_IRQHandler+0x40>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	d113      	bne.n	8001158 <TIM4_IRQHandler+0x38>
	{
		TIM4->SR &= ~(0x0001);
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <TIM4_IRQHandler+0x40>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <TIM4_IRQHandler+0x40>)
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <TIM4_IRQHandler+0x44>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <TIM4_IRQHandler+0x44>)
 8001144:	6013      	str	r3, [r2, #0]

		// avoid overflow
		if(timer4.countTicks == MAX_COUNT){
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <TIM4_IRQHandler+0x44>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800114e:	4293      	cmp	r3, r2
 8001150:	d102      	bne.n	8001158 <TIM4_IRQHandler+0x38>
			timer4.countTicks = 0;
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <TIM4_IRQHandler+0x44>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
		}

	}
	// USART2_write((uint8_t*)("\r\nTIMER4\r\n"));//For test

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40000800 	.word	0x40000800
 8001164:	200005ac 	.word	0x200005ac

08001168 <__NVIC_SetPriorityGrouping>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4906      	ldr	r1, [pc, #24]	; (80011e4 <__NVIC_EnableIRQ+0x34>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <USART1_NEW_LINE_FOUND_get>:

static uint8_t *START;  // for search UART2_write_line
static uint8_t *END;  // for search


BOOL USART1_NEW_LINE_FOUND_get(void){
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	return usart1.new_line_found;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <USART1_NEW_LINE_FOUND_get+0x14>)
 8001242:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200009c8 	.word	0x200009c8

08001254 <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	usart1.new_line_read = TRUE;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <USART1_NEW_LINE_READ_set+0x14>)
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	200009c8 	.word	0x200009c8

0800126c <USART2_NEW_LINE_FOUND_get>:


BOOL USART2_NEW_LINE_FOUND_get(void){
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	return usart2.new_line_found;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <USART2_NEW_LINE_FOUND_get+0x14>)
 8001272:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200005b4 	.word	0x200005b4

08001284 <USART2_NEW_LINE_READ_set>:

void USART2_NEW_LINE_READ_set(void){
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	usart2.new_line_read = TRUE;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <USART2_NEW_LINE_READ_set+0x14>)
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200005b4 	.word	0x200005b4

0800129c <USART2_init>:



void USART2_init(){
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

	/*This program works when TeraTerm speed is set to 9600 and USART_BRR is set to 0x34D.*/

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <USART2_init+0xa0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <USART2_init+0xa0>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <USART2_init+0xa4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a23      	ldr	r2, [pc, #140]	; (8001340 <USART2_init+0xa4>)
 80012b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <USART2_init+0xa4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <USART2_init+0xa4>)
 80012be:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80012c2:	6013      	str	r3, [r2, #0]

	/*Configure USART2 Rx (PA3) as Input*/
	GPIOA->CRL &= 0xFFFF0FFF; //Leave all bits as they are except for bit 3 (see reference manual 9.2.2)
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <USART2_init+0xa4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <USART2_init+0xa4>)
 80012ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80012ce:	6013      	str	r3, [r2, #0]
	//For Input Pull-Up (See reference manual p. 167)
	GPIOA->CRL |= 0x00008000; //configure as input with pull up/pull down (see reference manual 9.2.2).
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <USART2_init+0xa4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <USART2_init+0xa4>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012da:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= 0x00000008;//(reference manual p. 161 and 9.2.4)
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <USART2_init+0xa4>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <USART2_init+0xa4>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see reference manual 8.3.8)
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <USART2_init+0xa0>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <USART2_init+0xa0>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	61d3      	str	r3, [r2, #28]
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO


	/*Following directions RM p. 792 (Setting Tx procesure)*/
	/*Following directions RM p. 795 (Setting Rx procesure) */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <USART2_init+0xa8>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <USART2_init+0xa8>)
 80012fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012fe:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <USART2_init+0xa8>)
 8001302:	f240 324d 	movw	r2, #845	; 0x34d
 8001306:	609a      	str	r2, [r3, #8]

	/*Enable USART Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <USART2_init+0xa8>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <USART2_init+0xa8>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
	/*Enable USART Receive*/
	//USART2->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)

	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART2->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <USART2_init+0xa8>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <USART2_init+0xa8>)
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001322:	2007      	movs	r0, #7
 8001324:	f7ff ff20 	bl	8001168 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001328:	2100      	movs	r1, #0
 800132a:	2026      	movs	r0, #38	; 0x26
 800132c:	f7ff ff5c 	bl	80011e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f7ff ff3d 	bl	80011b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001336:	b662      	cpsie	i
	__enable_irq();
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40004400 	.word	0x40004400

08001348 <USART1_init>:

void USART1_init(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <USART1_init+0xac>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <USART1_init+0xac>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <USART1_init+0xb0>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <USART1_init+0xb0>)
 800135e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001362:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <USART1_init+0xb0>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <USART1_init+0xb0>)
 800136a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800136e:	6053      	str	r3, [r2, #4]


	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <USART1_init+0xb0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <USART1_init+0xb0>)
 8001376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800137a:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <USART1_init+0xb0>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <USART1_init+0xb0>)
 8001382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001386:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <USART1_init+0xb0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <USART1_init+0xb0>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	60d3      	str	r3, [r2, #12]


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <USART1_init+0xac>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <USART1_init+0xac>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <USART1_init+0xb4>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4a15      	ldr	r2, [pc, #84]	; (80013fc <USART1_init+0xb4>)
 80013a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013aa:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <USART1_init+0xb4>)
 80013ae:	2245      	movs	r2, #69	; 0x45
 80013b0:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <USART1_init+0xb4>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <USART1_init+0xb4>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <USART1_init+0xb4>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <USART1_init+0xb4>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ca:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <USART1_init+0xb4>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <USART1_init+0xb4>)
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80013d8:	2007      	movs	r0, #7
 80013da:	f7ff fec5 	bl	8001168 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80013de:	2100      	movs	r1, #0
 80013e0:	2025      	movs	r0, #37	; 0x25
 80013e2:	f7ff ff01 	bl	80011e8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 80013e6:	2025      	movs	r0, #37	; 0x25
 80013e8:	f7ff fee2 	bl	80011b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80013ec:	b662      	cpsie	i
	__enable_irq();

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40013800 	.word	0x40013800

08001400 <USART2_enable_Rx>:



void USART2_enable_Rx(void){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

	USART2->CR1 |= 0x00000004;// set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <USART2_enable_Rx+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <USART2_enable_Rx+0x18>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	60d3      	str	r3, [r2, #12]

}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40004400 	.word	0x40004400

0800141c <USART2_disable_Rx>:

void USART2_disable_Rx(void){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

	USART2->CR1 &= ~(0x00000004);// reset the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <USART2_disable_Rx+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <USART2_disable_Rx+0x18>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	60d3      	str	r3, [r2, #12]

}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40004400 	.word	0x40004400

08001438 <USART2_set_buffer_Tx>:

void USART2_set_buffer_Tx(uint8_t *msg){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001444:	2100      	movs	r1, #0
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <USART2_set_buffer_Tx+0x3c>)
 8001448:	f000 fb33 	bl	8001ab2 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <USART2_set_buffer_Tx+0x3c>)
 8001450:	f000 fb58 	bl	8001b04 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7fe fe8b 	bl	8000170 <strlen>
 800145a:	4602      	mov	r2, r0
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <USART2_set_buffer_Tx+0x3c>)
 800145e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}

	usart2.write_index = 0;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <USART2_set_buffer_Tx+0x3c>)
 8001464:	2200      	movs	r2, #0
 8001466:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200005b4 	.word	0x200005b4

08001478 <USART2_set_buffer_Rx>:

void USART2_set_buffer_Rx(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

	memset(usart2.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	2100      	movs	r1, #0
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <USART2_set_buffer_Rx+0x24>)
 8001484:	f000 fb15 	bl	8001ab2 <memset>
	usart2.Rx_len = 0;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <USART2_set_buffer_Rx+0x28>)
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart2.read_index = 0;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <USART2_set_buffer_Rx+0x28>)
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200007b4 	.word	0x200007b4
 80014a0:	200005b4 	.word	0x200005b4

080014a4 <USART2_write>:

void USART2_write(uint8_t* msg){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with msg*/
	USART2_set_buffer_Tx(msg);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ffc3 	bl	8001438 <USART2_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART2_set_buffer_Rx();
 80014b2:	f7ff ffe1 	bl	8001478 <USART2_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart2.new_line_found = FALSE;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <USART2_write+0x84>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart2.new_line_read = TRUE;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <USART2_write+0x84>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	while(usart2.write_index < usart2.Tx_len)
 80014c6:	e014      	b.n	80014f2 <USART2_write+0x4e>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80014c8:	bf00      	nop
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <USART2_write+0x88>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f9      	beq.n	80014ca <USART2_write+0x26>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <USART2_write+0x84>)
 80014d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <USART2_write+0x84>)
 80014de:	5cd2      	ldrb	r2, [r2, r3]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <USART2_write+0x88>)
 80014e2:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <USART2_write+0x84>)
 80014e6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <USART2_write+0x84>)
 80014ee:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <USART2_write+0x84>)
 80014f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <USART2_write+0x84>)
 80014fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3e2      	bcc.n	80014c8 <USART2_write+0x24>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001502:	bf00      	nop
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <USART2_write+0x88>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150c:	2b40      	cmp	r3, #64	; 0x40
 800150e:	d1f9      	bne.n	8001504 <USART2_write+0x60>
	usart2.write_index = 0;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <USART2_write+0x84>)
 8001512:	2200      	movs	r2, #0
 8001514:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <USART2_write+0x84>)
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200005b4 	.word	0x200005b4
 800152c:	40004400 	.word	0x40004400

08001530 <USART2_write_line>:

void USART2_write_line(uint8_t *start, uint8_t *end){
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800153a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153e:	2100      	movs	r1, #0
 8001540:	4833      	ldr	r0, [pc, #204]	; (8001610 <USART2_write_line+0xe0>)
 8001542:	f000 fab6 	bl	8001ab2 <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001550:	3301      	adds	r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	da0c      	bge.n	8001570 <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001556:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <USART2_write_line+0xe0>)
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <USART2_write_line+0xe4>)
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001562:	682b      	ldr	r3, [r5, #0]
 8001564:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <USART2_write_line+0xe0>)
 8001568:	2213      	movs	r2, #19
 800156a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800156e:	e01a      	b.n	80015a6 <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	461a      	mov	r2, r3
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <USART2_write_line+0xe0>)
 800157e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		while(start < end){
 8001582:	e00c      	b.n	800159e <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <USART2_write_line+0xe0>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	460a      	mov	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
			start++;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3301      	adds	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
			i++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
		while(start < end){
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3ee      	bcc.n	8001584 <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <USART2_write_line+0xe0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

	while(usart2.write_index < usart2.Tx_len)
 80015ae:	e014      	b.n	80015da <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80015b0:	bf00      	nop
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <USART2_write_line+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f9      	beq.n	80015b2 <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <USART2_write_line+0xe0>)
 80015c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <USART2_write_line+0xe0>)
 80015c6:	5cd2      	ldrb	r2, [r2, r3]
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <USART2_write_line+0xe8>)
 80015ca:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <USART2_write_line+0xe0>)
 80015ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <USART2_write_line+0xe0>)
 80015d6:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart2.write_index < usart2.Tx_len)
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <USART2_write_line+0xe0>)
 80015dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <USART2_write_line+0xe0>)
 80015e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3e2      	bcc.n	80015b0 <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80015ea:	bf00      	nop
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <USART2_write_line+0xe8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	d1f9      	bne.n	80015ec <USART2_write_line+0xbc>
	usart2.write_index = 0;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <USART2_write_line+0xe0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart2.Tx_len = 0;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <USART2_write_line+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	200005b4 	.word	0x200005b4
 8001614:	08002d10 	.word	0x08002d10
 8001618:	40004400 	.word	0x40004400

0800161c <USART2_read_buffer_Rx>:

BOOL USART2_read_buffer_Rx(uint32_t dest_size, uint8_t *dest){
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]


	memset(dest, '\0', dest_size*sizeof(uint8_t));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	2100      	movs	r1, #0
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f000 fa41 	bl	8001ab2 <memset>
	if((usart2.Rx_len + 1) < dest_size){
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <USART2_read_buffer_Rx+0x60>)
 8001632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001636:	3301      	adds	r3, #1
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d919      	bls.n	8001672 <USART2_read_buffer_Rx+0x56>

		uint32_t i = 0; // Rx index
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 8001642:	e00c      	b.n	800165e <USART2_read_buffer_Rx+0x42>
			dest[i] = usart2.Rx[i];
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	490c      	ldr	r1, [pc, #48]	; (800167c <USART2_read_buffer_Rx+0x60>)
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	440a      	add	r2, r1
 8001650:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	701a      	strb	r2, [r3, #0]
			i++;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
		while(usart2.Rx[i] != '\r'){
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <USART2_read_buffer_Rx+0x60>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0d      	cmp	r3, #13
 800166c:	d1ea      	bne.n	8001644 <USART2_read_buffer_Rx+0x28>
		}
		return TRUE;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <USART2_read_buffer_Rx+0x58>
	}
	return FALSE;
 8001672:	2300      	movs	r3, #0

}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200005b4 	.word	0x200005b4

08001680 <USART2_ok>:

BOOL USART2_ok(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	if(strstr((const char*)usart2.Rx , (const char*)"ok\r\n")){
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <USART2_ok+0x40>)
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <USART2_ok+0x44>)
 8001688:	f000 fa44 	bl	8001b14 <strstr>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <USART2_ok+0x16>
		return TRUE;
 8001692:	2301      	movs	r3, #1
 8001694:	e012      	b.n	80016bc <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"OK\r\n")){
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <USART2_ok+0x48>)
 8001698:	480a      	ldr	r0, [pc, #40]	; (80016c4 <USART2_ok+0x44>)
 800169a:	f000 fa3b 	bl	8001b14 <strstr>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <USART2_ok+0x28>
		return TRUE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e009      	b.n	80016bc <USART2_ok+0x3c>
	}
	if(strstr((const char*)usart2.Rx , (const char*)"Ok\r\n")){
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <USART2_ok+0x4c>)
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <USART2_ok+0x44>)
 80016ac:	f000 fa32 	bl	8001b14 <strstr>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <USART2_ok+0x3a>
		return TRUE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <USART2_ok+0x3c>
	}
	return FALSE;
 80016ba:	2300      	movs	r3, #0

}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08002d24 	.word	0x08002d24
 80016c4:	200007b4 	.word	0x200007b4
 80016c8:	08002d2c 	.word	0x08002d2c
 80016cc:	08002d34 	.word	0x08002d34

080016d0 <USART1_write>:





void USART1_write(uint8_t *command){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	USART1_set_buffer_Tx(command);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f83f 	bl	800175c <USART1_set_buffer_Tx>

	/*Prepare buffer Rx for response*/
	USART1_set_buffer_Rx();
 80016de:	f000 f85d 	bl	800179c <USART1_set_buffer_Rx>

	// set initial values to Rx interrupt flags
	usart1.new_line_found = FALSE;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <USART1_write+0x84>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
	usart1.new_line_read = TRUE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <USART1_write+0x84>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 80016f2:	e014      	b.n	800171e <USART1_write+0x4e>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80016f4:	bf00      	nop
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <USART1_write+0x88>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <USART1_write+0x26>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <USART1_write+0x84>)
 8001704:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <USART1_write+0x84>)
 800170a:	5cd2      	ldrb	r2, [r2, r3]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <USART1_write+0x88>)
 800170e:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <USART1_write+0x84>)
 8001712:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001716:	3301      	adds	r3, #1
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <USART1_write+0x84>)
 800171a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <USART1_write+0x84>)
 8001720:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <USART1_write+0x84>)
 8001726:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800172a:	429a      	cmp	r2, r3
 800172c:	d3e2      	bcc.n	80016f4 <USART1_write+0x24>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800172e:	bf00      	nop
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <USART1_write+0x88>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d1f9      	bne.n	8001730 <USART1_write+0x60>
	usart1.write_index = 0;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <USART1_write+0x84>)
 800173e:	2200      	movs	r2, #0
 8001740:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <USART1_write+0x84>)
 8001746:	2200      	movs	r2, #0
 8001748:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200009c8 	.word	0x200009c8
 8001758:	40013800 	.word	0x40013800

0800175c <USART1_set_buffer_Tx>:

void USART1_set_buffer_Tx(uint8_t *command){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	2100      	movs	r1, #0
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <USART1_set_buffer_Tx+0x3c>)
 800176c:	f000 f9a1 	bl	8001ab2 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <USART1_set_buffer_Tx+0x3c>)
 8001774:	f000 f9c6 	bl	8001b04 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7fe fcf9 	bl	8000170 <strlen>
 800177e:	4602      	mov	r2, r0
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <USART1_set_buffer_Tx+0x3c>)
 8001782:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <USART1_set_buffer_Tx+0x3c>)
 8001788:	2200      	movs	r2, #0
 800178a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200009c8 	.word	0x200009c8

0800179c <USART1_set_buffer_Rx>:

void USART1_set_buffer_Rx(){
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	2100      	movs	r1, #0
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <USART1_set_buffer_Rx+0x30>)
 80017a8:	f000 f983 	bl	8001ab2 <memset>
	usart1.Rx_len = 0;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <USART1_set_buffer_Rx+0x34>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <USART1_set_buffer_Rx+0x34>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <USART1_set_buffer_Rx+0x38>)
 80017be:	4a03      	ldr	r2, [pc, #12]	; (80017cc <USART1_set_buffer_Rx+0x30>)
 80017c0:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <USART1_set_buffer_Rx+0x3c>)
 80017c4:	4a01      	ldr	r2, [pc, #4]	; (80017cc <USART1_set_buffer_Rx+0x30>)
 80017c6:	601a      	str	r2, [r3, #0]

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000bc8 	.word	0x20000bc8
 80017d0:	200009c8 	.word	0x200009c8
 80017d4:	20000de0 	.word	0x20000de0
 80017d8:	20000de4 	.word	0x20000de4

080017dc <USART1_search_buffer_Rx>:

STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <USART1_search_buffer_Rx+0x9c>)
 80017e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017ec:	3301      	adds	r3, #1
 80017ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f2:	d236      	bcs.n	8001862 <USART1_search_buffer_Rx+0x86>

		START = END;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <USART1_search_buffer_Rx+0xa0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <USART1_search_buffer_Rx+0xa4>)
 80017fa:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <USART1_search_buffer_Rx+0x9c>)
 80017fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <USART1_search_buffer_Rx+0xa8>)
 8001804:	4413      	add	r3, r2
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <USART1_search_buffer_Rx+0xa0>)
 8001808:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	481d      	ldr	r0, [pc, #116]	; (8001884 <USART1_search_buffer_Rx+0xa8>)
 800180e:	f000 f981 	bl	8001b14 <strstr>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <USART1_search_buffer_Rx+0xa4>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <USART1_search_buffer_Rx+0xa0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f7ff fe84 	bl	8001530 <USART2_write_line>
			return PASS;
 8001828:	2300      	movs	r3, #0
 800182a:	e021      	b.n	8001870 <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	4815      	ldr	r0, [pc, #84]	; (8001884 <USART1_search_buffer_Rx+0xa8>)
 8001830:	f000 f970 	bl	8001b14 <strstr>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <USART1_search_buffer_Rx+0xa4>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <USART1_search_buffer_Rx+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f7ff fe73 	bl	8001530 <USART2_write_line>
			return FAIL;
 800184a:	2302      	movs	r3, #2
 800184c:	e010      	b.n	8001870 <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <USART1_search_buffer_Rx+0xa4>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <USART1_search_buffer_Rx+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff fe69 	bl	8001530 <USART2_write_line>
			return STANDBY;
 800185e:	2301      	movs	r3, #1
 8001860:	e006      	b.n	8001870 <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		USART2_write((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8001862:	4809      	ldr	r0, [pc, #36]	; (8001888 <USART1_search_buffer_Rx+0xac>)
 8001864:	f7ff fe1e 	bl	80014a4 <USART2_write>
		USART2_write((uint8_t*)usart1.Rx);
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <USART1_search_buffer_Rx+0xa8>)
 800186a:	f7ff fe1b 	bl	80014a4 <USART2_write>
		return FAIL;
 800186e:	2302      	movs	r3, #2
	}

}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200009c8 	.word	0x200009c8
 800187c:	20000de4 	.word	0x20000de4
 8001880:	20000de0 	.word	0x20000de0
 8001884:	20000bc8 	.word	0x20000bc8
 8001888:	08002d3c 	.word	0x08002d3c

0800188c <USART1_IRQHandler>:

}


/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <USART1_IRQHandler+0xa8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b20      	cmp	r3, #32
 800189a:	d146      	bne.n	800192a <USART1_IRQHandler+0x9e>

		c = USART1->DR; // clear RXNE bit
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <USART1_IRQHandler+0xa8>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <USART1_IRQHandler+0xac>)
 80018a4:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <USART1_IRQHandler+0xb0>)
 80018a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80018ac:	3301      	adds	r3, #1
 80018ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b2:	d303      	bcc.n	80018bc <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <USART1_IRQHandler+0xb0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <USART1_IRQHandler+0xb0>)
 80018be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80018c2:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <USART1_IRQHandler+0xac>)
 80018c4:	7811      	ldrb	r1, [r2, #0]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <USART1_IRQHandler+0xb0>)
 80018c8:	4413      	add	r3, r2
 80018ca:	460a      	mov	r2, r1
 80018cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <USART1_IRQHandler+0xb0>)
 80018d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <USART1_IRQHandler+0xb0>)
 80018da:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <USART1_IRQHandler+0xb0>)
 80018e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <USART1_IRQHandler+0xb0>)
 80018e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart1.new_line_read){
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <USART1_IRQHandler+0xac>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0a      	cmp	r3, #10
 80018f2:	d10d      	bne.n	8001910 <USART1_IRQHandler+0x84>
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <USART1_IRQHandler+0xb0>)
 80018f6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <USART1_IRQHandler+0x84>
			usart1.new_line_found = TRUE;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <USART1_IRQHandler+0xb0>)
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart1.new_line_read = FALSE;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <USART1_IRQHandler+0xb0>)
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart1.new_line_found = FALSE;
		}

	}

}
 800190e:	e00c      	b.n	800192a <USART1_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart1.new_line_read){
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <USART1_IRQHandler+0xac>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b0a      	cmp	r3, #10
 8001916:	d008      	beq.n	800192a <USART1_IRQHandler+0x9e>
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <USART1_IRQHandler+0xb0>)
 800191a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <USART1_IRQHandler+0x9e>
			usart1.new_line_found = FALSE;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <USART1_IRQHandler+0xb0>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40013800 	.word	0x40013800
 8001938:	20000ddc 	.word	0x20000ddc
 800193c:	200009c8 	.word	0x200009c8

08001940 <USART2_IRQHandler>:

/*USART2 Interrupt Handler - Only Rx is set to have interrupts*/
void USART2_IRQHandler(void){
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

	if(((USART2->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <USART2_IRQHandler+0xa8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	2b20      	cmp	r3, #32
 800194e:	d146      	bne.n	80019de <USART2_IRQHandler+0x9e>

		c = USART2->DR; // clear RXNE bit
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <USART2_IRQHandler+0xa8>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <USART2_IRQHandler+0xac>)
 8001958:	701a      	strb	r2, [r3, #0]
		if((usart2.read_index + 1) >= BUFF_SIZE){
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <USART2_IRQHandler+0xb0>)
 800195c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001960:	3301      	adds	r3, #1
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	d303      	bcc.n	8001970 <USART2_IRQHandler+0x30>
			usart2.read_index = 0;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <USART2_IRQHandler+0xb0>)
 800196a:	2200      	movs	r2, #0
 800196c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart2.Rx[usart2.read_index] = (uint8_t)(c & 0xFF);
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <USART2_IRQHandler+0xb0>)
 8001972:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001976:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <USART2_IRQHandler+0xac>)
 8001978:	7811      	ldrb	r1, [r2, #0]
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <USART2_IRQHandler+0xb0>)
 800197c:	4413      	add	r3, r2
 800197e:	460a      	mov	r2, r1
 8001980:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart2.read_index++;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <USART2_IRQHandler+0xb0>)
 8001986:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800198a:	3301      	adds	r3, #1
 800198c:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <USART2_IRQHandler+0xb0>)
 800198e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart2.Rx_len++; // count total chars received
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <USART2_IRQHandler+0xb0>)
 8001994:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001998:	3301      	adds	r3, #1
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <USART2_IRQHandler+0xb0>)
 800199c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && usart2.new_line_read){
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <USART2_IRQHandler+0xac>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d10d      	bne.n	80019c4 <USART2_IRQHandler+0x84>
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <USART2_IRQHandler+0xb0>)
 80019aa:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <USART2_IRQHandler+0x84>
			usart2.new_line_found = TRUE;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <USART2_IRQHandler+0xb0>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			usart2.new_line_read = FALSE;
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <USART2_IRQHandler+0xb0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
			usart2.new_line_found = FALSE;
		}

	}

}
 80019c2:	e00c      	b.n	80019de <USART2_IRQHandler+0x9e>
		else if(c != (uint8_t)'\n' && usart2.new_line_read){
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <USART2_IRQHandler+0xac>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b0a      	cmp	r3, #10
 80019ca:	d008      	beq.n	80019de <USART2_IRQHandler+0x9e>
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <USART2_IRQHandler+0xb0>)
 80019ce:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <USART2_IRQHandler+0x9e>
			usart2.new_line_found = FALSE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <USART2_IRQHandler+0xb0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40004400 	.word	0x40004400
 80019ec:	20000ddc 	.word	0x20000ddc
 80019f0:	200005b4 	.word	0x200005b4

080019f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <LoopForever+0xe>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a10:	4c0b      	ldr	r4, [pc, #44]	; (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a1e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001a22:	f000 f817 	bl	8001a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7ff f8ad 	bl	8000b84 <main>

08001a2a <LoopForever>:

LoopForever:
    b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001a38:	08002da0 	.word	0x08002da0
  ldr r2, =_sbss
 8001a3c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001a40:	20000e7c 	.word	0x20000e7c

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>
	...

08001a48 <__errno>:
 8001a48:	4b01      	ldr	r3, [pc, #4]	; (8001a50 <__errno+0x8>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000080 	.word	0x20000080

08001a54 <__libc_init_array>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	2500      	movs	r5, #0
 8001a58:	4e0c      	ldr	r6, [pc, #48]	; (8001a8c <__libc_init_array+0x38>)
 8001a5a:	4c0d      	ldr	r4, [pc, #52]	; (8001a90 <__libc_init_array+0x3c>)
 8001a5c:	1ba4      	subs	r4, r4, r6
 8001a5e:	10a4      	asrs	r4, r4, #2
 8001a60:	42a5      	cmp	r5, r4
 8001a62:	d109      	bne.n	8001a78 <__libc_init_array+0x24>
 8001a64:	f000 fc58 	bl	8002318 <_init>
 8001a68:	2500      	movs	r5, #0
 8001a6a:	4e0a      	ldr	r6, [pc, #40]	; (8001a94 <__libc_init_array+0x40>)
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <__libc_init_array+0x44>)
 8001a6e:	1ba4      	subs	r4, r4, r6
 8001a70:	10a4      	asrs	r4, r4, #2
 8001a72:	42a5      	cmp	r5, r4
 8001a74:	d105      	bne.n	8001a82 <__libc_init_array+0x2e>
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7c:	4798      	blx	r3
 8001a7e:	3501      	adds	r5, #1
 8001a80:	e7ee      	b.n	8001a60 <__libc_init_array+0xc>
 8001a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a86:	4798      	blx	r3
 8001a88:	3501      	adds	r5, #1
 8001a8a:	e7f2      	b.n	8001a72 <__libc_init_array+0x1e>
 8001a8c:	08002d98 	.word	0x08002d98
 8001a90:	08002d98 	.word	0x08002d98
 8001a94:	08002d98 	.word	0x08002d98
 8001a98:	08002d9c 	.word	0x08002d9c

08001a9c <memcpy>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	1e43      	subs	r3, r0, #1
 8001aa0:	440a      	add	r2, r1
 8001aa2:	4291      	cmp	r1, r2
 8001aa4:	d100      	bne.n	8001aa8 <memcpy+0xc>
 8001aa6:	bd10      	pop	{r4, pc}
 8001aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ab0:	e7f7      	b.n	8001aa2 <memcpy+0x6>

08001ab2 <memset>:
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4402      	add	r2, r0
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d100      	bne.n	8001abc <memset+0xa>
 8001aba:	4770      	bx	lr
 8001abc:	f803 1b01 	strb.w	r1, [r3], #1
 8001ac0:	e7f9      	b.n	8001ab6 <memset+0x4>
	...

08001ac4 <siprintf>:
 8001ac4:	b40e      	push	{r1, r2, r3}
 8001ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001aca:	b500      	push	{lr}
 8001acc:	b09c      	sub	sp, #112	; 0x70
 8001ace:	ab1d      	add	r3, sp, #116	; 0x74
 8001ad0:	9002      	str	r0, [sp, #8]
 8001ad2:	9006      	str	r0, [sp, #24]
 8001ad4:	9107      	str	r1, [sp, #28]
 8001ad6:	9104      	str	r1, [sp, #16]
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <siprintf+0x38>)
 8001ada:	4909      	ldr	r1, [pc, #36]	; (8001b00 <siprintf+0x3c>)
 8001adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ae0:	9105      	str	r1, [sp, #20]
 8001ae2:	6800      	ldr	r0, [r0, #0]
 8001ae4:	a902      	add	r1, sp, #8
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	f000 f888 	bl	8001bfc <_svfiprintf_r>
 8001aec:	2200      	movs	r2, #0
 8001aee:	9b02      	ldr	r3, [sp, #8]
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	b01c      	add	sp, #112	; 0x70
 8001af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001af8:	b003      	add	sp, #12
 8001afa:	4770      	bx	lr
 8001afc:	20000080 	.word	0x20000080
 8001b00:	ffff0208 	.word	0xffff0208

08001b04 <strcpy>:
 8001b04:	4603      	mov	r3, r0
 8001b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b0a:	f803 2b01 	strb.w	r2, [r3], #1
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d1f9      	bne.n	8001b06 <strcpy+0x2>
 8001b12:	4770      	bx	lr

08001b14 <strstr>:
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	7803      	ldrb	r3, [r0, #0]
 8001b18:	b17b      	cbz	r3, 8001b3a <strstr+0x26>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	7823      	ldrb	r3, [r4, #0]
 8001b1e:	4620      	mov	r0, r4
 8001b20:	1c66      	adds	r6, r4, #1
 8001b22:	b17b      	cbz	r3, 8001b44 <strstr+0x30>
 8001b24:	1e4a      	subs	r2, r1, #1
 8001b26:	1e63      	subs	r3, r4, #1
 8001b28:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001b2c:	b14d      	cbz	r5, 8001b42 <strstr+0x2e>
 8001b2e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001b32:	4634      	mov	r4, r6
 8001b34:	42af      	cmp	r7, r5
 8001b36:	d0f7      	beq.n	8001b28 <strstr+0x14>
 8001b38:	e7f0      	b.n	8001b1c <strstr+0x8>
 8001b3a:	780b      	ldrb	r3, [r1, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf18      	it	ne
 8001b40:	2000      	movne	r0, #0
 8001b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b44:	4618      	mov	r0, r3
 8001b46:	e7fc      	b.n	8001b42 <strstr+0x2e>

08001b48 <__ssputs_r>:
 8001b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b4c:	688e      	ldr	r6, [r1, #8]
 8001b4e:	4682      	mov	sl, r0
 8001b50:	429e      	cmp	r6, r3
 8001b52:	460c      	mov	r4, r1
 8001b54:	4690      	mov	r8, r2
 8001b56:	4699      	mov	r9, r3
 8001b58:	d837      	bhi.n	8001bca <__ssputs_r+0x82>
 8001b5a:	898a      	ldrh	r2, [r1, #12]
 8001b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b60:	d031      	beq.n	8001bc6 <__ssputs_r+0x7e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	6825      	ldr	r5, [r4, #0]
 8001b66:	6909      	ldr	r1, [r1, #16]
 8001b68:	1a6f      	subs	r7, r5, r1
 8001b6a:	6965      	ldr	r5, [r4, #20]
 8001b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8001b74:	f109 0301 	add.w	r3, r9, #1
 8001b78:	443b      	add	r3, r7
 8001b7a:	429d      	cmp	r5, r3
 8001b7c:	bf38      	it	cc
 8001b7e:	461d      	movcc	r5, r3
 8001b80:	0553      	lsls	r3, r2, #21
 8001b82:	d530      	bpl.n	8001be6 <__ssputs_r+0x9e>
 8001b84:	4629      	mov	r1, r5
 8001b86:	f000 fb2d 	bl	80021e4 <_malloc_r>
 8001b8a:	4606      	mov	r6, r0
 8001b8c:	b950      	cbnz	r0, 8001ba4 <__ssputs_r+0x5c>
 8001b8e:	230c      	movs	r3, #12
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f8ca 3000 	str.w	r3, [sl]
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9e:	81a3      	strh	r3, [r4, #12]
 8001ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba4:	463a      	mov	r2, r7
 8001ba6:	6921      	ldr	r1, [r4, #16]
 8001ba8:	f7ff ff78 	bl	8001a9c <memcpy>
 8001bac:	89a3      	ldrh	r3, [r4, #12]
 8001bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb6:	81a3      	strh	r3, [r4, #12]
 8001bb8:	6126      	str	r6, [r4, #16]
 8001bba:	443e      	add	r6, r7
 8001bbc:	6026      	str	r6, [r4, #0]
 8001bbe:	464e      	mov	r6, r9
 8001bc0:	6165      	str	r5, [r4, #20]
 8001bc2:	1bed      	subs	r5, r5, r7
 8001bc4:	60a5      	str	r5, [r4, #8]
 8001bc6:	454e      	cmp	r6, r9
 8001bc8:	d900      	bls.n	8001bcc <__ssputs_r+0x84>
 8001bca:	464e      	mov	r6, r9
 8001bcc:	4632      	mov	r2, r6
 8001bce:	4641      	mov	r1, r8
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	f000 faa1 	bl	8002118 <memmove>
 8001bd6:	68a3      	ldr	r3, [r4, #8]
 8001bd8:	2000      	movs	r0, #0
 8001bda:	1b9b      	subs	r3, r3, r6
 8001bdc:	60a3      	str	r3, [r4, #8]
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	441e      	add	r6, r3
 8001be2:	6026      	str	r6, [r4, #0]
 8001be4:	e7dc      	b.n	8001ba0 <__ssputs_r+0x58>
 8001be6:	462a      	mov	r2, r5
 8001be8:	f000 fb56 	bl	8002298 <_realloc_r>
 8001bec:	4606      	mov	r6, r0
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d1e2      	bne.n	8001bb8 <__ssputs_r+0x70>
 8001bf2:	6921      	ldr	r1, [r4, #16]
 8001bf4:	4650      	mov	r0, sl
 8001bf6:	f000 faa9 	bl	800214c <_free_r>
 8001bfa:	e7c8      	b.n	8001b8e <__ssputs_r+0x46>

08001bfc <_svfiprintf_r>:
 8001bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c00:	461d      	mov	r5, r3
 8001c02:	898b      	ldrh	r3, [r1, #12]
 8001c04:	b09d      	sub	sp, #116	; 0x74
 8001c06:	061f      	lsls	r7, r3, #24
 8001c08:	4680      	mov	r8, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4616      	mov	r6, r2
 8001c0e:	d50f      	bpl.n	8001c30 <_svfiprintf_r+0x34>
 8001c10:	690b      	ldr	r3, [r1, #16]
 8001c12:	b96b      	cbnz	r3, 8001c30 <_svfiprintf_r+0x34>
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	f000 fae5 	bl	80021e4 <_malloc_r>
 8001c1a:	6020      	str	r0, [r4, #0]
 8001c1c:	6120      	str	r0, [r4, #16]
 8001c1e:	b928      	cbnz	r0, 8001c2c <_svfiprintf_r+0x30>
 8001c20:	230c      	movs	r3, #12
 8001c22:	f8c8 3000 	str.w	r3, [r8]
 8001c26:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2a:	e0c8      	b.n	8001dbe <_svfiprintf_r+0x1c2>
 8001c2c:	2340      	movs	r3, #64	; 0x40
 8001c2e:	6163      	str	r3, [r4, #20]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9309      	str	r3, [sp, #36]	; 0x24
 8001c34:	2320      	movs	r3, #32
 8001c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c3a:	2330      	movs	r3, #48	; 0x30
 8001c3c:	f04f 0b01 	mov.w	fp, #1
 8001c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c44:	9503      	str	r5, [sp, #12]
 8001c46:	4637      	mov	r7, r6
 8001c48:	463d      	mov	r5, r7
 8001c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c4e:	b10b      	cbz	r3, 8001c54 <_svfiprintf_r+0x58>
 8001c50:	2b25      	cmp	r3, #37	; 0x25
 8001c52:	d13e      	bne.n	8001cd2 <_svfiprintf_r+0xd6>
 8001c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c58:	d00b      	beq.n	8001c72 <_svfiprintf_r+0x76>
 8001c5a:	4653      	mov	r3, sl
 8001c5c:	4632      	mov	r2, r6
 8001c5e:	4621      	mov	r1, r4
 8001c60:	4640      	mov	r0, r8
 8001c62:	f7ff ff71 	bl	8001b48 <__ssputs_r>
 8001c66:	3001      	adds	r0, #1
 8001c68:	f000 80a4 	beq.w	8001db4 <_svfiprintf_r+0x1b8>
 8001c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c6e:	4453      	add	r3, sl
 8001c70:	9309      	str	r3, [sp, #36]	; 0x24
 8001c72:	783b      	ldrb	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 809d 	beq.w	8001db4 <_svfiprintf_r+0x1b8>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c84:	9304      	str	r3, [sp, #16]
 8001c86:	9307      	str	r3, [sp, #28]
 8001c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8001c8e:	462f      	mov	r7, r5
 8001c90:	2205      	movs	r2, #5
 8001c92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001c96:	4850      	ldr	r0, [pc, #320]	; (8001dd8 <_svfiprintf_r+0x1dc>)
 8001c98:	f000 fa30 	bl	80020fc <memchr>
 8001c9c:	9b04      	ldr	r3, [sp, #16]
 8001c9e:	b9d0      	cbnz	r0, 8001cd6 <_svfiprintf_r+0xda>
 8001ca0:	06d9      	lsls	r1, r3, #27
 8001ca2:	bf44      	itt	mi
 8001ca4:	2220      	movmi	r2, #32
 8001ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001caa:	071a      	lsls	r2, r3, #28
 8001cac:	bf44      	itt	mi
 8001cae:	222b      	movmi	r2, #43	; 0x2b
 8001cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cb4:	782a      	ldrb	r2, [r5, #0]
 8001cb6:	2a2a      	cmp	r2, #42	; 0x2a
 8001cb8:	d015      	beq.n	8001ce6 <_svfiprintf_r+0xea>
 8001cba:	462f      	mov	r7, r5
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	250a      	movs	r5, #10
 8001cc0:	9a07      	ldr	r2, [sp, #28]
 8001cc2:	4639      	mov	r1, r7
 8001cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cc8:	3b30      	subs	r3, #48	; 0x30
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d94d      	bls.n	8001d6a <_svfiprintf_r+0x16e>
 8001cce:	b1b8      	cbz	r0, 8001d00 <_svfiprintf_r+0x104>
 8001cd0:	e00f      	b.n	8001cf2 <_svfiprintf_r+0xf6>
 8001cd2:	462f      	mov	r7, r5
 8001cd4:	e7b8      	b.n	8001c48 <_svfiprintf_r+0x4c>
 8001cd6:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <_svfiprintf_r+0x1dc>)
 8001cd8:	463d      	mov	r5, r7
 8001cda:	1a80      	subs	r0, r0, r2
 8001cdc:	fa0b f000 	lsl.w	r0, fp, r0
 8001ce0:	4318      	orrs	r0, r3
 8001ce2:	9004      	str	r0, [sp, #16]
 8001ce4:	e7d3      	b.n	8001c8e <_svfiprintf_r+0x92>
 8001ce6:	9a03      	ldr	r2, [sp, #12]
 8001ce8:	1d11      	adds	r1, r2, #4
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	9103      	str	r1, [sp, #12]
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	db01      	blt.n	8001cf6 <_svfiprintf_r+0xfa>
 8001cf2:	9207      	str	r2, [sp, #28]
 8001cf4:	e004      	b.n	8001d00 <_svfiprintf_r+0x104>
 8001cf6:	4252      	negs	r2, r2
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	9207      	str	r2, [sp, #28]
 8001cfe:	9304      	str	r3, [sp, #16]
 8001d00:	783b      	ldrb	r3, [r7, #0]
 8001d02:	2b2e      	cmp	r3, #46	; 0x2e
 8001d04:	d10c      	bne.n	8001d20 <_svfiprintf_r+0x124>
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	2b2a      	cmp	r3, #42	; 0x2a
 8001d0a:	d133      	bne.n	8001d74 <_svfiprintf_r+0x178>
 8001d0c:	9b03      	ldr	r3, [sp, #12]
 8001d0e:	3702      	adds	r7, #2
 8001d10:	1d1a      	adds	r2, r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	9203      	str	r2, [sp, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bfb8      	it	lt
 8001d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d1e:	9305      	str	r3, [sp, #20]
 8001d20:	4d2e      	ldr	r5, [pc, #184]	; (8001ddc <_svfiprintf_r+0x1e0>)
 8001d22:	2203      	movs	r2, #3
 8001d24:	7839      	ldrb	r1, [r7, #0]
 8001d26:	4628      	mov	r0, r5
 8001d28:	f000 f9e8 	bl	80020fc <memchr>
 8001d2c:	b138      	cbz	r0, 8001d3e <_svfiprintf_r+0x142>
 8001d2e:	2340      	movs	r3, #64	; 0x40
 8001d30:	1b40      	subs	r0, r0, r5
 8001d32:	fa03 f000 	lsl.w	r0, r3, r0
 8001d36:	9b04      	ldr	r3, [sp, #16]
 8001d38:	3701      	adds	r7, #1
 8001d3a:	4303      	orrs	r3, r0
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	7839      	ldrb	r1, [r7, #0]
 8001d40:	2206      	movs	r2, #6
 8001d42:	4827      	ldr	r0, [pc, #156]	; (8001de0 <_svfiprintf_r+0x1e4>)
 8001d44:	1c7e      	adds	r6, r7, #1
 8001d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d4a:	f000 f9d7 	bl	80020fc <memchr>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d038      	beq.n	8001dc4 <_svfiprintf_r+0x1c8>
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <_svfiprintf_r+0x1e8>)
 8001d54:	bb13      	cbnz	r3, 8001d9c <_svfiprintf_r+0x1a0>
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	3307      	adds	r3, #7
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	3308      	adds	r3, #8
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d64:	444b      	add	r3, r9
 8001d66:	9309      	str	r3, [sp, #36]	; 0x24
 8001d68:	e76d      	b.n	8001c46 <_svfiprintf_r+0x4a>
 8001d6a:	fb05 3202 	mla	r2, r5, r2, r3
 8001d6e:	2001      	movs	r0, #1
 8001d70:	460f      	mov	r7, r1
 8001d72:	e7a6      	b.n	8001cc2 <_svfiprintf_r+0xc6>
 8001d74:	2300      	movs	r3, #0
 8001d76:	250a      	movs	r5, #10
 8001d78:	4619      	mov	r1, r3
 8001d7a:	3701      	adds	r7, #1
 8001d7c:	9305      	str	r3, [sp, #20]
 8001d7e:	4638      	mov	r0, r7
 8001d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d84:	3a30      	subs	r2, #48	; 0x30
 8001d86:	2a09      	cmp	r2, #9
 8001d88:	d903      	bls.n	8001d92 <_svfiprintf_r+0x196>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0c8      	beq.n	8001d20 <_svfiprintf_r+0x124>
 8001d8e:	9105      	str	r1, [sp, #20]
 8001d90:	e7c6      	b.n	8001d20 <_svfiprintf_r+0x124>
 8001d92:	fb05 2101 	mla	r1, r5, r1, r2
 8001d96:	2301      	movs	r3, #1
 8001d98:	4607      	mov	r7, r0
 8001d9a:	e7f0      	b.n	8001d7e <_svfiprintf_r+0x182>
 8001d9c:	ab03      	add	r3, sp, #12
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4622      	mov	r2, r4
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_svfiprintf_r+0x1ec>)
 8001da4:	a904      	add	r1, sp, #16
 8001da6:	4640      	mov	r0, r8
 8001da8:	f3af 8000 	nop.w
 8001dac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001db0:	4681      	mov	r9, r0
 8001db2:	d1d6      	bne.n	8001d62 <_svfiprintf_r+0x166>
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	065b      	lsls	r3, r3, #25
 8001db8:	f53f af35 	bmi.w	8001c26 <_svfiprintf_r+0x2a>
 8001dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dbe:	b01d      	add	sp, #116	; 0x74
 8001dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4622      	mov	r2, r4
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_svfiprintf_r+0x1ec>)
 8001dcc:	a904      	add	r1, sp, #16
 8001dce:	4640      	mov	r0, r8
 8001dd0:	f000 f882 	bl	8001ed8 <_printf_i>
 8001dd4:	e7ea      	b.n	8001dac <_svfiprintf_r+0x1b0>
 8001dd6:	bf00      	nop
 8001dd8:	08002d63 	.word	0x08002d63
 8001ddc:	08002d69 	.word	0x08002d69
 8001de0:	08002d6d 	.word	0x08002d6d
 8001de4:	00000000 	.word	0x00000000
 8001de8:	08001b49 	.word	0x08001b49

08001dec <_printf_common>:
 8001dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df0:	4691      	mov	r9, r2
 8001df2:	461f      	mov	r7, r3
 8001df4:	688a      	ldr	r2, [r1, #8]
 8001df6:	690b      	ldr	r3, [r1, #16]
 8001df8:	4606      	mov	r6, r0
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	bfb8      	it	lt
 8001dfe:	4613      	movlt	r3, r2
 8001e00:	f8c9 3000 	str.w	r3, [r9]
 8001e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e08:	460c      	mov	r4, r1
 8001e0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e0e:	b112      	cbz	r2, 8001e16 <_printf_common+0x2a>
 8001e10:	3301      	adds	r3, #1
 8001e12:	f8c9 3000 	str.w	r3, [r9]
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	0699      	lsls	r1, r3, #26
 8001e1a:	bf42      	ittt	mi
 8001e1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e20:	3302      	addmi	r3, #2
 8001e22:	f8c9 3000 	strmi.w	r3, [r9]
 8001e26:	6825      	ldr	r5, [r4, #0]
 8001e28:	f015 0506 	ands.w	r5, r5, #6
 8001e2c:	d107      	bne.n	8001e3e <_printf_common+0x52>
 8001e2e:	f104 0a19 	add.w	sl, r4, #25
 8001e32:	68e3      	ldr	r3, [r4, #12]
 8001e34:	f8d9 2000 	ldr.w	r2, [r9]
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	42ab      	cmp	r3, r5
 8001e3c:	dc29      	bgt.n	8001e92 <_printf_common+0xa6>
 8001e3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	3300      	adds	r3, #0
 8001e46:	bf18      	it	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	0692      	lsls	r2, r2, #26
 8001e4c:	d42e      	bmi.n	8001eac <_printf_common+0xc0>
 8001e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e52:	4639      	mov	r1, r7
 8001e54:	4630      	mov	r0, r6
 8001e56:	47c0      	blx	r8
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d021      	beq.n	8001ea0 <_printf_common+0xb4>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	68e5      	ldr	r5, [r4, #12]
 8001e60:	f003 0306 	and.w	r3, r3, #6
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	bf18      	it	ne
 8001e68:	2500      	movne	r5, #0
 8001e6a:	f8d9 2000 	ldr.w	r2, [r9]
 8001e6e:	f04f 0900 	mov.w	r9, #0
 8001e72:	bf08      	it	eq
 8001e74:	1aad      	subeq	r5, r5, r2
 8001e76:	68a3      	ldr	r3, [r4, #8]
 8001e78:	6922      	ldr	r2, [r4, #16]
 8001e7a:	bf08      	it	eq
 8001e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bfc4      	itt	gt
 8001e84:	1a9b      	subgt	r3, r3, r2
 8001e86:	18ed      	addgt	r5, r5, r3
 8001e88:	341a      	adds	r4, #26
 8001e8a:	454d      	cmp	r5, r9
 8001e8c:	d11a      	bne.n	8001ec4 <_printf_common+0xd8>
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e008      	b.n	8001ea4 <_printf_common+0xb8>
 8001e92:	2301      	movs	r3, #1
 8001e94:	4652      	mov	r2, sl
 8001e96:	4639      	mov	r1, r7
 8001e98:	4630      	mov	r0, r6
 8001e9a:	47c0      	blx	r8
 8001e9c:	3001      	adds	r0, #1
 8001e9e:	d103      	bne.n	8001ea8 <_printf_common+0xbc>
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea8:	3501      	adds	r5, #1
 8001eaa:	e7c2      	b.n	8001e32 <_printf_common+0x46>
 8001eac:	2030      	movs	r0, #48	; 0x30
 8001eae:	18e1      	adds	r1, r4, r3
 8001eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eba:	4422      	add	r2, r4
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ec2:	e7c4      	b.n	8001e4e <_printf_common+0x62>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	4639      	mov	r1, r7
 8001eca:	4630      	mov	r0, r6
 8001ecc:	47c0      	blx	r8
 8001ece:	3001      	adds	r0, #1
 8001ed0:	d0e6      	beq.n	8001ea0 <_printf_common+0xb4>
 8001ed2:	f109 0901 	add.w	r9, r9, #1
 8001ed6:	e7d8      	b.n	8001e8a <_printf_common+0x9e>

08001ed8 <_printf_i>:
 8001ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001edc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	7e09      	ldrb	r1, [r1, #24]
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	296e      	cmp	r1, #110	; 0x6e
 8001ee8:	4617      	mov	r7, r2
 8001eea:	4606      	mov	r6, r0
 8001eec:	4698      	mov	r8, r3
 8001eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ef0:	f000 80b3 	beq.w	800205a <_printf_i+0x182>
 8001ef4:	d822      	bhi.n	8001f3c <_printf_i+0x64>
 8001ef6:	2963      	cmp	r1, #99	; 0x63
 8001ef8:	d036      	beq.n	8001f68 <_printf_i+0x90>
 8001efa:	d80a      	bhi.n	8001f12 <_printf_i+0x3a>
 8001efc:	2900      	cmp	r1, #0
 8001efe:	f000 80b9 	beq.w	8002074 <_printf_i+0x19c>
 8001f02:	2958      	cmp	r1, #88	; 0x58
 8001f04:	f000 8083 	beq.w	800200e <_printf_i+0x136>
 8001f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f10:	e032      	b.n	8001f78 <_printf_i+0xa0>
 8001f12:	2964      	cmp	r1, #100	; 0x64
 8001f14:	d001      	beq.n	8001f1a <_printf_i+0x42>
 8001f16:	2969      	cmp	r1, #105	; 0x69
 8001f18:	d1f6      	bne.n	8001f08 <_printf_i+0x30>
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	0605      	lsls	r5, r0, #24
 8001f20:	f103 0104 	add.w	r1, r3, #4
 8001f24:	d52a      	bpl.n	8001f7c <_printf_i+0xa4>
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da03      	bge.n	8001f36 <_printf_i+0x5e>
 8001f2e:	222d      	movs	r2, #45	; 0x2d
 8001f30:	425b      	negs	r3, r3
 8001f32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f36:	486f      	ldr	r0, [pc, #444]	; (80020f4 <_printf_i+0x21c>)
 8001f38:	220a      	movs	r2, #10
 8001f3a:	e039      	b.n	8001fb0 <_printf_i+0xd8>
 8001f3c:	2973      	cmp	r1, #115	; 0x73
 8001f3e:	f000 809d 	beq.w	800207c <_printf_i+0x1a4>
 8001f42:	d808      	bhi.n	8001f56 <_printf_i+0x7e>
 8001f44:	296f      	cmp	r1, #111	; 0x6f
 8001f46:	d020      	beq.n	8001f8a <_printf_i+0xb2>
 8001f48:	2970      	cmp	r1, #112	; 0x70
 8001f4a:	d1dd      	bne.n	8001f08 <_printf_i+0x30>
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	f043 0320 	orr.w	r3, r3, #32
 8001f52:	6023      	str	r3, [r4, #0]
 8001f54:	e003      	b.n	8001f5e <_printf_i+0x86>
 8001f56:	2975      	cmp	r1, #117	; 0x75
 8001f58:	d017      	beq.n	8001f8a <_printf_i+0xb2>
 8001f5a:	2978      	cmp	r1, #120	; 0x78
 8001f5c:	d1d4      	bne.n	8001f08 <_printf_i+0x30>
 8001f5e:	2378      	movs	r3, #120	; 0x78
 8001f60:	4865      	ldr	r0, [pc, #404]	; (80020f8 <_printf_i+0x220>)
 8001f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f66:	e055      	b.n	8002014 <_printf_i+0x13c>
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f6e:	1d19      	adds	r1, r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6011      	str	r1, [r2, #0]
 8001f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e08c      	b.n	8002096 <_printf_i+0x1be>
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f82:	6011      	str	r1, [r2, #0]
 8001f84:	bf18      	it	ne
 8001f86:	b21b      	sxthne	r3, r3
 8001f88:	e7cf      	b.n	8001f2a <_printf_i+0x52>
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	6825      	ldr	r5, [r4, #0]
 8001f8e:	1d18      	adds	r0, r3, #4
 8001f90:	6010      	str	r0, [r2, #0]
 8001f92:	0628      	lsls	r0, r5, #24
 8001f94:	d501      	bpl.n	8001f9a <_printf_i+0xc2>
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e002      	b.n	8001fa0 <_printf_i+0xc8>
 8001f9a:	0668      	lsls	r0, r5, #25
 8001f9c:	d5fb      	bpl.n	8001f96 <_printf_i+0xbe>
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	296f      	cmp	r1, #111	; 0x6f
 8001fa2:	bf14      	ite	ne
 8001fa4:	220a      	movne	r2, #10
 8001fa6:	2208      	moveq	r2, #8
 8001fa8:	4852      	ldr	r0, [pc, #328]	; (80020f4 <_printf_i+0x21c>)
 8001faa:	2100      	movs	r1, #0
 8001fac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fb0:	6865      	ldr	r5, [r4, #4]
 8001fb2:	2d00      	cmp	r5, #0
 8001fb4:	60a5      	str	r5, [r4, #8]
 8001fb6:	f2c0 8095 	blt.w	80020e4 <_printf_i+0x20c>
 8001fba:	6821      	ldr	r1, [r4, #0]
 8001fbc:	f021 0104 	bic.w	r1, r1, #4
 8001fc0:	6021      	str	r1, [r4, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13d      	bne.n	8002042 <_printf_i+0x16a>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	f040 808e 	bne.w	80020e8 <_printf_i+0x210>
 8001fcc:	4665      	mov	r5, ip
 8001fce:	2a08      	cmp	r2, #8
 8001fd0:	d10b      	bne.n	8001fea <_printf_i+0x112>
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	07db      	lsls	r3, r3, #31
 8001fd6:	d508      	bpl.n	8001fea <_printf_i+0x112>
 8001fd8:	6923      	ldr	r3, [r4, #16]
 8001fda:	6862      	ldr	r2, [r4, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	bfde      	ittt	le
 8001fe0:	2330      	movle	r3, #48	; 0x30
 8001fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fea:	ebac 0305 	sub.w	r3, ip, r5
 8001fee:	6123      	str	r3, [r4, #16]
 8001ff0:	f8cd 8000 	str.w	r8, [sp]
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	aa03      	add	r2, sp, #12
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	f7ff fef6 	bl	8001dec <_printf_common>
 8002000:	3001      	adds	r0, #1
 8002002:	d14d      	bne.n	80020a0 <_printf_i+0x1c8>
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	b005      	add	sp, #20
 800200a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800200e:	4839      	ldr	r0, [pc, #228]	; (80020f4 <_printf_i+0x21c>)
 8002010:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	6821      	ldr	r1, [r4, #0]
 8002018:	1d1d      	adds	r5, r3, #4
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6015      	str	r5, [r2, #0]
 800201e:	060a      	lsls	r2, r1, #24
 8002020:	d50b      	bpl.n	800203a <_printf_i+0x162>
 8002022:	07ca      	lsls	r2, r1, #31
 8002024:	bf44      	itt	mi
 8002026:	f041 0120 	orrmi.w	r1, r1, #32
 800202a:	6021      	strmi	r1, [r4, #0]
 800202c:	b91b      	cbnz	r3, 8002036 <_printf_i+0x15e>
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	f022 0220 	bic.w	r2, r2, #32
 8002034:	6022      	str	r2, [r4, #0]
 8002036:	2210      	movs	r2, #16
 8002038:	e7b7      	b.n	8001faa <_printf_i+0xd2>
 800203a:	064d      	lsls	r5, r1, #25
 800203c:	bf48      	it	mi
 800203e:	b29b      	uxthmi	r3, r3
 8002040:	e7ef      	b.n	8002022 <_printf_i+0x14a>
 8002042:	4665      	mov	r5, ip
 8002044:	fbb3 f1f2 	udiv	r1, r3, r2
 8002048:	fb02 3311 	mls	r3, r2, r1, r3
 800204c:	5cc3      	ldrb	r3, [r0, r3]
 800204e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002052:	460b      	mov	r3, r1
 8002054:	2900      	cmp	r1, #0
 8002056:	d1f5      	bne.n	8002044 <_printf_i+0x16c>
 8002058:	e7b9      	b.n	8001fce <_printf_i+0xf6>
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	6825      	ldr	r5, [r4, #0]
 800205e:	1d18      	adds	r0, r3, #4
 8002060:	6961      	ldr	r1, [r4, #20]
 8002062:	6010      	str	r0, [r2, #0]
 8002064:	0628      	lsls	r0, r5, #24
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	d501      	bpl.n	800206e <_printf_i+0x196>
 800206a:	6019      	str	r1, [r3, #0]
 800206c:	e002      	b.n	8002074 <_printf_i+0x19c>
 800206e:	066a      	lsls	r2, r5, #25
 8002070:	d5fb      	bpl.n	800206a <_printf_i+0x192>
 8002072:	8019      	strh	r1, [r3, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	4665      	mov	r5, ip
 8002078:	6123      	str	r3, [r4, #16]
 800207a:	e7b9      	b.n	8001ff0 <_printf_i+0x118>
 800207c:	6813      	ldr	r3, [r2, #0]
 800207e:	1d19      	adds	r1, r3, #4
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	681d      	ldr	r5, [r3, #0]
 8002084:	6862      	ldr	r2, [r4, #4]
 8002086:	2100      	movs	r1, #0
 8002088:	4628      	mov	r0, r5
 800208a:	f000 f837 	bl	80020fc <memchr>
 800208e:	b108      	cbz	r0, 8002094 <_printf_i+0x1bc>
 8002090:	1b40      	subs	r0, r0, r5
 8002092:	6060      	str	r0, [r4, #4]
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	6123      	str	r3, [r4, #16]
 8002098:	2300      	movs	r3, #0
 800209a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800209e:	e7a7      	b.n	8001ff0 <_printf_i+0x118>
 80020a0:	6923      	ldr	r3, [r4, #16]
 80020a2:	462a      	mov	r2, r5
 80020a4:	4639      	mov	r1, r7
 80020a6:	4630      	mov	r0, r6
 80020a8:	47c0      	blx	r8
 80020aa:	3001      	adds	r0, #1
 80020ac:	d0aa      	beq.n	8002004 <_printf_i+0x12c>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	079b      	lsls	r3, r3, #30
 80020b2:	d413      	bmi.n	80020dc <_printf_i+0x204>
 80020b4:	68e0      	ldr	r0, [r4, #12]
 80020b6:	9b03      	ldr	r3, [sp, #12]
 80020b8:	4298      	cmp	r0, r3
 80020ba:	bfb8      	it	lt
 80020bc:	4618      	movlt	r0, r3
 80020be:	e7a3      	b.n	8002008 <_printf_i+0x130>
 80020c0:	2301      	movs	r3, #1
 80020c2:	464a      	mov	r2, r9
 80020c4:	4639      	mov	r1, r7
 80020c6:	4630      	mov	r0, r6
 80020c8:	47c0      	blx	r8
 80020ca:	3001      	adds	r0, #1
 80020cc:	d09a      	beq.n	8002004 <_printf_i+0x12c>
 80020ce:	3501      	adds	r5, #1
 80020d0:	68e3      	ldr	r3, [r4, #12]
 80020d2:	9a03      	ldr	r2, [sp, #12]
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	42ab      	cmp	r3, r5
 80020d8:	dcf2      	bgt.n	80020c0 <_printf_i+0x1e8>
 80020da:	e7eb      	b.n	80020b4 <_printf_i+0x1dc>
 80020dc:	2500      	movs	r5, #0
 80020de:	f104 0919 	add.w	r9, r4, #25
 80020e2:	e7f5      	b.n	80020d0 <_printf_i+0x1f8>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ac      	bne.n	8002042 <_printf_i+0x16a>
 80020e8:	7803      	ldrb	r3, [r0, #0]
 80020ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020f2:	e76c      	b.n	8001fce <_printf_i+0xf6>
 80020f4:	08002d74 	.word	0x08002d74
 80020f8:	08002d85 	.word	0x08002d85

080020fc <memchr>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	b2c9      	uxtb	r1, r1
 8002100:	4402      	add	r2, r0
 8002102:	4290      	cmp	r0, r2
 8002104:	4603      	mov	r3, r0
 8002106:	d101      	bne.n	800210c <memchr+0x10>
 8002108:	2300      	movs	r3, #0
 800210a:	e003      	b.n	8002114 <memchr+0x18>
 800210c:	781c      	ldrb	r4, [r3, #0]
 800210e:	3001      	adds	r0, #1
 8002110:	428c      	cmp	r4, r1
 8002112:	d1f6      	bne.n	8002102 <memchr+0x6>
 8002114:	4618      	mov	r0, r3
 8002116:	bd10      	pop	{r4, pc}

08002118 <memmove>:
 8002118:	4288      	cmp	r0, r1
 800211a:	b510      	push	{r4, lr}
 800211c:	eb01 0302 	add.w	r3, r1, r2
 8002120:	d807      	bhi.n	8002132 <memmove+0x1a>
 8002122:	1e42      	subs	r2, r0, #1
 8002124:	4299      	cmp	r1, r3
 8002126:	d00a      	beq.n	800213e <memmove+0x26>
 8002128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800212c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002130:	e7f8      	b.n	8002124 <memmove+0xc>
 8002132:	4283      	cmp	r3, r0
 8002134:	d9f5      	bls.n	8002122 <memmove+0xa>
 8002136:	1881      	adds	r1, r0, r2
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	42d3      	cmn	r3, r2
 800213c:	d100      	bne.n	8002140 <memmove+0x28>
 800213e:	bd10      	pop	{r4, pc}
 8002140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002144:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002148:	e7f7      	b.n	800213a <memmove+0x22>
	...

0800214c <_free_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4605      	mov	r5, r0
 8002150:	2900      	cmp	r1, #0
 8002152:	d043      	beq.n	80021dc <_free_r+0x90>
 8002154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002158:	1f0c      	subs	r4, r1, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	bfb8      	it	lt
 800215e:	18e4      	addlt	r4, r4, r3
 8002160:	f000 f8d0 	bl	8002304 <__malloc_lock>
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <_free_r+0x94>)
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	4610      	mov	r0, r2
 800216a:	b933      	cbnz	r3, 800217a <_free_r+0x2e>
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	6014      	str	r4, [r2, #0]
 8002170:	4628      	mov	r0, r5
 8002172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002176:	f000 b8c6 	b.w	8002306 <__malloc_unlock>
 800217a:	42a3      	cmp	r3, r4
 800217c:	d90b      	bls.n	8002196 <_free_r+0x4a>
 800217e:	6821      	ldr	r1, [r4, #0]
 8002180:	1862      	adds	r2, r4, r1
 8002182:	4293      	cmp	r3, r2
 8002184:	bf01      	itttt	eq
 8002186:	681a      	ldreq	r2, [r3, #0]
 8002188:	685b      	ldreq	r3, [r3, #4]
 800218a:	1852      	addeq	r2, r2, r1
 800218c:	6022      	streq	r2, [r4, #0]
 800218e:	6063      	str	r3, [r4, #4]
 8002190:	6004      	str	r4, [r0, #0]
 8002192:	e7ed      	b.n	8002170 <_free_r+0x24>
 8002194:	4613      	mov	r3, r2
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	b10a      	cbz	r2, 800219e <_free_r+0x52>
 800219a:	42a2      	cmp	r2, r4
 800219c:	d9fa      	bls.n	8002194 <_free_r+0x48>
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	1858      	adds	r0, r3, r1
 80021a2:	42a0      	cmp	r0, r4
 80021a4:	d10b      	bne.n	80021be <_free_r+0x72>
 80021a6:	6820      	ldr	r0, [r4, #0]
 80021a8:	4401      	add	r1, r0
 80021aa:	1858      	adds	r0, r3, r1
 80021ac:	4282      	cmp	r2, r0
 80021ae:	6019      	str	r1, [r3, #0]
 80021b0:	d1de      	bne.n	8002170 <_free_r+0x24>
 80021b2:	6810      	ldr	r0, [r2, #0]
 80021b4:	6852      	ldr	r2, [r2, #4]
 80021b6:	4401      	add	r1, r0
 80021b8:	6019      	str	r1, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	e7d8      	b.n	8002170 <_free_r+0x24>
 80021be:	d902      	bls.n	80021c6 <_free_r+0x7a>
 80021c0:	230c      	movs	r3, #12
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	e7d4      	b.n	8002170 <_free_r+0x24>
 80021c6:	6820      	ldr	r0, [r4, #0]
 80021c8:	1821      	adds	r1, r4, r0
 80021ca:	428a      	cmp	r2, r1
 80021cc:	bf01      	itttt	eq
 80021ce:	6811      	ldreq	r1, [r2, #0]
 80021d0:	6852      	ldreq	r2, [r2, #4]
 80021d2:	1809      	addeq	r1, r1, r0
 80021d4:	6021      	streq	r1, [r4, #0]
 80021d6:	6062      	str	r2, [r4, #4]
 80021d8:	605c      	str	r4, [r3, #4]
 80021da:	e7c9      	b.n	8002170 <_free_r+0x24>
 80021dc:	bd38      	pop	{r3, r4, r5, pc}
 80021de:	bf00      	nop
 80021e0:	20000de8 	.word	0x20000de8

080021e4 <_malloc_r>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	1ccd      	adds	r5, r1, #3
 80021e8:	f025 0503 	bic.w	r5, r5, #3
 80021ec:	3508      	adds	r5, #8
 80021ee:	2d0c      	cmp	r5, #12
 80021f0:	bf38      	it	cc
 80021f2:	250c      	movcc	r5, #12
 80021f4:	2d00      	cmp	r5, #0
 80021f6:	4606      	mov	r6, r0
 80021f8:	db01      	blt.n	80021fe <_malloc_r+0x1a>
 80021fa:	42a9      	cmp	r1, r5
 80021fc:	d903      	bls.n	8002206 <_malloc_r+0x22>
 80021fe:	230c      	movs	r3, #12
 8002200:	6033      	str	r3, [r6, #0]
 8002202:	2000      	movs	r0, #0
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	f000 f87d 	bl	8002304 <__malloc_lock>
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <_malloc_r+0xac>)
 800220c:	6814      	ldr	r4, [r2, #0]
 800220e:	4621      	mov	r1, r4
 8002210:	b991      	cbnz	r1, 8002238 <_malloc_r+0x54>
 8002212:	4c20      	ldr	r4, [pc, #128]	; (8002294 <_malloc_r+0xb0>)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	b91b      	cbnz	r3, 8002220 <_malloc_r+0x3c>
 8002218:	4630      	mov	r0, r6
 800221a:	f000 f863 	bl	80022e4 <_sbrk_r>
 800221e:	6020      	str	r0, [r4, #0]
 8002220:	4629      	mov	r1, r5
 8002222:	4630      	mov	r0, r6
 8002224:	f000 f85e 	bl	80022e4 <_sbrk_r>
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	d124      	bne.n	8002276 <_malloc_r+0x92>
 800222c:	230c      	movs	r3, #12
 800222e:	4630      	mov	r0, r6
 8002230:	6033      	str	r3, [r6, #0]
 8002232:	f000 f868 	bl	8002306 <__malloc_unlock>
 8002236:	e7e4      	b.n	8002202 <_malloc_r+0x1e>
 8002238:	680b      	ldr	r3, [r1, #0]
 800223a:	1b5b      	subs	r3, r3, r5
 800223c:	d418      	bmi.n	8002270 <_malloc_r+0x8c>
 800223e:	2b0b      	cmp	r3, #11
 8002240:	d90f      	bls.n	8002262 <_malloc_r+0x7e>
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	18cc      	adds	r4, r1, r3
 8002246:	50cd      	str	r5, [r1, r3]
 8002248:	4630      	mov	r0, r6
 800224a:	f000 f85c 	bl	8002306 <__malloc_unlock>
 800224e:	f104 000b 	add.w	r0, r4, #11
 8002252:	1d23      	adds	r3, r4, #4
 8002254:	f020 0007 	bic.w	r0, r0, #7
 8002258:	1ac3      	subs	r3, r0, r3
 800225a:	d0d3      	beq.n	8002204 <_malloc_r+0x20>
 800225c:	425a      	negs	r2, r3
 800225e:	50e2      	str	r2, [r4, r3]
 8002260:	e7d0      	b.n	8002204 <_malloc_r+0x20>
 8002262:	684b      	ldr	r3, [r1, #4]
 8002264:	428c      	cmp	r4, r1
 8002266:	bf16      	itet	ne
 8002268:	6063      	strne	r3, [r4, #4]
 800226a:	6013      	streq	r3, [r2, #0]
 800226c:	460c      	movne	r4, r1
 800226e:	e7eb      	b.n	8002248 <_malloc_r+0x64>
 8002270:	460c      	mov	r4, r1
 8002272:	6849      	ldr	r1, [r1, #4]
 8002274:	e7cc      	b.n	8002210 <_malloc_r+0x2c>
 8002276:	1cc4      	adds	r4, r0, #3
 8002278:	f024 0403 	bic.w	r4, r4, #3
 800227c:	42a0      	cmp	r0, r4
 800227e:	d005      	beq.n	800228c <_malloc_r+0xa8>
 8002280:	1a21      	subs	r1, r4, r0
 8002282:	4630      	mov	r0, r6
 8002284:	f000 f82e 	bl	80022e4 <_sbrk_r>
 8002288:	3001      	adds	r0, #1
 800228a:	d0cf      	beq.n	800222c <_malloc_r+0x48>
 800228c:	6025      	str	r5, [r4, #0]
 800228e:	e7db      	b.n	8002248 <_malloc_r+0x64>
 8002290:	20000de8 	.word	0x20000de8
 8002294:	20000dec 	.word	0x20000dec

08002298 <_realloc_r>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	4607      	mov	r7, r0
 800229c:	4614      	mov	r4, r2
 800229e:	460e      	mov	r6, r1
 80022a0:	b921      	cbnz	r1, 80022ac <_realloc_r+0x14>
 80022a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022a6:	4611      	mov	r1, r2
 80022a8:	f7ff bf9c 	b.w	80021e4 <_malloc_r>
 80022ac:	b922      	cbnz	r2, 80022b8 <_realloc_r+0x20>
 80022ae:	f7ff ff4d 	bl	800214c <_free_r>
 80022b2:	4625      	mov	r5, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b8:	f000 f826 	bl	8002308 <_malloc_usable_size_r>
 80022bc:	42a0      	cmp	r0, r4
 80022be:	d20f      	bcs.n	80022e0 <_realloc_r+0x48>
 80022c0:	4621      	mov	r1, r4
 80022c2:	4638      	mov	r0, r7
 80022c4:	f7ff ff8e 	bl	80021e4 <_malloc_r>
 80022c8:	4605      	mov	r5, r0
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d0f2      	beq.n	80022b4 <_realloc_r+0x1c>
 80022ce:	4631      	mov	r1, r6
 80022d0:	4622      	mov	r2, r4
 80022d2:	f7ff fbe3 	bl	8001a9c <memcpy>
 80022d6:	4631      	mov	r1, r6
 80022d8:	4638      	mov	r0, r7
 80022da:	f7ff ff37 	bl	800214c <_free_r>
 80022de:	e7e9      	b.n	80022b4 <_realloc_r+0x1c>
 80022e0:	4635      	mov	r5, r6
 80022e2:	e7e7      	b.n	80022b4 <_realloc_r+0x1c>

080022e4 <_sbrk_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	2300      	movs	r3, #0
 80022e8:	4c05      	ldr	r4, [pc, #20]	; (8002300 <_sbrk_r+0x1c>)
 80022ea:	4605      	mov	r5, r0
 80022ec:	4608      	mov	r0, r1
 80022ee:	6023      	str	r3, [r4, #0]
 80022f0:	f7fe fc9e 	bl	8000c30 <_sbrk>
 80022f4:	1c43      	adds	r3, r0, #1
 80022f6:	d102      	bne.n	80022fe <_sbrk_r+0x1a>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	b103      	cbz	r3, 80022fe <_sbrk_r+0x1a>
 80022fc:	602b      	str	r3, [r5, #0]
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	20000e78 	.word	0x20000e78

08002304 <__malloc_lock>:
 8002304:	4770      	bx	lr

08002306 <__malloc_unlock>:
 8002306:	4770      	bx	lr

08002308 <_malloc_usable_size_r>:
 8002308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800230c:	1f18      	subs	r0, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	bfbc      	itt	lt
 8002312:	580b      	ldrlt	r3, [r1, r0]
 8002314:	18c0      	addlt	r0, r0, r3
 8002316:	4770      	bx	lr

08002318 <_init>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr

08002324 <_fini>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr
