
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000668  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000840  08000840  00010848  2**0
                  CONTENTS
  4 .ARM          00000000  08000840  08000840  00010848  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000840  08000848  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000840  08000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000844  08000844  00010844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000000  08000848  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000848  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003251  00000000  00000000  00010871  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000932  00000000  00000000  00013ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  000143f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00014558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000628  00000000  00000000  00014670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ac7  00000000  00000000  00014c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057624  00000000  00000000  0001675f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006dd83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000470  00000000  00000000  0006de00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000780 	.word	0x08000780

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000780 	.word	0x08000780

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:

}


void toggle_led()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001b5 	.word	0x200001b5
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 f945 	bl	8000468 <write_usart2>

}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	08000798 	.word	0x08000798

080001ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/



int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80001f2:	f000 f889 	bl	8000308 <init_usart2>
	init_usart1(); // for ESP8266
 80001f6:	f000 f8bb 	bl	8000370 <init_usart1>
	//write_usart1((uint8_t*)AT_COMMAND); // WRITE TEST COMAND

	while(1)
	{
		//write_usart2((uint8_t*)MSG);//Used only when Testing USART2 without sensor
		write_usart1((uint8_t*)AT_COMMAND); // WRITE TEST COMAND
 80001fa:	4807      	ldr	r0, [pc, #28]	; (8000218 <main+0x2c>)
 80001fc:	f000 f970 	bl	80004e0 <write_usart1>
		uint32_t found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <main+0x30>)
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <main+0x34>)
 8000204:	f000 f9dc 	bl	80005c0 <search_usart1_buffer_Rx>
 8000208:	6078      	str	r0, [r7, #4]
		if(found)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f4      	beq.n	80001fa <main+0xe>
		{
			write_usart2((uint8_t*)"TEST PASSED\r\n");
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <main+0x38>)
 8000212:	f000 f929 	bl	8000468 <write_usart2>
	{
 8000216:	e7f0      	b.n	80001fa <main+0xe>
 8000218:	08000818 	.word	0x08000818
 800021c:	08000820 	.word	0x08000820
 8000220:	08000828 	.word	0x08000828
 8000224:	08000830 	.word	0x08000830

08000228 <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f003 0307 	and.w	r3, r3, #7
 8000242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000250:	4013      	ands	r3, r2
 8000252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000266:	4a04      	ldr	r2, [pc, #16]	; (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db0b      	blt.n	80002a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 021f 	and.w	r2, r3, #31
 8000294:	4906      	ldr	r1, [pc, #24]	; (80002b0 <__NVIC_EnableIRQ+0x34>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	095b      	lsrs	r3, r3, #5
 800029c:	2001      	movs	r0, #1
 800029e:	fa00 f202 	lsl.w	r2, r0, r2
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0112      	lsls	r2, r2, #4
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0112      	lsls	r2, r2, #4
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <init_usart2+0x5c>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <init_usart2+0x5c>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <init_usart2+0x60>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <init_usart2+0x60>)
 800031e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000322:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <init_usart2+0x60>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <init_usart2+0x60>)
 800032a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800032e:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <init_usart2+0x5c>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <init_usart2+0x5c>)
 8000336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033a:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <init_usart2+0x64>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a0a      	ldr	r2, [pc, #40]	; (800036c <init_usart2+0x64>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000346:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <init_usart2+0x64>)
 800034a:	f240 324d 	movw	r2, #845	; 0x34d
 800034e:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <init_usart2+0x64>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a05      	ldr	r2, [pc, #20]	; (800036c <init_usart2+0x64>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	40010800 	.word	0x40010800
 800036c:	40004400 	.word	0x40004400

08000370 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <init_usart1+0xb0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a29      	ldr	r2, [pc, #164]	; (8000420 <init_usart1+0xb0>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <init_usart1+0xb4>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a27      	ldr	r2, [pc, #156]	; (8000424 <init_usart1+0xb4>)
 8000386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800038a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 800038c:	4b25      	ldr	r3, [pc, #148]	; (8000424 <init_usart1+0xb4>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a24      	ldr	r2, [pc, #144]	; (8000424 <init_usart1+0xb4>)
 8000392:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000396:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <init_usart1+0xb4>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a21      	ldr	r2, [pc, #132]	; (8000424 <init_usart1+0xb4>)
 800039e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003a2:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <init_usart1+0xb4>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a1e      	ldr	r2, [pc, #120]	; (8000424 <init_usart1+0xb4>)
 80003aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ae:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <init_usart1+0xb4>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <init_usart1+0xb4>)
 80003b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ba:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <init_usart1+0xb0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a17      	ldr	r2, [pc, #92]	; (8000420 <init_usart1+0xb0>)
 80003c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c6:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <init_usart1+0xb8>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <init_usart1+0xb8>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <init_usart1+0xb8>)
 80003d6:	2245      	movs	r2, #69	; 0x45
 80003d8:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <init_usart1+0xb8>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <init_usart1+0xb8>)
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 80003e6:	f000 f8d5 	bl	8000594 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <init_usart1+0xb8>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <init_usart1+0xb8>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f6:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <init_usart1+0xb8>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <init_usart1+0xb8>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000404:	2007      	movs	r0, #7
 8000406:	f7ff ff15 	bl	8000234 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800040a:	2100      	movs	r1, #0
 800040c:	2025      	movs	r0, #37	; 0x25
 800040e:	f7ff ff51 	bl	80002b4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8000412:	2025      	movs	r0, #37	; 0x25
 8000414:	f7ff ff32 	bl	800027c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000418:	b662      	cpsie	i
	__enable_irq();

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800
 8000428:	40013800 	.word	0x40013800

0800042c <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	2100      	movs	r1, #0
 8000438:	480a      	ldr	r0, [pc, #40]	; (8000464 <set_usart2_buffer_Tx+0x38>)
 800043a:	f000 f977 	bl	800072c <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <set_usart2_buffer_Tx+0x38>)
 8000442:	f000 f97b 	bl	800073c <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff fe92 	bl	8000170 <strlen>
 800044c:	4602      	mov	r2, r0
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <set_usart2_buffer_Tx+0x38>)
 8000450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	usart2.write_index = 0;
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <set_usart2_buffer_Tx+0x38>)
 8000456:	2200      	movs	r2, #0
 8000458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000001c 	.word	0x2000001c

08000468 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f7ff ffdb 	bl	800042c <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 8000476:	e014      	b.n	80004a2 <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000478:	bf00      	nop
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <write_usart2+0x70>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f9      	beq.n	800047a <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <write_usart2+0x74>)
 8000488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <write_usart2+0x74>)
 800048e:	5cd2      	ldrb	r2, [r2, r3]
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <write_usart2+0x70>)
 8000492:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <write_usart2+0x74>)
 8000496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800049a:	3301      	adds	r3, #1
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <write_usart2+0x74>)
 800049e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	while(usart2.write_index < usart2.Tx_len)
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <write_usart2+0x74>)
 80004a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <write_usart2+0x74>)
 80004aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d3e2      	bcc.n	8000478 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80004b2:	bf00      	nop
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <write_usart2+0x70>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004bc:	2b40      	cmp	r3, #64	; 0x40
 80004be:	d1f9      	bne.n	80004b4 <write_usart2+0x4c>
	usart2.write_index = 0;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <write_usart2+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	usart2.Tx_len = 0;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <write_usart2+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40004400 	.word	0x40004400
 80004dc:	2000001c 	.word	0x2000001c

080004e0 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f835 	bl	8000558 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 80004ee:	e014      	b.n	800051a <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80004f0:	bf00      	nop
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <write_usart1+0x70>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <write_usart1+0x74>)
 8000500:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000504:	4a13      	ldr	r2, [pc, #76]	; (8000554 <write_usart1+0x74>)
 8000506:	5cd2      	ldrb	r2, [r2, r3]
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <write_usart1+0x70>)
 800050a:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <write_usart1+0x74>)
 800050e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000512:	3301      	adds	r3, #1
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <write_usart1+0x74>)
 8000516:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	while(usart1.write_index < usart1.Tx_len)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <write_usart1+0x74>)
 800051c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <write_usart1+0x74>)
 8000522:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000526:	429a      	cmp	r2, r3
 8000528:	d3e2      	bcc.n	80004f0 <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800052a:	bf00      	nop
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <write_usart1+0x70>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000534:	2b40      	cmp	r3, #64	; 0x40
 8000536:	d1f9      	bne.n	800052c <write_usart1+0x4c>
	usart1.write_index = 0;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <write_usart1+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	usart1.Tx_len = 0;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <write_usart1+0x74>)
 8000542:	2200      	movs	r2, #0
 8000544:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013800 	.word	0x40013800
 8000554:	200000a4 	.word	0x200000a4

08000558 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	2100      	movs	r1, #0
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <set_usart1_buffer_Tx+0x38>)
 8000566:	f000 f8e1 	bl	800072c <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <set_usart1_buffer_Tx+0x38>)
 800056e:	f000 f8e5 	bl	800073c <strcpy>
		usart1.Tx_len = strlen((char*)command);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff fdfc 	bl	8000170 <strlen>
 8000578:	4602      	mov	r2, r0
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <set_usart1_buffer_Tx+0x38>)
 800057c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
	usart1.write_index = 0;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <set_usart1_buffer_Tx+0x38>)
 8000582:	2200      	movs	r2, #0
 8000584:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000a4 	.word	0x200000a4

08000594 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	2100      	movs	r1, #0
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <set_usart1_buffer_Rx+0x24>)
 800059e:	f000 f8c5 	bl	800072c <memset>
	usart1.Rx_len = 0;
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <set_usart1_buffer_Rx+0x28>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	usart1.read_index = 0;
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <set_usart1_buffer_Rx+0x28>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000124 	.word	0x20000124
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <search_usart1_buffer_Rx>:


uint32_t search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <search_usart1_buffer_Rx+0x5c>)
 80005cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80005d0:	3301      	adds	r3, #1
 80005d2:	2b7f      	cmp	r3, #127	; 0x7f
 80005d4:	d81d      	bhi.n	8000612 <search_usart1_buffer_Rx+0x52>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4811      	ldr	r0, [pc, #68]	; (8000620 <search_usart1_buffer_Rx+0x60>)
 80005da:	f000 f8b7 	bl	800074c <strstr>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d006      	beq.n	80005f2 <search_usart1_buffer_Rx+0x32>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 80005e4:	480e      	ldr	r0, [pc, #56]	; (8000620 <search_usart1_buffer_Rx+0x60>)
 80005e6:	f7ff ff3f 	bl	8000468 <write_usart2>
			set_usart1_buffer_Rx();
 80005ea:	f7ff ffd3 	bl	8000594 <set_usart1_buffer_Rx>
			return (uint32_t)1; //TRUE
 80005ee:	2301      	movs	r3, #1
 80005f0:	e010      	b.n	8000614 <search_usart1_buffer_Rx+0x54>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 80005f2:	6839      	ldr	r1, [r7, #0]
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <search_usart1_buffer_Rx+0x60>)
 80005f6:	f000 f8a9 	bl	800074c <strstr>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <search_usart1_buffer_Rx+0x4e>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <search_usart1_buffer_Rx+0x60>)
 8000602:	f7ff ff31 	bl	8000468 <write_usart2>
			set_usart1_buffer_Rx();
 8000606:	f7ff ffc5 	bl	8000594 <set_usart1_buffer_Rx>
			return (uint32_t)0; //FALSE
 800060a:	2300      	movs	r3, #0
 800060c:	e002      	b.n	8000614 <search_usart1_buffer_Rx+0x54>
		}
		else{
			return (uint32_t)0; //FALSE
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <search_usart1_buffer_Rx+0x54>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start chaeck from end??*/
		return (uint32_t)0; //FALSE
 8000612:	2300      	movs	r3, #0
	}

}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000a4 	.word	0x200000a4
 8000620:	20000124 	.word	0x20000124

08000624 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <USART1_IRQHandler+0x60>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	2b20      	cmp	r3, #32
 8000632:	d122      	bne.n	800067a <USART1_IRQHandler+0x56>

		c = USART1->DR; //This clear RXNE bit
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <USART1_IRQHandler+0x60>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <USART1_IRQHandler+0x64>)
 800063c:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <USART1_IRQHandler+0x68>)
 8000640:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000644:	3301      	adds	r3, #1
 8000646:	2b7f      	cmp	r3, #127	; 0x7f
 8000648:	d817      	bhi.n	800067a <USART1_IRQHandler+0x56>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <USART1_IRQHandler+0x68>)
 800064c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <USART1_IRQHandler+0x64>)
 8000652:	7811      	ldrb	r1, [r2, #0]
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <USART1_IRQHandler+0x68>)
 8000656:	4413      	add	r3, r2
 8000658:	460a      	mov	r2, r1
 800065a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			usart1.read_index++;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <USART1_IRQHandler+0x68>)
 8000660:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000664:	3301      	adds	r3, #1
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <USART1_IRQHandler+0x68>)
 8000668:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
			usart1.Rx_len++;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <USART1_IRQHandler+0x68>)
 800066e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000672:	3301      	adds	r3, #1
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <USART1_IRQHandler+0x68>)
 8000676:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			//!TODO: Restart index
		}
	}


}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40013800 	.word	0x40013800
 8000688:	200001b4 	.word	0x200001b4
 800068c:	200000a4 	.word	0x200000a4

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0b      	ldr	r4, [pc, #44]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ba:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006be:	f000 f811 	bl	80006e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd93 	bl	80001ec <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006d4:	08000848 	.word	0x08000848
  ldr r2, =_sbss
 80006d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006dc:	200001b8 	.word	0x200001b8

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <__libc_init_array>:
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	2500      	movs	r5, #0
 80006e8:	4e0c      	ldr	r6, [pc, #48]	; (800071c <__libc_init_array+0x38>)
 80006ea:	4c0d      	ldr	r4, [pc, #52]	; (8000720 <__libc_init_array+0x3c>)
 80006ec:	1ba4      	subs	r4, r4, r6
 80006ee:	10a4      	asrs	r4, r4, #2
 80006f0:	42a5      	cmp	r5, r4
 80006f2:	d109      	bne.n	8000708 <__libc_init_array+0x24>
 80006f4:	f000 f844 	bl	8000780 <_init>
 80006f8:	2500      	movs	r5, #0
 80006fa:	4e0a      	ldr	r6, [pc, #40]	; (8000724 <__libc_init_array+0x40>)
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <__libc_init_array+0x44>)
 80006fe:	1ba4      	subs	r4, r4, r6
 8000700:	10a4      	asrs	r4, r4, #2
 8000702:	42a5      	cmp	r5, r4
 8000704:	d105      	bne.n	8000712 <__libc_init_array+0x2e>
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800070c:	4798      	blx	r3
 800070e:	3501      	adds	r5, #1
 8000710:	e7ee      	b.n	80006f0 <__libc_init_array+0xc>
 8000712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000716:	4798      	blx	r3
 8000718:	3501      	adds	r5, #1
 800071a:	e7f2      	b.n	8000702 <__libc_init_array+0x1e>
 800071c:	08000840 	.word	0x08000840
 8000720:	08000840 	.word	0x08000840
 8000724:	08000840 	.word	0x08000840
 8000728:	08000844 	.word	0x08000844

0800072c <memset>:
 800072c:	4603      	mov	r3, r0
 800072e:	4402      	add	r2, r0
 8000730:	4293      	cmp	r3, r2
 8000732:	d100      	bne.n	8000736 <memset+0xa>
 8000734:	4770      	bx	lr
 8000736:	f803 1b01 	strb.w	r1, [r3], #1
 800073a:	e7f9      	b.n	8000730 <memset+0x4>

0800073c <strcpy>:
 800073c:	4603      	mov	r3, r0
 800073e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000742:	f803 2b01 	strb.w	r2, [r3], #1
 8000746:	2a00      	cmp	r2, #0
 8000748:	d1f9      	bne.n	800073e <strcpy+0x2>
 800074a:	4770      	bx	lr

0800074c <strstr>:
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	7803      	ldrb	r3, [r0, #0]
 8000750:	b17b      	cbz	r3, 8000772 <strstr+0x26>
 8000752:	4604      	mov	r4, r0
 8000754:	7823      	ldrb	r3, [r4, #0]
 8000756:	4620      	mov	r0, r4
 8000758:	1c66      	adds	r6, r4, #1
 800075a:	b17b      	cbz	r3, 800077c <strstr+0x30>
 800075c:	1e4a      	subs	r2, r1, #1
 800075e:	1e63      	subs	r3, r4, #1
 8000760:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8000764:	b14d      	cbz	r5, 800077a <strstr+0x2e>
 8000766:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800076a:	4634      	mov	r4, r6
 800076c:	42af      	cmp	r7, r5
 800076e:	d0f7      	beq.n	8000760 <strstr+0x14>
 8000770:	e7f0      	b.n	8000754 <strstr+0x8>
 8000772:	780b      	ldrb	r3, [r1, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf18      	it	ne
 8000778:	2000      	movne	r0, #0
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077c:	4618      	mov	r0, r3
 800077e:	e7fc      	b.n	800077a <strstr+0x2e>

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
