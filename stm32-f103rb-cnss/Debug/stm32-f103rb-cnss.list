
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000980  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08000ab0  08000ab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b74  08000b74  00010b7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b74  08000b74  00010b7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b74  08000b7c  00010b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b74  08000b74  00010b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b78  08000b78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000000  08000b7c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08000b7c  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044ad  00000000  00000000  00010ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bb4  00000000  00000000  00015052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000218  00000000  00000000  00015c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001c0  00000000  00000000  00015e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000869  00000000  00000000  00015fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000243e  00000000  00000000  00016849  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058afc  00000000  00000000  00018c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00071783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f0  00000000  00000000  00071800  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a98 	.word	0x08000a98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a98 	.word	0x08000a98

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000659 	.word	0x20000659
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 fb7d 	bl	80008d8 <write_usart2>
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	08000ab0 	.word	0x08000ab0

080001ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/
#include "timers.h"


int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80001f0:	f000 fb1e 	bl	8000830 <init_usart2>

	init_timer2();
 80001f4:	f000 f8b4 	bl	8000360 <init_timer2>
	init_timer3();
 80001f8:	f000 f8f8 	bl	80003ec <init_timer3>
	init_timer4();
 80001fc:	f000 f936 	bl	800046c <init_timer4>

	//init_usart1(); // for ESP8266
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000200:	481b      	ldr	r0, [pc, #108]	; (8000270 <main+0x84>)
 8000202:	f000 fb69 	bl	80008d8 <write_usart2>

	//recordAlert();

	while(1)
	{
		delay_with_timer3(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 f9e7 	bl	80005dc <delay_with_timer3>
		write_usart2((uint8_t*)(":)\r\n"));
 800020e:	4819      	ldr	r0, [pc, #100]	; (8000274 <main+0x88>)
 8000210:	f000 fb62 	bl	80008d8 <write_usart2>

		delay_with_timer2(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 f9be 	bl	8000598 <delay_with_timer2>
		write_usart2((uint8_t*)(":|\r\n"));
 800021c:	4816      	ldr	r0, [pc, #88]	; (8000278 <main+0x8c>)
 800021e:	f000 fb5b 	bl	80008d8 <write_usart2>

		delay_with_timer4(1);
 8000222:	2001      	movs	r0, #1
 8000224:	f000 f9fc 	bl	8000620 <delay_with_timer4>
		write_usart2((uint8_t*)(":/\r\n"));
 8000228:	4814      	ldr	r0, [pc, #80]	; (800027c <main+0x90>)
 800022a:	f000 fb55 	bl	80008d8 <write_usart2>

		while(!timeout_with_timer2(1000));
 800022e:	bf00      	nop
 8000230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000234:	f000 fa16 	bl	8000664 <timeout_with_timer2>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f8      	beq.n	8000230 <main+0x44>
		write_usart2((uint8_t*)(":(\r\n"));
 800023e:	4810      	ldr	r0, [pc, #64]	; (8000280 <main+0x94>)
 8000240:	f000 fb4a 	bl	80008d8 <write_usart2>

		while(!timeout_with_timer3(1000));
 8000244:	bf00      	nop
 8000246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024a:	f000 fa2f 	bl	80006ac <timeout_with_timer3>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <main+0x5a>
		write_usart2((uint8_t*)(";)\r\n"));
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x98>)
 8000256:	f000 fb3f 	bl	80008d8 <write_usart2>

		while(!timeout_with_timer4(1));
 800025a:	bf00      	nop
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fa49 	bl	80006f4 <timeout_with_timer4>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f9      	beq.n	800025c <main+0x70>
		write_usart2((uint8_t*)(":D\r\n"));
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <main+0x9c>)
 800026a:	f000 fb35 	bl	80008d8 <write_usart2>
		delay_with_timer3(1000);
 800026e:	e7ca      	b.n	8000206 <main+0x1a>
 8000270:	08000b30 	.word	0x08000b30
 8000274:	08000b44 	.word	0x08000b44
 8000278:	08000b4c 	.word	0x08000b4c
 800027c:	08000b54 	.word	0x08000b54
 8000280:	08000b5c 	.word	0x08000b5c
 8000284:	08000b64 	.word	0x08000b64
 8000288:	08000b6c 	.word	0x08000b6c

0800028c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f003 0307 	and.w	r3, r3, #7
 800029a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <__NVIC_SetPriorityGrouping+0x44>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002be:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <__NVIC_SetPriorityGrouping+0x44>)
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	60d3      	str	r3, [r2, #12]
}
 80002c4:	bf00      	nop
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	db0b      	blt.n	80002fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f003 021f 	and.w	r2, r3, #31
 80002ec:	4906      	ldr	r1, [pc, #24]	; (8000308 <__NVIC_EnableIRQ+0x34>)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	2001      	movs	r0, #1
 80002f6:	fa00 f202 	lsl.w	r2, r0, r2
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100

0800030c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db0a      	blt.n	8000336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	490c      	ldr	r1, [pc, #48]	; (8000358 <__NVIC_SetPriority+0x4c>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	0112      	lsls	r2, r2, #4
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	440b      	add	r3, r1
 8000330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000334:	e00a      	b.n	800034c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <__NVIC_SetPriority+0x50>)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	3b04      	subs	r3, #4
 8000344:	0112      	lsls	r2, r2, #4
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	440b      	add	r3, r1
 800034a:	761a      	strb	r2, [r3, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <init_timer2>:
static TIMER timer2;
static TIMER timer3;
static TIMER timer4;

/*init's timer2 to  interrupt once a milli second when enabled*/
void init_timer2(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <init_timer2+0x84>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <init_timer2+0x84>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 8000370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000374:	2264      	movs	r2, #100	; 0x64
 8000376:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037c:	2250      	movs	r2, #80	; 0x50
 800037e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8000392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80003b2:	2007      	movs	r0, #7
 80003b4:	f7ff ff6a 	bl	800028c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80003b8:	2100      	movs	r1, #0
 80003ba:	201c      	movs	r0, #28
 80003bc:	f7ff ffa6 	bl	800030c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 80003c0:	201c      	movs	r0, #28
 80003c2:	f7ff ff87 	bl	80002d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003c6:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <init_timer2+0x88>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
	timer2.timeout_count = 0;
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <init_timer2+0x88>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
	timer2.delay = FALSE;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <init_timer2+0x88>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	721a      	strb	r2, [r3, #8]
	timer2.timeout = FALSE;
 80003da:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <init_timer2+0x88>)
 80003dc:	2200      	movs	r2, #0
 80003de:	725a      	strb	r2, [r3, #9]

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	2000001c 	.word	0x2000001c

080003ec <init_timer3>:

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <init_timer3+0x74>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	4a1a      	ldr	r2, [pc, #104]	; (8000460 <init_timer3+0x74>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <init_timer3+0x78>)
 80003fe:	2264      	movs	r2, #100	; 0x64
 8000400:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <init_timer3+0x78>)
 8000404:	2250      	movs	r2, #80	; 0x50
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <init_timer3+0x78>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a15      	ldr	r2, [pc, #84]	; (8000464 <init_timer3+0x78>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <init_timer3+0x78>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <init_timer3+0x78>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <init_timer3+0x78>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <init_timer3+0x78>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800042e:	2007      	movs	r0, #7
 8000430:	f7ff ff2c 	bl	800028c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000434:	2100      	movs	r1, #0
 8000436:	201d      	movs	r0, #29
 8000438:	f7ff ff68 	bl	800030c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 800043c:	201d      	movs	r0, #29
 800043e:	f7ff ff49 	bl	80002d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000442:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <init_timer3+0x7c>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
	timer3.timeout_count = 0;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <init_timer3+0x7c>)
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
	timer3.delay = FALSE;
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <init_timer3+0x7c>)
 8000452:	2200      	movs	r2, #0
 8000454:	721a      	strb	r2, [r3, #8]
	timer3.timeout = FALSE;
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <init_timer3+0x7c>)
 8000458:	2200      	movs	r2, #0
 800045a:	725a      	strb	r2, [r3, #9]
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	40000400 	.word	0x40000400
 8000468:	20000028 	.word	0x20000028

0800046c <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <init_timer4+0x78>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <init_timer4+0x78>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 800047c:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <init_timer4+0x7c>)
 800047e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000482:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <init_timer4+0x7c>)
 8000486:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800048a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <init_timer4+0x7c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <init_timer4+0x7c>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <init_timer4+0x7c>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <init_timer4+0x7c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <init_timer4+0x7c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <init_timer4+0x7c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80004b2:	2007      	movs	r0, #7
 80004b4:	f7ff feea 	bl	800028c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80004b8:	2100      	movs	r1, #0
 80004ba:	201e      	movs	r0, #30
 80004bc:	f7ff ff26 	bl	800030c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80004c0:	201e      	movs	r0, #30
 80004c2:	f7ff ff07 	bl	80002d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80004c6:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <init_timer4+0x80>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
	timer4.timeout_count = 0;
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <init_timer4+0x80>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	timer4.delay = FALSE;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <init_timer4+0x80>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	721a      	strb	r2, [r3, #8]
	timer4.timeout = FALSE;
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <init_timer4+0x80>)
 80004dc:	2200      	movs	r2, #0
 80004de:	725a      	strb	r2, [r3, #9]
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40000800 	.word	0x40000800
 80004ec:	20000034 	.word	0x20000034

080004f0 <enable_timer2>:


void enable_timer2(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <enable_timer3>:

void enable_timer3(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <enable_timer3+0x18>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <enable_timer3+0x18>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40000400 	.word	0x40000400

08000528 <enable_timer4>:

void enable_timer4(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <enable_timer4+0x18>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a03      	ldr	r2, [pc, #12]	; (8000540 <enable_timer4+0x18>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40000800 	.word	0x40000800

08000544 <disable_timer2>:


void disable_timer2(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	f023 0301 	bic.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <disable_timer3>:

void disable_timer3(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <disable_timer3+0x18>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <disable_timer3+0x18>)
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40000400 	.word	0x40000400

0800057c <disable_timer4>:

void disable_timer4(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <disable_timer4+0x18>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <disable_timer4+0x18>)
 8000586:	f023 0301 	bic.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40000800 	.word	0x40000800

08000598 <delay_with_timer2>:


void delay_with_timer2(uint32_t num_of_millis)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	enable_timer2();
 80005a0:	f7ff ffa6 	bl	80004f0 <enable_timer2>

	timer2.countTicks = 0;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <delay_with_timer2+0x40>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
	timer2.delay = TRUE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <delay_with_timer2+0x40>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	721a      	strb	r2, [r3, #8]

	while(timer2.countTicks < num_of_millis);
 80005b0:	bf00      	nop
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <delay_with_timer2+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d8fa      	bhi.n	80005b2 <delay_with_timer2+0x1a>

	timer2.delay = FALSE;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <delay_with_timer2+0x40>)
 80005be:	2200      	movs	r2, #0
 80005c0:	721a      	strb	r2, [r3, #8]
	if(!timer2.timeout){
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <delay_with_timer2+0x40>)
 80005c4:	7a5b      	ldrb	r3, [r3, #9]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <delay_with_timer2+0x36>
		disable_timer2();
 80005ca:	f7ff ffbb 	bl	8000544 <disable_timer2>
	}
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000001c 	.word	0x2000001c

080005dc <delay_with_timer3>:

void delay_with_timer3(uint32_t num_of_millis)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	enable_timer3();
 80005e4:	f7ff ff92 	bl	800050c <enable_timer3>

	timer3.countTicks = 0;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <delay_with_timer3+0x40>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
	timer3.delay = TRUE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <delay_with_timer3+0x40>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	721a      	strb	r2, [r3, #8]

	while(timer3.countTicks < num_of_millis);
 80005f4:	bf00      	nop
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <delay_with_timer3+0x40>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8fa      	bhi.n	80005f6 <delay_with_timer3+0x1a>

	timer3.delay = FALSE;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <delay_with_timer3+0x40>)
 8000602:	2200      	movs	r2, #0
 8000604:	721a      	strb	r2, [r3, #8]
	if(!timer3.timeout){
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <delay_with_timer3+0x40>)
 8000608:	7a5b      	ldrb	r3, [r3, #9]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <delay_with_timer3+0x36>
		disable_timer3();
 800060e:	f7ff ffa7 	bl	8000560 <disable_timer3>
	}
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000028 	.word	0x20000028

08000620 <delay_with_timer4>:

void delay_with_timer4(uint32_t num_of_sec)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000628:	f7ff ff7e 	bl	8000528 <enable_timer4>

	timer4.countTicks = 0;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <delay_with_timer4+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	timer4.delay = TRUE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <delay_with_timer4+0x40>)
 8000634:	2201      	movs	r2, #1
 8000636:	721a      	strb	r2, [r3, #8]

	while(timer4.countTicks < num_of_sec);
 8000638:	bf00      	nop
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <delay_with_timer4+0x40>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8fa      	bhi.n	800063a <delay_with_timer4+0x1a>

	timer4.delay = FALSE;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <delay_with_timer4+0x40>)
 8000646:	2200      	movs	r2, #0
 8000648:	721a      	strb	r2, [r3, #8]
	if(!timer4.timeout){
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <delay_with_timer4+0x40>)
 800064c:	7a5b      	ldrb	r3, [r3, #9]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <delay_with_timer4+0x36>
		disable_timer4();
 8000652:	f7ff ff93 	bl	800057c <disable_timer4>
	}
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000034 	.word	0x20000034

08000664 <timeout_with_timer2>:


/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer2(uint32_t num_of_millis)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	enable_timer2();
 800066c:	f7ff ff40 	bl	80004f0 <enable_timer2>

	timer2.timeout = TRUE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <timeout_with_timer2+0x44>)
 8000672:	2201      	movs	r2, #1
 8000674:	725a      	strb	r2, [r3, #9]
	if(timer2.timeout_count >= num_of_millis){
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <timeout_with_timer2+0x44>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	d80d      	bhi.n	800069c <timeout_with_timer2+0x38>
		if(!timer2.delay){
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <timeout_with_timer2+0x44>)
 8000682:	7a1b      	ldrb	r3, [r3, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <timeout_with_timer2+0x28>
			disable_timer2();
 8000688:	f7ff ff5c 	bl	8000544 <disable_timer2>
		}
		timer2.timeout = FALSE;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <timeout_with_timer2+0x44>)
 800068e:	2200      	movs	r2, #0
 8000690:	725a      	strb	r2, [r3, #9]
		timer2.timeout_count = 0;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <timeout_with_timer2+0x44>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000698:	2301      	movs	r3, #1
 800069a:	e000      	b.n	800069e <timeout_with_timer2+0x3a>
	}
	else{
		return FALSE;
 800069c:	2300      	movs	r3, #0
	}
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000001c 	.word	0x2000001c

080006ac <timeout_with_timer3>:

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer3(uint32_t num_of_millis)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	enable_timer3();
 80006b4:	f7ff ff2a 	bl	800050c <enable_timer3>

	timer3.timeout = TRUE;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <timeout_with_timer3+0x44>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	725a      	strb	r2, [r3, #9]
	if(timer3.timeout_count >= num_of_millis){
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <timeout_with_timer3+0x44>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d80d      	bhi.n	80006e4 <timeout_with_timer3+0x38>
		if(!timer3.delay){
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <timeout_with_timer3+0x44>)
 80006ca:	7a1b      	ldrb	r3, [r3, #8]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <timeout_with_timer3+0x28>
			disable_timer3();
 80006d0:	f7ff ff46 	bl	8000560 <disable_timer3>
		}
		timer3.timeout = FALSE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <timeout_with_timer3+0x44>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	725a      	strb	r2, [r3, #9]
		timer3.timeout_count = 0;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <timeout_with_timer3+0x44>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
		return TRUE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <timeout_with_timer3+0x3a>
	}
	else{
		return FALSE;
 80006e4:	2300      	movs	r3, #0
	}

}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028

080006f4 <timeout_with_timer4>:

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	enable_timer4();
 80006fc:	f7ff ff14 	bl	8000528 <enable_timer4>

	timer4.timeout = TRUE;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <timeout_with_timer4+0x44>)
 8000702:	2201      	movs	r2, #1
 8000704:	725a      	strb	r2, [r3, #9]
	if(timer4.timeout_count >= num_of_sec){
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <timeout_with_timer4+0x44>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d80d      	bhi.n	800072c <timeout_with_timer4+0x38>
		if(!timer4.delay){
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <timeout_with_timer4+0x44>)
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <timeout_with_timer4+0x28>
			disable_timer4();
 8000718:	f7ff ff30 	bl	800057c <disable_timer4>
		}
		timer4.timeout = FALSE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <timeout_with_timer4+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	725a      	strb	r2, [r3, #9]
		timer4.timeout_count = 0;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <timeout_with_timer4+0x44>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000728:	2301      	movs	r3, #1
 800072a:	e000      	b.n	800072e <timeout_with_timer4+0x3a>
	}
	else{
		return FALSE;
 800072c:	2300      	movs	r3, #0
	}
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000034 	.word	0x20000034

0800073c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b01      	cmp	r3, #1
 800074c:	d119      	bne.n	8000782 <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <TIM2_IRQHandler+0x50>)
 8000750:	7a1b      	ldrb	r3, [r3, #8]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d104      	bne.n	8000760 <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <TIM2_IRQHandler+0x50>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <TIM2_IRQHandler+0x50>)
 800075e:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <TIM2_IRQHandler+0x50>)
 8000762:	7a5b      	ldrb	r3, [r3, #9]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d104      	bne.n	8000772 <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <TIM2_IRQHandler+0x50>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <TIM2_IRQHandler+0x50>)
 8000770:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 8000772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	6113      	str	r3, [r2, #16]
	}
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2000001c 	.word	0x2000001c

08000790 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <TIM3_IRQHandler+0x48>)
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d117      	bne.n	80007d0 <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007a2:	7a1b      	ldrb	r3, [r3, #8]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d104      	bne.n	80007b2 <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007b0:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007b4:	7a5b      	ldrb	r3, [r3, #9]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d104      	bne.n	80007c4 <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <TIM3_IRQHandler+0x4c>)
 80007c2:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <TIM3_IRQHandler+0x48>)
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <TIM3_IRQHandler+0x48>)
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	6113      	str	r3, [r2, #16]
	}
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40000400 	.word	0x40000400
 80007dc:	20000028 	.word	0x20000028

080007e0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <TIM4_IRQHandler+0x48>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d117      	bne.n	8000820 <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <TIM4_IRQHandler+0x4c>)
 80007f2:	7a1b      	ldrb	r3, [r3, #8]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d104      	bne.n	8000802 <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <TIM4_IRQHandler+0x4c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <TIM4_IRQHandler+0x4c>)
 8000800:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <TIM4_IRQHandler+0x4c>)
 8000804:	7a5b      	ldrb	r3, [r3, #9]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d104      	bne.n	8000814 <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <TIM4_IRQHandler+0x4c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	3301      	adds	r3, #1
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <TIM4_IRQHandler+0x4c>)
 8000812:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <TIM4_IRQHandler+0x48>)
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <TIM4_IRQHandler+0x48>)
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	6113      	str	r3, [r2, #16]
	}
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40000800 	.word	0x40000800
 800082c:	20000034 	.word	0x20000034

08000830 <init_usart2>:
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <init_usart2+0x5c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <init_usart2+0x5c>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <init_usart2+0x60>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <init_usart2+0x60>)
 8000846:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <init_usart2+0x60>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <init_usart2+0x60>)
 8000852:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <init_usart2+0x5c>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <init_usart2+0x5c>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <init_usart2+0x64>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <init_usart2+0x64>)
 800086a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086e:	60d3      	str	r3, [r2, #12]
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <init_usart2+0x64>)
 8000872:	f240 324d 	movw	r2, #845	; 0x34d
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <init_usart2+0x64>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <init_usart2+0x64>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	60d3      	str	r3, [r2, #12]
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40004400 	.word	0x40004400

08000898 <set_usart2_buffer_Tx>:
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	2100      	movs	r1, #0
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <set_usart2_buffer_Tx+0x3c>)
 80008a8:	f000 f8e6 	bl	8000a78 <memset>
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <set_usart2_buffer_Tx+0x3c>)
 80008b0:	f000 f8ea 	bl	8000a88 <strcpy>
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fc5b 	bl	8000170 <strlen>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <set_usart2_buffer_Tx+0x3c>)
 80008be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <set_usart2_buffer_Tx+0x3c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000040 	.word	0x20000040

080008d8 <write_usart2>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ffd9 	bl	8000898 <set_usart2_buffer_Tx>
 80008e6:	e014      	b.n	8000912 <write_usart2+0x3a>
 80008e8:	bf00      	nop
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <write_usart2+0x70>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <write_usart2+0x12>
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <write_usart2+0x74>)
 80008f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <write_usart2+0x74>)
 80008fe:	5cd2      	ldrb	r2, [r2, r3]
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <write_usart2+0x70>)
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <write_usart2+0x74>)
 8000906:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800090a:	3301      	adds	r3, #1
 800090c:	4a0f      	ldr	r2, [pc, #60]	; (800094c <write_usart2+0x74>)
 800090e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <write_usart2+0x74>)
 8000914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <write_usart2+0x74>)
 800091a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800091e:	429a      	cmp	r2, r3
 8000920:	d3e2      	bcc.n	80008e8 <write_usart2+0x10>
 8000922:	bf00      	nop
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <write_usart2+0x70>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092c:	2b40      	cmp	r3, #64	; 0x40
 800092e:	d1f9      	bne.n	8000924 <write_usart2+0x4c>
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <write_usart2+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <write_usart2+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	20000040 	.word	0x20000040

08000950 <USART1_IRQHandler>:
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <USART1_IRQHandler+0x80>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	2b20      	cmp	r3, #32
 800095e:	d132      	bne.n	80009c6 <USART1_IRQHandler+0x76>
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <USART1_IRQHandler+0x80>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <USART1_IRQHandler+0x84>)
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <USART1_IRQHandler+0x88>)
 800096c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000970:	3301      	adds	r3, #1
 8000972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000976:	d20a      	bcs.n	800098e <USART1_IRQHandler+0x3e>
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <USART1_IRQHandler+0x88>)
 800097a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <USART1_IRQHandler+0x84>)
 8000980:	7811      	ldrb	r1, [r2, #0]
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <USART1_IRQHandler+0x88>)
 8000984:	4413      	add	r3, r2
 8000986:	460a      	mov	r2, r1
 8000988:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800098c:	e00d      	b.n	80009aa <USART1_IRQHandler+0x5a>
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <USART1_IRQHandler+0x88>)
 8000990:	2200      	movs	r2, #0
 8000992:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <USART1_IRQHandler+0x88>)
 8000998:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <USART1_IRQHandler+0x84>)
 800099e:	7811      	ldrb	r1, [r2, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <USART1_IRQHandler+0x88>)
 80009a2:	4413      	add	r3, r2
 80009a4:	460a      	mov	r2, r1
 80009a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <USART1_IRQHandler+0x88>)
 80009ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <USART1_IRQHandler+0x88>)
 80009b4:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <USART1_IRQHandler+0x88>)
 80009ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009be:	3301      	adds	r3, #1
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <USART1_IRQHandler+0x88>)
 80009c2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40013800 	.word	0x40013800
 80009d4:	20000658 	.word	0x20000658
 80009d8:	20000248 	.word	0x20000248

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0b      	ldr	r4, [pc, #44]	; (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a06:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f000 f811 	bl	8000a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fbed 	bl	80001ec <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a20:	08000b7c 	.word	0x08000b7c
  ldr r2, =_sbss
 8000a24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a28:	2000065c 	.word	0x2000065c

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <__libc_init_array>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	2500      	movs	r5, #0
 8000a34:	4e0c      	ldr	r6, [pc, #48]	; (8000a68 <__libc_init_array+0x38>)
 8000a36:	4c0d      	ldr	r4, [pc, #52]	; (8000a6c <__libc_init_array+0x3c>)
 8000a38:	1ba4      	subs	r4, r4, r6
 8000a3a:	10a4      	asrs	r4, r4, #2
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	d109      	bne.n	8000a54 <__libc_init_array+0x24>
 8000a40:	f000 f82a 	bl	8000a98 <_init>
 8000a44:	2500      	movs	r5, #0
 8000a46:	4e0a      	ldr	r6, [pc, #40]	; (8000a70 <__libc_init_array+0x40>)
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <__libc_init_array+0x44>)
 8000a4a:	1ba4      	subs	r4, r4, r6
 8000a4c:	10a4      	asrs	r4, r4, #2
 8000a4e:	42a5      	cmp	r5, r4
 8000a50:	d105      	bne.n	8000a5e <__libc_init_array+0x2e>
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a58:	4798      	blx	r3
 8000a5a:	3501      	adds	r5, #1
 8000a5c:	e7ee      	b.n	8000a3c <__libc_init_array+0xc>
 8000a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a62:	4798      	blx	r3
 8000a64:	3501      	adds	r5, #1
 8000a66:	e7f2      	b.n	8000a4e <__libc_init_array+0x1e>
 8000a68:	08000b74 	.word	0x08000b74
 8000a6c:	08000b74 	.word	0x08000b74
 8000a70:	08000b74 	.word	0x08000b74
 8000a74:	08000b78 	.word	0x08000b78

08000a78 <memset>:
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4402      	add	r2, r0
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <memset+0xa>
 8000a80:	4770      	bx	lr
 8000a82:	f803 1b01 	strb.w	r1, [r3], #1
 8000a86:	e7f9      	b.n	8000a7c <memset+0x4>

08000a88 <strcpy>:
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000a8e:	f803 2b01 	strb.w	r2, [r3], #1
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d1f9      	bne.n	8000a8a <strcpy+0x2>
 8000a96:	4770      	bx	lr

08000a98 <_init>:
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9a:	bf00      	nop
 8000a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9e:	bc08      	pop	{r3}
 8000aa0:	469e      	mov	lr, r3
 8000aa2:	4770      	bx	lr

08000aa4 <_fini>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	bf00      	nop
 8000aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aaa:	bc08      	pop	{r3}
 8000aac:	469e      	mov	lr, r3
 8000aae:	4770      	bx	lr
