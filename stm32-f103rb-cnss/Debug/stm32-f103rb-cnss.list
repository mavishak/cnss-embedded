
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d30  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ac  080021ac  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080021ac  080021ac  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ac  080021ac  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080021b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  200000d4  08002288  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  08002288  00020b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ed9  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000130f  00000000  00000000  00026fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000330  00000000  00000000  000282e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a8  00000000  00000000  00028618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001efc  00000000  00000000  000288c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003c29  00000000  00000000  0002a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000592c8  00000000  00000000  0002e3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000876ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e24  00000000  00000000  00087728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001e48 	.word	0x08001e48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08001e48 	.word	0x08001e48

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <setImagePath>:
static uint8_t image_path[PATH_SIZE];

static BOOL connection_closed;//added 30.4.21


void setImagePath(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	2100      	movs	r1, #0
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <setImagePath+0x24>)
 800018a:	f001 fa21 	bl	80015d0 <memset>
	sprintf((char*)image_path, "image/path");
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <setImagePath+0x24>)
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <setImagePath+0x28>)
 8000192:	ca07      	ldmia	r2, {r0, r1, r2}
 8000194:	c303      	stmia	r3!, {r0, r1}
 8000196:	801a      	strh	r2, [r3, #0]
 8000198:	3302      	adds	r3, #2
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000478 	.word	0x20000478
 80001a8:	08001e60 	.word	0x08001e60

080001ac <alert_Handler>:

void *alert_Handler(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0

	uint32_t i  = 3;
 80001b2:	2303      	movs	r3, #3
 80001b4:	607b      	str	r3, [r7, #4]
	//while(i > 0 && !recordAlert() ){ //original line (until 30.4.21)
	while(i > 0  && !recordAlert() && connection_closed){ //added 30.4.21
 80001b6:	e002      	b.n	80001be <alert_Handler+0x12>
		i--;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){ //added 30.4.21
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d008      	beq.n	80001d6 <alert_Handler+0x2a>
 80001c4:	f000 f80e 	bl	80001e4 <recordAlert>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d103      	bne.n	80001d6 <alert_Handler+0x2a>
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <alert_Handler+0x34>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d1f0      	bne.n	80001b8 <alert_Handler+0xc>
	}
	return NULL;
 80001d6:	2300      	movs	r3, #0


}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200004f8 	.word	0x200004f8

080001e4 <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In recordAlert()\r\n"); // for debugging
 80001e8:	4830      	ldr	r0, [pc, #192]	; (80002ac <recordAlert+0xc8>)
 80001ea:	f001 f863 	bl	80012b4 <write_usart2>

	connection_closed = TRUE;//added 30.4.21
 80001ee:	4b30      	ldr	r3, [pc, #192]	; (80002b0 <recordAlert+0xcc>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 80001f4:	2106      	movs	r1, #6
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 f8da 	bl	80003b0 <setClientMode>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d101      	bne.n	8000206 <recordAlert+0x22>
		return FALSE;
 8000202:	2300      	movs	r3, #0
 8000204:	e050      	b.n	80002a8 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"1\r\n");
 8000206:	482b      	ldr	r0, [pc, #172]	; (80002b4 <recordAlert+0xd0>)
 8000208:	f001 f854 	bl	80012b4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 800020c:	2106      	movs	r1, #6
 800020e:	2003      	movs	r0, #3
 8000210:	f000 f908 	bl	8000424 <joinAccessPoint>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d101      	bne.n	800021e <recordAlert+0x3a>
		return FALSE;
 800021a:	2300      	movs	r3, #0
 800021c:	e044      	b.n	80002a8 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"2\r\n");
 800021e:	4826      	ldr	r0, [pc, #152]	; (80002b8 <recordAlert+0xd4>)
 8000220:	f001 f848 	bl	80012b4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 8000224:	2314      	movs	r3, #20
 8000226:	2206      	movs	r2, #6
 8000228:	2103      	movs	r1, #3
 800022a:	2003      	movs	r0, #3
 800022c:	f000 f946 	bl	80004bc <connectFirebaseHost>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d101      	bne.n	800023a <recordAlert+0x56>
		return FALSE;
 8000236:	2300      	movs	r3, #0
 8000238:	e036      	b.n	80002a8 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"3\r\n");
 800023a:	4820      	ldr	r0, [pc, #128]	; (80002bc <recordAlert+0xd8>)
 800023c:	f001 f83a 	bl	80012b4 <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 8000240:	f7ff ff9e 	bl	8000180 <setImagePath>
	write_usart2((uint8_t*)"4\r\n");
 8000244:	481e      	ldr	r0, [pc, #120]	; (80002c0 <recordAlert+0xdc>)
 8000246:	f001 f835 	bl	80012b4 <write_usart2>

	//Create HTTP request
	createPostMsg();
 800024a:	f000 f9c9 	bl	80005e0 <createPostMsg>
	write_usart2((uint8_t*)"5\r\n");
 800024e:	481d      	ldr	r0, [pc, #116]	; (80002c4 <recordAlert+0xe0>)
 8000250:	f001 f830 	bl	80012b4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 8000254:	233c      	movs	r3, #60	; 0x3c
 8000256:	221e      	movs	r2, #30
 8000258:	2103      	movs	r1, #3
 800025a:	2003      	movs	r0, #3
 800025c:	f000 fa2c 	bl	80006b8 <sendRequest>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d109      	bne.n	800027a <recordAlert+0x96>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 8000266:	2103      	movs	r1, #3
 8000268:	2003      	movs	r0, #3
 800026a:	f000 fb11 	bl	8000890 <closeCunnection>
 800026e:	4603      	mov	r3, r0
 8000270:	461a      	mov	r2, r3
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <recordAlert+0xcc>)
 8000274:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000276:	2300      	movs	r3, #0
 8000278:	e016      	b.n	80002a8 <recordAlert+0xc4>
	}
	write_usart2((uint8_t*)"6\r\n");
 800027a:	4813      	ldr	r0, [pc, #76]	; (80002c8 <recordAlert+0xe4>)
 800027c:	f001 f81a 	bl	80012b4 <write_usart2>

	//Read response
	if(!readResponse(180)){//timeout set t0 3 minutes
 8000280:	20b4      	movs	r0, #180	; 0xb4
 8000282:	f000 faad 	bl	80007e0 <readResponse>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d109      	bne.n	80002a0 <recordAlert+0xbc>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 800028c:	2103      	movs	r1, #3
 800028e:	2003      	movs	r0, #3
 8000290:	f000 fafe 	bl	8000890 <closeCunnection>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <recordAlert+0xcc>)
 800029a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800029c:	2300      	movs	r3, #0
 800029e:	e003      	b.n	80002a8 <recordAlert+0xc4>
	}

	write_usart2((uint8_t*)"7\r\n");
 80002a0:	480a      	ldr	r0, [pc, #40]	; (80002cc <recordAlert+0xe8>)
 80002a2:	f001 f807 	bl	80012b4 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"8\r\n");

	return TRUE;
 80002a6:	2301      	movs	r3, #1

}
 80002a8:	4618      	mov	r0, r3
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	08001e6c 	.word	0x08001e6c
 80002b0:	200004f8 	.word	0x200004f8
 80002b4:	08001e80 	.word	0x08001e80
 80002b8:	08001e84 	.word	0x08001e84
 80002bc:	08001e88 	.word	0x08001e88
 80002c0:	08001e8c 	.word	0x08001e8c
 80002c4:	08001e90 	.word	0x08001e90
 80002c8:	08001e94 	.word	0x08001e94
 80002cc:	08001e98 	.word	0x08001e98

080002d0 <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 80002d4:	482e      	ldr	r0, [pc, #184]	; (8000390 <checkSwitchState+0xc0>)
 80002d6:	f000 ffed 	bl	80012b4 <write_usart2>

	connection_closed = TRUE;//added 30.4.21
 80002da:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <checkSwitchState+0xc4>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(3,6)){
 80002e0:	2106      	movs	r1, #6
 80002e2:	2003      	movs	r0, #3
 80002e4:	f000 f864 	bl	80003b0 <setClientMode>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d101      	bne.n	80002f2 <checkSwitchState+0x22>
		return FALSE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e04b      	b.n	800038a <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"1\r\n");
 80002f2:	4829      	ldr	r0, [pc, #164]	; (8000398 <checkSwitchState+0xc8>)
 80002f4:	f000 ffde 	bl	80012b4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(3,6)){
 80002f8:	2106      	movs	r1, #6
 80002fa:	2003      	movs	r0, #3
 80002fc:	f000 f892 	bl	8000424 <joinAccessPoint>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <checkSwitchState+0x3a>
		return FALSE;
 8000306:	2300      	movs	r3, #0
 8000308:	e03f      	b.n	800038a <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"2\r\n");
 800030a:	4824      	ldr	r0, [pc, #144]	; (800039c <checkSwitchState+0xcc>)
 800030c:	f000 ffd2 	bl	80012b4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(3,3,6,20)){
 8000310:	2314      	movs	r3, #20
 8000312:	2206      	movs	r2, #6
 8000314:	2103      	movs	r1, #3
 8000316:	2003      	movs	r0, #3
 8000318:	f000 f8d0 	bl	80004bc <connectFirebaseHost>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d101      	bne.n	8000326 <checkSwitchState+0x56>
		return FALSE;
 8000322:	2300      	movs	r3, #0
 8000324:	e031      	b.n	800038a <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"3\r\n");
 8000326:	481e      	ldr	r0, [pc, #120]	; (80003a0 <checkSwitchState+0xd0>)
 8000328:	f000 ffc4 	bl	80012b4 <write_usart2>


	//Create HTTP request
	createGetMsg();
 800032c:	f000 f99c 	bl	8000668 <createGetMsg>
	write_usart2((uint8_t*)"4\r\n");
 8000330:	481c      	ldr	r0, [pc, #112]	; (80003a4 <checkSwitchState+0xd4>)
 8000332:	f000 ffbf 	bl	80012b4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(3,3,30,60)){
 8000336:	233c      	movs	r3, #60	; 0x3c
 8000338:	221e      	movs	r2, #30
 800033a:	2103      	movs	r1, #3
 800033c:	2003      	movs	r0, #3
 800033e:	f000 f9bb 	bl	80006b8 <sendRequest>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d109      	bne.n	800035c <checkSwitchState+0x8c>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 8000348:	2103      	movs	r1, #3
 800034a:	2003      	movs	r0, #3
 800034c:	f000 faa0 	bl	8000890 <closeCunnection>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <checkSwitchState+0xc4>)
 8000356:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000358:	2300      	movs	r3, #0
 800035a:	e016      	b.n	800038a <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"5\r\n");
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <checkSwitchState+0xd8>)
 800035e:	f000 ffa9 	bl	80012b4 <write_usart2>

	//Read response
	if(!parseResponse(180)){//timeout set t0 3 minutes
 8000362:	20b4      	movs	r0, #180	; 0xb4
 8000364:	f000 fa68 	bl	8000838 <parseResponse>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d109      	bne.n	8000382 <checkSwitchState+0xb2>
		//closeCunnection(3,3);//original line (until 30.4.21)
		connection_closed = closeCunnection(3,3);//added 30.4.21
 800036e:	2103      	movs	r1, #3
 8000370:	2003      	movs	r0, #3
 8000372:	f000 fa8d 	bl	8000890 <closeCunnection>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <checkSwitchState+0xc4>)
 800037c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800037e:	2300      	movs	r3, #0
 8000380:	e003      	b.n	800038a <checkSwitchState+0xba>
	}

	write_usart2((uint8_t*)"6\r\n");
 8000382:	480a      	ldr	r0, [pc, #40]	; (80003ac <checkSwitchState+0xdc>)
 8000384:	f000 ff96 	bl	80012b4 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection(3,3);
	//write_usart2((uint8_t*)"7\r\n");

	return TRUE;
 8000388:	2301      	movs	r3, #1


}
 800038a:	4618      	mov	r0, r3
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	08001e9c 	.word	0x08001e9c
 8000394:	200004f8 	.word	0x200004f8
 8000398:	08001e80 	.word	0x08001e80
 800039c:	08001e84 	.word	0x08001e84
 80003a0:	08001e88 	.word	0x08001e88
 80003a4:	08001e8c 	.word	0x08001e8c
 80003a8:	08001e90 	.word	0x08001e90
 80003ac:	08001e94 	.word	0x08001e94

080003b0 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <setClientMode+0x64>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 80003c0:	4815      	ldr	r0, [pc, #84]	; (8000418 <setClientMode+0x68>)
 80003c2:	f000 ffb3 	bl	800132c <write_usart1>
	while(tries > 0){
 80003c6:	e01d      	b.n	8000404 <setClientMode+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80003c8:	4914      	ldr	r1, [pc, #80]	; (800041c <setClientMode+0x6c>)
 80003ca:	4815      	ldr	r0, [pc, #84]	; (8000420 <setClientMode+0x70>)
 80003cc:	f001 f820 	bl	8001410 <search_usart1_buffer_Rx>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <setClientMode+0x64>)
 80003d6:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <setClientMode+0x64>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d105      	bne.n	80003ec <setClientMode+0x3c>
 80003e0:	6838      	ldr	r0, [r7, #0]
 80003e2:	f000 fd79 	bl	8000ed8 <timeout_with_timer4>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0ed      	beq.n	80003c8 <setClientMode+0x18>
		}
		if(found == PASS){
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <setClientMode+0x64>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d101      	bne.n	80003f8 <setClientMode+0x48>
			return TRUE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	e009      	b.n	800040c <setClientMode+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 80003fe:	4806      	ldr	r0, [pc, #24]	; (8000418 <setClientMode+0x68>)
 8000400:	f000 ff94 	bl	800132c <write_usart1>
	while(tries > 0){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1e6      	bne.n	80003d8 <setClientMode+0x28>
		}
	}
	return FALSE;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000006d 	.word	0x2000006d
 8000418:	08001ed8 	.word	0x08001ed8
 800041c:	08001ebc 	.word	0x08001ebc
 8000420:	08001ec4 	.word	0x08001ec4

08000424 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800042e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000432:	2100      	movs	r1, #0
 8000434:	481a      	ldr	r0, [pc, #104]	; (80004a0 <joinAccessPoint+0x7c>)
 8000436:	f001 f8cb 	bl	80015d0 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <joinAccessPoint+0x80>)
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <joinAccessPoint+0x84>)
 800043e:	491b      	ldr	r1, [pc, #108]	; (80004ac <joinAccessPoint+0x88>)
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <joinAccessPoint+0x7c>)
 8000442:	f001 f8cd 	bl	80015e0 <siprintf>

	found = STANDBY;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <joinAccessPoint+0x8c>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <joinAccessPoint+0x7c>)
 800044e:	f000 ff6d 	bl	800132c <write_usart1>
	while(tries > 0){
 8000452:	e01d      	b.n	8000490 <joinAccessPoint+0x6c>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 8000454:	4917      	ldr	r1, [pc, #92]	; (80004b4 <joinAccessPoint+0x90>)
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <joinAccessPoint+0x94>)
 8000458:	f000 ffda 	bl	8001410 <search_usart1_buffer_Rx>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <joinAccessPoint+0x8c>)
 8000462:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <joinAccessPoint+0x8c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d105      	bne.n	8000478 <joinAccessPoint+0x54>
 800046c:	6838      	ldr	r0, [r7, #0]
 800046e:	f000 fd33 	bl	8000ed8 <timeout_with_timer4>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0ed      	beq.n	8000454 <joinAccessPoint+0x30>
		}
		if(found == PASS){
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <joinAccessPoint+0x8c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <joinAccessPoint+0x60>
			return TRUE;
 8000480:	2301      	movs	r3, #1
 8000482:	e009      	b.n	8000498 <joinAccessPoint+0x74>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3b01      	subs	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <joinAccessPoint+0x7c>)
 800048c:	f000 ff4e 	bl	800132c <write_usart1>
	while(tries > 0){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d1e6      	bne.n	8000464 <joinAccessPoint+0x40>
		}
	}
	return FALSE;
 8000496:	2300      	movs	r3, #0

}
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000f0 	.word	0x200000f0
 80004a4:	08001ee8 	.word	0x08001ee8
 80004a8:	08001ef4 	.word	0x08001ef4
 80004ac:	08001f00 	.word	0x08001f00
 80004b0:	2000006d 	.word	0x2000006d
 80004b4:	08001f18 	.word	0x08001f18
 80004b8:	08001ec4 	.word	0x08001ec4

080004bc <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
 80004c8:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <connectFirebaseHost+0x100>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 80004d0:	483b      	ldr	r0, [pc, #236]	; (80005c0 <connectFirebaseHost+0x104>)
 80004d2:	f000 ff2b 	bl	800132c <write_usart1>
	while(_ssl_tries > 0){
 80004d6:	e01b      	b.n	8000510 <connectFirebaseHost+0x54>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80004d8:	493a      	ldr	r1, [pc, #232]	; (80005c4 <connectFirebaseHost+0x108>)
 80004da:	483b      	ldr	r0, [pc, #236]	; (80005c8 <connectFirebaseHost+0x10c>)
 80004dc:	f000 ff98 	bl	8001410 <search_usart1_buffer_Rx>
 80004e0:	4603      	mov	r3, r0
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b35      	ldr	r3, [pc, #212]	; (80005bc <connectFirebaseHost+0x100>)
 80004e6:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <connectFirebaseHost+0x100>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <connectFirebaseHost+0x40>
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 fcf1 	bl	8000ed8 <timeout_with_timer4>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0ed      	beq.n	80004d8 <connectFirebaseHost+0x1c>
		}
		if(found == PASS){
 80004fc:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <connectFirebaseHost+0x100>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <connectFirebaseHost+0x5c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3b01      	subs	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 800050a:	482d      	ldr	r0, [pc, #180]	; (80005c0 <connectFirebaseHost+0x104>)
 800050c:	f000 ff0e 	bl	800132c <write_usart1>
	while(_ssl_tries > 0){
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1e8      	bne.n	80004e8 <connectFirebaseHost+0x2c>
 8000516:	e000      	b.n	800051a <connectFirebaseHost+0x5e>
			break; //move on to next command
 8000518:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 800051a:	4b28      	ldr	r3, [pc, #160]	; (80005bc <connectFirebaseHost+0x100>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d003      	beq.n	800052a <connectFirebaseHost+0x6e>
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <connectFirebaseHost+0x100>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d101      	bne.n	800052e <connectFirebaseHost+0x72>
		return FALSE;
 800052a:	2300      	movs	r3, #0
 800052c:	e041      	b.n	80005b2 <connectFirebaseHost+0xf6>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	2100      	movs	r1, #0
 8000534:	4825      	ldr	r0, [pc, #148]	; (80005cc <connectFirebaseHost+0x110>)
 8000536:	f001 f84b 	bl	80015d0 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <connectFirebaseHost+0x114>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <connectFirebaseHost+0x118>)
 8000540:	4925      	ldr	r1, [pc, #148]	; (80005d8 <connectFirebaseHost+0x11c>)
 8000542:	4822      	ldr	r0, [pc, #136]	; (80005cc <connectFirebaseHost+0x110>)
 8000544:	f001 f84c 	bl	80015e0 <siprintf>

	found = STANDBY;
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <connectFirebaseHost+0x100>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <connectFirebaseHost+0x110>)
 8000550:	f000 feec 	bl	800132c <write_usart1>
	while(_cipstart_tries > 0){
 8000554:	e029      	b.n	80005aa <connectFirebaseHost+0xee>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000556:	491b      	ldr	r1, [pc, #108]	; (80005c4 <connectFirebaseHost+0x108>)
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <connectFirebaseHost+0x10c>)
 800055a:	f000 ff59 	bl	8001410 <search_usart1_buffer_Rx>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <connectFirebaseHost+0x100>)
 8000564:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <connectFirebaseHost+0x100>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d107      	bne.n	800057e <connectFirebaseHost+0xc2>
				found = search_usart1_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);//NO IDEA WHY THIS IS SO CRITICAL BUT IT IS!
 800056e:	4915      	ldr	r1, [pc, #84]	; (80005c4 <connectFirebaseHost+0x108>)
 8000570:	481a      	ldr	r0, [pc, #104]	; (80005dc <connectFirebaseHost+0x120>)
 8000572:	f000 ff4d 	bl	8001410 <search_usart1_buffer_Rx>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <connectFirebaseHost+0x100>)
 800057c:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <connectFirebaseHost+0x100>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d105      	bne.n	8000592 <connectFirebaseHost+0xd6>
 8000586:	6838      	ldr	r0, [r7, #0]
 8000588:	f000 fca6 	bl	8000ed8 <timeout_with_timer4>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0e1      	beq.n	8000556 <connectFirebaseHost+0x9a>
			}
		}
		if(found == PASS){
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <connectFirebaseHost+0x100>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <connectFirebaseHost+0xe2>
			return TRUE;
 800059a:	2301      	movs	r3, #1
 800059c:	e009      	b.n	80005b2 <connectFirebaseHost+0xf6>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <connectFirebaseHost+0x110>)
 80005a6:	f000 fec1 	bl	800132c <write_usart1>
	while(_cipstart_tries > 0){
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1e6      	bne.n	800057e <connectFirebaseHost+0xc2>
		}
	}
	return FALSE;
 80005b0:	2300      	movs	r3, #0



}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000006d 	.word	0x2000006d
 80005c0:	08001f20 	.word	0x08001f20
 80005c4:	08001ebc 	.word	0x08001ebc
 80005c8:	08001ec4 	.word	0x08001ec4
 80005cc:	200000f0 	.word	0x200000f0
 80005d0:	20000058 	.word	0x20000058
 80005d4:	20000000 	.word	0x20000000
 80005d8:	08001f38 	.word	0x08001f38
 80005dc:	08001f58 	.word	0x08001f58

080005e0 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	2100      	movs	r1, #0
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <createPostMsg+0x60>)
 80005ec:	f000 fff0 	bl	80015d0 <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <createPostMsg+0x64>)
 80005f2:	4915      	ldr	r1, [pc, #84]	; (8000648 <createPostMsg+0x68>)
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <createPostMsg+0x60>)
 80005f6:	f000 fff3 	bl	80015e0 <siprintf>
	content_len = strlen((char*)content);
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <createPostMsg+0x60>)
 80005fc:	f7ff fdb8 	bl	8000170 <strlen>
 8000600:	4602      	mov	r2, r0
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <createPostMsg+0x6c>)
 8000604:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	2100      	movs	r1, #0
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <createPostMsg+0x70>)
 800060e:	f000 ffdf 	bl	80015d0 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <createPostMsg+0x6c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <createPostMsg+0x60>)
 8000618:	9202      	str	r2, [sp, #8]
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <createPostMsg+0x74>)
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <createPostMsg+0x78>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <createPostMsg+0x7c>)
 8000624:	490e      	ldr	r1, [pc, #56]	; (8000660 <createPostMsg+0x80>)
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <createPostMsg+0x70>)
 8000628:	f000 ffda 	bl	80015e0 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <createPostMsg+0x70>)
 800062e:	f7ff fd9f 	bl	8000170 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	3b02      	subs	r3, #2
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <createPostMsg+0x84>)
 8000638:	6013      	str	r3, [r2, #0]

}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200003f4 	.word	0x200003f4
 8000644:	20000478 	.word	0x20000478
 8000648:	08001f6c 	.word	0x08001f6c
 800064c:	20000474 	.word	0x20000474
 8000650:	200001f0 	.word	0x200001f0
 8000654:	20000000 	.word	0x20000000
 8000658:	2000002c 	.word	0x2000002c
 800065c:	2000005c 	.word	0x2000005c
 8000660:	08001fc0 	.word	0x08001fc0
 8000664:	200003f0 	.word	0x200003f0

08000668 <createGetMsg>:

void createGetMsg(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 800066e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000672:	2100      	movs	r1, #0
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <createGetMsg+0x38>)
 8000676:	f000 ffab 	bl	80015d0 <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <createGetMsg+0x3c>)
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <createGetMsg+0x40>)
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <createGetMsg+0x44>)
 8000682:	490b      	ldr	r1, [pc, #44]	; (80006b0 <createGetMsg+0x48>)
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <createGetMsg+0x38>)
 8000686:	f000 ffab 	bl	80015e0 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <createGetMsg+0x38>)
 800068c:	f7ff fd70 	bl	8000170 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	3b02      	subs	r3, #2
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <createGetMsg+0x4c>)
 8000696:	6013      	str	r3, [r2, #0]

}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001f0 	.word	0x200001f0
 80006a4:	20000000 	.word	0x20000000
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	2000005c 	.word	0x2000005c
 80006b0:	08002038 	.word	0x08002038
 80006b4:	200003f0 	.word	0x200003f0

080006b8 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80006c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ca:	2100      	movs	r1, #0
 80006cc:	483a      	ldr	r0, [pc, #232]	; (80007b8 <sendRequest+0x100>)
 80006ce:	f000 ff7f 	bl	80015d0 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 80006d2:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <sendRequest+0x104>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4939      	ldr	r1, [pc, #228]	; (80007c0 <sendRequest+0x108>)
 80006da:	4837      	ldr	r0, [pc, #220]	; (80007b8 <sendRequest+0x100>)
 80006dc:	f000 ff80 	bl	80015e0 <siprintf>

	found = STANDBY;
 80006e0:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <sendRequest+0x10c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80006e6:	4834      	ldr	r0, [pc, #208]	; (80007b8 <sendRequest+0x100>)
 80006e8:	f000 fe20 	bl	800132c <write_usart1>
	while(_CIPSEND_tries > 0){
 80006ec:	e027      	b.n	800073e <sendRequest+0x86>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 80006ee:	4936      	ldr	r1, [pc, #216]	; (80007c8 <sendRequest+0x110>)
 80006f0:	4836      	ldr	r0, [pc, #216]	; (80007cc <sendRequest+0x114>)
 80006f2:	f000 fe8d 	bl	8001410 <search_usart1_buffer_Rx>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <sendRequest+0x10c>)
 80006fc:	701a      	strb	r2, [r3, #0]
			if(found == STANDBY){
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <sendRequest+0x10c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d107      	bne.n	8000716 <sendRequest+0x5e>
				found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 8000706:	4932      	ldr	r1, [pc, #200]	; (80007d0 <sendRequest+0x118>)
 8000708:	4830      	ldr	r0, [pc, #192]	; (80007cc <sendRequest+0x114>)
 800070a:	f000 fe81 	bl	8001410 <search_usart1_buffer_Rx>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <sendRequest+0x10c>)
 8000714:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <sendRequest+0x10c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d105      	bne.n	800072a <sendRequest+0x72>
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 fbda 	bl	8000ed8 <timeout_with_timer4>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0e1      	beq.n	80006ee <sendRequest+0x36>
			}
		}
		if(found == PASS){
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <sendRequest+0x10c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <sendRequest+0x8e>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3b01      	subs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <sendRequest+0x100>)
 800073a:	f000 fdf7 	bl	800132c <write_usart1>
	while(_CIPSEND_tries > 0){
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1e8      	bne.n	8000716 <sendRequest+0x5e>
 8000744:	e000      	b.n	8000748 <sendRequest+0x90>
			break; //move on to next command
 8000746:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <sendRequest+0x10c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d003      	beq.n	8000758 <sendRequest+0xa0>
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <sendRequest+0x10c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d101      	bne.n	800075c <sendRequest+0xa4>
		return FALSE;
 8000758:	2300      	movs	r3, #0
 800075a:	e028      	b.n	80007ae <sendRequest+0xf6>
	}


	/*Send HTTP request*/
	found = STANDBY;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <sendRequest+0x10c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <sendRequest+0x11c>)
 8000764:	f000 fde2 	bl	800132c <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000768:	e01d      	b.n	80007a6 <sendRequest+0xee>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 800076a:	491b      	ldr	r1, [pc, #108]	; (80007d8 <sendRequest+0x120>)
 800076c:	481b      	ldr	r0, [pc, #108]	; (80007dc <sendRequest+0x124>)
 800076e:	f000 fe4f 	bl	8001410 <search_usart1_buffer_Rx>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <sendRequest+0x10c>)
 8000778:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <sendRequest+0x10c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d105      	bne.n	800078e <sendRequest+0xd6>
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	f000 fba8 	bl	8000ed8 <timeout_with_timer4>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0ed      	beq.n	800076a <sendRequest+0xb2>
		}
		if(found == PASS){
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <sendRequest+0x10c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <sendRequest+0xe2>
			return TRUE;
 8000796:	2301      	movs	r3, #1
 8000798:	e009      	b.n	80007ae <sendRequest+0xf6>
		}
		else{
			_SEND_OK_tries--;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3b01      	subs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <sendRequest+0x11c>)
 80007a2:	f000 fdc3 	bl	800132c <write_usart1>
	while(_SEND_OK_tries > 0){
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1e6      	bne.n	800077a <sendRequest+0xc2>
		}
	}
	return FALSE;
 80007ac:	2300      	movs	r3, #0

}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000f0 	.word	0x200000f0
 80007bc:	200003f0 	.word	0x200003f0
 80007c0:	0800207c 	.word	0x0800207c
 80007c4:	2000006d 	.word	0x2000006d
 80007c8:	08001ebc 	.word	0x08001ebc
 80007cc:	08002090 	.word	0x08002090
 80007d0:	08002094 	.word	0x08002094
 80007d4:	200001f0 	.word	0x200001f0
 80007d8:	08001f18 	.word	0x08001f18
 80007dc:	080020a0 	.word	0x080020a0

080007e0 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <readResponse+0x4c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80007ee:	e007      	b.n	8000800 <readResponse+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80007f0:	490f      	ldr	r1, [pc, #60]	; (8000830 <readResponse+0x50>)
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <readResponse+0x54>)
 80007f4:	f000 fe0c 	bl	8001410 <search_usart1_buffer_Rx>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <readResponse+0x4c>)
 80007fe:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <readResponse+0x4c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d105      	bne.n	8000814 <readResponse+0x34>
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 fb65 	bl	8000ed8 <timeout_with_timer4>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0ed      	beq.n	80007f0 <readResponse+0x10>
	}
	if(found == PASS){
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <readResponse+0x4c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <readResponse+0x40>
		return TRUE;
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <readResponse+0x42>
	}
	else{
		return FALSE;
 8000820:	2300      	movs	r3, #0
	}

}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000006d 	.word	0x2000006d
 8000830:	08001f18 	.word	0x08001f18
 8000834:	08002094 	.word	0x08002094

08000838 <parseResponse>:


// THIS NEEDS TO CHANGE NEED TO CHECK WETHER IT'S ON OR OFF for that we need to retreive the content.
BOOL parseResponse(uint32_t timeout){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <parseResponse+0x4c>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000846:	e007      	b.n	8000858 <parseResponse+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000848:	490f      	ldr	r1, [pc, #60]	; (8000888 <parseResponse+0x50>)
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <parseResponse+0x54>)
 800084c:	f000 fde0 	bl	8001410 <search_usart1_buffer_Rx>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <parseResponse+0x4c>)
 8000856:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <parseResponse+0x4c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d105      	bne.n	800086c <parseResponse+0x34>
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 fb39 	bl	8000ed8 <timeout_with_timer4>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0ed      	beq.n	8000848 <parseResponse+0x10>
	}
	if(found == PASS){
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <parseResponse+0x4c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <parseResponse+0x40>
		return TRUE;
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <parseResponse+0x42>
	}
	else{
		return FALSE;
 8000878:	2300      	movs	r3, #0
	}

}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000006d 	.word	0x2000006d
 8000888:	08001f18 	.word	0x08001f18
 800088c:	08002094 	.word	0x08002094

08000890 <closeCunnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeCunnection(uint32_t tries, uint32_t timeout){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <closeCunnection+0x64>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 80008a0:	4815      	ldr	r0, [pc, #84]	; (80008f8 <closeCunnection+0x68>)
 80008a2:	f000 fd43 	bl	800132c <write_usart1>
	while(tries > 0){
 80008a6:	e01d      	b.n	80008e4 <closeCunnection+0x54>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80008a8:	4914      	ldr	r1, [pc, #80]	; (80008fc <closeCunnection+0x6c>)
 80008aa:	4815      	ldr	r0, [pc, #84]	; (8000900 <closeCunnection+0x70>)
 80008ac:	f000 fdb0 	bl	8001410 <search_usart1_buffer_Rx>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <closeCunnection+0x64>)
 80008b6:	701a      	strb	r2, [r3, #0]
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <closeCunnection+0x64>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d105      	bne.n	80008cc <closeCunnection+0x3c>
 80008c0:	6838      	ldr	r0, [r7, #0]
 80008c2:	f000 fb09 	bl	8000ed8 <timeout_with_timer4>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0ed      	beq.n	80008a8 <closeCunnection+0x18>
		}
		if(found == PASS){
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <closeCunnection+0x64>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <closeCunnection+0x48>
			return TRUE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e009      	b.n	80008ec <closeCunnection+0x5c>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <closeCunnection+0x68>)
 80008e0:	f000 fd24 	bl	800132c <write_usart1>
	while(tries > 0){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1e6      	bne.n	80008b8 <closeCunnection+0x28>
		}
	}
	return FALSE;
 80008ea:	2300      	movs	r3, #0

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000006d 	.word	0x2000006d
 80008f8:	080020ac 	.word	0x080020ac
 80008fc:	08001ebc 	.word	0x08001ebc
 8000900:	08001ec4 	.word	0x08001ec4

08000904 <init_queue>:

static Queue queue;


void init_queue()
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <init_queue+0x20>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
	queue.readIndex = 0;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <init_queue+0x20>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
	queue.accept = GO;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <init_queue+0x20>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	200004fc 	.word	0x200004fc

08000928 <add_event>:


void add_event(Handler handler)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 8000930:	f000 f81e 	bl	8000970 <queue_isFull>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d113      	bne.n	8000962 <add_event+0x3a>
		//write_usart2((uint8_t*)("\r\n<-queue is full->\r\n"));
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <add_event+0x44>)
 800093c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093e:	490b      	ldr	r1, [pc, #44]	; (800096c <add_event+0x44>)
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE-1)) //changed from  < QUEUE_SIZE
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <add_event+0x44>)
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	2b08      	cmp	r3, #8
 800094c:	d805      	bhi.n	800095a <add_event+0x32>
		queue.writeIndex++;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <add_event+0x44>)
 8000950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000952:	3301      	adds	r3, #1
 8000954:	4a05      	ldr	r2, [pc, #20]	; (800096c <add_event+0x44>)
 8000956:	6293      	str	r3, [r2, #40]	; 0x28
 8000958:	e004      	b.n	8000964 <add_event+0x3c>
	else
		queue.writeIndex = 0;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <add_event+0x44>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
 8000960:	e000      	b.n	8000964 <add_event+0x3c>
		return;
 8000962:	bf00      	nop

	//write_usart2((uint8_t*)("\r\n<-queue add event->\r\n"));

}
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200004fc 	.word	0x200004fc

08000970 <queue_isFull>:

}


BOOL queue_isFull()
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <queue_isFull+0x34>)
 8000976:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <queue_isFull+0x34>)
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	1c59      	adds	r1, r3, #1
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <queue_isFull+0x38>)
 8000980:	fba3 2301 	umull	r2, r3, r3, r1
 8000984:	08da      	lsrs	r2, r3, #3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1aca      	subs	r2, r1, r3
 8000990:	4290      	cmp	r0, r2
 8000992:	bf0c      	ite	eq
 8000994:	2301      	moveq	r3, #1
 8000996:	2300      	movne	r3, #0
 8000998:	b2db      	uxtb	r3, r3
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200004fc 	.word	0x200004fc
 80009a8:	cccccccd 	.word	0xcccccccd

080009ac <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <EXTI15_10_IRQHandler+0x24>)
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <EXTI15_10_IRQHandler+0x24>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <EXTI15_10_IRQHandler+0x24>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <EXTI15_10_IRQHandler+0x28>)
 80009c6:	f7ff ffaf 	bl	8000928 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010400 	.word	0x40010400
 80009d4:	080009d9 	.word	0x080009d9

080009d8 <interrupt_handler>:

void *interrupt_handler(void){
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

	if(state == OFF)
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <interrupt_handler+0x3c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <interrupt_handler+0x40>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <interrupt_handler+0x40>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	60d3      	str	r3, [r2, #12]
		state=ON;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <interrupt_handler+0x3c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e008      	b.n	8000a0a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <interrupt_handler+0x40>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <interrupt_handler+0x40>)
 80009fe:	f023 0320 	bic.w	r3, r3, #32
 8000a02:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <interrupt_handler+0x3c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000a0a:	2300      	movs	r3, #0

}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000b80 	.word	0x20000b80
 8000a18:	40010800 	.word	0x40010800

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4906      	ldr	r1, [pc, #24]	; (8000a98 <__NVIC_EnableIRQ+0x34>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <init_sensor_with_interrupt>:
/*
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 */
void init_sensor_with_interrupt(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <init_sensor_with_interrupt+0x80>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <init_sensor_with_interrupt+0x80>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <init_sensor_with_interrupt+0x80>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <init_sensor_with_interrupt+0x80>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b12:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b16:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b22:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <init_sensor_with_interrupt+0x84>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <init_sensor_with_interrupt+0x88>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <init_sensor_with_interrupt+0x88>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <init_sensor_with_interrupt+0x8c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <init_sensor_with_interrupt+0x8c>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register - to anable full button press before reacting ((see reference manual 10.3.3)
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <init_sensor_with_interrupt+0x8c>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <init_sensor_with_interrupt+0x8c>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000b56:	2007      	movs	r0, #7
 8000b58:	f7ff ff60 	bl	8000a1c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f7ff ff9c 	bl	8000a9c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_IRQn); //enable handler
 8000b64:	200a      	movs	r0, #10
 8000b66:	f7ff ff7d 	bl	8000a64 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b6a:	b662      	cpsie	i
	__enable_irq();

	/*~~~______________~~~*/

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40010400 	.word	0x40010400

08000b80 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	if(timeout_done_timer3())//added 1.5.21 (in timers.c)
 8000b84:	f000 f9e0 	bl	8000f48 <timeout_done_timer3>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00c      	beq.n	8000ba8 <EXTI4_IRQHandler+0x28>
	{
		EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <EXTI4_IRQHandler+0x2c>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <EXTI4_IRQHandler+0x2c>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6153      	str	r3, [r2, #20]
		add_event(alert_Handler);
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <EXTI4_IRQHandler+0x30>)
 8000b9c:	f7ff fec4 	bl	8000928 <add_event>
		set_timeout_timer3(60000); //60000 Milliseconds = 1 minute //added 1.5.21 (in timers.c)
 8000ba0:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000ba4:	f000 f9bc 	bl	8000f20 <set_timeout_timer3>

	//toggle_led(); //This is temporary for testing.
	//write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue


}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40010400 	.word	0x40010400
 8000bb0:	080001ad 	.word	0x080001ad

08000bb4 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	init_usart2(); // for debugging
 8000bb8:	f000 faca 	bl	8001150 <init_usart2>

	init_queue();
 8000bbc:	f7ff fea2 	bl	8000904 <init_queue>
	init_sensor_with_interrupt();
 8000bc0:	f7ff ff96 	bl	8000af0 <init_sensor_with_interrupt>

	//init_timer2();//for testing i2c

	init_timer3();//for sensor delay
 8000bc4:	f000 f8a6 	bl	8000d14 <init_timer3>
	init_timer4();//for ESP8266 timeout
 8000bc8:	f000 f8ea 	bl	8000da0 <init_timer4>

	init_usart1(); // for ESP8266
 8000bcc:	f000 faf4 	bl	80011b8 <init_usart1>


	//init_i2c1();
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <main+0x30>)
 8000bd2:	f000 fb6f 	bl	80012b4 <write_usart2>


	while(1)
	{

		checkSwitchState();
 8000bd6:	f7ff fb7b 	bl	80002d0 <checkSwitchState>
		delay_with_timer4(20);//20 seconds
 8000bda:	2014      	movs	r0, #20
 8000bdc:	f000 f95a 	bl	8000e94 <delay_with_timer4>
		checkSwitchState();
 8000be0:	e7f9      	b.n	8000bd6 <main+0x22>
 8000be2:	bf00      	nop
 8000be4:	0800214c 	.word	0x0800214c

08000be8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x50>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x16>
		heap_end = &end;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <_sbrk+0x50>)
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <_sbrk+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <_sbrk+0x50>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <_sbrk+0x50>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	466a      	mov	r2, sp
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d907      	bls.n	8000c22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c12:	f000 fcb3 	bl	800157c <__errno>
 8000c16:	4602      	mov	r2, r0
 8000c18:	230c      	movs	r3, #12
 8000c1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	e006      	b.n	8000c30 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <_sbrk+0x50>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <_sbrk+0x50>)
 8000c2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000530 	.word	0x20000530
 8000c3c:	20000b88 	.word	0x20000b88

08000c40 <__NVIC_SetPriorityGrouping>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4906      	ldr	r1, [pc, #24]	; (8000cbc <__NVIC_EnableIRQ+0x34>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <init_timer3>:
	timer2.timeout = FALSE;

}

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <init_timer3+0x7c>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <init_timer3+0x7c>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8000 -> 1ms */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x0064; //0x0064[Hex] = 100[dec]
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <init_timer3+0x80>)
 8000d26:	2264      	movs	r2, #100	; 0x64
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0050; //0x0050[Hex] = 80[dec]
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <init_timer3+0x80>)
 8000d2c:	2250      	movs	r2, #80	; 0x50
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <init_timer3+0x80>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <init_timer3+0x80>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <init_timer3+0x80>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <init_timer3+0x80>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <init_timer3+0x80>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <init_timer3+0x80>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000d56:	2007      	movs	r0, #7
 8000d58:	f7ff ff72 	bl	8000c40 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	201d      	movs	r0, #29
 8000d60:	f7ff ffae 	bl	8000cc0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8000d64:	201d      	movs	r0, #29
 8000d66:	f7ff ff8f 	bl	8000c88 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d6a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <init_timer3+0x84>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
	timer3.timeout_count = 0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <init_timer3+0x84>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
	timer3.delay = FALSE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <init_timer3+0x84>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	721a      	strb	r2, [r3, #8]
	timer3.timeout = FALSE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <init_timer3+0x84>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	725a      	strb	r2, [r3, #9]

	num_of_millis_timer3 = 0;//added 1.5.21
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <init_timer3+0x88>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40000400 	.word	0x40000400
 8000d98:	20000540 	.word	0x20000540
 8000d9c:	20000558 	.word	0x20000558

08000da0 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <init_timer4+0x78>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <init_timer4+0x78>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <init_timer4+0x7c>)
 8000db2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <init_timer4+0x7c>)
 8000dba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <init_timer4+0x7c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <init_timer4+0x7c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <init_timer4+0x7c>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <init_timer4+0x7c>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <init_timer4+0x7c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <init_timer4+0x7c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000de6:	2007      	movs	r0, #7
 8000de8:	f7ff ff2a 	bl	8000c40 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000dec:	2100      	movs	r1, #0
 8000dee:	201e      	movs	r0, #30
 8000df0:	f7ff ff66 	bl	8000cc0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 8000df4:	201e      	movs	r0, #30
 8000df6:	f7ff ff47 	bl	8000c88 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dfa:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <init_timer4+0x80>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
	timer4.timeout_count = 0;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <init_timer4+0x80>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
	timer4.delay = FALSE;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <init_timer4+0x80>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	721a      	strb	r2, [r3, #8]
	timer4.timeout = FALSE;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <init_timer4+0x80>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	725a      	strb	r2, [r3, #9]
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40000800 	.word	0x40000800
 8000e20:	2000054c 	.word	0x2000054c

08000e24 <enable_timer3>:
{
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
}

void enable_timer3(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <enable_timer3+0x18>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <enable_timer3+0x18>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40000400 	.word	0x40000400

08000e40 <enable_timer4>:

void enable_timer4(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <enable_timer4+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <enable_timer4+0x18>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40000800 	.word	0x40000800

08000e5c <disable_timer3>:
{
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
}

void disable_timer3(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <disable_timer3+0x18>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <disable_timer3+0x18>)
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40000400 	.word	0x40000400

08000e78 <disable_timer4>:

void disable_timer4(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <disable_timer4+0x18>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <disable_timer4+0x18>)
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40000800 	.word	0x40000800

08000e94 <delay_with_timer4>:
		disable_timer3();
	}
}

void delay_with_timer4(uint32_t num_of_sec)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000e9c:	f7ff ffd0 	bl	8000e40 <enable_timer4>

	timer4.countTicks = 0;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <delay_with_timer4+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
	timer4.delay = TRUE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <delay_with_timer4+0x40>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	721a      	strb	r2, [r3, #8]

	while(timer4.countTicks < num_of_sec);
 8000eac:	bf00      	nop
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <delay_with_timer4+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8fa      	bhi.n	8000eae <delay_with_timer4+0x1a>

	timer4.delay = FALSE;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <delay_with_timer4+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	721a      	strb	r2, [r3, #8]
	if(!timer4.timeout){
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <delay_with_timer4+0x40>)
 8000ec0:	7a5b      	ldrb	r3, [r3, #9]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <delay_with_timer4+0x36>
		disable_timer4();
 8000ec6:	f7ff ffd7 	bl	8000e78 <disable_timer4>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000054c 	.word	0x2000054c

08000ed8 <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000ee0:	f7ff ffae 	bl	8000e40 <enable_timer4>

	timer4.timeout = TRUE;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <timeout_with_timer4+0x44>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	725a      	strb	r2, [r3, #9]
	if(timer4.timeout_count >= num_of_sec){
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <timeout_with_timer4+0x44>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d80d      	bhi.n	8000f10 <timeout_with_timer4+0x38>
		if(!timer4.delay){
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <timeout_with_timer4+0x44>)
 8000ef6:	7a1b      	ldrb	r3, [r3, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <timeout_with_timer4+0x28>
			disable_timer4();
 8000efc:	f7ff ffbc 	bl	8000e78 <disable_timer4>
		}
		timer4.timeout = FALSE;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <timeout_with_timer4+0x44>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	725a      	strb	r2, [r3, #9]
		timer4.timeout_count = 0;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <timeout_with_timer4+0x44>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <timeout_with_timer4+0x3a>
	}
	else{
		return FALSE;
 8000f10:	2300      	movs	r3, #0
	}
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000054c 	.word	0x2000054c

08000f20 <set_timeout_timer3>:


/*This function sets timer3 num_of_millis_timer3 to param num_of_millis, and enables timer3 timeout*/
void set_timeout_timer3(uint32_t num_of_millis)//added 1.5.21
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	enable_timer3();
 8000f28:	f7ff ff7c 	bl	8000e24 <enable_timer3>

	timer3.timeout = TRUE;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <set_timeout_timer3+0x20>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	725a      	strb	r2, [r3, #9]
	num_of_millis_timer3 = num_of_millis;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <set_timeout_timer3+0x24>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000540 	.word	0x20000540
 8000f44:	20000558 	.word	0x20000558

08000f48 <timeout_done_timer3>:
/*returns true if timeout is done, otherwise returns false*/
BOOL timeout_done_timer3(void){//added 1.5.21
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

	if(timer3.timeout_count >= num_of_millis_timer3){
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <timeout_done_timer3+0x38>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <timeout_done_timer3+0x3c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d310      	bcc.n	8000f7a <timeout_done_timer3+0x32>
			if(!timer3.delay){
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <timeout_done_timer3+0x38>)
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <timeout_done_timer3+0x1c>
				disable_timer3();
 8000f60:	f7ff ff7c 	bl	8000e5c <disable_timer3>
			}
			timer3.timeout = FALSE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <timeout_done_timer3+0x38>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	725a      	strb	r2, [r3, #9]
			timer3.timeout_count = 0;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <timeout_done_timer3+0x38>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
			num_of_millis_timer3 = 0;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <timeout_done_timer3+0x3c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
			return TRUE;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <timeout_done_timer3+0x34>
		}
		else{
			return FALSE;
 8000f7a:	2300      	movs	r3, #0
		}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000540 	.word	0x20000540
 8000f84:	20000558 	.word	0x20000558

08000f88 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d119      	bne.n	8000fce <TIM2_IRQHandler+0x46>
	{
		if(timer2.delay == TRUE){
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d104      	bne.n	8000fac <TIM2_IRQHandler+0x24>
			timer2.countTicks ++;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000faa:	6013      	str	r3, [r2, #0]
		}
		if(timer2.timeout == TRUE){
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000fae:	7a5b      	ldrb	r3, [r3, #9]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d104      	bne.n	8000fbe <TIM2_IRQHandler+0x36>
			timer2.timeout_count ++;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <TIM2_IRQHandler+0x50>)
 8000fbc:	6053      	str	r3, [r2, #4]
		}

		TIM2->SR &= ~(0x0001);
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc8:	f023 0301 	bic.w	r3, r3, #1
 8000fcc:	6113      	str	r3, [r2, #16]
	}
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000534 	.word	0x20000534

08000fdc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <TIM3_IRQHandler+0x48>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d117      	bne.n	800101c <TIM3_IRQHandler+0x40>
	{
		if(timer3.delay == TRUE){
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <TIM3_IRQHandler+0x4c>)
 8000fee:	7a1b      	ldrb	r3, [r3, #8]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d104      	bne.n	8000ffe <TIM3_IRQHandler+0x22>
			timer3.countTicks ++;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <TIM3_IRQHandler+0x4c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <TIM3_IRQHandler+0x4c>)
 8000ffc:	6013      	str	r3, [r2, #0]
		}
		if(timer3.timeout == TRUE){
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <TIM3_IRQHandler+0x4c>)
 8001000:	7a5b      	ldrb	r3, [r3, #9]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d104      	bne.n	8001010 <TIM3_IRQHandler+0x34>
			timer3.timeout_count ++;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <TIM3_IRQHandler+0x4c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <TIM3_IRQHandler+0x4c>)
 800100e:	6053      	str	r3, [r2, #4]
		}
		TIM3->SR &= ~(0x0001);
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <TIM3_IRQHandler+0x48>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <TIM3_IRQHandler+0x48>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6113      	str	r3, [r2, #16]
	}
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40000400 	.word	0x40000400
 8001028:	20000540 	.word	0x20000540

0800102c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <TIM4_IRQHandler+0x48>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d117      	bne.n	800106c <TIM4_IRQHandler+0x40>
	{
		if(timer4.delay == TRUE){
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <TIM4_IRQHandler+0x4c>)
 800103e:	7a1b      	ldrb	r3, [r3, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d104      	bne.n	800104e <TIM4_IRQHandler+0x22>
			timer4.countTicks ++;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <TIM4_IRQHandler+0x4c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <TIM4_IRQHandler+0x4c>)
 800104c:	6013      	str	r3, [r2, #0]
		}
		if(timer4.timeout == TRUE){
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <TIM4_IRQHandler+0x4c>)
 8001050:	7a5b      	ldrb	r3, [r3, #9]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <TIM4_IRQHandler+0x34>
			timer4.timeout_count ++;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <TIM4_IRQHandler+0x4c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <TIM4_IRQHandler+0x4c>)
 800105e:	6053      	str	r3, [r2, #4]
		}
		TIM4->SR &= ~(0x0001);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <TIM4_IRQHandler+0x48>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	4a03      	ldr	r2, [pc, #12]	; (8001074 <TIM4_IRQHandler+0x48>)
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	6113      	str	r3, [r2, #16]
	}
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40000800 	.word	0x40000800
 8001078:	2000054c 	.word	0x2000054c

0800107c <__NVIC_SetPriorityGrouping>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4906      	ldr	r1, [pc, #24]	; (80010f8 <__NVIC_EnableIRQ+0x34>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <init_usart2+0x5c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <init_usart2+0x5c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <init_usart2+0x60>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <init_usart2+0x60>)
 8001166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800116a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <init_usart2+0x60>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <init_usart2+0x60>)
 8001172:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8001176:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <init_usart2+0x5c>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <init_usart2+0x5c>)
 800117e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001182:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <init_usart2+0x64>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <init_usart2+0x64>)
 800118a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800118e:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <init_usart2+0x64>)
 8001192:	f240 324d 	movw	r2, #845	; 0x34d
 8001196:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <init_usart2+0x64>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <init_usart2+0x64>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40004400 	.word	0x40004400

080011b8 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <init_usart1+0xb0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a29      	ldr	r2, [pc, #164]	; (8001268 <init_usart1+0xb0>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <init_usart1+0xb4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <init_usart1+0xb4>)
 80011ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011d2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <init_usart1+0xb4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <init_usart1+0xb4>)
 80011da:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011de:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <init_usart1+0xb4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <init_usart1+0xb4>)
 80011e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011ea:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <init_usart1+0xb4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <init_usart1+0xb4>)
 80011f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f6:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <init_usart1+0xb4>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <init_usart1+0xb4>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <init_usart1+0xb0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <init_usart1+0xb0>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <init_usart1+0xb8>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a16      	ldr	r2, [pc, #88]	; (8001270 <init_usart1+0xb8>)
 8001216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800121a:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <init_usart1+0xb8>)
 800121e:	2245      	movs	r2, #69	; 0x45
 8001220:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <init_usart1+0xb8>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <init_usart1+0xb8>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 800122e:	f000 f8d9 	bl	80013e4 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <init_usart1+0xb8>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <init_usart1+0xb8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800123e:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <init_usart1+0xb8>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <init_usart1+0xb8>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800124c:	2007      	movs	r0, #7
 800124e:	f7ff ff15 	bl	800107c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001252:	2100      	movs	r1, #0
 8001254:	2025      	movs	r0, #37	; 0x25
 8001256:	f7ff ff51 	bl	80010fc <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 800125a:	2025      	movs	r0, #37	; 0x25
 800125c:	f7ff ff32 	bl	80010c4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001260:	b662      	cpsie	i
	__enable_irq();

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800
 8001270:	40013800 	.word	0x40013800

08001274 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800127c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001280:	2100      	movs	r1, #0
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <set_usart2_buffer_Tx+0x3c>)
 8001284:	f000 f9a4 	bl	80015d0 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <set_usart2_buffer_Tx+0x3c>)
 800128c:	f000 f9c8 	bl	8001620 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7fe ff6d 	bl	8000170 <strlen>
 8001296:	4602      	mov	r2, r0
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <set_usart2_buffer_Tx+0x3c>)
 800129a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <set_usart2_buffer_Tx+0x3c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000055c 	.word	0x2000055c

080012b4 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ffd9 	bl	8001274 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80012c2:	e014      	b.n	80012ee <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80012c4:	bf00      	nop
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <write_usart2+0x70>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <write_usart2+0x74>)
 80012d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <write_usart2+0x74>)
 80012da:	5cd2      	ldrb	r2, [r2, r3]
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <write_usart2+0x70>)
 80012de:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <write_usart2+0x74>)
 80012e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <write_usart2+0x74>)
 80012ea:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <write_usart2+0x74>)
 80012f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <write_usart2+0x74>)
 80012f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e2      	bcc.n	80012c4 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80012fe:	bf00      	nop
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <write_usart2+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	2b40      	cmp	r3, #64	; 0x40
 800130a:	d1f9      	bne.n	8001300 <write_usart2+0x4c>
	usart2.write_index = 0;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <write_usart2+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <write_usart2+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004400 	.word	0x40004400
 8001328:	2000055c 	.word	0x2000055c

0800132c <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f835 	bl	80013a4 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 800133a:	e014      	b.n	8001366 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 800133c:	bf00      	nop
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <write_usart1+0x70>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f9      	beq.n	800133e <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <write_usart1+0x74>)
 800134c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <write_usart1+0x74>)
 8001352:	5cd2      	ldrb	r2, [r2, r3]
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <write_usart1+0x70>)
 8001356:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <write_usart1+0x74>)
 800135a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800135e:	3301      	adds	r3, #1
 8001360:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <write_usart1+0x74>)
 8001362:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <write_usart1+0x74>)
 8001368:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <write_usart1+0x74>)
 800136e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001372:	429a      	cmp	r2, r3
 8001374:	d3e2      	bcc.n	800133c <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001376:	bf00      	nop
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <write_usart1+0x70>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001380:	2b40      	cmp	r3, #64	; 0x40
 8001382:	d1f9      	bne.n	8001378 <write_usart1+0x4c>
	usart1.write_index = 0;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <write_usart1+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <write_usart1+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40013800 	.word	0x40013800
 80013a0:	20000764 	.word	0x20000764

080013a4 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	2100      	movs	r1, #0
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <set_usart1_buffer_Tx+0x3c>)
 80013b4:	f000 f90c 	bl	80015d0 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <set_usart1_buffer_Tx+0x3c>)
 80013bc:	f000 f930 	bl	8001620 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7fe fed5 	bl	8000170 <strlen>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <set_usart1_buffer_Tx+0x3c>)
 80013ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <set_usart1_buffer_Tx+0x3c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000764 	.word	0x20000764

080013e4 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80013e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ec:	2100      	movs	r1, #0
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <set_usart1_buffer_Rx+0x24>)
 80013f0:	f000 f8ee 	bl	80015d0 <memset>
	usart1.Rx_len = 0;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <set_usart1_buffer_Rx+0x28>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <set_usart1_buffer_Rx+0x28>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000964 	.word	0x20000964
 800140c:	20000764 	.word	0x20000764

08001410 <search_usart1_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <search_usart1_buffer_Rx+0x7c>)
 800141c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001420:	3301      	adds	r3, #1
 8001422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001426:	d223      	bcs.n	8001470 <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4819      	ldr	r0, [pc, #100]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 800142c:	f000 f900 	bl	8001630 <strstr>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 8001438:	f7ff ff3c 	bl	80012b4 <write_usart2>
			set_usart1_buffer_Rx();
 800143c:	f7ff ffd2 	bl	80013e4 <set_usart1_buffer_Rx>
			return (uint32_t)PASS;
 8001440:	2300      	movs	r3, #0
 8001442:	e01e      	b.n	8001482 <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 8001448:	f000 f8f2 	bl	8001630 <strstr>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 8001454:	f7ff ff2e 	bl	80012b4 <write_usart2>
			set_usart1_buffer_Rx();
 8001458:	f7ff ffc4 	bl	80013e4 <set_usart1_buffer_Rx>
			return (uint32_t)FAIL;
 800145c:	2302      	movs	r3, #2
 800145e:	e010      	b.n	8001482 <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 8001462:	f7ff ff27 	bl	80012b4 <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <search_usart1_buffer_Rx+0x84>)
 8001468:	f7ff ff24 	bl	80012b4 <write_usart2>
			return (uint32_t)STANDBY;
 800146c:	2301      	movs	r3, #1
 800146e:	e008      	b.n	8001482 <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <search_usart1_buffer_Rx+0x88>)
 8001472:	f7ff ff1f 	bl	80012b4 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <search_usart1_buffer_Rx+0x80>)
 8001478:	f7ff ff1c 	bl	80012b4 <write_usart2>
		set_usart1_buffer_Rx();
 800147c:	f7ff ffb2 	bl	80013e4 <set_usart1_buffer_Rx>
		return (uint32_t)STANDBY;
 8001480:	2301      	movs	r3, #1
	}

}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000764 	.word	0x20000764
 8001490:	20000964 	.word	0x20000964
 8001494:	08002160 	.word	0x08002160
 8001498:	08002164 	.word	0x08002164

0800149c <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <USART1_IRQHandler+0x80>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d132      	bne.n	8001512 <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <USART1_IRQHandler+0x80>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <USART1_IRQHandler+0x84>)
 80014b4:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <USART1_IRQHandler+0x88>)
 80014b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80014bc:	3301      	adds	r3, #1
 80014be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c2:	d20a      	bcs.n	80014da <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <USART1_IRQHandler+0x88>)
 80014c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <USART1_IRQHandler+0x84>)
 80014cc:	7811      	ldrb	r1, [r2, #0]
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <USART1_IRQHandler+0x88>)
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80014d8:	e00d      	b.n	80014f6 <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <USART1_IRQHandler+0x88>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <USART1_IRQHandler+0x88>)
 80014e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <USART1_IRQHandler+0x84>)
 80014ea:	7811      	ldrb	r1, [r2, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <USART1_IRQHandler+0x88>)
 80014ee:	4413      	add	r3, r2
 80014f0:	460a      	mov	r2, r1
 80014f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <USART1_IRQHandler+0x88>)
 80014f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <USART1_IRQHandler+0x88>)
 8001500:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <USART1_IRQHandler+0x88>)
 8001506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800150a:	3301      	adds	r3, #1
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <USART1_IRQHandler+0x88>)
 800150e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40013800 	.word	0x40013800
 8001520:	20000b74 	.word	0x20000b74
 8001524:	20000764 	.word	0x20000764

08001528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490e      	ldr	r1, [pc, #56]	; (8001568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0b      	ldr	r4, [pc, #44]	; (8001574 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001552:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001556:	f000 f817 	bl	8001588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff fb2b 	bl	8000bb4 <main>

0800155e <LoopForever>:

LoopForever:
    b LoopForever
 800155e:	e7fe      	b.n	800155e <LoopForever>
  ldr   r0, =_estack
 8001560:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800156c:	080021b4 	.word	0x080021b4
  ldr r2, =_sbss
 8001570:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001574:	20000b88 	.word	0x20000b88

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>
	...

0800157c <__errno>:
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <__errno+0x8>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000070 	.word	0x20000070

08001588 <__libc_init_array>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	2500      	movs	r5, #0
 800158c:	4e0c      	ldr	r6, [pc, #48]	; (80015c0 <__libc_init_array+0x38>)
 800158e:	4c0d      	ldr	r4, [pc, #52]	; (80015c4 <__libc_init_array+0x3c>)
 8001590:	1ba4      	subs	r4, r4, r6
 8001592:	10a4      	asrs	r4, r4, #2
 8001594:	42a5      	cmp	r5, r4
 8001596:	d109      	bne.n	80015ac <__libc_init_array+0x24>
 8001598:	f000 fc56 	bl	8001e48 <_init>
 800159c:	2500      	movs	r5, #0
 800159e:	4e0a      	ldr	r6, [pc, #40]	; (80015c8 <__libc_init_array+0x40>)
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <__libc_init_array+0x44>)
 80015a2:	1ba4      	subs	r4, r4, r6
 80015a4:	10a4      	asrs	r4, r4, #2
 80015a6:	42a5      	cmp	r5, r4
 80015a8:	d105      	bne.n	80015b6 <__libc_init_array+0x2e>
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
 80015ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015b0:	4798      	blx	r3
 80015b2:	3501      	adds	r5, #1
 80015b4:	e7ee      	b.n	8001594 <__libc_init_array+0xc>
 80015b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ba:	4798      	blx	r3
 80015bc:	3501      	adds	r5, #1
 80015be:	e7f2      	b.n	80015a6 <__libc_init_array+0x1e>
 80015c0:	080021ac 	.word	0x080021ac
 80015c4:	080021ac 	.word	0x080021ac
 80015c8:	080021ac 	.word	0x080021ac
 80015cc:	080021b0 	.word	0x080021b0

080015d0 <memset>:
 80015d0:	4603      	mov	r3, r0
 80015d2:	4402      	add	r2, r0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <memset+0xa>
 80015d8:	4770      	bx	lr
 80015da:	f803 1b01 	strb.w	r1, [r3], #1
 80015de:	e7f9      	b.n	80015d4 <memset+0x4>

080015e0 <siprintf>:
 80015e0:	b40e      	push	{r1, r2, r3}
 80015e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015e6:	b500      	push	{lr}
 80015e8:	b09c      	sub	sp, #112	; 0x70
 80015ea:	ab1d      	add	r3, sp, #116	; 0x74
 80015ec:	9002      	str	r0, [sp, #8]
 80015ee:	9006      	str	r0, [sp, #24]
 80015f0:	9107      	str	r1, [sp, #28]
 80015f2:	9104      	str	r1, [sp, #16]
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <siprintf+0x38>)
 80015f6:	4909      	ldr	r1, [pc, #36]	; (800161c <siprintf+0x3c>)
 80015f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80015fc:	9105      	str	r1, [sp, #20]
 80015fe:	6800      	ldr	r0, [r0, #0]
 8001600:	a902      	add	r1, sp, #8
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	f000 f888 	bl	8001718 <_svfiprintf_r>
 8001608:	2200      	movs	r2, #0
 800160a:	9b02      	ldr	r3, [sp, #8]
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	b01c      	add	sp, #112	; 0x70
 8001610:	f85d eb04 	ldr.w	lr, [sp], #4
 8001614:	b003      	add	sp, #12
 8001616:	4770      	bx	lr
 8001618:	20000070 	.word	0x20000070
 800161c:	ffff0208 	.word	0xffff0208

08001620 <strcpy>:
 8001620:	4603      	mov	r3, r0
 8001622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001626:	f803 2b01 	strb.w	r2, [r3], #1
 800162a:	2a00      	cmp	r2, #0
 800162c:	d1f9      	bne.n	8001622 <strcpy+0x2>
 800162e:	4770      	bx	lr

08001630 <strstr>:
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	7803      	ldrb	r3, [r0, #0]
 8001634:	b17b      	cbz	r3, 8001656 <strstr+0x26>
 8001636:	4604      	mov	r4, r0
 8001638:	7823      	ldrb	r3, [r4, #0]
 800163a:	4620      	mov	r0, r4
 800163c:	1c66      	adds	r6, r4, #1
 800163e:	b17b      	cbz	r3, 8001660 <strstr+0x30>
 8001640:	1e4a      	subs	r2, r1, #1
 8001642:	1e63      	subs	r3, r4, #1
 8001644:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001648:	b14d      	cbz	r5, 800165e <strstr+0x2e>
 800164a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800164e:	4634      	mov	r4, r6
 8001650:	42af      	cmp	r7, r5
 8001652:	d0f7      	beq.n	8001644 <strstr+0x14>
 8001654:	e7f0      	b.n	8001638 <strstr+0x8>
 8001656:	780b      	ldrb	r3, [r1, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf18      	it	ne
 800165c:	2000      	movne	r0, #0
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001660:	4618      	mov	r0, r3
 8001662:	e7fc      	b.n	800165e <strstr+0x2e>

08001664 <__ssputs_r>:
 8001664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001668:	688e      	ldr	r6, [r1, #8]
 800166a:	4682      	mov	sl, r0
 800166c:	429e      	cmp	r6, r3
 800166e:	460c      	mov	r4, r1
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	d837      	bhi.n	80016e6 <__ssputs_r+0x82>
 8001676:	898a      	ldrh	r2, [r1, #12]
 8001678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800167c:	d031      	beq.n	80016e2 <__ssputs_r+0x7e>
 800167e:	2302      	movs	r3, #2
 8001680:	6825      	ldr	r5, [r4, #0]
 8001682:	6909      	ldr	r1, [r1, #16]
 8001684:	1a6f      	subs	r7, r5, r1
 8001686:	6965      	ldr	r5, [r4, #20]
 8001688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800168c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001690:	f109 0301 	add.w	r3, r9, #1
 8001694:	443b      	add	r3, r7
 8001696:	429d      	cmp	r5, r3
 8001698:	bf38      	it	cc
 800169a:	461d      	movcc	r5, r3
 800169c:	0553      	lsls	r3, r2, #21
 800169e:	d530      	bpl.n	8001702 <__ssputs_r+0x9e>
 80016a0:	4629      	mov	r1, r5
 80016a2:	f000 fb37 	bl	8001d14 <_malloc_r>
 80016a6:	4606      	mov	r6, r0
 80016a8:	b950      	cbnz	r0, 80016c0 <__ssputs_r+0x5c>
 80016aa:	230c      	movs	r3, #12
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f8ca 3000 	str.w	r3, [sl]
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ba:	81a3      	strh	r3, [r4, #12]
 80016bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c0:	463a      	mov	r2, r7
 80016c2:	6921      	ldr	r1, [r4, #16]
 80016c4:	f000 fab6 	bl	8001c34 <memcpy>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	81a3      	strh	r3, [r4, #12]
 80016d4:	6126      	str	r6, [r4, #16]
 80016d6:	443e      	add	r6, r7
 80016d8:	6026      	str	r6, [r4, #0]
 80016da:	464e      	mov	r6, r9
 80016dc:	6165      	str	r5, [r4, #20]
 80016de:	1bed      	subs	r5, r5, r7
 80016e0:	60a5      	str	r5, [r4, #8]
 80016e2:	454e      	cmp	r6, r9
 80016e4:	d900      	bls.n	80016e8 <__ssputs_r+0x84>
 80016e6:	464e      	mov	r6, r9
 80016e8:	4632      	mov	r2, r6
 80016ea:	4641      	mov	r1, r8
 80016ec:	6820      	ldr	r0, [r4, #0]
 80016ee:	f000 faac 	bl	8001c4a <memmove>
 80016f2:	68a3      	ldr	r3, [r4, #8]
 80016f4:	2000      	movs	r0, #0
 80016f6:	1b9b      	subs	r3, r3, r6
 80016f8:	60a3      	str	r3, [r4, #8]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	441e      	add	r6, r3
 80016fe:	6026      	str	r6, [r4, #0]
 8001700:	e7dc      	b.n	80016bc <__ssputs_r+0x58>
 8001702:	462a      	mov	r2, r5
 8001704:	f000 fb60 	bl	8001dc8 <_realloc_r>
 8001708:	4606      	mov	r6, r0
 800170a:	2800      	cmp	r0, #0
 800170c:	d1e2      	bne.n	80016d4 <__ssputs_r+0x70>
 800170e:	6921      	ldr	r1, [r4, #16]
 8001710:	4650      	mov	r0, sl
 8001712:	f000 fab3 	bl	8001c7c <_free_r>
 8001716:	e7c8      	b.n	80016aa <__ssputs_r+0x46>

08001718 <_svfiprintf_r>:
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171c:	461d      	mov	r5, r3
 800171e:	898b      	ldrh	r3, [r1, #12]
 8001720:	b09d      	sub	sp, #116	; 0x74
 8001722:	061f      	lsls	r7, r3, #24
 8001724:	4680      	mov	r8, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4616      	mov	r6, r2
 800172a:	d50f      	bpl.n	800174c <_svfiprintf_r+0x34>
 800172c:	690b      	ldr	r3, [r1, #16]
 800172e:	b96b      	cbnz	r3, 800174c <_svfiprintf_r+0x34>
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	f000 faef 	bl	8001d14 <_malloc_r>
 8001736:	6020      	str	r0, [r4, #0]
 8001738:	6120      	str	r0, [r4, #16]
 800173a:	b928      	cbnz	r0, 8001748 <_svfiprintf_r+0x30>
 800173c:	230c      	movs	r3, #12
 800173e:	f8c8 3000 	str.w	r3, [r8]
 8001742:	f04f 30ff 	mov.w	r0, #4294967295
 8001746:	e0c8      	b.n	80018da <_svfiprintf_r+0x1c2>
 8001748:	2340      	movs	r3, #64	; 0x40
 800174a:	6163      	str	r3, [r4, #20]
 800174c:	2300      	movs	r3, #0
 800174e:	9309      	str	r3, [sp, #36]	; 0x24
 8001750:	2320      	movs	r3, #32
 8001752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001756:	2330      	movs	r3, #48	; 0x30
 8001758:	f04f 0b01 	mov.w	fp, #1
 800175c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001760:	9503      	str	r5, [sp, #12]
 8001762:	4637      	mov	r7, r6
 8001764:	463d      	mov	r5, r7
 8001766:	f815 3b01 	ldrb.w	r3, [r5], #1
 800176a:	b10b      	cbz	r3, 8001770 <_svfiprintf_r+0x58>
 800176c:	2b25      	cmp	r3, #37	; 0x25
 800176e:	d13e      	bne.n	80017ee <_svfiprintf_r+0xd6>
 8001770:	ebb7 0a06 	subs.w	sl, r7, r6
 8001774:	d00b      	beq.n	800178e <_svfiprintf_r+0x76>
 8001776:	4653      	mov	r3, sl
 8001778:	4632      	mov	r2, r6
 800177a:	4621      	mov	r1, r4
 800177c:	4640      	mov	r0, r8
 800177e:	f7ff ff71 	bl	8001664 <__ssputs_r>
 8001782:	3001      	adds	r0, #1
 8001784:	f000 80a4 	beq.w	80018d0 <_svfiprintf_r+0x1b8>
 8001788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800178a:	4453      	add	r3, sl
 800178c:	9309      	str	r3, [sp, #36]	; 0x24
 800178e:	783b      	ldrb	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 809d 	beq.w	80018d0 <_svfiprintf_r+0x1b8>
 8001796:	2300      	movs	r3, #0
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017a0:	9304      	str	r3, [sp, #16]
 80017a2:	9307      	str	r3, [sp, #28]
 80017a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017a8:	931a      	str	r3, [sp, #104]	; 0x68
 80017aa:	462f      	mov	r7, r5
 80017ac:	2205      	movs	r2, #5
 80017ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80017b2:	4850      	ldr	r0, [pc, #320]	; (80018f4 <_svfiprintf_r+0x1dc>)
 80017b4:	f000 fa30 	bl	8001c18 <memchr>
 80017b8:	9b04      	ldr	r3, [sp, #16]
 80017ba:	b9d0      	cbnz	r0, 80017f2 <_svfiprintf_r+0xda>
 80017bc:	06d9      	lsls	r1, r3, #27
 80017be:	bf44      	itt	mi
 80017c0:	2220      	movmi	r2, #32
 80017c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017c6:	071a      	lsls	r2, r3, #28
 80017c8:	bf44      	itt	mi
 80017ca:	222b      	movmi	r2, #43	; 0x2b
 80017cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017d0:	782a      	ldrb	r2, [r5, #0]
 80017d2:	2a2a      	cmp	r2, #42	; 0x2a
 80017d4:	d015      	beq.n	8001802 <_svfiprintf_r+0xea>
 80017d6:	462f      	mov	r7, r5
 80017d8:	2000      	movs	r0, #0
 80017da:	250a      	movs	r5, #10
 80017dc:	9a07      	ldr	r2, [sp, #28]
 80017de:	4639      	mov	r1, r7
 80017e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017e4:	3b30      	subs	r3, #48	; 0x30
 80017e6:	2b09      	cmp	r3, #9
 80017e8:	d94d      	bls.n	8001886 <_svfiprintf_r+0x16e>
 80017ea:	b1b8      	cbz	r0, 800181c <_svfiprintf_r+0x104>
 80017ec:	e00f      	b.n	800180e <_svfiprintf_r+0xf6>
 80017ee:	462f      	mov	r7, r5
 80017f0:	e7b8      	b.n	8001764 <_svfiprintf_r+0x4c>
 80017f2:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <_svfiprintf_r+0x1dc>)
 80017f4:	463d      	mov	r5, r7
 80017f6:	1a80      	subs	r0, r0, r2
 80017f8:	fa0b f000 	lsl.w	r0, fp, r0
 80017fc:	4318      	orrs	r0, r3
 80017fe:	9004      	str	r0, [sp, #16]
 8001800:	e7d3      	b.n	80017aa <_svfiprintf_r+0x92>
 8001802:	9a03      	ldr	r2, [sp, #12]
 8001804:	1d11      	adds	r1, r2, #4
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	9103      	str	r1, [sp, #12]
 800180a:	2a00      	cmp	r2, #0
 800180c:	db01      	blt.n	8001812 <_svfiprintf_r+0xfa>
 800180e:	9207      	str	r2, [sp, #28]
 8001810:	e004      	b.n	800181c <_svfiprintf_r+0x104>
 8001812:	4252      	negs	r2, r2
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	9207      	str	r2, [sp, #28]
 800181a:	9304      	str	r3, [sp, #16]
 800181c:	783b      	ldrb	r3, [r7, #0]
 800181e:	2b2e      	cmp	r3, #46	; 0x2e
 8001820:	d10c      	bne.n	800183c <_svfiprintf_r+0x124>
 8001822:	787b      	ldrb	r3, [r7, #1]
 8001824:	2b2a      	cmp	r3, #42	; 0x2a
 8001826:	d133      	bne.n	8001890 <_svfiprintf_r+0x178>
 8001828:	9b03      	ldr	r3, [sp, #12]
 800182a:	3702      	adds	r7, #2
 800182c:	1d1a      	adds	r2, r3, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	9203      	str	r2, [sp, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	bfb8      	it	lt
 8001836:	f04f 33ff 	movlt.w	r3, #4294967295
 800183a:	9305      	str	r3, [sp, #20]
 800183c:	4d2e      	ldr	r5, [pc, #184]	; (80018f8 <_svfiprintf_r+0x1e0>)
 800183e:	2203      	movs	r2, #3
 8001840:	7839      	ldrb	r1, [r7, #0]
 8001842:	4628      	mov	r0, r5
 8001844:	f000 f9e8 	bl	8001c18 <memchr>
 8001848:	b138      	cbz	r0, 800185a <_svfiprintf_r+0x142>
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	1b40      	subs	r0, r0, r5
 800184e:	fa03 f000 	lsl.w	r0, r3, r0
 8001852:	9b04      	ldr	r3, [sp, #16]
 8001854:	3701      	adds	r7, #1
 8001856:	4303      	orrs	r3, r0
 8001858:	9304      	str	r3, [sp, #16]
 800185a:	7839      	ldrb	r1, [r7, #0]
 800185c:	2206      	movs	r2, #6
 800185e:	4827      	ldr	r0, [pc, #156]	; (80018fc <_svfiprintf_r+0x1e4>)
 8001860:	1c7e      	adds	r6, r7, #1
 8001862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001866:	f000 f9d7 	bl	8001c18 <memchr>
 800186a:	2800      	cmp	r0, #0
 800186c:	d038      	beq.n	80018e0 <_svfiprintf_r+0x1c8>
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <_svfiprintf_r+0x1e8>)
 8001870:	bb13      	cbnz	r3, 80018b8 <_svfiprintf_r+0x1a0>
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	3307      	adds	r3, #7
 8001876:	f023 0307 	bic.w	r3, r3, #7
 800187a:	3308      	adds	r3, #8
 800187c:	9303      	str	r3, [sp, #12]
 800187e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001880:	444b      	add	r3, r9
 8001882:	9309      	str	r3, [sp, #36]	; 0x24
 8001884:	e76d      	b.n	8001762 <_svfiprintf_r+0x4a>
 8001886:	fb05 3202 	mla	r2, r5, r2, r3
 800188a:	2001      	movs	r0, #1
 800188c:	460f      	mov	r7, r1
 800188e:	e7a6      	b.n	80017de <_svfiprintf_r+0xc6>
 8001890:	2300      	movs	r3, #0
 8001892:	250a      	movs	r5, #10
 8001894:	4619      	mov	r1, r3
 8001896:	3701      	adds	r7, #1
 8001898:	9305      	str	r3, [sp, #20]
 800189a:	4638      	mov	r0, r7
 800189c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018a0:	3a30      	subs	r2, #48	; 0x30
 80018a2:	2a09      	cmp	r2, #9
 80018a4:	d903      	bls.n	80018ae <_svfiprintf_r+0x196>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0c8      	beq.n	800183c <_svfiprintf_r+0x124>
 80018aa:	9105      	str	r1, [sp, #20]
 80018ac:	e7c6      	b.n	800183c <_svfiprintf_r+0x124>
 80018ae:	fb05 2101 	mla	r1, r5, r1, r2
 80018b2:	2301      	movs	r3, #1
 80018b4:	4607      	mov	r7, r0
 80018b6:	e7f0      	b.n	800189a <_svfiprintf_r+0x182>
 80018b8:	ab03      	add	r3, sp, #12
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	4622      	mov	r2, r4
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_svfiprintf_r+0x1ec>)
 80018c0:	a904      	add	r1, sp, #16
 80018c2:	4640      	mov	r0, r8
 80018c4:	f3af 8000 	nop.w
 80018c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018cc:	4681      	mov	r9, r0
 80018ce:	d1d6      	bne.n	800187e <_svfiprintf_r+0x166>
 80018d0:	89a3      	ldrh	r3, [r4, #12]
 80018d2:	065b      	lsls	r3, r3, #25
 80018d4:	f53f af35 	bmi.w	8001742 <_svfiprintf_r+0x2a>
 80018d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018da:	b01d      	add	sp, #116	; 0x74
 80018dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e0:	ab03      	add	r3, sp, #12
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4622      	mov	r2, r4
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_svfiprintf_r+0x1ec>)
 80018e8:	a904      	add	r1, sp, #16
 80018ea:	4640      	mov	r0, r8
 80018ec:	f000 f882 	bl	80019f4 <_printf_i>
 80018f0:	e7ea      	b.n	80018c8 <_svfiprintf_r+0x1b0>
 80018f2:	bf00      	nop
 80018f4:	08002178 	.word	0x08002178
 80018f8:	0800217e 	.word	0x0800217e
 80018fc:	08002182 	.word	0x08002182
 8001900:	00000000 	.word	0x00000000
 8001904:	08001665 	.word	0x08001665

08001908 <_printf_common>:
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190c:	4691      	mov	r9, r2
 800190e:	461f      	mov	r7, r3
 8001910:	688a      	ldr	r2, [r1, #8]
 8001912:	690b      	ldr	r3, [r1, #16]
 8001914:	4606      	mov	r6, r0
 8001916:	4293      	cmp	r3, r2
 8001918:	bfb8      	it	lt
 800191a:	4613      	movlt	r3, r2
 800191c:	f8c9 3000 	str.w	r3, [r9]
 8001920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001924:	460c      	mov	r4, r1
 8001926:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800192a:	b112      	cbz	r2, 8001932 <_printf_common+0x2a>
 800192c:	3301      	adds	r3, #1
 800192e:	f8c9 3000 	str.w	r3, [r9]
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	0699      	lsls	r1, r3, #26
 8001936:	bf42      	ittt	mi
 8001938:	f8d9 3000 	ldrmi.w	r3, [r9]
 800193c:	3302      	addmi	r3, #2
 800193e:	f8c9 3000 	strmi.w	r3, [r9]
 8001942:	6825      	ldr	r5, [r4, #0]
 8001944:	f015 0506 	ands.w	r5, r5, #6
 8001948:	d107      	bne.n	800195a <_printf_common+0x52>
 800194a:	f104 0a19 	add.w	sl, r4, #25
 800194e:	68e3      	ldr	r3, [r4, #12]
 8001950:	f8d9 2000 	ldr.w	r2, [r9]
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	42ab      	cmp	r3, r5
 8001958:	dc29      	bgt.n	80019ae <_printf_common+0xa6>
 800195a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	3300      	adds	r3, #0
 8001962:	bf18      	it	ne
 8001964:	2301      	movne	r3, #1
 8001966:	0692      	lsls	r2, r2, #26
 8001968:	d42e      	bmi.n	80019c8 <_printf_common+0xc0>
 800196a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800196e:	4639      	mov	r1, r7
 8001970:	4630      	mov	r0, r6
 8001972:	47c0      	blx	r8
 8001974:	3001      	adds	r0, #1
 8001976:	d021      	beq.n	80019bc <_printf_common+0xb4>
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	68e5      	ldr	r5, [r4, #12]
 800197c:	f003 0306 	and.w	r3, r3, #6
 8001980:	2b04      	cmp	r3, #4
 8001982:	bf18      	it	ne
 8001984:	2500      	movne	r5, #0
 8001986:	f8d9 2000 	ldr.w	r2, [r9]
 800198a:	f04f 0900 	mov.w	r9, #0
 800198e:	bf08      	it	eq
 8001990:	1aad      	subeq	r5, r5, r2
 8001992:	68a3      	ldr	r3, [r4, #8]
 8001994:	6922      	ldr	r2, [r4, #16]
 8001996:	bf08      	it	eq
 8001998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800199c:	4293      	cmp	r3, r2
 800199e:	bfc4      	itt	gt
 80019a0:	1a9b      	subgt	r3, r3, r2
 80019a2:	18ed      	addgt	r5, r5, r3
 80019a4:	341a      	adds	r4, #26
 80019a6:	454d      	cmp	r5, r9
 80019a8:	d11a      	bne.n	80019e0 <_printf_common+0xd8>
 80019aa:	2000      	movs	r0, #0
 80019ac:	e008      	b.n	80019c0 <_printf_common+0xb8>
 80019ae:	2301      	movs	r3, #1
 80019b0:	4652      	mov	r2, sl
 80019b2:	4639      	mov	r1, r7
 80019b4:	4630      	mov	r0, r6
 80019b6:	47c0      	blx	r8
 80019b8:	3001      	adds	r0, #1
 80019ba:	d103      	bne.n	80019c4 <_printf_common+0xbc>
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c4:	3501      	adds	r5, #1
 80019c6:	e7c2      	b.n	800194e <_printf_common+0x46>
 80019c8:	2030      	movs	r0, #48	; 0x30
 80019ca:	18e1      	adds	r1, r4, r3
 80019cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019d6:	4422      	add	r2, r4
 80019d8:	3302      	adds	r3, #2
 80019da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019de:	e7c4      	b.n	800196a <_printf_common+0x62>
 80019e0:	2301      	movs	r3, #1
 80019e2:	4622      	mov	r2, r4
 80019e4:	4639      	mov	r1, r7
 80019e6:	4630      	mov	r0, r6
 80019e8:	47c0      	blx	r8
 80019ea:	3001      	adds	r0, #1
 80019ec:	d0e6      	beq.n	80019bc <_printf_common+0xb4>
 80019ee:	f109 0901 	add.w	r9, r9, #1
 80019f2:	e7d8      	b.n	80019a6 <_printf_common+0x9e>

080019f4 <_printf_i>:
 80019f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80019fc:	460c      	mov	r4, r1
 80019fe:	7e09      	ldrb	r1, [r1, #24]
 8001a00:	b085      	sub	sp, #20
 8001a02:	296e      	cmp	r1, #110	; 0x6e
 8001a04:	4617      	mov	r7, r2
 8001a06:	4606      	mov	r6, r0
 8001a08:	4698      	mov	r8, r3
 8001a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a0c:	f000 80b3 	beq.w	8001b76 <_printf_i+0x182>
 8001a10:	d822      	bhi.n	8001a58 <_printf_i+0x64>
 8001a12:	2963      	cmp	r1, #99	; 0x63
 8001a14:	d036      	beq.n	8001a84 <_printf_i+0x90>
 8001a16:	d80a      	bhi.n	8001a2e <_printf_i+0x3a>
 8001a18:	2900      	cmp	r1, #0
 8001a1a:	f000 80b9 	beq.w	8001b90 <_printf_i+0x19c>
 8001a1e:	2958      	cmp	r1, #88	; 0x58
 8001a20:	f000 8083 	beq.w	8001b2a <_printf_i+0x136>
 8001a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001a2c:	e032      	b.n	8001a94 <_printf_i+0xa0>
 8001a2e:	2964      	cmp	r1, #100	; 0x64
 8001a30:	d001      	beq.n	8001a36 <_printf_i+0x42>
 8001a32:	2969      	cmp	r1, #105	; 0x69
 8001a34:	d1f6      	bne.n	8001a24 <_printf_i+0x30>
 8001a36:	6820      	ldr	r0, [r4, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	0605      	lsls	r5, r0, #24
 8001a3c:	f103 0104 	add.w	r1, r3, #4
 8001a40:	d52a      	bpl.n	8001a98 <_printf_i+0xa4>
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da03      	bge.n	8001a52 <_printf_i+0x5e>
 8001a4a:	222d      	movs	r2, #45	; 0x2d
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a52:	486f      	ldr	r0, [pc, #444]	; (8001c10 <_printf_i+0x21c>)
 8001a54:	220a      	movs	r2, #10
 8001a56:	e039      	b.n	8001acc <_printf_i+0xd8>
 8001a58:	2973      	cmp	r1, #115	; 0x73
 8001a5a:	f000 809d 	beq.w	8001b98 <_printf_i+0x1a4>
 8001a5e:	d808      	bhi.n	8001a72 <_printf_i+0x7e>
 8001a60:	296f      	cmp	r1, #111	; 0x6f
 8001a62:	d020      	beq.n	8001aa6 <_printf_i+0xb2>
 8001a64:	2970      	cmp	r1, #112	; 0x70
 8001a66:	d1dd      	bne.n	8001a24 <_printf_i+0x30>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	e003      	b.n	8001a7a <_printf_i+0x86>
 8001a72:	2975      	cmp	r1, #117	; 0x75
 8001a74:	d017      	beq.n	8001aa6 <_printf_i+0xb2>
 8001a76:	2978      	cmp	r1, #120	; 0x78
 8001a78:	d1d4      	bne.n	8001a24 <_printf_i+0x30>
 8001a7a:	2378      	movs	r3, #120	; 0x78
 8001a7c:	4865      	ldr	r0, [pc, #404]	; (8001c14 <_printf_i+0x220>)
 8001a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a82:	e055      	b.n	8001b30 <_printf_i+0x13c>
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a8a:	1d19      	adds	r1, r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6011      	str	r1, [r2, #0]
 8001a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a94:	2301      	movs	r3, #1
 8001a96:	e08c      	b.n	8001bb2 <_printf_i+0x1be>
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a9e:	6011      	str	r1, [r2, #0]
 8001aa0:	bf18      	it	ne
 8001aa2:	b21b      	sxthne	r3, r3
 8001aa4:	e7cf      	b.n	8001a46 <_printf_i+0x52>
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	6825      	ldr	r5, [r4, #0]
 8001aaa:	1d18      	adds	r0, r3, #4
 8001aac:	6010      	str	r0, [r2, #0]
 8001aae:	0628      	lsls	r0, r5, #24
 8001ab0:	d501      	bpl.n	8001ab6 <_printf_i+0xc2>
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e002      	b.n	8001abc <_printf_i+0xc8>
 8001ab6:	0668      	lsls	r0, r5, #25
 8001ab8:	d5fb      	bpl.n	8001ab2 <_printf_i+0xbe>
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	296f      	cmp	r1, #111	; 0x6f
 8001abe:	bf14      	ite	ne
 8001ac0:	220a      	movne	r2, #10
 8001ac2:	2208      	moveq	r2, #8
 8001ac4:	4852      	ldr	r0, [pc, #328]	; (8001c10 <_printf_i+0x21c>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001acc:	6865      	ldr	r5, [r4, #4]
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	60a5      	str	r5, [r4, #8]
 8001ad2:	f2c0 8095 	blt.w	8001c00 <_printf_i+0x20c>
 8001ad6:	6821      	ldr	r1, [r4, #0]
 8001ad8:	f021 0104 	bic.w	r1, r1, #4
 8001adc:	6021      	str	r1, [r4, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d13d      	bne.n	8001b5e <_printf_i+0x16a>
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	f040 808e 	bne.w	8001c04 <_printf_i+0x210>
 8001ae8:	4665      	mov	r5, ip
 8001aea:	2a08      	cmp	r2, #8
 8001aec:	d10b      	bne.n	8001b06 <_printf_i+0x112>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	d508      	bpl.n	8001b06 <_printf_i+0x112>
 8001af4:	6923      	ldr	r3, [r4, #16]
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	bfde      	ittt	le
 8001afc:	2330      	movle	r3, #48	; 0x30
 8001afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b06:	ebac 0305 	sub.w	r3, ip, r5
 8001b0a:	6123      	str	r3, [r4, #16]
 8001b0c:	f8cd 8000 	str.w	r8, [sp]
 8001b10:	463b      	mov	r3, r7
 8001b12:	aa03      	add	r2, sp, #12
 8001b14:	4621      	mov	r1, r4
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7ff fef6 	bl	8001908 <_printf_common>
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d14d      	bne.n	8001bbc <_printf_i+0x1c8>
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	b005      	add	sp, #20
 8001b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <_printf_i+0x21c>)
 8001b2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001b30:	6813      	ldr	r3, [r2, #0]
 8001b32:	6821      	ldr	r1, [r4, #0]
 8001b34:	1d1d      	adds	r5, r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6015      	str	r5, [r2, #0]
 8001b3a:	060a      	lsls	r2, r1, #24
 8001b3c:	d50b      	bpl.n	8001b56 <_printf_i+0x162>
 8001b3e:	07ca      	lsls	r2, r1, #31
 8001b40:	bf44      	itt	mi
 8001b42:	f041 0120 	orrmi.w	r1, r1, #32
 8001b46:	6021      	strmi	r1, [r4, #0]
 8001b48:	b91b      	cbnz	r3, 8001b52 <_printf_i+0x15e>
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	f022 0220 	bic.w	r2, r2, #32
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	2210      	movs	r2, #16
 8001b54:	e7b7      	b.n	8001ac6 <_printf_i+0xd2>
 8001b56:	064d      	lsls	r5, r1, #25
 8001b58:	bf48      	it	mi
 8001b5a:	b29b      	uxthmi	r3, r3
 8001b5c:	e7ef      	b.n	8001b3e <_printf_i+0x14a>
 8001b5e:	4665      	mov	r5, ip
 8001b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b64:	fb02 3311 	mls	r3, r2, r1, r3
 8001b68:	5cc3      	ldrb	r3, [r0, r3]
 8001b6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b6e:	460b      	mov	r3, r1
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d1f5      	bne.n	8001b60 <_printf_i+0x16c>
 8001b74:	e7b9      	b.n	8001aea <_printf_i+0xf6>
 8001b76:	6813      	ldr	r3, [r2, #0]
 8001b78:	6825      	ldr	r5, [r4, #0]
 8001b7a:	1d18      	adds	r0, r3, #4
 8001b7c:	6961      	ldr	r1, [r4, #20]
 8001b7e:	6010      	str	r0, [r2, #0]
 8001b80:	0628      	lsls	r0, r5, #24
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	d501      	bpl.n	8001b8a <_printf_i+0x196>
 8001b86:	6019      	str	r1, [r3, #0]
 8001b88:	e002      	b.n	8001b90 <_printf_i+0x19c>
 8001b8a:	066a      	lsls	r2, r5, #25
 8001b8c:	d5fb      	bpl.n	8001b86 <_printf_i+0x192>
 8001b8e:	8019      	strh	r1, [r3, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	4665      	mov	r5, ip
 8001b94:	6123      	str	r3, [r4, #16]
 8001b96:	e7b9      	b.n	8001b0c <_printf_i+0x118>
 8001b98:	6813      	ldr	r3, [r2, #0]
 8001b9a:	1d19      	adds	r1, r3, #4
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	681d      	ldr	r5, [r3, #0]
 8001ba0:	6862      	ldr	r2, [r4, #4]
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f000 f837 	bl	8001c18 <memchr>
 8001baa:	b108      	cbz	r0, 8001bb0 <_printf_i+0x1bc>
 8001bac:	1b40      	subs	r0, r0, r5
 8001bae:	6060      	str	r0, [r4, #4]
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	6123      	str	r3, [r4, #16]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bba:	e7a7      	b.n	8001b0c <_printf_i+0x118>
 8001bbc:	6923      	ldr	r3, [r4, #16]
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	4639      	mov	r1, r7
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	47c0      	blx	r8
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	d0aa      	beq.n	8001b20 <_printf_i+0x12c>
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	079b      	lsls	r3, r3, #30
 8001bce:	d413      	bmi.n	8001bf8 <_printf_i+0x204>
 8001bd0:	68e0      	ldr	r0, [r4, #12]
 8001bd2:	9b03      	ldr	r3, [sp, #12]
 8001bd4:	4298      	cmp	r0, r3
 8001bd6:	bfb8      	it	lt
 8001bd8:	4618      	movlt	r0, r3
 8001bda:	e7a3      	b.n	8001b24 <_printf_i+0x130>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	464a      	mov	r2, r9
 8001be0:	4639      	mov	r1, r7
 8001be2:	4630      	mov	r0, r6
 8001be4:	47c0      	blx	r8
 8001be6:	3001      	adds	r0, #1
 8001be8:	d09a      	beq.n	8001b20 <_printf_i+0x12c>
 8001bea:	3501      	adds	r5, #1
 8001bec:	68e3      	ldr	r3, [r4, #12]
 8001bee:	9a03      	ldr	r2, [sp, #12]
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	42ab      	cmp	r3, r5
 8001bf4:	dcf2      	bgt.n	8001bdc <_printf_i+0x1e8>
 8001bf6:	e7eb      	b.n	8001bd0 <_printf_i+0x1dc>
 8001bf8:	2500      	movs	r5, #0
 8001bfa:	f104 0919 	add.w	r9, r4, #25
 8001bfe:	e7f5      	b.n	8001bec <_printf_i+0x1f8>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ac      	bne.n	8001b5e <_printf_i+0x16a>
 8001c04:	7803      	ldrb	r3, [r0, #0]
 8001c06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c0e:	e76c      	b.n	8001aea <_printf_i+0xf6>
 8001c10:	08002189 	.word	0x08002189
 8001c14:	0800219a 	.word	0x0800219a

08001c18 <memchr>:
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	b2c9      	uxtb	r1, r1
 8001c1c:	4402      	add	r2, r0
 8001c1e:	4290      	cmp	r0, r2
 8001c20:	4603      	mov	r3, r0
 8001c22:	d101      	bne.n	8001c28 <memchr+0x10>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e003      	b.n	8001c30 <memchr+0x18>
 8001c28:	781c      	ldrb	r4, [r3, #0]
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	428c      	cmp	r4, r1
 8001c2e:	d1f6      	bne.n	8001c1e <memchr+0x6>
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <memcpy>:
 8001c34:	b510      	push	{r4, lr}
 8001c36:	1e43      	subs	r3, r0, #1
 8001c38:	440a      	add	r2, r1
 8001c3a:	4291      	cmp	r1, r2
 8001c3c:	d100      	bne.n	8001c40 <memcpy+0xc>
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c48:	e7f7      	b.n	8001c3a <memcpy+0x6>

08001c4a <memmove>:
 8001c4a:	4288      	cmp	r0, r1
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	eb01 0302 	add.w	r3, r1, r2
 8001c52:	d807      	bhi.n	8001c64 <memmove+0x1a>
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4299      	cmp	r1, r3
 8001c58:	d00a      	beq.n	8001c70 <memmove+0x26>
 8001c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001c62:	e7f8      	b.n	8001c56 <memmove+0xc>
 8001c64:	4283      	cmp	r3, r0
 8001c66:	d9f5      	bls.n	8001c54 <memmove+0xa>
 8001c68:	1881      	adds	r1, r0, r2
 8001c6a:	1ad2      	subs	r2, r2, r3
 8001c6c:	42d3      	cmn	r3, r2
 8001c6e:	d100      	bne.n	8001c72 <memmove+0x28>
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001c7a:	e7f7      	b.n	8001c6c <memmove+0x22>

08001c7c <_free_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4605      	mov	r5, r0
 8001c80:	2900      	cmp	r1, #0
 8001c82:	d043      	beq.n	8001d0c <_free_r+0x90>
 8001c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c88:	1f0c      	subs	r4, r1, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bfb8      	it	lt
 8001c8e:	18e4      	addlt	r4, r4, r3
 8001c90:	f000 f8d0 	bl	8001e34 <__malloc_lock>
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <_free_r+0x94>)
 8001c96:	6813      	ldr	r3, [r2, #0]
 8001c98:	4610      	mov	r0, r2
 8001c9a:	b933      	cbnz	r3, 8001caa <_free_r+0x2e>
 8001c9c:	6063      	str	r3, [r4, #4]
 8001c9e:	6014      	str	r4, [r2, #0]
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca6:	f000 b8c6 	b.w	8001e36 <__malloc_unlock>
 8001caa:	42a3      	cmp	r3, r4
 8001cac:	d90b      	bls.n	8001cc6 <_free_r+0x4a>
 8001cae:	6821      	ldr	r1, [r4, #0]
 8001cb0:	1862      	adds	r2, r4, r1
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	bf01      	itttt	eq
 8001cb6:	681a      	ldreq	r2, [r3, #0]
 8001cb8:	685b      	ldreq	r3, [r3, #4]
 8001cba:	1852      	addeq	r2, r2, r1
 8001cbc:	6022      	streq	r2, [r4, #0]
 8001cbe:	6063      	str	r3, [r4, #4]
 8001cc0:	6004      	str	r4, [r0, #0]
 8001cc2:	e7ed      	b.n	8001ca0 <_free_r+0x24>
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	b10a      	cbz	r2, 8001cce <_free_r+0x52>
 8001cca:	42a2      	cmp	r2, r4
 8001ccc:	d9fa      	bls.n	8001cc4 <_free_r+0x48>
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	1858      	adds	r0, r3, r1
 8001cd2:	42a0      	cmp	r0, r4
 8001cd4:	d10b      	bne.n	8001cee <_free_r+0x72>
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	4401      	add	r1, r0
 8001cda:	1858      	adds	r0, r3, r1
 8001cdc:	4282      	cmp	r2, r0
 8001cde:	6019      	str	r1, [r3, #0]
 8001ce0:	d1de      	bne.n	8001ca0 <_free_r+0x24>
 8001ce2:	6810      	ldr	r0, [r2, #0]
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	4401      	add	r1, r0
 8001ce8:	6019      	str	r1, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	e7d8      	b.n	8001ca0 <_free_r+0x24>
 8001cee:	d902      	bls.n	8001cf6 <_free_r+0x7a>
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	e7d4      	b.n	8001ca0 <_free_r+0x24>
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	1821      	adds	r1, r4, r0
 8001cfa:	428a      	cmp	r2, r1
 8001cfc:	bf01      	itttt	eq
 8001cfe:	6811      	ldreq	r1, [r2, #0]
 8001d00:	6852      	ldreq	r2, [r2, #4]
 8001d02:	1809      	addeq	r1, r1, r0
 8001d04:	6021      	streq	r1, [r4, #0]
 8001d06:	6062      	str	r2, [r4, #4]
 8001d08:	605c      	str	r4, [r3, #4]
 8001d0a:	e7c9      	b.n	8001ca0 <_free_r+0x24>
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000b78 	.word	0x20000b78

08001d14 <_malloc_r>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	1ccd      	adds	r5, r1, #3
 8001d18:	f025 0503 	bic.w	r5, r5, #3
 8001d1c:	3508      	adds	r5, #8
 8001d1e:	2d0c      	cmp	r5, #12
 8001d20:	bf38      	it	cc
 8001d22:	250c      	movcc	r5, #12
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	4606      	mov	r6, r0
 8001d28:	db01      	blt.n	8001d2e <_malloc_r+0x1a>
 8001d2a:	42a9      	cmp	r1, r5
 8001d2c:	d903      	bls.n	8001d36 <_malloc_r+0x22>
 8001d2e:	230c      	movs	r3, #12
 8001d30:	6033      	str	r3, [r6, #0]
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
 8001d36:	f000 f87d 	bl	8001e34 <__malloc_lock>
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <_malloc_r+0xac>)
 8001d3c:	6814      	ldr	r4, [r2, #0]
 8001d3e:	4621      	mov	r1, r4
 8001d40:	b991      	cbnz	r1, 8001d68 <_malloc_r+0x54>
 8001d42:	4c20      	ldr	r4, [pc, #128]	; (8001dc4 <_malloc_r+0xb0>)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	b91b      	cbnz	r3, 8001d50 <_malloc_r+0x3c>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f000 f863 	bl	8001e14 <_sbrk_r>
 8001d4e:	6020      	str	r0, [r4, #0]
 8001d50:	4629      	mov	r1, r5
 8001d52:	4630      	mov	r0, r6
 8001d54:	f000 f85e 	bl	8001e14 <_sbrk_r>
 8001d58:	1c43      	adds	r3, r0, #1
 8001d5a:	d124      	bne.n	8001da6 <_malloc_r+0x92>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	4630      	mov	r0, r6
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	f000 f868 	bl	8001e36 <__malloc_unlock>
 8001d66:	e7e4      	b.n	8001d32 <_malloc_r+0x1e>
 8001d68:	680b      	ldr	r3, [r1, #0]
 8001d6a:	1b5b      	subs	r3, r3, r5
 8001d6c:	d418      	bmi.n	8001da0 <_malloc_r+0x8c>
 8001d6e:	2b0b      	cmp	r3, #11
 8001d70:	d90f      	bls.n	8001d92 <_malloc_r+0x7e>
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	18cc      	adds	r4, r1, r3
 8001d76:	50cd      	str	r5, [r1, r3]
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 f85c 	bl	8001e36 <__malloc_unlock>
 8001d7e:	f104 000b 	add.w	r0, r4, #11
 8001d82:	1d23      	adds	r3, r4, #4
 8001d84:	f020 0007 	bic.w	r0, r0, #7
 8001d88:	1ac3      	subs	r3, r0, r3
 8001d8a:	d0d3      	beq.n	8001d34 <_malloc_r+0x20>
 8001d8c:	425a      	negs	r2, r3
 8001d8e:	50e2      	str	r2, [r4, r3]
 8001d90:	e7d0      	b.n	8001d34 <_malloc_r+0x20>
 8001d92:	684b      	ldr	r3, [r1, #4]
 8001d94:	428c      	cmp	r4, r1
 8001d96:	bf16      	itet	ne
 8001d98:	6063      	strne	r3, [r4, #4]
 8001d9a:	6013      	streq	r3, [r2, #0]
 8001d9c:	460c      	movne	r4, r1
 8001d9e:	e7eb      	b.n	8001d78 <_malloc_r+0x64>
 8001da0:	460c      	mov	r4, r1
 8001da2:	6849      	ldr	r1, [r1, #4]
 8001da4:	e7cc      	b.n	8001d40 <_malloc_r+0x2c>
 8001da6:	1cc4      	adds	r4, r0, #3
 8001da8:	f024 0403 	bic.w	r4, r4, #3
 8001dac:	42a0      	cmp	r0, r4
 8001dae:	d005      	beq.n	8001dbc <_malloc_r+0xa8>
 8001db0:	1a21      	subs	r1, r4, r0
 8001db2:	4630      	mov	r0, r6
 8001db4:	f000 f82e 	bl	8001e14 <_sbrk_r>
 8001db8:	3001      	adds	r0, #1
 8001dba:	d0cf      	beq.n	8001d5c <_malloc_r+0x48>
 8001dbc:	6025      	str	r5, [r4, #0]
 8001dbe:	e7db      	b.n	8001d78 <_malloc_r+0x64>
 8001dc0:	20000b78 	.word	0x20000b78
 8001dc4:	20000b7c 	.word	0x20000b7c

08001dc8 <_realloc_r>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	4607      	mov	r7, r0
 8001dcc:	4614      	mov	r4, r2
 8001dce:	460e      	mov	r6, r1
 8001dd0:	b921      	cbnz	r1, 8001ddc <_realloc_r+0x14>
 8001dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	f7ff bf9c 	b.w	8001d14 <_malloc_r>
 8001ddc:	b922      	cbnz	r2, 8001de8 <_realloc_r+0x20>
 8001dde:	f7ff ff4d 	bl	8001c7c <_free_r>
 8001de2:	4625      	mov	r5, r4
 8001de4:	4628      	mov	r0, r5
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de8:	f000 f826 	bl	8001e38 <_malloc_usable_size_r>
 8001dec:	42a0      	cmp	r0, r4
 8001dee:	d20f      	bcs.n	8001e10 <_realloc_r+0x48>
 8001df0:	4621      	mov	r1, r4
 8001df2:	4638      	mov	r0, r7
 8001df4:	f7ff ff8e 	bl	8001d14 <_malloc_r>
 8001df8:	4605      	mov	r5, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d0f2      	beq.n	8001de4 <_realloc_r+0x1c>
 8001dfe:	4631      	mov	r1, r6
 8001e00:	4622      	mov	r2, r4
 8001e02:	f7ff ff17 	bl	8001c34 <memcpy>
 8001e06:	4631      	mov	r1, r6
 8001e08:	4638      	mov	r0, r7
 8001e0a:	f7ff ff37 	bl	8001c7c <_free_r>
 8001e0e:	e7e9      	b.n	8001de4 <_realloc_r+0x1c>
 8001e10:	4635      	mov	r5, r6
 8001e12:	e7e7      	b.n	8001de4 <_realloc_r+0x1c>

08001e14 <_sbrk_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	2300      	movs	r3, #0
 8001e18:	4c05      	ldr	r4, [pc, #20]	; (8001e30 <_sbrk_r+0x1c>)
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	f7fe fee2 	bl	8000be8 <_sbrk>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d102      	bne.n	8001e2e <_sbrk_r+0x1a>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	b103      	cbz	r3, 8001e2e <_sbrk_r+0x1a>
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	20000b84 	.word	0x20000b84

08001e34 <__malloc_lock>:
 8001e34:	4770      	bx	lr

08001e36 <__malloc_unlock>:
 8001e36:	4770      	bx	lr

08001e38 <_malloc_usable_size_r>:
 8001e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e3c:	1f18      	subs	r0, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bfbc      	itt	lt
 8001e42:	580b      	ldrlt	r3, [r1, r0]
 8001e44:	18c0      	addlt	r0, r0, r3
 8001e46:	4770      	bx	lr

08001e48 <_init>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr

08001e54 <_fini>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	bf00      	nop
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr
