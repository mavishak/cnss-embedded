
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00010500  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  08000500  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000000  08000500  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08000500  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bcd  00000000  00000000  00010529  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007d7  00000000  00000000  000130f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  000138d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  000139e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000603  00000000  00000000  00013ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000019a2  00000000  00000000  000140bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005757b  00000000  00000000  00015a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006cfd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f0  00000000  00000000  0006d054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000440 	.word	0x08000440

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000440 	.word	0x08000440

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <init_sensor_led_response>:
	/*~~~______________~~~*/

}


void init_sensor_led_response(){
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	/*~~~USING LD2 (PA5) as output~~~*/

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; //enable reset and control clock for port A (see reference manual 8.3.7)
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <init_sensor_led_response+0x38>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <init_sensor_led_response+0x38>)
 800018a:	f043 0304 	orr.w	r3, r3, #4
 800018e:	6193      	str	r3, [r2, #24]

	/*Configure led PA5*/
	GPIOA->CRL &= 0xFF0FFFFF; //reset CNF and MODE only for bit 5, leave all the rest as they are
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <init_sensor_led_response+0x3c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a09      	ldr	r2, [pc, #36]	; (80001bc <init_sensor_led_response+0x3c>)
 8000196:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800019a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00200000; //PA5 configured to General purpose output push-pull | Output mode, max speed 2 MHz
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <init_sensor_led_response+0x3c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <init_sensor_led_response+0x3c>)
 80001a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a6:	6013      	str	r3, [r2, #0]

	/*Init state*/
	state = OFF;
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <init_sensor_led_response+0x40>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]


}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800
 80001c0:	200000a4 	.word	0x200000a4

080001c4 <toggle_led>:


void toggle_led()
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	if(state == OFF)
 80001c8:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <toggle_led+0x3c>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d109      	bne.n	80001e4 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <toggle_led+0x40>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a0b      	ldr	r2, [pc, #44]	; (8000204 <toggle_led+0x40>)
 80001d6:	f043 0320 	orr.w	r3, r3, #32
 80001da:	60d3      	str	r3, [r2, #12]
		state=ON;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <toggle_led+0x3c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 80001e2:	e008      	b.n	80001f6 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <toggle_led+0x40>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <toggle_led+0x40>)
 80001ea:	f023 0320 	bic.w	r3, r3, #32
 80001ee:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <toggle_led+0x3c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	200000a4 	.word	0x200000a4
 8000204:	40010800 	.word	0x40010800

08000208 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <EXTI4_IRQHandler+0x1c>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <EXTI4_IRQHandler+0x1c>)
 8000212:	f043 0310 	orr.w	r3, r3, #16
 8000216:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 8000218:	f7ff ffd4 	bl	80001c4 <toggle_led>
	write(); //This chould be executed using the event_queue
 800021c:	f000 f87e 	bl	800031c <write>

}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010400 	.word	0x40010400

08000228 <EXTI15_10_IRQHandler>:

/*Interrupt service routine for sensor using pin D6 (PB10) as input mode.
 *Note: Not in use.*/
void EXTI15_10_IRQHandler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <EXTI15_10_IRQHandler+0x18>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <EXTI15_10_IRQHandler+0x18>)
 8000232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000236:	6153      	str	r3, [r2, #20]
	toggle_led();
 8000238:	f7ff ffc4 	bl	80001c4 <toggle_led>

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40010400 	.word	0x40010400

08000244 <main>:




int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	init_sensor_led_response();
 8000248:	f7ff ff9a 	bl	8000180 <init_sensor_led_response>
	init_buffer_Tx((uint8_t*)MSG);
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <main+0x18>)
 800024e:	f000 f847 	bl	80002e0 <init_buffer_Tx>
	init_usart();
 8000252:	f000 f80b 	bl	800026c <init_usart>
	while(1)
	{
		write();
 8000256:	f000 f861 	bl	800031c <write>
 800025a:	e7fc      	b.n	8000256 <main+0x12>
 800025c:	08000458 	.word	0x08000458

08000260 <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0

}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <init_usart>:

/*This dunctions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *The code is not complete there are still problems with Buad Rate probably as a misconception of the clock tree.
 *Note: Interrupts are not enabled intentionally.*/
void init_usart(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0



	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7)
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <init_usart+0x68>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <init_usart+0x68>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6193      	str	r3, [r2, #24]

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <init_usart+0x68>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <init_usart+0x68>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are exept for bit 2 (see RM 9.2.1)
 8000288:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <init_usart+0x6c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <init_usart+0x6c>)
 800028e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000292:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <init_usart+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <init_usart+0x6c>)
 800029a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800029e:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <init_usart+0x68>)
 80002a2:	69db      	ldr	r3, [r3, #28]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <init_usart+0x68>)
 80002a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002aa:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <init_usart+0x70>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <init_usart+0x70>)
 80002b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b6:	60d3      	str	r3, [r2, #12]
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	//USART2->BRR = 0xEA6; // 9600 bps (see https://www.programmersought.com/article/11991629979/ and RM 27.6.3)
	//USART2->BRR = 0xD05;
	USART2->BRR = 0x34D;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <init_usart+0x70>)
 80002ba:	f240 324d 	movw	r2, #845	; 0x34d
 80002be:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <init_usart+0x70>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a05      	ldr	r2, [pc, #20]	; (80002dc <init_usart+0x70>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40004400 	.word	0x40004400

080002e0 <init_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void init_buffer_Tx(uint8_t *msg){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]


	memset(buff.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	2100      	movs	r1, #0
 80002ec:	480a      	ldr	r0, [pc, #40]	; (8000318 <init_buffer_Tx+0x38>)
 80002ee:	f000 f897 	bl	8000420 <memset>
	if(BUFF_SIZE - (strlen((char*)msg) + 1) < 0){
		strcpy((char*)buff.Tx,"Error msg to Long");
	}
	else{
		strcpy((char*)buff.Tx,(char*)msg);
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <init_buffer_Tx+0x38>)
 80002f6:	f000 f89b 	bl	8000430 <strcpy>
	}

	buff.Tx_len = strlen((char*)msg);
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f7ff ff38 	bl	8000170 <strlen>
 8000300:	4602      	mov	r2, r0
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <init_buffer_Tx+0x38>)
 8000304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	buff.write_index = 0;
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <init_buffer_Tx+0x38>)
 800030a:	2200      	movs	r2, #0
 800030c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000001c 	.word	0x2000001c

0800031c <write>:

/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0


	while(buff.write_index < buff.Tx_len)
 8000320:	e014      	b.n	800034c <write+0x30>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transferd (TXE != 1)(see RM 27.6.1)
 8000322:	bf00      	nop
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <write+0x60>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <write+0x8>
		USART2->DR = (uint8_t)(buff.Tx[buff.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <write+0x64>)
 8000332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <write+0x64>)
 8000338:	5cd2      	ldrb	r2, [r2, r3]
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <write+0x60>)
 800033c:	605a      	str	r2, [r3, #4]
		//USART2->DR = (uint8_t)('U' & 0xFF); //for testing
		buff.write_index++;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <write+0x64>)
 8000340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000344:	3301      	adds	r3, #1
 8000346:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <write+0x64>)
 8000348:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	while(buff.write_index < buff.Tx_len)
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <write+0x64>)
 800034e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <write+0x64>)
 8000354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000358:	429a      	cmp	r2, r3
 800035a:	d3e2      	bcc.n	8000322 <write+0x6>
	}
	buff.write_index = 0;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <write+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmition is complete TC=1 (see RM 27.6.1)
 8000364:	bf00      	nop
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <write+0x60>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800036e:	2b40      	cmp	r3, #64	; 0x40
 8000370:	d1f9      	bne.n	8000366 <write+0x4a>

}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40004400 	.word	0x40004400
 8000380:	2000001c 	.word	0x2000001c

08000384 <Reset_Handler>:
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
 8000386:	4685      	mov	sp, r0
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x6>)
 800038a:	490e      	ldr	r1, [pc, #56]	; (80003c4 <LoopForever+0xa>)
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <LoopForever+0xe>)
 800038e:	2300      	movs	r3, #0
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:
 8000392:	58d4      	ldr	r4, [r2, r3]
 8000394:	50c4      	str	r4, [r0, r3]
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:
 8000398:	18c4      	adds	r4, r0, r3
 800039a:	428c      	cmp	r4, r1
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <LoopForever+0x12>)
 80003a0:	4c0b      	ldr	r4, [pc, #44]	; (80003d0 <LoopForever+0x16>)
 80003a2:	2300      	movs	r3, #0
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:
 80003aa:	42a2      	cmp	r2, r4
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>
 80003ae:	f3af 8000 	nop.w
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
 80003b6:	f7ff ff45 	bl	8000244 <main>

080003ba <LoopForever>:
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
 80003bc:	20005000 	.word	0x20005000
 80003c0:	20000000 	.word	0x20000000
 80003c4:	20000000 	.word	0x20000000
 80003c8:	08000500 	.word	0x08000500
 80003cc:	20000000 	.word	0x20000000
 80003d0:	200000a8 	.word	0x200000a8

080003d4 <ADC1_2_IRQHandler>:
 80003d4:	e7fe      	b.n	80003d4 <ADC1_2_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	2500      	movs	r5, #0
 80003dc:	4e0c      	ldr	r6, [pc, #48]	; (8000410 <__libc_init_array+0x38>)
 80003de:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003e0:	1ba4      	subs	r4, r4, r6
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	f000 f82a 	bl	8000440 <_init>
 80003ec:	2500      	movs	r5, #0
 80003ee:	4e0a      	ldr	r6, [pc, #40]	; (8000418 <__libc_init_array+0x40>)
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <__libc_init_array+0x44>)
 80003f2:	1ba4      	subs	r4, r4, r6
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000400:	4798      	blx	r3
 8000402:	3501      	adds	r5, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800040a:	4798      	blx	r3
 800040c:	3501      	adds	r5, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	080004f8 	.word	0x080004f8
 8000414:	080004f8 	.word	0x080004f8
 8000418:	080004f8 	.word	0x080004f8
 800041c:	080004fc 	.word	0x080004fc

08000420 <memset>:
 8000420:	4603      	mov	r3, r0
 8000422:	4402      	add	r2, r0
 8000424:	4293      	cmp	r3, r2
 8000426:	d100      	bne.n	800042a <memset+0xa>
 8000428:	4770      	bx	lr
 800042a:	f803 1b01 	strb.w	r1, [r3], #1
 800042e:	e7f9      	b.n	8000424 <memset+0x4>

08000430 <strcpy>:
 8000430:	4603      	mov	r3, r0
 8000432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000436:	f803 2b01 	strb.w	r2, [r3], #1
 800043a:	2a00      	cmp	r2, #0
 800043c:	d1f9      	bne.n	8000432 <strcpy+0x2>
 800043e:	4770      	bx	lr

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
