
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023c4  080023c4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080023c4  080023c4  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023c4  080023c4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080023cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200000d4  080024a0  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  080024a0  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007211  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013d1  00000000  00000000  0002730e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000398  00000000  00000000  000286e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  00028a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f37  00000000  00000000  00028d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003e47  00000000  00000000  0002acbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059379  00000000  00000000  0002eb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00087e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fdc  00000000  00000000  00087efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001fdc 	.word	0x08001fdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08001fdc 	.word	0x08001fdc

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <alert_Handler>:

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");
}

void *alert_Handler(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0

//	disable_timer2();
//	disable_timer3();
//	disable_sensor();

	uint32_t i  = 3;
 8000186:	2303      	movs	r3, #3
 8000188:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800018a:	e002      	b.n	8000192 <alert_Handler+0x12>
		i--;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3b01      	subs	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d008      	beq.n	80001aa <alert_Handler+0x2a>
 8000198:	f000 f80e 	bl	80001b8 <recordAlert>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d103      	bne.n	80001aa <alert_Handler+0x2a>
 80001a2:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <alert_Handler+0x34>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f0      	bne.n	800018c <alert_Handler+0xc>


//	enable_timer2();
//	enable_timer3();
//	enable_sensor();
	return NULL;
 80001aa:	2300      	movs	r3, #0

}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000478 	.word	0x20000478

080001b8 <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In recordAlert()\r\n"); // for debugging
 80001bc:	4835      	ldr	r0, [pc, #212]	; (8000294 <recordAlert+0xdc>)
 80001be:	f001 f891 	bl	80012e4 <write_usart2>

	connection_closed = TRUE;
 80001c2:	4b35      	ldr	r3, [pc, #212]	; (8000298 <recordAlert+0xe0>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	701a      	strb	r2, [r3, #0]

	// Reset ESP8266
	 if(!reset(3,6)){ //!TODO THIS FUNCTIONALITY NEEDS FIXING!!!
 80001c8:	2106      	movs	r1, #6
 80001ca:	2003      	movs	r0, #3
 80001cc:	f000 f874 	bl	80002b8 <reset>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d101      	bne.n	80001da <recordAlert+0x22>
		return FALSE;
 80001d6:	2300      	movs	r3, #0
 80001d8:	e05a      	b.n	8000290 <recordAlert+0xd8>
	 }
	 delay_with_timer4(1);
 80001da:	2001      	movs	r0, #1
 80001dc:	f000 fea4 	bl	8000f28 <delay_with_timer4>

	write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 80001e0:	482e      	ldr	r0, [pc, #184]	; (800029c <recordAlert+0xe4>)
 80001e2:	f001 f87f 	bl	80012e4 <write_usart2>


	//Set client mode
	if(!setClientMode(2,10)){
 80001e6:	210a      	movs	r1, #10
 80001e8:	2002      	movs	r0, #2
 80001ea:	f000 f8a7 	bl	800033c <setClientMode>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d101      	bne.n	80001f8 <recordAlert+0x40>
		return FALSE;
 80001f4:	2300      	movs	r3, #0
 80001f6:	e04b      	b.n	8000290 <recordAlert+0xd8>
	}
	write_usart2((uint8_t*)"1\r\n");
 80001f8:	4829      	ldr	r0, [pc, #164]	; (80002a0 <recordAlert+0xe8>)
 80001fa:	f001 f873 	bl	80012e4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(2,6)){
 80001fe:	2106      	movs	r1, #6
 8000200:	2002      	movs	r0, #2
 8000202:	f000 f8dd 	bl	80003c0 <joinAccessPoint>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d101      	bne.n	8000210 <recordAlert+0x58>
		return FALSE;
 800020c:	2300      	movs	r3, #0
 800020e:	e03f      	b.n	8000290 <recordAlert+0xd8>
	}
	write_usart2((uint8_t*)"2\r\n");
 8000210:	4824      	ldr	r0, [pc, #144]	; (80002a4 <recordAlert+0xec>)
 8000212:	f001 f867 	bl	80012e4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000216:	231e      	movs	r3, #30
 8000218:	2206      	movs	r2, #6
 800021a:	2102      	movs	r1, #2
 800021c:	2002      	movs	r0, #2
 800021e:	f000 f923 	bl	8000468 <connectFirebaseHost>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d101      	bne.n	800022c <recordAlert+0x74>
		return FALSE;
 8000228:	2300      	movs	r3, #0
 800022a:	e031      	b.n	8000290 <recordAlert+0xd8>
	}
	write_usart2((uint8_t*)"3\r\n");
 800022c:	481e      	ldr	r0, [pc, #120]	; (80002a8 <recordAlert+0xf0>)
 800022e:	f001 f859 	bl	80012e4 <write_usart2>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//write_usart2((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 8000232:	f000 f9bf 	bl	80005b4 <createPostMsg>
	write_usart2((uint8_t*)"4\r\n");
 8000236:	481d      	ldr	r0, [pc, #116]	; (80002ac <recordAlert+0xf4>)
 8000238:	f001 f854 	bl	80012e4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 800023c:	2328      	movs	r3, #40	; 0x28
 800023e:	221e      	movs	r2, #30
 8000240:	2102      	movs	r1, #2
 8000242:	2002      	movs	r0, #2
 8000244:	f000 f9fc 	bl	8000640 <sendRequest>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d109      	bne.n	8000262 <recordAlert+0xaa>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 800024e:	2106      	movs	r1, #6
 8000250:	2002      	movs	r0, #2
 8000252:	f000 facf 	bl	80007f4 <closeConnection>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <recordAlert+0xe0>)
 800025c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800025e:	2300      	movs	r3, #0
 8000260:	e016      	b.n	8000290 <recordAlert+0xd8>
	}
	write_usart2((uint8_t*)"5\r\n");
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <recordAlert+0xf8>)
 8000264:	f001 f83e 	bl	80012e4 <write_usart2>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 8000268:	2078      	movs	r0, #120	; 0x78
 800026a:	f000 fa91 	bl	8000790 <readResponse>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d109      	bne.n	8000288 <recordAlert+0xd0>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 8000274:	2106      	movs	r1, #6
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fabc 	bl	80007f4 <closeConnection>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <recordAlert+0xe0>)
 8000282:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000284:	2300      	movs	r3, #0
 8000286:	e003      	b.n	8000290 <recordAlert+0xd8>
	}

	write_usart2((uint8_t*)"6\r\n");
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <recordAlert+0xfc>)
 800028a:	f001 f82b 	bl	80012e4 <write_usart2>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//write_usart2((uint8_t*)"7\r\n");

	return TRUE;
 800028e:	2301      	movs	r3, #1

}
 8000290:	4618      	mov	r0, r3
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08002020 	.word	0x08002020
 8000298:	20000478 	.word	0x20000478
 800029c:	08002034 	.word	0x08002034
 80002a0:	08002038 	.word	0x08002038
 80002a4:	0800203c 	.word	0x0800203c
 80002a8:	08002040 	.word	0x08002040
 80002ac:	08002044 	.word	0x08002044
 80002b0:	08002048 	.word	0x08002048
 80002b4:	0800204c 	.word	0x0800204c

080002b8 <reset>:
/*This function resets ESP8266 modem with AT+RST command,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.
 * !TODO This functionality does not work properly - needs fixing.*/
BOOL reset(uint32_t tries, uint32_t timeout){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <reset+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_RST);
 80002c8:	4819      	ldr	r0, [pc, #100]	; (8000330 <reset+0x78>)
 80002ca:	f001 f8bd 	bl	8001448 <write_usart1>
	while(tries > 0){
 80002ce:	e024      	b.n	800031a <reset+0x62>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 80002d0:	f000 ff42 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d009      	beq.n	80002ee <reset+0x36>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80002da:	4916      	ldr	r1, [pc, #88]	; (8000334 <reset+0x7c>)
 80002dc:	4816      	ldr	r0, [pc, #88]	; (8000338 <reset+0x80>)
 80002de:	f001 f93b 	bl	8001558 <USART1_search_buffer_Rx>
 80002e2:	4603      	mov	r3, r0
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <reset+0x74>)
 80002e8:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80002ea:	f000 ff3f 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <reset+0x74>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d105      	bne.n	8000302 <reset+0x4a>
 80002f6:	6838      	ldr	r0, [r7, #0]
 80002f8:	f000 fe2e 	bl	8000f58 <timeout_with_timer4>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0e6      	beq.n	80002d0 <reset+0x18>
			}
		}
		if(found == PASS){
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <reset+0x74>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d101      	bne.n	800030e <reset+0x56>
			return TRUE;
 800030a:	2301      	movs	r3, #1
 800030c:	e009      	b.n	8000322 <reset+0x6a>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3b01      	subs	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_RST);
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <reset+0x78>)
 8000316:	f001 f897 	bl	8001448 <write_usart1>
	while(tries > 0){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1e6      	bne.n	80002ee <reset+0x36>
		}
	}
	return FALSE;
 8000320:	2300      	movs	r3, #0

}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000006c 	.word	0x2000006c
 8000330:	08002080 	.word	0x08002080
 8000334:	08002070 	.word	0x08002070
 8000338:	08002078 	.word	0x08002078

0800033c <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <setClientMode+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 800034c:	4819      	ldr	r0, [pc, #100]	; (80003b4 <setClientMode+0x78>)
 800034e:	f001 f87b 	bl	8001448 <write_usart1>
	while(tries > 0){
 8000352:	e024      	b.n	800039e <setClientMode+0x62>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000354:	f000 ff00 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d009      	beq.n	8000372 <setClientMode+0x36>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 800035e:	4916      	ldr	r1, [pc, #88]	; (80003b8 <setClientMode+0x7c>)
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <setClientMode+0x80>)
 8000362:	f001 f8f9 	bl	8001558 <USART1_search_buffer_Rx>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <setClientMode+0x74>)
 800036c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800036e:	f000 fefd 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <setClientMode+0x74>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d105      	bne.n	8000386 <setClientMode+0x4a>
 800037a:	6838      	ldr	r0, [r7, #0]
 800037c:	f000 fdec 	bl	8000f58 <timeout_with_timer4>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0e6      	beq.n	8000354 <setClientMode+0x18>
			}
		}
		if(found == PASS){
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <setClientMode+0x74>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <setClientMode+0x56>
			return TRUE;
 800038e:	2301      	movs	r3, #1
 8000390:	e009      	b.n	80003a6 <setClientMode+0x6a>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3b01      	subs	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <setClientMode+0x78>)
 800039a:	f001 f855 	bl	8001448 <write_usart1>
	while(tries > 0){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1e6      	bne.n	8000372 <setClientMode+0x36>
		}
	}
	return FALSE;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000006c 	.word	0x2000006c
 80003b4:	0800208c 	.word	0x0800208c
 80003b8:	08002070 	.word	0x08002070
 80003bc:	08002078 	.word	0x08002078

080003c0 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80003ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ce:	2100      	movs	r1, #0
 80003d0:	481e      	ldr	r0, [pc, #120]	; (800044c <joinAccessPoint+0x8c>)
 80003d2:	f001 f9d0 	bl	8001776 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <joinAccessPoint+0x90>)
 80003d8:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <joinAccessPoint+0x94>)
 80003da:	491f      	ldr	r1, [pc, #124]	; (8000458 <joinAccessPoint+0x98>)
 80003dc:	481b      	ldr	r0, [pc, #108]	; (800044c <joinAccessPoint+0x8c>)
 80003de:	f001 f9d3 	bl	8001788 <siprintf>

	found = STANDBY;
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <joinAccessPoint+0x9c>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80003e8:	4818      	ldr	r0, [pc, #96]	; (800044c <joinAccessPoint+0x8c>)
 80003ea:	f001 f82d 	bl	8001448 <write_usart1>
	while(tries > 0){
 80003ee:	e024      	b.n	800043a <joinAccessPoint+0x7a>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 80003f0:	f000 feb2 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d009      	beq.n	800040e <joinAccessPoint+0x4e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80003fa:	4919      	ldr	r1, [pc, #100]	; (8000460 <joinAccessPoint+0xa0>)
 80003fc:	4819      	ldr	r0, [pc, #100]	; (8000464 <joinAccessPoint+0xa4>)
 80003fe:	f001 f8ab 	bl	8001558 <USART1_search_buffer_Rx>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <joinAccessPoint+0x9c>)
 8000408:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800040a:	f000 feaf 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 800040e:	4b13      	ldr	r3, [pc, #76]	; (800045c <joinAccessPoint+0x9c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d105      	bne.n	8000422 <joinAccessPoint+0x62>
 8000416:	6838      	ldr	r0, [r7, #0]
 8000418:	f000 fd9e 	bl	8000f58 <timeout_with_timer4>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0e6      	beq.n	80003f0 <joinAccessPoint+0x30>
			}
		}
		if(found == PASS){
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <joinAccessPoint+0x9c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d101      	bne.n	800042e <joinAccessPoint+0x6e>
			return TRUE;
 800042a:	2301      	movs	r3, #1
 800042c:	e009      	b.n	8000442 <joinAccessPoint+0x82>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3b01      	subs	r3, #1
 8000432:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <joinAccessPoint+0x8c>)
 8000436:	f001 f807 	bl	8001448 <write_usart1>
	while(tries > 0){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1e6      	bne.n	800040e <joinAccessPoint+0x4e>
		}
	}
	return FALSE;
 8000440:	2300      	movs	r3, #0

}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000f0 	.word	0x200000f0
 8000450:	0800209c 	.word	0x0800209c
 8000454:	080020a8 	.word	0x080020a8
 8000458:	080020b4 	.word	0x080020b4
 800045c:	2000006c 	.word	0x2000006c
 8000460:	080020cc 	.word	0x080020cc
 8000464:	08002078 	.word	0x08002078

08000468 <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 8000476:	4b46      	ldr	r3, [pc, #280]	; (8000590 <connectFirebaseHost+0x128>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 800047c:	4845      	ldr	r0, [pc, #276]	; (8000594 <connectFirebaseHost+0x12c>)
 800047e:	f000 ffe3 	bl	8001448 <write_usart1>
	while(_ssl_tries > 0){
 8000482:	e022      	b.n	80004ca <connectFirebaseHost+0x62>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000484:	f000 fe68 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d009      	beq.n	80004a2 <connectFirebaseHost+0x3a>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800048e:	4942      	ldr	r1, [pc, #264]	; (8000598 <connectFirebaseHost+0x130>)
 8000490:	4842      	ldr	r0, [pc, #264]	; (800059c <connectFirebaseHost+0x134>)
 8000492:	f001 f861 	bl	8001558 <USART1_search_buffer_Rx>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <connectFirebaseHost+0x128>)
 800049c:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800049e:	f000 fe65 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 80004a2:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <connectFirebaseHost+0x128>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d105      	bne.n	80004b6 <connectFirebaseHost+0x4e>
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 fd54 	bl	8000f58 <timeout_with_timer4>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0e6      	beq.n	8000484 <connectFirebaseHost+0x1c>
			}
		}
		if(found == PASS){
 80004b6:	4b36      	ldr	r3, [pc, #216]	; (8000590 <connectFirebaseHost+0x128>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d009      	beq.n	80004d2 <connectFirebaseHost+0x6a>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 80004c4:	4833      	ldr	r0, [pc, #204]	; (8000594 <connectFirebaseHost+0x12c>)
 80004c6:	f000 ffbf 	bl	8001448 <write_usart1>
	while(_ssl_tries > 0){
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1e8      	bne.n	80004a2 <connectFirebaseHost+0x3a>
 80004d0:	e000      	b.n	80004d4 <connectFirebaseHost+0x6c>
			break; //move on to next command
 80004d2:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <connectFirebaseHost+0x128>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d003      	beq.n	80004e4 <connectFirebaseHost+0x7c>
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <connectFirebaseHost+0x128>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d101      	bne.n	80004e8 <connectFirebaseHost+0x80>
		return FALSE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	e04f      	b.n	8000588 <connectFirebaseHost+0x120>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80004e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ec:	2100      	movs	r1, #0
 80004ee:	482c      	ldr	r0, [pc, #176]	; (80005a0 <connectFirebaseHost+0x138>)
 80004f0:	f001 f941 	bl	8001776 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <connectFirebaseHost+0x13c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <connectFirebaseHost+0x140>)
 80004fa:	492c      	ldr	r1, [pc, #176]	; (80005ac <connectFirebaseHost+0x144>)
 80004fc:	4828      	ldr	r0, [pc, #160]	; (80005a0 <connectFirebaseHost+0x138>)
 80004fe:	f001 f943 	bl	8001788 <siprintf>

	found = STANDBY;
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <connectFirebaseHost+0x128>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000508:	4825      	ldr	r0, [pc, #148]	; (80005a0 <connectFirebaseHost+0x138>)
 800050a:	f000 ff9d 	bl	8001448 <write_usart1>
	while(_cipstart_tries > 0){
 800050e:	e037      	b.n	8000580 <connectFirebaseHost+0x118>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000510:	f000 fe22 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d009      	beq.n	800052e <connectFirebaseHost+0xc6>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 800051a:	491f      	ldr	r1, [pc, #124]	; (8000598 <connectFirebaseHost+0x130>)
 800051c:	481f      	ldr	r0, [pc, #124]	; (800059c <connectFirebaseHost+0x134>)
 800051e:	f001 f81b 	bl	8001558 <USART1_search_buffer_Rx>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <connectFirebaseHost+0x128>)
 8000528:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 800052a:	f000 fe1f 	bl	800116c <USART1_NEW_LINE_READ_set>
			}
			if(found == STANDBY){
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <connectFirebaseHost+0x128>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10e      	bne.n	8000554 <connectFirebaseHost+0xec>
				if(USART1_NEW_LINE_FOUND_get()){
 8000536:	f000 fe0f 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d009      	beq.n	8000554 <connectFirebaseHost+0xec>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 8000540:	4915      	ldr	r1, [pc, #84]	; (8000598 <connectFirebaseHost+0x130>)
 8000542:	481b      	ldr	r0, [pc, #108]	; (80005b0 <connectFirebaseHost+0x148>)
 8000544:	f001 f808 	bl	8001558 <USART1_search_buffer_Rx>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <connectFirebaseHost+0x128>)
 800054e:	701a      	strb	r2, [r3, #0]
					USART1_NEW_LINE_READ_set();
 8000550:	f000 fe0c 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <connectFirebaseHost+0x128>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d105      	bne.n	8000568 <connectFirebaseHost+0x100>
 800055c:	6838      	ldr	r0, [r7, #0]
 800055e:	f000 fcfb 	bl	8000f58 <timeout_with_timer4>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d3      	beq.n	8000510 <connectFirebaseHost+0xa8>
				}
			}
		}
		if(found == PASS){
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <connectFirebaseHost+0x128>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d101      	bne.n	8000574 <connectFirebaseHost+0x10c>
			return TRUE;
 8000570:	2301      	movs	r3, #1
 8000572:	e009      	b.n	8000588 <connectFirebaseHost+0x120>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3b01      	subs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <connectFirebaseHost+0x138>)
 800057c:	f000 ff64 	bl	8001448 <write_usart1>
	while(_cipstart_tries > 0){
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1e6      	bne.n	8000554 <connectFirebaseHost+0xec>
		}
	}
	return FALSE;
 8000586:	2300      	movs	r3, #0



}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000006c 	.word	0x2000006c
 8000594:	080020d4 	.word	0x080020d4
 8000598:	08002070 	.word	0x08002070
 800059c:	08002078 	.word	0x08002078
 80005a0:	200000f0 	.word	0x200000f0
 80005a4:	20000058 	.word	0x20000058
 80005a8:	20000000 	.word	0x20000000
 80005ac:	080020ec 	.word	0x080020ec
 80005b0:	0800210c 	.word	0x0800210c

080005b4 <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	2100      	movs	r1, #0
 80005be:	4817      	ldr	r0, [pc, #92]	; (800061c <createPostMsg+0x68>)
 80005c0:	f001 f8d9 	bl	8001776 <memset>
	//sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <createPostMsg+0x68>)
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <createPostMsg+0x6c>)
 80005c8:	4610      	mov	r0, r2
 80005ca:	4619      	mov	r1, r3
 80005cc:	235c      	movs	r3, #92	; 0x5c
 80005ce:	461a      	mov	r2, r3
 80005d0:	f001 f8c6 	bl	8001760 <memcpy>
	content_len = strlen((char*)content);
 80005d4:	4811      	ldr	r0, [pc, #68]	; (800061c <createPostMsg+0x68>)
 80005d6:	f7ff fdcb 	bl	8000170 <strlen>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <createPostMsg+0x70>)
 80005de:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80005e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e4:	2100      	movs	r1, #0
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <createPostMsg+0x74>)
 80005e8:	f001 f8c5 	bl	8001776 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <createPostMsg+0x70>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <createPostMsg+0x68>)
 80005f2:	9202      	str	r2, [sp, #8]
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <createPostMsg+0x78>)
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <createPostMsg+0x7c>)
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <createPostMsg+0x80>)
 80005fe:	490e      	ldr	r1, [pc, #56]	; (8000638 <createPostMsg+0x84>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <createPostMsg+0x74>)
 8000602:	f001 f8c1 	bl	8001788 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <createPostMsg+0x74>)
 8000608:	f7ff fdb2 	bl	8000170 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	3b02      	subs	r3, #2
 8000610:	4a0a      	ldr	r2, [pc, #40]	; (800063c <createPostMsg+0x88>)
 8000612:	6013      	str	r3, [r2, #0]

}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200003f4 	.word	0x200003f4
 8000620:	08002120 	.word	0x08002120
 8000624:	20000474 	.word	0x20000474
 8000628:	200001f0 	.word	0x200001f0
 800062c:	20000000 	.word	0x20000000
 8000630:	2000002c 	.word	0x2000002c
 8000634:	2000005c 	.word	0x2000005c
 8000638:	0800217c 	.word	0x0800217c
 800063c:	200003f0 	.word	0x200003f0

08000640 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800064e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000652:	2100      	movs	r1, #0
 8000654:	4844      	ldr	r0, [pc, #272]	; (8000768 <sendRequest+0x128>)
 8000656:	f001 f88e 	bl	8001776 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 800065a:	4b44      	ldr	r3, [pc, #272]	; (800076c <sendRequest+0x12c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4943      	ldr	r1, [pc, #268]	; (8000770 <sendRequest+0x130>)
 8000662:	4841      	ldr	r0, [pc, #260]	; (8000768 <sendRequest+0x128>)
 8000664:	f001 f890 	bl	8001788 <siprintf>

	found = STANDBY;
 8000668:	4b42      	ldr	r3, [pc, #264]	; (8000774 <sendRequest+0x134>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800066e:	483e      	ldr	r0, [pc, #248]	; (8000768 <sendRequest+0x128>)
 8000670:	f000 feea 	bl	8001448 <write_usart1>
	while(_CIPSEND_tries > 0){
 8000674:	e035      	b.n	80006e2 <sendRequest+0xa2>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000676:	f000 fd6f 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d009      	beq.n	8000694 <sendRequest+0x54>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000680:	493d      	ldr	r1, [pc, #244]	; (8000778 <sendRequest+0x138>)
 8000682:	483e      	ldr	r0, [pc, #248]	; (800077c <sendRequest+0x13c>)
 8000684:	f000 ff68 	bl	8001558 <USART1_search_buffer_Rx>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b39      	ldr	r3, [pc, #228]	; (8000774 <sendRequest+0x134>)
 800068e:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000690:	f000 fd6c 	bl	800116c <USART1_NEW_LINE_READ_set>
			}
			if(found == STANDBY){
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <sendRequest+0x134>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10e      	bne.n	80006ba <sendRequest+0x7a>
				if(USART1_NEW_LINE_FOUND_get()){
 800069c:	f000 fd5c 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <sendRequest+0x7a>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 80006a6:	4936      	ldr	r1, [pc, #216]	; (8000780 <sendRequest+0x140>)
 80006a8:	4834      	ldr	r0, [pc, #208]	; (800077c <sendRequest+0x13c>)
 80006aa:	f000 ff55 	bl	8001558 <USART1_search_buffer_Rx>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <sendRequest+0x134>)
 80006b4:	701a      	strb	r2, [r3, #0]
					USART1_NEW_LINE_READ_set();
 80006b6:	f000 fd59 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <sendRequest+0x134>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d105      	bne.n	80006ce <sendRequest+0x8e>
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 fc48 	bl	8000f58 <timeout_with_timer4>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0d3      	beq.n	8000676 <sendRequest+0x36>
				}
			}
		}
		if(found == PASS){
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <sendRequest+0x134>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d009      	beq.n	80006ea <sendRequest+0xaa>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3b01      	subs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 80006dc:	4822      	ldr	r0, [pc, #136]	; (8000768 <sendRequest+0x128>)
 80006de:	f000 feb3 	bl	8001448 <write_usart1>
	while(_CIPSEND_tries > 0){
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e8      	bne.n	80006ba <sendRequest+0x7a>
 80006e8:	e000      	b.n	80006ec <sendRequest+0xac>
			break; //move on to next command
 80006ea:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <sendRequest+0x134>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d003      	beq.n	80006fc <sendRequest+0xbc>
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <sendRequest+0x134>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d101      	bne.n	8000700 <sendRequest+0xc0>
		return FALSE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e02f      	b.n	8000760 <sendRequest+0x120>
	}


	/*Send HTTP request*/
	found = STANDBY;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <sendRequest+0x134>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 8000706:	481f      	ldr	r0, [pc, #124]	; (8000784 <sendRequest+0x144>)
 8000708:	f000 fe9e 	bl	8001448 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 800070c:	e024      	b.n	8000758 <sendRequest+0x118>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 800070e:	f000 fd23 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d009      	beq.n	800072c <sendRequest+0xec>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000718:	491b      	ldr	r1, [pc, #108]	; (8000788 <sendRequest+0x148>)
 800071a:	481c      	ldr	r0, [pc, #112]	; (800078c <sendRequest+0x14c>)
 800071c:	f000 ff1c 	bl	8001558 <USART1_search_buffer_Rx>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <sendRequest+0x134>)
 8000726:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000728:	f000 fd20 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <sendRequest+0x134>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d105      	bne.n	8000740 <sendRequest+0x100>
 8000734:	6838      	ldr	r0, [r7, #0]
 8000736:	f000 fc0f 	bl	8000f58 <timeout_with_timer4>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0e6      	beq.n	800070e <sendRequest+0xce>
			}
		}
		if(found == PASS){
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <sendRequest+0x134>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <sendRequest+0x10c>
			return TRUE;
 8000748:	2301      	movs	r3, #1
 800074a:	e009      	b.n	8000760 <sendRequest+0x120>
		}
		else{
			_SEND_OK_tries--;
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	3b01      	subs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <sendRequest+0x144>)
 8000754:	f000 fe78 	bl	8001448 <write_usart1>
	while(_SEND_OK_tries > 0){
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1e6      	bne.n	800072c <sendRequest+0xec>
		}
	}
	return FALSE;
 800075e:	2300      	movs	r3, #0

}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000f0 	.word	0x200000f0
 800076c:	200003f0 	.word	0x200003f0
 8000770:	08002238 	.word	0x08002238
 8000774:	2000006c 	.word	0x2000006c
 8000778:	08002070 	.word	0x08002070
 800077c:	0800224c 	.word	0x0800224c
 8000780:	08002250 	.word	0x08002250
 8000784:	200001f0 	.word	0x200001f0
 8000788:	080020cc 	.word	0x080020cc
 800078c:	0800225c 	.word	0x0800225c

08000790 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <readResponse+0x58>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 800079e:	e00e      	b.n	80007be <readResponse+0x2e>
		if(USART1_NEW_LINE_FOUND_get()){
 80007a0:	f000 fcda 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d009      	beq.n	80007be <readResponse+0x2e>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80007aa:	4910      	ldr	r1, [pc, #64]	; (80007ec <readResponse+0x5c>)
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <readResponse+0x60>)
 80007ae:	f000 fed3 	bl	8001558 <USART1_search_buffer_Rx>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <readResponse+0x58>)
 80007b8:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 80007ba:	f000 fcd7 	bl	800116c <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <readResponse+0x58>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d105      	bne.n	80007d2 <readResponse+0x42>
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 fbc6 	bl	8000f58 <timeout_with_timer4>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0e6      	beq.n	80007a0 <readResponse+0x10>
		}
	}
	if(found == PASS){
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <readResponse+0x58>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <readResponse+0x4e>
		return TRUE;
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <readResponse+0x50>
	}
	else{
		return FALSE;
 80007de:	2300      	movs	r3, #0
	}

}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000006c 	.word	0x2000006c
 80007ec:	080020cc 	.word	0x080020cc
 80007f0:	08002250 	.word	0x08002250

080007f4 <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <closeConnection+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <closeConnection+0x78>)
 8000806:	f000 fe1f 	bl	8001448 <write_usart1>
	while(tries > 0){
 800080a:	e024      	b.n	8000856 <closeConnection+0x62>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 800080c:	f000 fca4 	bl	8001158 <USART1_NEW_LINE_FOUND_get>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d009      	beq.n	800082a <closeConnection+0x36>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000816:	4916      	ldr	r1, [pc, #88]	; (8000870 <closeConnection+0x7c>)
 8000818:	4816      	ldr	r0, [pc, #88]	; (8000874 <closeConnection+0x80>)
 800081a:	f000 fe9d 	bl	8001558 <USART1_search_buffer_Rx>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <closeConnection+0x74>)
 8000824:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000826:	f000 fca1 	bl	800116c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <closeConnection+0x74>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d105      	bne.n	800083e <closeConnection+0x4a>
 8000832:	6838      	ldr	r0, [r7, #0]
 8000834:	f000 fb90 	bl	8000f58 <timeout_with_timer4>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0e6      	beq.n	800080c <closeConnection+0x18>
			}
		}
		if(found == PASS){
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <closeConnection+0x74>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <closeConnection+0x56>
			return TRUE;
 8000846:	2301      	movs	r3, #1
 8000848:	e009      	b.n	800085e <closeConnection+0x6a>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3b01      	subs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <closeConnection+0x78>)
 8000852:	f000 fdf9 	bl	8001448 <write_usart1>
	while(tries > 0){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e6      	bne.n	800082a <closeConnection+0x36>
		}
	}
	return FALSE;
 800085c:	2300      	movs	r3, #0

}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000006c 	.word	0x2000006c
 800086c:	0800228c 	.word	0x0800228c
 8000870:	08002070 	.word	0x08002070
 8000874:	08002078 	.word	0x08002078

08000878 <init_queue>:

static Queue queue;


void init_queue()
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <init_queue+0x24>)
 800087e:	2200      	movs	r2, #0
 8000880:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <init_queue+0x24>)
 8000886:	2200      	movs	r2, #0
 8000888:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <init_queue+0x24>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	2000047c 	.word	0x2000047c

080008a0 <add_event>:


void add_event(Handler handler)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 80008a8:	f000 f822 	bl	80008f0 <queue_isFull>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d118      	bne.n	80008e4 <add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <add_event+0x4c>)
 80008b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <add_event+0x4c>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <add_event+0x4c>)
 80008c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80008c6:	2b3e      	cmp	r3, #62	; 0x3e
 80008c8:	d807      	bhi.n	80008da <add_event+0x3a>
		queue.writeIndex++;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <add_event+0x4c>)
 80008cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80008d0:	3301      	adds	r3, #1
 80008d2:	4a06      	ldr	r2, [pc, #24]	; (80008ec <add_event+0x4c>)
 80008d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 80008d8:	e005      	b.n	80008e6 <add_event+0x46>
	else
		queue.writeIndex = 0;
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <add_event+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80008e2:	e000      	b.n	80008e6 <add_event+0x46>
		return;
 80008e4:	bf00      	nop

}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000047c 	.word	0x2000047c

080008f0 <queue_isFull>:

}


BOOL queue_isFull()
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <queue_isFull+0x28>)
 80008f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <queue_isFull+0x28>)
 80008fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000900:	3301      	adds	r3, #1
 8000902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000906:	429a      	cmp	r2, r3
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	2000047c 	.word	0x2000047c

0800091c <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <EXTI15_10_IRQHandler+0x24>)
 8000922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000926:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <EXTI15_10_IRQHandler+0x24>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <EXTI15_10_IRQHandler+0x24>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <EXTI15_10_IRQHandler+0x28>)
 8000936:	f7ff ffb3 	bl	80008a0 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40010400 	.word	0x40010400
 8000944:	08000949 	.word	0x08000949

08000948 <interrupt_handler>:

void *interrupt_handler(void){
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

	if(state == OFF)
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <interrupt_handler+0x3c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d109      	bne.n	8000968 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <interrupt_handler+0x40>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <interrupt_handler+0x40>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <interrupt_handler+0x3c>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e008      	b.n	800097a <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <interrupt_handler+0x40>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <interrupt_handler+0x40>)
 800096e:	f023 0320 	bic.w	r3, r3, #32
 8000972:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <interrupt_handler+0x3c>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 800097a:	2300      	movs	r3, #0

}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	20000bd0 	.word	0x20000bd0
 8000988:	40010800 	.word	0x40010800

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4906      	ldr	r1, [pc, #24]	; (8000a08 <__NVIC_EnableIRQ+0x34>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0c      	blt.n	8000a38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_ClearPendingIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	3360      	adds	r3, #96	; 0x60
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <init_sensor_with_interrupt>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void init_sensor_with_interrupt(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <init_sensor_with_interrupt+0x7c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <init_sensor_with_interrupt+0x7c>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <init_sensor_with_interrupt+0x7c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <init_sensor_with_interrupt+0x7c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000abe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ac2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ace:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <init_sensor_with_interrupt+0x80>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <init_sensor_with_interrupt+0x84>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <init_sensor_with_interrupt+0x84>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <init_sensor_with_interrupt+0x88>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <init_sensor_with_interrupt+0x88>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <init_sensor_with_interrupt+0x88>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <init_sensor_with_interrupt+0x88>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000b02:	2007      	movs	r0, #7
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f7ff ff9c 	bl	8000a48 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b10:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40010400 	.word	0x40010400

08000b28 <enable_sensor>:

void enable_sensor(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f7ff ff6c 	bl	8000a0c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 8000b34:	200a      	movs	r0, #10
 8000b36:	f7ff ff4d 	bl	80009d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b3a:	b662      	cpsie	i
	__enable_irq();

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <EXTI4_IRQHandler+0x2c>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <EXTI4_IRQHandler+0x2c>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6153      	str	r3, [r2, #20]
	if(timeout_done_timer3())
 8000b50:	f000 fa2c 	bl	8000fac <timeout_done_timer3>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d005      	beq.n	8000b66 <EXTI4_IRQHandler+0x26>
	{
		add_event(alert_Handler);
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <EXTI4_IRQHandler+0x30>)
 8000b5c:	f7ff fea0 	bl	80008a0 <add_event>
		set_timeout_timer3(60); //60 seconds = 1 minute
 8000b60:	203c      	movs	r0, #60	; 0x3c
 8000b62:	f000 fa13 	bl	8000f8c <set_timeout_timer3>
	}

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400
 8000b70:	08000181 	.word	0x08000181

08000b74 <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	USART2_init(); // for debugging
 8000b78:	f000 fb04 	bl	8001184 <USART2_init>

	init_queue();
 8000b7c:	f7ff fe7c 	bl	8000878 <init_queue>
	init_sensor_with_interrupt(); // sensor interrupts are not inabled
 8000b80:	f7ff ff8c 	bl	8000a9c <init_sensor_with_interrupt>

	init_timer2(); // for monitoring switch state.
 8000b84:	f000 f8aa 	bl	8000cdc <init_timer2>
	init_timer3(); // for sensor delay
 8000b88:	f000 f8ea 	bl	8000d60 <init_timer3>
	init_timer4(); // for ESP8266 timeout
 8000b8c:	f000 f924 	bl	8000dd8 <init_timer4>

	USART1_init(); // for ESP8266
 8000b90:	f000 fb2c 	bl	80011ec <USART1_init>


	//init_i2c1();
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <main+0x38>)
 8000b96:	f000 fba5 	bl	80012e4 <write_usart2>


	enable_sensor(); // FOR TESTING
 8000b9a:	f7ff ffc5 	bl	8000b28 <enable_sensor>




			//add_event(alert_Handler);
			alert_Handler();
 8000b9e:	f7ff faef 	bl	8000180 <alert_Handler>
			delay_with_timer2(10);
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f000 f9a8 	bl	8000ef8 <delay_with_timer2>
			alert_Handler();
 8000ba8:	e7f9      	b.n	8000b9e <main+0x2a>
 8000baa:	bf00      	nop
 8000bac:	0800232c 	.word	0x0800232c

08000bb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x50>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x16>
		heap_end = &end;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <_sbrk+0x50>)
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <_sbrk+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <_sbrk+0x50>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <_sbrk+0x50>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	466a      	mov	r2, sp
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d907      	bls.n	8000bea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bda:	f000 fd97 	bl	800170c <__errno>
 8000bde:	4602      	mov	r2, r0
 8000be0:	230c      	movs	r3, #12
 8000be2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	e006      	b.n	8000bf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <_sbrk+0x50>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <_sbrk+0x50>)
 8000bf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000588 	.word	0x20000588
 8000c04:	20000bd8 	.word	0x20000bd8

08000c08 <__NVIC_SetPriorityGrouping>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <init_timer2>:
static TIMER timer3;
static TIMER timer4;


/*init's timer2 to  interrupt once a second when enabled*/
void init_timer2(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <init_timer2+0x7c>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <init_timer2+0x7c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8000d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 8000d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000d32:	2007      	movs	r0, #7
 8000d34:	f7ff ff68 	bl	8000c08 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000d38:	2100      	movs	r1, #0
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f7ff ffa4 	bl	8000c88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8000d40:	201c      	movs	r0, #28
 8000d42:	f7ff ff85 	bl	8000c50 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d46:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <init_timer2+0x80>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 8000d4e:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <init_timer2+0x80>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	2000058c 	.word	0x2000058c

08000d60 <init_timer3>:

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <init_timer3+0x6c>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <init_timer3+0x6c>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <init_timer3+0x70>)
 8000d72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <init_timer3+0x70>)
 8000d7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <init_timer3+0x70>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <init_timer3+0x70>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <init_timer3+0x70>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <init_timer3+0x70>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <init_timer3+0x70>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <init_timer3+0x70>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000da6:	2007      	movs	r0, #7
 8000da8:	f7ff ff2e 	bl	8000c08 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000dac:	2100      	movs	r1, #0
 8000dae:	201d      	movs	r0, #29
 8000db0:	f7ff ff6a 	bl	8000c88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8000db4:	201d      	movs	r0, #29
 8000db6:	f7ff ff4b 	bl	8000c50 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dba:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <init_timer3+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <init_timer3+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40000400 	.word	0x40000400
 8000dd4:	20000594 	.word	0x20000594

08000dd8 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <init_timer4+0x6c>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <init_timer4+0x6c>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <init_timer4+0x70>)
 8000dea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <init_timer4+0x70>)
 8000df2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <init_timer4+0x70>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <init_timer4+0x70>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <init_timer4+0x70>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <init_timer4+0x70>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <init_timer4+0x70>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <init_timer4+0x70>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000e1e:	2007      	movs	r0, #7
 8000e20:	f7ff fef2 	bl	8000c08 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000e24:	2100      	movs	r1, #0
 8000e26:	201e      	movs	r0, #30
 8000e28:	f7ff ff2e 	bl	8000c88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 8000e2c:	201e      	movs	r0, #30
 8000e2e:	f7ff ff0f 	bl	8000c50 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e32:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <init_timer4+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <init_timer4+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40000800 	.word	0x40000800
 8000e4c:	2000059c 	.word	0x2000059c

08000e50 <enable_timer2>:


void enable_timer2(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <enable_timer3>:

void enable_timer3(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <enable_timer3+0x18>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <enable_timer3+0x18>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40000400 	.word	0x40000400

08000e88 <enable_timer4>:

void enable_timer4(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <enable_timer4+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <enable_timer4+0x18>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40000800 	.word	0x40000800

08000ea4 <disable_timer2>:


void disable_timer2(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8000ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <disable_timer3>:

void disable_timer3(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <disable_timer3+0x18>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <disable_timer3+0x18>)
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40000400 	.word	0x40000400

08000edc <disable_timer4>:

void disable_timer4(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <disable_timer4+0x18>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <disable_timer4+0x18>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <delay_with_timer2>:


void delay_with_timer2(uint32_t num_of_sec)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	enable_timer2();
 8000f00:	f7ff ffa6 	bl	8000e50 <enable_timer2>

	timer2.countTicks = 0;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <delay_with_timer2+0x2c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	while(timer2.countTicks < num_of_sec);
 8000f0a:	bf00      	nop
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <delay_with_timer2+0x2c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d8fa      	bhi.n	8000f0c <delay_with_timer2+0x14>

	disable_timer2();
 8000f16:	f7ff ffc5 	bl	8000ea4 <disable_timer2>

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000058c 	.word	0x2000058c

08000f28 <delay_with_timer4>:
	disable_timer3();

}

void delay_with_timer4(uint32_t num_of_sec)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000f30:	f7ff ffaa 	bl	8000e88 <enable_timer4>

	timer4.countTicks = 0;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <delay_with_timer4+0x2c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
	while(timer4.countTicks < num_of_sec);
 8000f3a:	bf00      	nop
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <delay_with_timer4+0x2c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d8fa      	bhi.n	8000f3c <delay_with_timer4+0x14>

	disable_timer4();
 8000f46:	f7ff ffc9 	bl	8000edc <disable_timer4>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000059c 	.word	0x2000059c

08000f58 <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	enable_timer4();
 8000f60:	f7ff ff92 	bl	8000e88 <enable_timer4>

	if(timer4.countTicks >= num_of_sec){
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <timeout_with_timer4+0x30>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d806      	bhi.n	8000f7c <timeout_with_timer4+0x24>
		disable_timer4();
 8000f6e:	f7ff ffb5 	bl	8000edc <disable_timer4>
		timer4.countTicks = 0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <timeout_with_timer4+0x30>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
		return TRUE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <timeout_with_timer4+0x26>
	}
	return FALSE;
 8000f7c:	2300      	movs	r3, #0

}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000059c 	.word	0x2000059c

08000f8c <set_timeout_timer3>:

}

/*This function sets timer3 num_of_sec_timer3 to param num_of_sec, and enables timer3 timeout*/
void set_timeout_timer3(uint32_t num_of_sec)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <set_timeout_timer3+0x1c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6053      	str	r3, [r2, #4]
	enable_timer3();
 8000f9a:	f7ff ff67 	bl	8000e6c <enable_timer3>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000594 	.word	0x20000594

08000fac <timeout_done_timer3>:

/*returns true if timeout is done, otherwise returns false*/
BOOL timeout_done_timer3(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <timeout_done_timer3+0x2c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <timeout_done_timer3+0x2c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d309      	bcc.n	8000fd0 <timeout_done_timer3+0x24>

		disable_timer3();
 8000fbc:	f7ff ff80 	bl	8000ec0 <disable_timer3>
		timer3.countTicks = 0;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <timeout_done_timer3+0x2c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		timer3.targetTick = 0; // cleanup
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <timeout_done_timer3+0x2c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
		return TRUE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <timeout_done_timer3+0x26>
	}
	return FALSE;
 8000fd0:	2300      	movs	r3, #0

}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000594 	.word	0x20000594

08000fdc <TIM2_IRQHandler>:
}



void TIM2_IRQHandler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8000fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10c      	bne.n	8001008 <TIM2_IRQHandler+0x2c>
	{
		TIM2->SR &= ~(0x0001);
 8000fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <TIM2_IRQHandler+0x34>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a02      	ldr	r2, [pc, #8]	; (8001010 <TIM2_IRQHandler+0x34>)
 8001006:	6013      	str	r3, [r2, #0]

	}


}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	2000058c 	.word	0x2000058c

08001014 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <TIM3_IRQHandler+0x30>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10a      	bne.n	800103a <TIM3_IRQHandler+0x26>
	{
		TIM3->SR &= ~(0x0001);
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <TIM3_IRQHandler+0x30>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <TIM3_IRQHandler+0x30>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <TIM3_IRQHandler+0x34>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <TIM3_IRQHandler+0x34>)
 8001038:	6013      	str	r3, [r2, #0]

	}


}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40000400 	.word	0x40000400
 8001048:	20000594 	.word	0x20000594

0800104c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <TIM4_IRQHandler+0x30>)
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10a      	bne.n	8001072 <TIM4_IRQHandler+0x26>
	{
		TIM4->SR &= ~(0x0001);
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <TIM4_IRQHandler+0x30>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <TIM4_IRQHandler+0x30>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <TIM4_IRQHandler+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <TIM4_IRQHandler+0x34>)
 8001070:	6013      	str	r3, [r2, #0]

	}

}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40000800 	.word	0x40000800
 8001080:	2000059c 	.word	0x2000059c

08001084 <__NVIC_SetPriorityGrouping>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4906      	ldr	r1, [pc, #24]	; (8001100 <__NVIC_EnableIRQ+0x34>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <USART1_NEW_LINE_FOUND_get>:


static BOOL USART1_NEW_LINE_FOUND; // This variable flags a new line in USART1 Rx
static BOOL USART1_NEW_LINE_READ;

BOOL USART1_NEW_LINE_FOUND_get(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	return USART1_NEW_LINE_FOUND;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <USART1_NEW_LINE_FOUND_get+0x10>)
 800115e:	781b      	ldrb	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000bbd 	.word	0x20000bbd

0800116c <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	USART1_NEW_LINE_READ = TRUE;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <USART1_NEW_LINE_READ_set+0x14>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000bbe 	.word	0x20000bbe

08001184 <USART2_init>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void USART2_init(){
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <USART2_init+0x5c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <USART2_init+0x5c>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <USART2_init+0x60>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <USART2_init+0x60>)
 800119a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800119e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <USART2_init+0x60>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <USART2_init+0x60>)
 80011a6:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80011aa:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <USART2_init+0x5c>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <USART2_init+0x5c>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <USART2_init+0x64>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <USART2_init+0x64>)
 80011be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c2:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <USART2_init+0x64>)
 80011c6:	f240 324d 	movw	r2, #845	; 0x34d
 80011ca:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <USART2_init+0x64>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <USART2_init+0x64>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40004400 	.word	0x40004400

080011ec <USART1_init>:


/* Usart1 will be use for communication with esp8266. */
void USART1_init(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <USART1_init+0xac>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <USART1_init+0xac>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <USART1_init+0xb0>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <USART1_init+0xb0>)
 8001202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001206:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <USART1_init+0xb0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a23      	ldr	r2, [pc, #140]	; (800129c <USART1_init+0xb0>)
 800120e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001212:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <USART1_init+0xb0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a20      	ldr	r2, [pc, #128]	; (800129c <USART1_init+0xb0>)
 800121a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800121e:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <USART1_init+0xb0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <USART1_init+0xb0>)
 8001226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <USART1_init+0xb0>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <USART1_init+0xb0>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <USART1_init+0xac>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <USART1_init+0xac>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <USART1_init+0xb4>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <USART1_init+0xb4>)
 800124a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124e:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <USART1_init+0xb4>)
 8001252:	2245      	movs	r2, #69	; 0x45
 8001254:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <USART1_init+0xb4>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <USART1_init+0xb4>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <USART1_init+0xb4>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <USART1_init+0xb4>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <USART1_init+0xb4>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <USART1_init+0xb4>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff ff01 	bl	8001084 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001282:	2100      	movs	r1, #0
 8001284:	2025      	movs	r0, #37	; 0x25
 8001286:	f7ff ff3d 	bl	8001104 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 800128a:	2025      	movs	r0, #37	; 0x25
 800128c:	f7ff ff1e 	bl	80010cc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001290:	b662      	cpsie	i
	__enable_irq();

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40013800 	.word	0x40013800

080012a4 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	2100      	movs	r1, #0
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <set_usart2_buffer_Tx+0x3c>)
 80012b4:	f000 fa5f 	bl	8001776 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <set_usart2_buffer_Tx+0x3c>)
 80012bc:	f000 fa84 	bl	80017c8 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7fe ff55 	bl	8000170 <strlen>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <set_usart2_buffer_Tx+0x3c>)
 80012ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <set_usart2_buffer_Tx+0x3c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200005a4 	.word	0x200005a4

080012e4 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffd9 	bl	80012a4 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80012f2:	e014      	b.n	800131e <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80012f4:	bf00      	nop
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <write_usart2+0x70>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f9      	beq.n	80012f6 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <write_usart2+0x74>)
 8001304:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <write_usart2+0x74>)
 800130a:	5cd2      	ldrb	r2, [r2, r3]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <write_usart2+0x70>)
 800130e:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <write_usart2+0x74>)
 8001312:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001316:	3301      	adds	r3, #1
 8001318:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <write_usart2+0x74>)
 800131a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <write_usart2+0x74>)
 8001320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <write_usart2+0x74>)
 8001326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800132a:	429a      	cmp	r2, r3
 800132c:	d3e2      	bcc.n	80012f4 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800132e:	bf00      	nop
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <write_usart2+0x70>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001338:	2b40      	cmp	r3, #64	; 0x40
 800133a:	d1f9      	bne.n	8001330 <write_usart2+0x4c>
	usart2.write_index = 0;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <write_usart2+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <write_usart2+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40004400 	.word	0x40004400
 8001358:	200005a4 	.word	0x200005a4

0800135c <USART2_write_line>:


void USART2_write_line(uint8_t *start, uint8_t *end){
 800135c:	b5b0      	push	{r4, r5, r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	2100      	movs	r1, #0
 800136c:	4833      	ldr	r0, [pc, #204]	; (800143c <USART2_write_line+0xe0>)
 800136e:	f000 fa02 	bl	8001776 <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800137c:	3301      	adds	r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	da0c      	bge.n	800139c <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <USART2_write_line+0xe0>)
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <USART2_write_line+0xe4>)
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <USART2_write_line+0xe0>)
 8001394:	2213      	movs	r2, #19
 8001396:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800139a:	e01a      	b.n	80013d2 <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <USART2_write_line+0xe0>)
 80013aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(start < end){
 80013ae:	e00c      	b.n	80013ca <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <USART2_write_line+0xe0>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
			start++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
			i++;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
		while(start < end){
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3ee      	bcc.n	80013b0 <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <USART2_write_line+0xe0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	while(usart2.write_index < usart2.Tx_len)
 80013da:	e014      	b.n	8001406 <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80013dc:	bf00      	nop
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <USART2_write_line+0xe8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f9      	beq.n	80013de <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <USART2_write_line+0xe0>)
 80013ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <USART2_write_line+0xe0>)
 80013f2:	5cd2      	ldrb	r2, [r2, r3]
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <USART2_write_line+0xe8>)
 80013f6:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <USART2_write_line+0xe0>)
 80013fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013fe:	3301      	adds	r3, #1
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <USART2_write_line+0xe0>)
 8001402:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <USART2_write_line+0xe0>)
 8001408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <USART2_write_line+0xe0>)
 800140e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001412:	429a      	cmp	r2, r3
 8001414:	d3e2      	bcc.n	80013dc <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001416:	bf00      	nop
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <USART2_write_line+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	d1f9      	bne.n	8001418 <USART2_write_line+0xbc>
	usart2.write_index = 0;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <USART2_write_line+0xe0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <USART2_write_line+0xe0>)
 800142e:	2200      	movs	r2, #0
 8001430:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	200005a4 	.word	0x200005a4
 8001440:	08002340 	.word	0x08002340
 8001444:	40004400 	.word	0x40004400

08001448 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f841 	bl	80014d8 <set_usart1_buffer_Tx>

	/*Prepare buffer Rx for response*/
	set_usart1_buffer_Rx();
 8001456:	f000 f85f 	bl	8001518 <set_usart1_buffer_Rx>

	// set initial values to Rx interrupt flags
	USART1_NEW_LINE_FOUND = FALSE;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <write_usart1+0x80>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	USART1_NEW_LINE_READ = TRUE;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <write_usart1+0x84>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001466:	e014      	b.n	8001492 <write_usart1+0x4a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001468:	bf00      	nop
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <write_usart1+0x88>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f9      	beq.n	800146a <write_usart1+0x22>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <write_usart1+0x8c>)
 8001478:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <write_usart1+0x8c>)
 800147e:	5cd2      	ldrb	r2, [r2, r3]
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <write_usart1+0x88>)
 8001482:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <write_usart1+0x8c>)
 8001486:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800148a:	3301      	adds	r3, #1
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <write_usart1+0x8c>)
 800148e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <write_usart1+0x8c>)
 8001494:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <write_usart1+0x8c>)
 800149a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3e2      	bcc.n	8001468 <write_usart1+0x20>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80014a2:	bf00      	nop
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <write_usart1+0x88>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ac:	2b40      	cmp	r3, #64	; 0x40
 80014ae:	d1f9      	bne.n	80014a4 <write_usart1+0x5c>
	usart1.write_index = 0;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <write_usart1+0x8c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <write_usart1+0x8c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000bbd 	.word	0x20000bbd
 80014cc:	20000bbe 	.word	0x20000bbe
 80014d0:	40013800 	.word	0x40013800
 80014d4:	200007ac 	.word	0x200007ac

080014d8 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80014e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e4:	2100      	movs	r1, #0
 80014e6:	480b      	ldr	r0, [pc, #44]	; (8001514 <set_usart1_buffer_Tx+0x3c>)
 80014e8:	f000 f945 	bl	8001776 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <set_usart1_buffer_Tx+0x3c>)
 80014f0:	f000 f96a 	bl	80017c8 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7fe fe3b 	bl	8000170 <strlen>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <set_usart1_buffer_Tx+0x3c>)
 80014fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <set_usart1_buffer_Tx+0x3c>)
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200007ac 	.word	0x200007ac

08001518 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	2100      	movs	r1, #0
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <set_usart1_buffer_Rx+0x30>)
 8001524:	f000 f927 	bl	8001776 <memset>
	usart1.Rx_len = 0;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <set_usart1_buffer_Rx+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <set_usart1_buffer_Rx+0x34>)
 8001532:	2200      	movs	r2, #0
 8001534:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <set_usart1_buffer_Rx+0x38>)
 800153a:	4a03      	ldr	r2, [pc, #12]	; (8001548 <set_usart1_buffer_Rx+0x30>)
 800153c:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <set_usart1_buffer_Rx+0x3c>)
 8001540:	4a01      	ldr	r2, [pc, #4]	; (8001548 <set_usart1_buffer_Rx+0x30>)
 8001542:	601a      	str	r2, [r3, #0]

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200009ac 	.word	0x200009ac
 800154c:	200007ac 	.word	0x200007ac
 8001550:	20000bc0 	.word	0x20000bc0
 8001554:	20000bc4 	.word	0x20000bc4

08001558 <USART1_search_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <USART1_search_buffer_Rx+0x9c>)
 8001564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001568:	3301      	adds	r3, #1
 800156a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156e:	d236      	bcs.n	80015de <USART1_search_buffer_Rx+0x86>

		START = END;
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <USART1_search_buffer_Rx+0xa0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <USART1_search_buffer_Rx+0xa4>)
 8001576:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <USART1_search_buffer_Rx+0x9c>)
 800157a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <USART1_search_buffer_Rx+0xa8>)
 8001580:	4413      	add	r3, r2
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <USART1_search_buffer_Rx+0xa0>)
 8001584:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	481d      	ldr	r0, [pc, #116]	; (8001600 <USART1_search_buffer_Rx+0xa8>)
 800158a:	f000 f925 	bl	80017d8 <strstr>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d009      	beq.n	80015a8 <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <USART1_search_buffer_Rx+0xa4>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <USART1_search_buffer_Rx+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff fedc 	bl	800135c <USART2_write_line>
			return (uint32_t)PASS;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e021      	b.n	80015ec <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <USART1_search_buffer_Rx+0xa8>)
 80015ac:	f000 f914 	bl	80017d8 <strstr>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <USART1_search_buffer_Rx+0xa4>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <USART1_search_buffer_Rx+0xa0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fecb 	bl	800135c <USART2_write_line>
			return (uint32_t)FAIL;
 80015c6:	2302      	movs	r3, #2
 80015c8:	e010      	b.n	80015ec <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <USART1_search_buffer_Rx+0xa4>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <USART1_search_buffer_Rx+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff fec1 	bl	800135c <USART2_write_line>
			return (uint32_t)STANDBY;
 80015da:	2301      	movs	r3, #1
 80015dc:	e006      	b.n	80015ec <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <USART1_search_buffer_Rx+0xac>)
 80015e0:	f7ff fe80 	bl	80012e4 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <USART1_search_buffer_Rx+0xa8>)
 80015e6:	f7ff fe7d 	bl	80012e4 <write_usart2>
		return (uint32_t)FAIL;
 80015ea:	2302      	movs	r3, #2
	}

}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200007ac 	.word	0x200007ac
 80015f8:	20000bc4 	.word	0x20000bc4
 80015fc:	20000bc0 	.word	0x20000bc0
 8001600:	200009ac 	.word	0x200009ac
 8001604:	08002354 	.word	0x08002354

08001608 <USART1_IRQHandler>:
	}

}

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <USART1_IRQHandler+0x9c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	2b20      	cmp	r3, #32
 8001616:	d141      	bne.n	800169c <USART1_IRQHandler+0x94>

		c = USART1->DR; // clear RXNE bit
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <USART1_IRQHandler+0x9c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <USART1_IRQHandler+0xa0>)
 8001620:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <USART1_IRQHandler+0xa4>)
 8001624:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001628:	3301      	adds	r3, #1
 800162a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162e:	d303      	bcc.n	8001638 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <USART1_IRQHandler+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <USART1_IRQHandler+0xa4>)
 800163a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <USART1_IRQHandler+0xa0>)
 8001640:	7811      	ldrb	r1, [r2, #0]
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <USART1_IRQHandler+0xa4>)
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <USART1_IRQHandler+0xa4>)
 800164e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001652:	3301      	adds	r3, #1
 8001654:	4a15      	ldr	r2, [pc, #84]	; (80016ac <USART1_IRQHandler+0xa4>)
 8001656:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <USART1_IRQHandler+0xa4>)
 800165c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001660:	3301      	adds	r3, #1
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <USART1_IRQHandler+0xa4>)
 8001664:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404


		//***

		if(c == (uint8_t)'\n' && USART1_NEW_LINE_READ){
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <USART1_IRQHandler+0xa0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b0a      	cmp	r3, #10
 800166e:	d10a      	bne.n	8001686 <USART1_IRQHandler+0x7e>
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <USART1_IRQHandler+0xa8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <USART1_IRQHandler+0x7e>
			USART1_NEW_LINE_FOUND = TRUE;
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <USART1_IRQHandler+0xac>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ = FALSE;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <USART1_IRQHandler+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]


	}


}
 8001684:	e00a      	b.n	800169c <USART1_IRQHandler+0x94>
		else if(c != (uint8_t)'\n' && USART1_NEW_LINE_READ){
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <USART1_IRQHandler+0xa0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d006      	beq.n	800169c <USART1_IRQHandler+0x94>
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <USART1_IRQHandler+0xa8>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <USART1_IRQHandler+0x94>
			USART1_NEW_LINE_FOUND = FALSE;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <USART1_IRQHandler+0xac>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40013800 	.word	0x40013800
 80016a8:	20000bbc 	.word	0x20000bbc
 80016ac:	200007ac 	.word	0x200007ac
 80016b0:	20000bbe 	.word	0x20000bbe
 80016b4:	20000bbd 	.word	0x20000bbd

080016b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016e2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80016e6:	f000 f817 	bl	8001718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ea:	f7ff fa43 	bl	8000b74 <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   r0, =_estack
 80016f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80016fc:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 8001700:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001704:	20000bd8 	.word	0x20000bd8

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>
	...

0800170c <__errno>:
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <__errno+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000070 	.word	0x20000070

08001718 <__libc_init_array>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	2500      	movs	r5, #0
 800171c:	4e0c      	ldr	r6, [pc, #48]	; (8001750 <__libc_init_array+0x38>)
 800171e:	4c0d      	ldr	r4, [pc, #52]	; (8001754 <__libc_init_array+0x3c>)
 8001720:	1ba4      	subs	r4, r4, r6
 8001722:	10a4      	asrs	r4, r4, #2
 8001724:	42a5      	cmp	r5, r4
 8001726:	d109      	bne.n	800173c <__libc_init_array+0x24>
 8001728:	f000 fc58 	bl	8001fdc <_init>
 800172c:	2500      	movs	r5, #0
 800172e:	4e0a      	ldr	r6, [pc, #40]	; (8001758 <__libc_init_array+0x40>)
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <__libc_init_array+0x44>)
 8001732:	1ba4      	subs	r4, r4, r6
 8001734:	10a4      	asrs	r4, r4, #2
 8001736:	42a5      	cmp	r5, r4
 8001738:	d105      	bne.n	8001746 <__libc_init_array+0x2e>
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001740:	4798      	blx	r3
 8001742:	3501      	adds	r5, #1
 8001744:	e7ee      	b.n	8001724 <__libc_init_array+0xc>
 8001746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800174a:	4798      	blx	r3
 800174c:	3501      	adds	r5, #1
 800174e:	e7f2      	b.n	8001736 <__libc_init_array+0x1e>
 8001750:	080023c4 	.word	0x080023c4
 8001754:	080023c4 	.word	0x080023c4
 8001758:	080023c4 	.word	0x080023c4
 800175c:	080023c8 	.word	0x080023c8

08001760 <memcpy>:
 8001760:	b510      	push	{r4, lr}
 8001762:	1e43      	subs	r3, r0, #1
 8001764:	440a      	add	r2, r1
 8001766:	4291      	cmp	r1, r2
 8001768:	d100      	bne.n	800176c <memcpy+0xc>
 800176a:	bd10      	pop	{r4, pc}
 800176c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001774:	e7f7      	b.n	8001766 <memcpy+0x6>

08001776 <memset>:
 8001776:	4603      	mov	r3, r0
 8001778:	4402      	add	r2, r0
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <memset+0xa>
 800177e:	4770      	bx	lr
 8001780:	f803 1b01 	strb.w	r1, [r3], #1
 8001784:	e7f9      	b.n	800177a <memset+0x4>
	...

08001788 <siprintf>:
 8001788:	b40e      	push	{r1, r2, r3}
 800178a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800178e:	b500      	push	{lr}
 8001790:	b09c      	sub	sp, #112	; 0x70
 8001792:	ab1d      	add	r3, sp, #116	; 0x74
 8001794:	9002      	str	r0, [sp, #8]
 8001796:	9006      	str	r0, [sp, #24]
 8001798:	9107      	str	r1, [sp, #28]
 800179a:	9104      	str	r1, [sp, #16]
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <siprintf+0x38>)
 800179e:	4909      	ldr	r1, [pc, #36]	; (80017c4 <siprintf+0x3c>)
 80017a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80017a4:	9105      	str	r1, [sp, #20]
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	a902      	add	r1, sp, #8
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	f000 f888 	bl	80018c0 <_svfiprintf_r>
 80017b0:	2200      	movs	r2, #0
 80017b2:	9b02      	ldr	r3, [sp, #8]
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	b01c      	add	sp, #112	; 0x70
 80017b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80017bc:	b003      	add	sp, #12
 80017be:	4770      	bx	lr
 80017c0:	20000070 	.word	0x20000070
 80017c4:	ffff0208 	.word	0xffff0208

080017c8 <strcpy>:
 80017c8:	4603      	mov	r3, r0
 80017ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017ce:	f803 2b01 	strb.w	r2, [r3], #1
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d1f9      	bne.n	80017ca <strcpy+0x2>
 80017d6:	4770      	bx	lr

080017d8 <strstr>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	7803      	ldrb	r3, [r0, #0]
 80017dc:	b17b      	cbz	r3, 80017fe <strstr+0x26>
 80017de:	4604      	mov	r4, r0
 80017e0:	7823      	ldrb	r3, [r4, #0]
 80017e2:	4620      	mov	r0, r4
 80017e4:	1c66      	adds	r6, r4, #1
 80017e6:	b17b      	cbz	r3, 8001808 <strstr+0x30>
 80017e8:	1e4a      	subs	r2, r1, #1
 80017ea:	1e63      	subs	r3, r4, #1
 80017ec:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80017f0:	b14d      	cbz	r5, 8001806 <strstr+0x2e>
 80017f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80017f6:	4634      	mov	r4, r6
 80017f8:	42af      	cmp	r7, r5
 80017fa:	d0f7      	beq.n	80017ec <strstr+0x14>
 80017fc:	e7f0      	b.n	80017e0 <strstr+0x8>
 80017fe:	780b      	ldrb	r3, [r1, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf18      	it	ne
 8001804:	2000      	movne	r0, #0
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	4618      	mov	r0, r3
 800180a:	e7fc      	b.n	8001806 <strstr+0x2e>

0800180c <__ssputs_r>:
 800180c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001810:	688e      	ldr	r6, [r1, #8]
 8001812:	4682      	mov	sl, r0
 8001814:	429e      	cmp	r6, r3
 8001816:	460c      	mov	r4, r1
 8001818:	4690      	mov	r8, r2
 800181a:	4699      	mov	r9, r3
 800181c:	d837      	bhi.n	800188e <__ssputs_r+0x82>
 800181e:	898a      	ldrh	r2, [r1, #12]
 8001820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001824:	d031      	beq.n	800188a <__ssputs_r+0x7e>
 8001826:	2302      	movs	r3, #2
 8001828:	6825      	ldr	r5, [r4, #0]
 800182a:	6909      	ldr	r1, [r1, #16]
 800182c:	1a6f      	subs	r7, r5, r1
 800182e:	6965      	ldr	r5, [r4, #20]
 8001830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001834:	fb95 f5f3 	sdiv	r5, r5, r3
 8001838:	f109 0301 	add.w	r3, r9, #1
 800183c:	443b      	add	r3, r7
 800183e:	429d      	cmp	r5, r3
 8001840:	bf38      	it	cc
 8001842:	461d      	movcc	r5, r3
 8001844:	0553      	lsls	r3, r2, #21
 8001846:	d530      	bpl.n	80018aa <__ssputs_r+0x9e>
 8001848:	4629      	mov	r1, r5
 800184a:	f000 fb2d 	bl	8001ea8 <_malloc_r>
 800184e:	4606      	mov	r6, r0
 8001850:	b950      	cbnz	r0, 8001868 <__ssputs_r+0x5c>
 8001852:	230c      	movs	r3, #12
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f8ca 3000 	str.w	r3, [sl]
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001862:	81a3      	strh	r3, [r4, #12]
 8001864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001868:	463a      	mov	r2, r7
 800186a:	6921      	ldr	r1, [r4, #16]
 800186c:	f7ff ff78 	bl	8001760 <memcpy>
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187a:	81a3      	strh	r3, [r4, #12]
 800187c:	6126      	str	r6, [r4, #16]
 800187e:	443e      	add	r6, r7
 8001880:	6026      	str	r6, [r4, #0]
 8001882:	464e      	mov	r6, r9
 8001884:	6165      	str	r5, [r4, #20]
 8001886:	1bed      	subs	r5, r5, r7
 8001888:	60a5      	str	r5, [r4, #8]
 800188a:	454e      	cmp	r6, r9
 800188c:	d900      	bls.n	8001890 <__ssputs_r+0x84>
 800188e:	464e      	mov	r6, r9
 8001890:	4632      	mov	r2, r6
 8001892:	4641      	mov	r1, r8
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f000 faa1 	bl	8001ddc <memmove>
 800189a:	68a3      	ldr	r3, [r4, #8]
 800189c:	2000      	movs	r0, #0
 800189e:	1b9b      	subs	r3, r3, r6
 80018a0:	60a3      	str	r3, [r4, #8]
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	441e      	add	r6, r3
 80018a6:	6026      	str	r6, [r4, #0]
 80018a8:	e7dc      	b.n	8001864 <__ssputs_r+0x58>
 80018aa:	462a      	mov	r2, r5
 80018ac:	f000 fb56 	bl	8001f5c <_realloc_r>
 80018b0:	4606      	mov	r6, r0
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d1e2      	bne.n	800187c <__ssputs_r+0x70>
 80018b6:	6921      	ldr	r1, [r4, #16]
 80018b8:	4650      	mov	r0, sl
 80018ba:	f000 faa9 	bl	8001e10 <_free_r>
 80018be:	e7c8      	b.n	8001852 <__ssputs_r+0x46>

080018c0 <_svfiprintf_r>:
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c4:	461d      	mov	r5, r3
 80018c6:	898b      	ldrh	r3, [r1, #12]
 80018c8:	b09d      	sub	sp, #116	; 0x74
 80018ca:	061f      	lsls	r7, r3, #24
 80018cc:	4680      	mov	r8, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	4616      	mov	r6, r2
 80018d2:	d50f      	bpl.n	80018f4 <_svfiprintf_r+0x34>
 80018d4:	690b      	ldr	r3, [r1, #16]
 80018d6:	b96b      	cbnz	r3, 80018f4 <_svfiprintf_r+0x34>
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	f000 fae5 	bl	8001ea8 <_malloc_r>
 80018de:	6020      	str	r0, [r4, #0]
 80018e0:	6120      	str	r0, [r4, #16]
 80018e2:	b928      	cbnz	r0, 80018f0 <_svfiprintf_r+0x30>
 80018e4:	230c      	movs	r3, #12
 80018e6:	f8c8 3000 	str.w	r3, [r8]
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	e0c8      	b.n	8001a82 <_svfiprintf_r+0x1c2>
 80018f0:	2340      	movs	r3, #64	; 0x40
 80018f2:	6163      	str	r3, [r4, #20]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9309      	str	r3, [sp, #36]	; 0x24
 80018f8:	2320      	movs	r3, #32
 80018fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018fe:	2330      	movs	r3, #48	; 0x30
 8001900:	f04f 0b01 	mov.w	fp, #1
 8001904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001908:	9503      	str	r5, [sp, #12]
 800190a:	4637      	mov	r7, r6
 800190c:	463d      	mov	r5, r7
 800190e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001912:	b10b      	cbz	r3, 8001918 <_svfiprintf_r+0x58>
 8001914:	2b25      	cmp	r3, #37	; 0x25
 8001916:	d13e      	bne.n	8001996 <_svfiprintf_r+0xd6>
 8001918:	ebb7 0a06 	subs.w	sl, r7, r6
 800191c:	d00b      	beq.n	8001936 <_svfiprintf_r+0x76>
 800191e:	4653      	mov	r3, sl
 8001920:	4632      	mov	r2, r6
 8001922:	4621      	mov	r1, r4
 8001924:	4640      	mov	r0, r8
 8001926:	f7ff ff71 	bl	800180c <__ssputs_r>
 800192a:	3001      	adds	r0, #1
 800192c:	f000 80a4 	beq.w	8001a78 <_svfiprintf_r+0x1b8>
 8001930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001932:	4453      	add	r3, sl
 8001934:	9309      	str	r3, [sp, #36]	; 0x24
 8001936:	783b      	ldrb	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 809d 	beq.w	8001a78 <_svfiprintf_r+0x1b8>
 800193e:	2300      	movs	r3, #0
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001948:	9304      	str	r3, [sp, #16]
 800194a:	9307      	str	r3, [sp, #28]
 800194c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001950:	931a      	str	r3, [sp, #104]	; 0x68
 8001952:	462f      	mov	r7, r5
 8001954:	2205      	movs	r2, #5
 8001956:	f817 1b01 	ldrb.w	r1, [r7], #1
 800195a:	4850      	ldr	r0, [pc, #320]	; (8001a9c <_svfiprintf_r+0x1dc>)
 800195c:	f000 fa30 	bl	8001dc0 <memchr>
 8001960:	9b04      	ldr	r3, [sp, #16]
 8001962:	b9d0      	cbnz	r0, 800199a <_svfiprintf_r+0xda>
 8001964:	06d9      	lsls	r1, r3, #27
 8001966:	bf44      	itt	mi
 8001968:	2220      	movmi	r2, #32
 800196a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800196e:	071a      	lsls	r2, r3, #28
 8001970:	bf44      	itt	mi
 8001972:	222b      	movmi	r2, #43	; 0x2b
 8001974:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001978:	782a      	ldrb	r2, [r5, #0]
 800197a:	2a2a      	cmp	r2, #42	; 0x2a
 800197c:	d015      	beq.n	80019aa <_svfiprintf_r+0xea>
 800197e:	462f      	mov	r7, r5
 8001980:	2000      	movs	r0, #0
 8001982:	250a      	movs	r5, #10
 8001984:	9a07      	ldr	r2, [sp, #28]
 8001986:	4639      	mov	r1, r7
 8001988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800198c:	3b30      	subs	r3, #48	; 0x30
 800198e:	2b09      	cmp	r3, #9
 8001990:	d94d      	bls.n	8001a2e <_svfiprintf_r+0x16e>
 8001992:	b1b8      	cbz	r0, 80019c4 <_svfiprintf_r+0x104>
 8001994:	e00f      	b.n	80019b6 <_svfiprintf_r+0xf6>
 8001996:	462f      	mov	r7, r5
 8001998:	e7b8      	b.n	800190c <_svfiprintf_r+0x4c>
 800199a:	4a40      	ldr	r2, [pc, #256]	; (8001a9c <_svfiprintf_r+0x1dc>)
 800199c:	463d      	mov	r5, r7
 800199e:	1a80      	subs	r0, r0, r2
 80019a0:	fa0b f000 	lsl.w	r0, fp, r0
 80019a4:	4318      	orrs	r0, r3
 80019a6:	9004      	str	r0, [sp, #16]
 80019a8:	e7d3      	b.n	8001952 <_svfiprintf_r+0x92>
 80019aa:	9a03      	ldr	r2, [sp, #12]
 80019ac:	1d11      	adds	r1, r2, #4
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	9103      	str	r1, [sp, #12]
 80019b2:	2a00      	cmp	r2, #0
 80019b4:	db01      	blt.n	80019ba <_svfiprintf_r+0xfa>
 80019b6:	9207      	str	r2, [sp, #28]
 80019b8:	e004      	b.n	80019c4 <_svfiprintf_r+0x104>
 80019ba:	4252      	negs	r2, r2
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	9207      	str	r2, [sp, #28]
 80019c2:	9304      	str	r3, [sp, #16]
 80019c4:	783b      	ldrb	r3, [r7, #0]
 80019c6:	2b2e      	cmp	r3, #46	; 0x2e
 80019c8:	d10c      	bne.n	80019e4 <_svfiprintf_r+0x124>
 80019ca:	787b      	ldrb	r3, [r7, #1]
 80019cc:	2b2a      	cmp	r3, #42	; 0x2a
 80019ce:	d133      	bne.n	8001a38 <_svfiprintf_r+0x178>
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	3702      	adds	r7, #2
 80019d4:	1d1a      	adds	r2, r3, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	9203      	str	r2, [sp, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bfb8      	it	lt
 80019de:	f04f 33ff 	movlt.w	r3, #4294967295
 80019e2:	9305      	str	r3, [sp, #20]
 80019e4:	4d2e      	ldr	r5, [pc, #184]	; (8001aa0 <_svfiprintf_r+0x1e0>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	7839      	ldrb	r1, [r7, #0]
 80019ea:	4628      	mov	r0, r5
 80019ec:	f000 f9e8 	bl	8001dc0 <memchr>
 80019f0:	b138      	cbz	r0, 8001a02 <_svfiprintf_r+0x142>
 80019f2:	2340      	movs	r3, #64	; 0x40
 80019f4:	1b40      	subs	r0, r0, r5
 80019f6:	fa03 f000 	lsl.w	r0, r3, r0
 80019fa:	9b04      	ldr	r3, [sp, #16]
 80019fc:	3701      	adds	r7, #1
 80019fe:	4303      	orrs	r3, r0
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	7839      	ldrb	r1, [r7, #0]
 8001a04:	2206      	movs	r2, #6
 8001a06:	4827      	ldr	r0, [pc, #156]	; (8001aa4 <_svfiprintf_r+0x1e4>)
 8001a08:	1c7e      	adds	r6, r7, #1
 8001a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a0e:	f000 f9d7 	bl	8001dc0 <memchr>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d038      	beq.n	8001a88 <_svfiprintf_r+0x1c8>
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <_svfiprintf_r+0x1e8>)
 8001a18:	bb13      	cbnz	r3, 8001a60 <_svfiprintf_r+0x1a0>
 8001a1a:	9b03      	ldr	r3, [sp, #12]
 8001a1c:	3307      	adds	r3, #7
 8001a1e:	f023 0307 	bic.w	r3, r3, #7
 8001a22:	3308      	adds	r3, #8
 8001a24:	9303      	str	r3, [sp, #12]
 8001a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a28:	444b      	add	r3, r9
 8001a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a2c:	e76d      	b.n	800190a <_svfiprintf_r+0x4a>
 8001a2e:	fb05 3202 	mla	r2, r5, r2, r3
 8001a32:	2001      	movs	r0, #1
 8001a34:	460f      	mov	r7, r1
 8001a36:	e7a6      	b.n	8001986 <_svfiprintf_r+0xc6>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	250a      	movs	r5, #10
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	3701      	adds	r7, #1
 8001a40:	9305      	str	r3, [sp, #20]
 8001a42:	4638      	mov	r0, r7
 8001a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a48:	3a30      	subs	r2, #48	; 0x30
 8001a4a:	2a09      	cmp	r2, #9
 8001a4c:	d903      	bls.n	8001a56 <_svfiprintf_r+0x196>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0c8      	beq.n	80019e4 <_svfiprintf_r+0x124>
 8001a52:	9105      	str	r1, [sp, #20]
 8001a54:	e7c6      	b.n	80019e4 <_svfiprintf_r+0x124>
 8001a56:	fb05 2101 	mla	r1, r5, r1, r2
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4607      	mov	r7, r0
 8001a5e:	e7f0      	b.n	8001a42 <_svfiprintf_r+0x182>
 8001a60:	ab03      	add	r3, sp, #12
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4622      	mov	r2, r4
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_svfiprintf_r+0x1ec>)
 8001a68:	a904      	add	r1, sp, #16
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	f3af 8000 	nop.w
 8001a70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a74:	4681      	mov	r9, r0
 8001a76:	d1d6      	bne.n	8001a26 <_svfiprintf_r+0x166>
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	065b      	lsls	r3, r3, #25
 8001a7c:	f53f af35 	bmi.w	80018ea <_svfiprintf_r+0x2a>
 8001a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a82:	b01d      	add	sp, #116	; 0x74
 8001a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a88:	ab03      	add	r3, sp, #12
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_svfiprintf_r+0x1ec>)
 8001a90:	a904      	add	r1, sp, #16
 8001a92:	4640      	mov	r0, r8
 8001a94:	f000 f882 	bl	8001b9c <_printf_i>
 8001a98:	e7ea      	b.n	8001a70 <_svfiprintf_r+0x1b0>
 8001a9a:	bf00      	nop
 8001a9c:	08002390 	.word	0x08002390
 8001aa0:	08002396 	.word	0x08002396
 8001aa4:	0800239a 	.word	0x0800239a
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	0800180d 	.word	0x0800180d

08001ab0 <_printf_common>:
 8001ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab4:	4691      	mov	r9, r2
 8001ab6:	461f      	mov	r7, r3
 8001ab8:	688a      	ldr	r2, [r1, #8]
 8001aba:	690b      	ldr	r3, [r1, #16]
 8001abc:	4606      	mov	r6, r0
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	bfb8      	it	lt
 8001ac2:	4613      	movlt	r3, r2
 8001ac4:	f8c9 3000 	str.w	r3, [r9]
 8001ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001acc:	460c      	mov	r4, r1
 8001ace:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ad2:	b112      	cbz	r2, 8001ada <_printf_common+0x2a>
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f8c9 3000 	str.w	r3, [r9]
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	0699      	lsls	r1, r3, #26
 8001ade:	bf42      	ittt	mi
 8001ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ae4:	3302      	addmi	r3, #2
 8001ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8001aea:	6825      	ldr	r5, [r4, #0]
 8001aec:	f015 0506 	ands.w	r5, r5, #6
 8001af0:	d107      	bne.n	8001b02 <_printf_common+0x52>
 8001af2:	f104 0a19 	add.w	sl, r4, #25
 8001af6:	68e3      	ldr	r3, [r4, #12]
 8001af8:	f8d9 2000 	ldr.w	r2, [r9]
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	42ab      	cmp	r3, r5
 8001b00:	dc29      	bgt.n	8001b56 <_printf_common+0xa6>
 8001b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	3300      	adds	r3, #0
 8001b0a:	bf18      	it	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	0692      	lsls	r2, r2, #26
 8001b10:	d42e      	bmi.n	8001b70 <_printf_common+0xc0>
 8001b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b16:	4639      	mov	r1, r7
 8001b18:	4630      	mov	r0, r6
 8001b1a:	47c0      	blx	r8
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d021      	beq.n	8001b64 <_printf_common+0xb4>
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	68e5      	ldr	r5, [r4, #12]
 8001b24:	f003 0306 	and.w	r3, r3, #6
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	bf18      	it	ne
 8001b2c:	2500      	movne	r5, #0
 8001b2e:	f8d9 2000 	ldr.w	r2, [r9]
 8001b32:	f04f 0900 	mov.w	r9, #0
 8001b36:	bf08      	it	eq
 8001b38:	1aad      	subeq	r5, r5, r2
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	6922      	ldr	r2, [r4, #16]
 8001b3e:	bf08      	it	eq
 8001b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bfc4      	itt	gt
 8001b48:	1a9b      	subgt	r3, r3, r2
 8001b4a:	18ed      	addgt	r5, r5, r3
 8001b4c:	341a      	adds	r4, #26
 8001b4e:	454d      	cmp	r5, r9
 8001b50:	d11a      	bne.n	8001b88 <_printf_common+0xd8>
 8001b52:	2000      	movs	r0, #0
 8001b54:	e008      	b.n	8001b68 <_printf_common+0xb8>
 8001b56:	2301      	movs	r3, #1
 8001b58:	4652      	mov	r2, sl
 8001b5a:	4639      	mov	r1, r7
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	47c0      	blx	r8
 8001b60:	3001      	adds	r0, #1
 8001b62:	d103      	bne.n	8001b6c <_printf_common+0xbc>
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b6c:	3501      	adds	r5, #1
 8001b6e:	e7c2      	b.n	8001af6 <_printf_common+0x46>
 8001b70:	2030      	movs	r0, #48	; 0x30
 8001b72:	18e1      	adds	r1, r4, r3
 8001b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b7e:	4422      	add	r2, r4
 8001b80:	3302      	adds	r3, #2
 8001b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b86:	e7c4      	b.n	8001b12 <_printf_common+0x62>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	4639      	mov	r1, r7
 8001b8e:	4630      	mov	r0, r6
 8001b90:	47c0      	blx	r8
 8001b92:	3001      	adds	r0, #1
 8001b94:	d0e6      	beq.n	8001b64 <_printf_common+0xb4>
 8001b96:	f109 0901 	add.w	r9, r9, #1
 8001b9a:	e7d8      	b.n	8001b4e <_printf_common+0x9e>

08001b9c <_printf_i>:
 8001b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	7e09      	ldrb	r1, [r1, #24]
 8001ba8:	b085      	sub	sp, #20
 8001baa:	296e      	cmp	r1, #110	; 0x6e
 8001bac:	4617      	mov	r7, r2
 8001bae:	4606      	mov	r6, r0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bb4:	f000 80b3 	beq.w	8001d1e <_printf_i+0x182>
 8001bb8:	d822      	bhi.n	8001c00 <_printf_i+0x64>
 8001bba:	2963      	cmp	r1, #99	; 0x63
 8001bbc:	d036      	beq.n	8001c2c <_printf_i+0x90>
 8001bbe:	d80a      	bhi.n	8001bd6 <_printf_i+0x3a>
 8001bc0:	2900      	cmp	r1, #0
 8001bc2:	f000 80b9 	beq.w	8001d38 <_printf_i+0x19c>
 8001bc6:	2958      	cmp	r1, #88	; 0x58
 8001bc8:	f000 8083 	beq.w	8001cd2 <_printf_i+0x136>
 8001bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001bd4:	e032      	b.n	8001c3c <_printf_i+0xa0>
 8001bd6:	2964      	cmp	r1, #100	; 0x64
 8001bd8:	d001      	beq.n	8001bde <_printf_i+0x42>
 8001bda:	2969      	cmp	r1, #105	; 0x69
 8001bdc:	d1f6      	bne.n	8001bcc <_printf_i+0x30>
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	0605      	lsls	r5, r0, #24
 8001be4:	f103 0104 	add.w	r1, r3, #4
 8001be8:	d52a      	bpl.n	8001c40 <_printf_i+0xa4>
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6011      	str	r1, [r2, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da03      	bge.n	8001bfa <_printf_i+0x5e>
 8001bf2:	222d      	movs	r2, #45	; 0x2d
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bfa:	486f      	ldr	r0, [pc, #444]	; (8001db8 <_printf_i+0x21c>)
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	e039      	b.n	8001c74 <_printf_i+0xd8>
 8001c00:	2973      	cmp	r1, #115	; 0x73
 8001c02:	f000 809d 	beq.w	8001d40 <_printf_i+0x1a4>
 8001c06:	d808      	bhi.n	8001c1a <_printf_i+0x7e>
 8001c08:	296f      	cmp	r1, #111	; 0x6f
 8001c0a:	d020      	beq.n	8001c4e <_printf_i+0xb2>
 8001c0c:	2970      	cmp	r1, #112	; 0x70
 8001c0e:	d1dd      	bne.n	8001bcc <_printf_i+0x30>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6023      	str	r3, [r4, #0]
 8001c18:	e003      	b.n	8001c22 <_printf_i+0x86>
 8001c1a:	2975      	cmp	r1, #117	; 0x75
 8001c1c:	d017      	beq.n	8001c4e <_printf_i+0xb2>
 8001c1e:	2978      	cmp	r1, #120	; 0x78
 8001c20:	d1d4      	bne.n	8001bcc <_printf_i+0x30>
 8001c22:	2378      	movs	r3, #120	; 0x78
 8001c24:	4865      	ldr	r0, [pc, #404]	; (8001dbc <_printf_i+0x220>)
 8001c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c2a:	e055      	b.n	8001cd8 <_printf_i+0x13c>
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c32:	1d19      	adds	r1, r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6011      	str	r1, [r2, #0]
 8001c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e08c      	b.n	8001d5a <_printf_i+0x1be>
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c46:	6011      	str	r1, [r2, #0]
 8001c48:	bf18      	it	ne
 8001c4a:	b21b      	sxthne	r3, r3
 8001c4c:	e7cf      	b.n	8001bee <_printf_i+0x52>
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	6825      	ldr	r5, [r4, #0]
 8001c52:	1d18      	adds	r0, r3, #4
 8001c54:	6010      	str	r0, [r2, #0]
 8001c56:	0628      	lsls	r0, r5, #24
 8001c58:	d501      	bpl.n	8001c5e <_printf_i+0xc2>
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e002      	b.n	8001c64 <_printf_i+0xc8>
 8001c5e:	0668      	lsls	r0, r5, #25
 8001c60:	d5fb      	bpl.n	8001c5a <_printf_i+0xbe>
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	296f      	cmp	r1, #111	; 0x6f
 8001c66:	bf14      	ite	ne
 8001c68:	220a      	movne	r2, #10
 8001c6a:	2208      	moveq	r2, #8
 8001c6c:	4852      	ldr	r0, [pc, #328]	; (8001db8 <_printf_i+0x21c>)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c74:	6865      	ldr	r5, [r4, #4]
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	60a5      	str	r5, [r4, #8]
 8001c7a:	f2c0 8095 	blt.w	8001da8 <_printf_i+0x20c>
 8001c7e:	6821      	ldr	r1, [r4, #0]
 8001c80:	f021 0104 	bic.w	r1, r1, #4
 8001c84:	6021      	str	r1, [r4, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d13d      	bne.n	8001d06 <_printf_i+0x16a>
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	f040 808e 	bne.w	8001dac <_printf_i+0x210>
 8001c90:	4665      	mov	r5, ip
 8001c92:	2a08      	cmp	r2, #8
 8001c94:	d10b      	bne.n	8001cae <_printf_i+0x112>
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	07db      	lsls	r3, r3, #31
 8001c9a:	d508      	bpl.n	8001cae <_printf_i+0x112>
 8001c9c:	6923      	ldr	r3, [r4, #16]
 8001c9e:	6862      	ldr	r2, [r4, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	bfde      	ittt	le
 8001ca4:	2330      	movle	r3, #48	; 0x30
 8001ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001caa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cae:	ebac 0305 	sub.w	r3, ip, r5
 8001cb2:	6123      	str	r3, [r4, #16]
 8001cb4:	f8cd 8000 	str.w	r8, [sp]
 8001cb8:	463b      	mov	r3, r7
 8001cba:	aa03      	add	r2, sp, #12
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7ff fef6 	bl	8001ab0 <_printf_common>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d14d      	bne.n	8001d64 <_printf_i+0x1c8>
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	b005      	add	sp, #20
 8001cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cd2:	4839      	ldr	r0, [pc, #228]	; (8001db8 <_printf_i+0x21c>)
 8001cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	6821      	ldr	r1, [r4, #0]
 8001cdc:	1d1d      	adds	r5, r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6015      	str	r5, [r2, #0]
 8001ce2:	060a      	lsls	r2, r1, #24
 8001ce4:	d50b      	bpl.n	8001cfe <_printf_i+0x162>
 8001ce6:	07ca      	lsls	r2, r1, #31
 8001ce8:	bf44      	itt	mi
 8001cea:	f041 0120 	orrmi.w	r1, r1, #32
 8001cee:	6021      	strmi	r1, [r4, #0]
 8001cf0:	b91b      	cbnz	r3, 8001cfa <_printf_i+0x15e>
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	f022 0220 	bic.w	r2, r2, #32
 8001cf8:	6022      	str	r2, [r4, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	e7b7      	b.n	8001c6e <_printf_i+0xd2>
 8001cfe:	064d      	lsls	r5, r1, #25
 8001d00:	bf48      	it	mi
 8001d02:	b29b      	uxthmi	r3, r3
 8001d04:	e7ef      	b.n	8001ce6 <_printf_i+0x14a>
 8001d06:	4665      	mov	r5, ip
 8001d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8001d10:	5cc3      	ldrb	r3, [r0, r3]
 8001d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d16:	460b      	mov	r3, r1
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d1f5      	bne.n	8001d08 <_printf_i+0x16c>
 8001d1c:	e7b9      	b.n	8001c92 <_printf_i+0xf6>
 8001d1e:	6813      	ldr	r3, [r2, #0]
 8001d20:	6825      	ldr	r5, [r4, #0]
 8001d22:	1d18      	adds	r0, r3, #4
 8001d24:	6961      	ldr	r1, [r4, #20]
 8001d26:	6010      	str	r0, [r2, #0]
 8001d28:	0628      	lsls	r0, r5, #24
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	d501      	bpl.n	8001d32 <_printf_i+0x196>
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	e002      	b.n	8001d38 <_printf_i+0x19c>
 8001d32:	066a      	lsls	r2, r5, #25
 8001d34:	d5fb      	bpl.n	8001d2e <_printf_i+0x192>
 8001d36:	8019      	strh	r1, [r3, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4665      	mov	r5, ip
 8001d3c:	6123      	str	r3, [r4, #16]
 8001d3e:	e7b9      	b.n	8001cb4 <_printf_i+0x118>
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	1d19      	adds	r1, r3, #4
 8001d44:	6011      	str	r1, [r2, #0]
 8001d46:	681d      	ldr	r5, [r3, #0]
 8001d48:	6862      	ldr	r2, [r4, #4]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f000 f837 	bl	8001dc0 <memchr>
 8001d52:	b108      	cbz	r0, 8001d58 <_printf_i+0x1bc>
 8001d54:	1b40      	subs	r0, r0, r5
 8001d56:	6060      	str	r0, [r4, #4]
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d62:	e7a7      	b.n	8001cb4 <_printf_i+0x118>
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	462a      	mov	r2, r5
 8001d68:	4639      	mov	r1, r7
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	47c0      	blx	r8
 8001d6e:	3001      	adds	r0, #1
 8001d70:	d0aa      	beq.n	8001cc8 <_printf_i+0x12c>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	079b      	lsls	r3, r3, #30
 8001d76:	d413      	bmi.n	8001da0 <_printf_i+0x204>
 8001d78:	68e0      	ldr	r0, [r4, #12]
 8001d7a:	9b03      	ldr	r3, [sp, #12]
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	bfb8      	it	lt
 8001d80:	4618      	movlt	r0, r3
 8001d82:	e7a3      	b.n	8001ccc <_printf_i+0x130>
 8001d84:	2301      	movs	r3, #1
 8001d86:	464a      	mov	r2, r9
 8001d88:	4639      	mov	r1, r7
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	47c0      	blx	r8
 8001d8e:	3001      	adds	r0, #1
 8001d90:	d09a      	beq.n	8001cc8 <_printf_i+0x12c>
 8001d92:	3501      	adds	r5, #1
 8001d94:	68e3      	ldr	r3, [r4, #12]
 8001d96:	9a03      	ldr	r2, [sp, #12]
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	42ab      	cmp	r3, r5
 8001d9c:	dcf2      	bgt.n	8001d84 <_printf_i+0x1e8>
 8001d9e:	e7eb      	b.n	8001d78 <_printf_i+0x1dc>
 8001da0:	2500      	movs	r5, #0
 8001da2:	f104 0919 	add.w	r9, r4, #25
 8001da6:	e7f5      	b.n	8001d94 <_printf_i+0x1f8>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ac      	bne.n	8001d06 <_printf_i+0x16a>
 8001dac:	7803      	ldrb	r3, [r0, #0]
 8001dae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001db2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001db6:	e76c      	b.n	8001c92 <_printf_i+0xf6>
 8001db8:	080023a1 	.word	0x080023a1
 8001dbc:	080023b2 	.word	0x080023b2

08001dc0 <memchr>:
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	4402      	add	r2, r0
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	4603      	mov	r3, r0
 8001dca:	d101      	bne.n	8001dd0 <memchr+0x10>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e003      	b.n	8001dd8 <memchr+0x18>
 8001dd0:	781c      	ldrb	r4, [r3, #0]
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	428c      	cmp	r4, r1
 8001dd6:	d1f6      	bne.n	8001dc6 <memchr+0x6>
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd10      	pop	{r4, pc}

08001ddc <memmove>:
 8001ddc:	4288      	cmp	r0, r1
 8001dde:	b510      	push	{r4, lr}
 8001de0:	eb01 0302 	add.w	r3, r1, r2
 8001de4:	d807      	bhi.n	8001df6 <memmove+0x1a>
 8001de6:	1e42      	subs	r2, r0, #1
 8001de8:	4299      	cmp	r1, r3
 8001dea:	d00a      	beq.n	8001e02 <memmove+0x26>
 8001dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001df0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001df4:	e7f8      	b.n	8001de8 <memmove+0xc>
 8001df6:	4283      	cmp	r3, r0
 8001df8:	d9f5      	bls.n	8001de6 <memmove+0xa>
 8001dfa:	1881      	adds	r1, r0, r2
 8001dfc:	1ad2      	subs	r2, r2, r3
 8001dfe:	42d3      	cmn	r3, r2
 8001e00:	d100      	bne.n	8001e04 <memmove+0x28>
 8001e02:	bd10      	pop	{r4, pc}
 8001e04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001e0c:	e7f7      	b.n	8001dfe <memmove+0x22>
	...

08001e10 <_free_r>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4605      	mov	r5, r0
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d043      	beq.n	8001ea0 <_free_r+0x90>
 8001e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e1c:	1f0c      	subs	r4, r1, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bfb8      	it	lt
 8001e22:	18e4      	addlt	r4, r4, r3
 8001e24:	f000 f8d0 	bl	8001fc8 <__malloc_lock>
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <_free_r+0x94>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	b933      	cbnz	r3, 8001e3e <_free_r+0x2e>
 8001e30:	6063      	str	r3, [r4, #4]
 8001e32:	6014      	str	r4, [r2, #0]
 8001e34:	4628      	mov	r0, r5
 8001e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e3a:	f000 b8c6 	b.w	8001fca <__malloc_unlock>
 8001e3e:	42a3      	cmp	r3, r4
 8001e40:	d90b      	bls.n	8001e5a <_free_r+0x4a>
 8001e42:	6821      	ldr	r1, [r4, #0]
 8001e44:	1862      	adds	r2, r4, r1
 8001e46:	4293      	cmp	r3, r2
 8001e48:	bf01      	itttt	eq
 8001e4a:	681a      	ldreq	r2, [r3, #0]
 8001e4c:	685b      	ldreq	r3, [r3, #4]
 8001e4e:	1852      	addeq	r2, r2, r1
 8001e50:	6022      	streq	r2, [r4, #0]
 8001e52:	6063      	str	r3, [r4, #4]
 8001e54:	6004      	str	r4, [r0, #0]
 8001e56:	e7ed      	b.n	8001e34 <_free_r+0x24>
 8001e58:	4613      	mov	r3, r2
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	b10a      	cbz	r2, 8001e62 <_free_r+0x52>
 8001e5e:	42a2      	cmp	r2, r4
 8001e60:	d9fa      	bls.n	8001e58 <_free_r+0x48>
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	1858      	adds	r0, r3, r1
 8001e66:	42a0      	cmp	r0, r4
 8001e68:	d10b      	bne.n	8001e82 <_free_r+0x72>
 8001e6a:	6820      	ldr	r0, [r4, #0]
 8001e6c:	4401      	add	r1, r0
 8001e6e:	1858      	adds	r0, r3, r1
 8001e70:	4282      	cmp	r2, r0
 8001e72:	6019      	str	r1, [r3, #0]
 8001e74:	d1de      	bne.n	8001e34 <_free_r+0x24>
 8001e76:	6810      	ldr	r0, [r2, #0]
 8001e78:	6852      	ldr	r2, [r2, #4]
 8001e7a:	4401      	add	r1, r0
 8001e7c:	6019      	str	r1, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e7d8      	b.n	8001e34 <_free_r+0x24>
 8001e82:	d902      	bls.n	8001e8a <_free_r+0x7a>
 8001e84:	230c      	movs	r3, #12
 8001e86:	602b      	str	r3, [r5, #0]
 8001e88:	e7d4      	b.n	8001e34 <_free_r+0x24>
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	1821      	adds	r1, r4, r0
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	bf01      	itttt	eq
 8001e92:	6811      	ldreq	r1, [r2, #0]
 8001e94:	6852      	ldreq	r2, [r2, #4]
 8001e96:	1809      	addeq	r1, r1, r0
 8001e98:	6021      	streq	r1, [r4, #0]
 8001e9a:	6062      	str	r2, [r4, #4]
 8001e9c:	605c      	str	r4, [r3, #4]
 8001e9e:	e7c9      	b.n	8001e34 <_free_r+0x24>
 8001ea0:	bd38      	pop	{r3, r4, r5, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000bc8 	.word	0x20000bc8

08001ea8 <_malloc_r>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	1ccd      	adds	r5, r1, #3
 8001eac:	f025 0503 	bic.w	r5, r5, #3
 8001eb0:	3508      	adds	r5, #8
 8001eb2:	2d0c      	cmp	r5, #12
 8001eb4:	bf38      	it	cc
 8001eb6:	250c      	movcc	r5, #12
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	4606      	mov	r6, r0
 8001ebc:	db01      	blt.n	8001ec2 <_malloc_r+0x1a>
 8001ebe:	42a9      	cmp	r1, r5
 8001ec0:	d903      	bls.n	8001eca <_malloc_r+0x22>
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	6033      	str	r3, [r6, #0]
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
 8001eca:	f000 f87d 	bl	8001fc8 <__malloc_lock>
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <_malloc_r+0xac>)
 8001ed0:	6814      	ldr	r4, [r2, #0]
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	b991      	cbnz	r1, 8001efc <_malloc_r+0x54>
 8001ed6:	4c20      	ldr	r4, [pc, #128]	; (8001f58 <_malloc_r+0xb0>)
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	b91b      	cbnz	r3, 8001ee4 <_malloc_r+0x3c>
 8001edc:	4630      	mov	r0, r6
 8001ede:	f000 f863 	bl	8001fa8 <_sbrk_r>
 8001ee2:	6020      	str	r0, [r4, #0]
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f000 f85e 	bl	8001fa8 <_sbrk_r>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d124      	bne.n	8001f3a <_malloc_r+0x92>
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	6033      	str	r3, [r6, #0]
 8001ef6:	f000 f868 	bl	8001fca <__malloc_unlock>
 8001efa:	e7e4      	b.n	8001ec6 <_malloc_r+0x1e>
 8001efc:	680b      	ldr	r3, [r1, #0]
 8001efe:	1b5b      	subs	r3, r3, r5
 8001f00:	d418      	bmi.n	8001f34 <_malloc_r+0x8c>
 8001f02:	2b0b      	cmp	r3, #11
 8001f04:	d90f      	bls.n	8001f26 <_malloc_r+0x7e>
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	18cc      	adds	r4, r1, r3
 8001f0a:	50cd      	str	r5, [r1, r3]
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f000 f85c 	bl	8001fca <__malloc_unlock>
 8001f12:	f104 000b 	add.w	r0, r4, #11
 8001f16:	1d23      	adds	r3, r4, #4
 8001f18:	f020 0007 	bic.w	r0, r0, #7
 8001f1c:	1ac3      	subs	r3, r0, r3
 8001f1e:	d0d3      	beq.n	8001ec8 <_malloc_r+0x20>
 8001f20:	425a      	negs	r2, r3
 8001f22:	50e2      	str	r2, [r4, r3]
 8001f24:	e7d0      	b.n	8001ec8 <_malloc_r+0x20>
 8001f26:	684b      	ldr	r3, [r1, #4]
 8001f28:	428c      	cmp	r4, r1
 8001f2a:	bf16      	itet	ne
 8001f2c:	6063      	strne	r3, [r4, #4]
 8001f2e:	6013      	streq	r3, [r2, #0]
 8001f30:	460c      	movne	r4, r1
 8001f32:	e7eb      	b.n	8001f0c <_malloc_r+0x64>
 8001f34:	460c      	mov	r4, r1
 8001f36:	6849      	ldr	r1, [r1, #4]
 8001f38:	e7cc      	b.n	8001ed4 <_malloc_r+0x2c>
 8001f3a:	1cc4      	adds	r4, r0, #3
 8001f3c:	f024 0403 	bic.w	r4, r4, #3
 8001f40:	42a0      	cmp	r0, r4
 8001f42:	d005      	beq.n	8001f50 <_malloc_r+0xa8>
 8001f44:	1a21      	subs	r1, r4, r0
 8001f46:	4630      	mov	r0, r6
 8001f48:	f000 f82e 	bl	8001fa8 <_sbrk_r>
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d0cf      	beq.n	8001ef0 <_malloc_r+0x48>
 8001f50:	6025      	str	r5, [r4, #0]
 8001f52:	e7db      	b.n	8001f0c <_malloc_r+0x64>
 8001f54:	20000bc8 	.word	0x20000bc8
 8001f58:	20000bcc 	.word	0x20000bcc

08001f5c <_realloc_r>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	4607      	mov	r7, r0
 8001f60:	4614      	mov	r4, r2
 8001f62:	460e      	mov	r6, r1
 8001f64:	b921      	cbnz	r1, 8001f70 <_realloc_r+0x14>
 8001f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	f7ff bf9c 	b.w	8001ea8 <_malloc_r>
 8001f70:	b922      	cbnz	r2, 8001f7c <_realloc_r+0x20>
 8001f72:	f7ff ff4d 	bl	8001e10 <_free_r>
 8001f76:	4625      	mov	r5, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7c:	f000 f826 	bl	8001fcc <_malloc_usable_size_r>
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	d20f      	bcs.n	8001fa4 <_realloc_r+0x48>
 8001f84:	4621      	mov	r1, r4
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ff8e 	bl	8001ea8 <_malloc_r>
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0f2      	beq.n	8001f78 <_realloc_r+0x1c>
 8001f92:	4631      	mov	r1, r6
 8001f94:	4622      	mov	r2, r4
 8001f96:	f7ff fbe3 	bl	8001760 <memcpy>
 8001f9a:	4631      	mov	r1, r6
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	f7ff ff37 	bl	8001e10 <_free_r>
 8001fa2:	e7e9      	b.n	8001f78 <_realloc_r+0x1c>
 8001fa4:	4635      	mov	r5, r6
 8001fa6:	e7e7      	b.n	8001f78 <_realloc_r+0x1c>

08001fa8 <_sbrk_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	2300      	movs	r3, #0
 8001fac:	4c05      	ldr	r4, [pc, #20]	; (8001fc4 <_sbrk_r+0x1c>)
 8001fae:	4605      	mov	r5, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	6023      	str	r3, [r4, #0]
 8001fb4:	f7fe fdfc 	bl	8000bb0 <_sbrk>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_sbrk_r+0x1a>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_sbrk_r+0x1a>
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	20000bd4 	.word	0x20000bd4

08001fc8 <__malloc_lock>:
 8001fc8:	4770      	bx	lr

08001fca <__malloc_unlock>:
 8001fca:	4770      	bx	lr

08001fcc <_malloc_usable_size_r>:
 8001fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fd0:	1f18      	subs	r0, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bfbc      	itt	lt
 8001fd6:	580b      	ldrlt	r3, [r1, r0]
 8001fd8:	18c0      	addlt	r0, r0, r3
 8001fda:	4770      	bx	lr

08001fdc <_init>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr

08001fe8 <_fini>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr
