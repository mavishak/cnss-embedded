
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000720  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08000850  08000850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800090c  0800090c  00010914  2**0
                  CONTENTS
  4 .ARM          00000000  0800090c  0800090c  00010914  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800090c  08000914  00010914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800090c  0800090c  0001090c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000910  08000910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000000  08000914  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08000914  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043c1  00000000  00000000  0001093d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b6d  00000000  00000000  00014cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000200  00000000  00000000  00015870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00015a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000869  00000000  00000000  00015c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000023d0  00000000  00000000  00016481  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058a51  00000000  00000000  00018851  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000712a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000684  00000000  00000000  00071320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000838 	.word	0x08000838

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000838 	.word	0x08000838

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:

}


void toggle_led()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000641 	.word	0x20000641
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 fa4d 	bl	8000678 <write_usart2>

}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	08000850 	.word	0x08000850

080001ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/
#include "timers.h"


int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80001f0:	f000 f9ee 	bl	80005d0 <init_usart2>

	init_timer2();
 80001f4:	f000 f890 	bl	8000318 <init_timer2>
	init_timer3();
 80001f8:	f000 f8c6 	bl	8000388 <init_timer3>
	init_timer4();
 80001fc:	f000 f8f6 	bl	80003ec <init_timer4>

	//init_usart1(); // for ESP8266
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <main+0x48>)
 8000202:	f000 fa39 	bl	8000678 <write_usart2>
	//recordAlert();

	while(1)
	{
		//test_timer2();
		delay_with_timer3(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 f973 	bl	80004f4 <delay_with_timer3>
		write_usart2((uint8_t*)("Hello Stich\r\n"));
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x4c>)
 8000210:	f000 fa32 	bl	8000678 <write_usart2>

		delay_with_timer2(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000218:	f000 f952 	bl	80004c0 <delay_with_timer2>
		write_usart2((uint8_t*)("Hi Lilo\r\n"));
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0x50>)
 800021e:	f000 fa2b 	bl	8000678 <write_usart2>

		delay_with_timer2(1000);
 8000222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000226:	f000 f94b 	bl	80004c0 <delay_with_timer2>
		write_usart2((uint8_t*)("Muffasa!\r\n"));
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <main+0x54>)
 800022c:	f000 fa24 	bl	8000678 <write_usart2>
		delay_with_timer3(1000);
 8000230:	e7e9      	b.n	8000206 <main+0x1a>
 8000232:	bf00      	nop
 8000234:	080008d0 	.word	0x080008d0
 8000238:	080008e4 	.word	0x080008e4
 800023c:	080008f4 	.word	0x080008f4
 8000240:	08000900 	.word	0x08000900

08000244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f003 0307 	and.w	r3, r3, #7
 8000252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800026c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000276:	4a04      	ldr	r2, [pc, #16]	; (8000288 <__NVIC_SetPriorityGrouping+0x44>)
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	60d3      	str	r3, [r2, #12]
}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4906      	ldr	r1, [pc, #24]	; (80002c0 <__NVIC_EnableIRQ+0x34>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	6039      	str	r1, [r7, #0]
 80002ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	db0a      	blt.n	80002ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	490c      	ldr	r1, [pc, #48]	; (8000310 <__NVIC_SetPriority+0x4c>)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	0112      	lsls	r2, r2, #4
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	440b      	add	r3, r1
 80002e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ec:	e00a      	b.n	8000304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <__NVIC_SetPriority+0x50>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	f003 030f 	and.w	r3, r3, #15
 80002fa:	3b04      	subs	r3, #4
 80002fc:	0112      	lsls	r2, r2, #4
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	440b      	add	r3, r1
 8000302:	761a      	strb	r2, [r3, #24]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e100 	.word	0xe000e100
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <init_timer2>:

static uint32_t countTicks2;
static uint32_t countTicks3;
static uint32_t countTicks4;

void init_timer2(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <init_timer2+0x6c>)
 800031e:	69db      	ldr	r3, [r3, #28]
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <init_timer2+0x6c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	61d3      	str	r3, [r2, #28]

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x0000;
 8000328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0048; // should be 1us(micro second);
 8000330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000334:	2248      	movs	r2, #72	; 0x48
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 800035a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800036a:	2007      	movs	r0, #7
 800036c:	f7ff ff6a 	bl	8000244 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000370:	2100      	movs	r1, #0
 8000372:	201c      	movs	r0, #28
 8000374:	f7ff ffa6 	bl	80002c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8000378:	201c      	movs	r0, #28
 800037a:	f7ff ff87 	bl	800028c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800037e:	b662      	cpsie	i
	__enable_irq();

	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000

08000388 <init_timer3>:
void init_timer3(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <init_timer3+0x5c>)
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <init_timer3+0x5c>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	61d3      	str	r3, [r2, #28]

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x0000;
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <init_timer3+0x60>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0048; // should be 1us(micro second);
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <init_timer3+0x60>)
 80003a0:	2248      	movs	r2, #72	; 0x48
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <init_timer3+0x60>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <init_timer3+0x60>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <init_timer3+0x60>)
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <init_timer3+0x60>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <init_timer3+0x60>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <init_timer3+0x60>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80003ca:	2007      	movs	r0, #7
 80003cc:	f7ff ff3a 	bl	8000244 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80003d0:	2100      	movs	r1, #0
 80003d2:	201d      	movs	r0, #29
 80003d4:	f7ff ff76 	bl	80002c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 80003d8:	201d      	movs	r0, #29
 80003da:	f7ff ff57 	bl	800028c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003de:	b662      	cpsie	i
	__enable_irq();

	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40000400 	.word	0x40000400

080003ec <init_timer4>:
void init_timer4(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <init_timer4+0x5c>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	4a14      	ldr	r2, [pc, #80]	; (8000448 <init_timer4+0x5c>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	61d3      	str	r3, [r2, #28]

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x0000;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <init_timer4+0x60>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0048; // should be 1us(micro second);
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <init_timer4+0x60>)
 8000404:	2248      	movs	r2, #72	; 0x48
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <init_timer4+0x60>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0f      	ldr	r2, [pc, #60]	; (800044c <init_timer4+0x60>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <init_timer4+0x60>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	4a0c      	ldr	r2, [pc, #48]	; (800044c <init_timer4+0x60>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <init_timer4+0x60>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a09      	ldr	r2, [pc, #36]	; (800044c <init_timer4+0x60>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800042e:	2007      	movs	r0, #7
 8000430:	f7ff ff08 	bl	8000244 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000434:	2100      	movs	r1, #0
 8000436:	201e      	movs	r0, #30
 8000438:	f7ff ff44 	bl	80002c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 800043c:	201e      	movs	r0, #30
 800043e:	f7ff ff25 	bl	800028c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000442:	b662      	cpsie	i
	__enable_irq();

	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	40000800 	.word	0x40000800

08000450 <enable_timer2>:


void enable_timer2(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8000454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <enable_timer3>:
void enable_timer3(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <enable_timer3+0x18>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a03      	ldr	r2, [pc, #12]	; (8000484 <enable_timer3+0x18>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40000400 	.word	0x40000400

08000488 <disable_timer2>:
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
}


void disable_timer2(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 800048c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	f023 0301 	bic.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <disable_timer3>:
void disable_timer3(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <disable_timer3+0x18>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <disable_timer3+0x18>)
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40000400 	.word	0x40000400

080004c0 <delay_with_timer2>:

}


void delay_with_timer2(uint32_t num_of_millis)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	enable_timer2();
 80004c8:	f7ff ffc2 	bl	8000450 <enable_timer2>

	countTicks2 =0;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <delay_with_timer2+0x30>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
	while(countTicks2 < (num_of_millis*100));//*1000)); // Millie seconds
 80004d2:	bf00      	nop
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2264      	movs	r2, #100	; 0x64
 80004d8:	fb02 f203 	mul.w	r2, r2, r3
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <delay_with_timer2+0x30>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d8f7      	bhi.n	80004d4 <delay_with_timer2+0x14>

	disable_timer2();
 80004e4:	f7ff ffd0 	bl	8000488 <disable_timer2>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <delay_with_timer3>:
void delay_with_timer3(uint32_t num_of_millis)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	enable_timer3();
 80004fc:	f7ff ffb6 	bl	800046c <enable_timer3>

	countTicks3 =0;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <delay_with_timer3+0x30>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	while(countTicks3 < (num_of_millis*100));//*1000)); // Millie seconds
 8000506:	bf00      	nop
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2264      	movs	r2, #100	; 0x64
 800050c:	fb02 f203 	mul.w	r2, r2, r3
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <delay_with_timer3+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d8f7      	bhi.n	8000508 <delay_with_timer3+0x14>

	disable_timer3();
 8000518:	f7ff ffc4 	bl	80004a4 <disable_timer3>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000020 	.word	0x20000020

08000528 <TIM2_IRQHandler>:
	disable_timer4();
}


void TIM2_IRQHandler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 800052c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b01      	cmp	r3, #1
 8000538:	d10c      	bne.n	8000554 <TIM2_IRQHandler+0x2c>
	{
		countTicks2++;
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <TIM2_IRQHandler+0x34>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <TIM2_IRQHandler+0x34>)
 8000542:	6013      	str	r3, [r2, #0]
		TIM2->SR &= ~(0x0001);
 8000544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054e:	f023 0301 	bic.w	r3, r3, #1
 8000552:	6113      	str	r3, [r2, #16]
	}
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	2000001c 	.word	0x2000001c

08000560 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <TIM3_IRQHandler+0x30>)
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10a      	bne.n	8000586 <TIM3_IRQHandler+0x26>
	{
		countTicks3++;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <TIM3_IRQHandler+0x34>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <TIM3_IRQHandler+0x34>)
 8000578:	6013      	str	r3, [r2, #0]
		TIM3->SR &= ~(0x0001);
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <TIM3_IRQHandler+0x30>)
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <TIM3_IRQHandler+0x30>)
 8000580:	f023 0301 	bic.w	r3, r3, #1
 8000584:	6113      	str	r3, [r2, #16]
	}
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40000400 	.word	0x40000400
 8000594:	20000020 	.word	0x20000020

08000598 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <TIM4_IRQHandler+0x30>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d10a      	bne.n	80005be <TIM4_IRQHandler+0x26>
	{
		countTicks4++;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <TIM4_IRQHandler+0x34>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <TIM4_IRQHandler+0x34>)
 80005b0:	6013      	str	r3, [r2, #0]
		TIM4->SR &= ~(0x0001);
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <TIM4_IRQHandler+0x30>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <TIM4_IRQHandler+0x30>)
 80005b8:	f023 0301 	bic.w	r3, r3, #1
 80005bc:	6113      	str	r3, [r2, #16]
	}
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40000800 	.word	0x40000800
 80005cc:	20000024 	.word	0x20000024

080005d0 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <init_usart2+0x5c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <init_usart2+0x5c>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <init_usart2+0x60>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <init_usart2+0x60>)
 80005e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <init_usart2+0x60>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <init_usart2+0x60>)
 80005f2:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80005f6:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <init_usart2+0x5c>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <init_usart2+0x5c>)
 80005fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000602:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <init_usart2+0x64>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <init_usart2+0x64>)
 800060a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800060e:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <init_usart2+0x64>)
 8000612:	f240 324d 	movw	r2, #845	; 0x34d
 8000616:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <init_usart2+0x64>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <init_usart2+0x64>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	40004400 	.word	0x40004400

08000638 <set_usart2_buffer_Tx>:
}


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	2100      	movs	r1, #0
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <set_usart2_buffer_Tx+0x3c>)
 8000648:	f000 f8e6 	bl	8000818 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <set_usart2_buffer_Tx+0x3c>)
 8000650:	f000 f8ea 	bl	8000828 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff fd8b 	bl	8000170 <strlen>
 800065a:	4602      	mov	r2, r0
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <set_usart2_buffer_Tx+0x3c>)
 800065e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <set_usart2_buffer_Tx+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028

08000678 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ffd9 	bl	8000638 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 8000686:	e014      	b.n	80006b2 <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000688:	bf00      	nop
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <write_usart2+0x70>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <write_usart2+0x74>)
 8000698:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <write_usart2+0x74>)
 800069e:	5cd2      	ldrb	r2, [r2, r3]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <write_usart2+0x70>)
 80006a2:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <write_usart2+0x74>)
 80006a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <write_usart2+0x74>)
 80006ae:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <write_usart2+0x74>)
 80006b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <write_usart2+0x74>)
 80006ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006be:	429a      	cmp	r2, r3
 80006c0:	d3e2      	bcc.n	8000688 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80006c2:	bf00      	nop
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <write_usart2+0x70>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006cc:	2b40      	cmp	r3, #64	; 0x40
 80006ce:	d1f9      	bne.n	80006c4 <write_usart2+0x4c>
	usart2.write_index = 0;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <write_usart2+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <write_usart2+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40004400 	.word	0x40004400
 80006ec:	20000028 	.word	0x20000028

080006f0 <USART1_IRQHandler>:
	}

}

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <USART1_IRQHandler+0x80>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0320 	and.w	r3, r3, #32
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d132      	bne.n	8000766 <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <USART1_IRQHandler+0x80>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <USART1_IRQHandler+0x84>)
 8000708:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <USART1_IRQHandler+0x88>)
 800070c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000710:	3301      	adds	r3, #1
 8000712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000716:	d20a      	bcs.n	800072e <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <USART1_IRQHandler+0x88>)
 800071a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <USART1_IRQHandler+0x84>)
 8000720:	7811      	ldrb	r1, [r2, #0]
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <USART1_IRQHandler+0x88>)
 8000724:	4413      	add	r3, r2
 8000726:	460a      	mov	r2, r1
 8000728:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800072c:	e00d      	b.n	800074a <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <USART1_IRQHandler+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <USART1_IRQHandler+0x88>)
 8000738:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <USART1_IRQHandler+0x84>)
 800073e:	7811      	ldrb	r1, [r2, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <USART1_IRQHandler+0x88>)
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <USART1_IRQHandler+0x88>)
 800074c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000750:	3301      	adds	r3, #1
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <USART1_IRQHandler+0x88>)
 8000754:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <USART1_IRQHandler+0x88>)
 800075a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800075e:	3301      	adds	r3, #1
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <USART1_IRQHandler+0x88>)
 8000762:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40013800 	.word	0x40013800
 8000774:	20000640 	.word	0x20000640
 8000778:	20000230 	.word	0x20000230

0800077c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007a6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80007aa:	f000 f811 	bl	80007d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fd1d 	bl	80001ec <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   r0, =_estack
 80007b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007c0:	08000914 	.word	0x08000914
  ldr r2, =_sbss
 80007c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007c8:	20000644 	.word	0x20000644

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <__libc_init_array>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	2500      	movs	r5, #0
 80007d4:	4e0c      	ldr	r6, [pc, #48]	; (8000808 <__libc_init_array+0x38>)
 80007d6:	4c0d      	ldr	r4, [pc, #52]	; (800080c <__libc_init_array+0x3c>)
 80007d8:	1ba4      	subs	r4, r4, r6
 80007da:	10a4      	asrs	r4, r4, #2
 80007dc:	42a5      	cmp	r5, r4
 80007de:	d109      	bne.n	80007f4 <__libc_init_array+0x24>
 80007e0:	f000 f82a 	bl	8000838 <_init>
 80007e4:	2500      	movs	r5, #0
 80007e6:	4e0a      	ldr	r6, [pc, #40]	; (8000810 <__libc_init_array+0x40>)
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <__libc_init_array+0x44>)
 80007ea:	1ba4      	subs	r4, r4, r6
 80007ec:	10a4      	asrs	r4, r4, #2
 80007ee:	42a5      	cmp	r5, r4
 80007f0:	d105      	bne.n	80007fe <__libc_init_array+0x2e>
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007f8:	4798      	blx	r3
 80007fa:	3501      	adds	r5, #1
 80007fc:	e7ee      	b.n	80007dc <__libc_init_array+0xc>
 80007fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000802:	4798      	blx	r3
 8000804:	3501      	adds	r5, #1
 8000806:	e7f2      	b.n	80007ee <__libc_init_array+0x1e>
 8000808:	0800090c 	.word	0x0800090c
 800080c:	0800090c 	.word	0x0800090c
 8000810:	0800090c 	.word	0x0800090c
 8000814:	08000910 	.word	0x08000910

08000818 <memset>:
 8000818:	4603      	mov	r3, r0
 800081a:	4402      	add	r2, r0
 800081c:	4293      	cmp	r3, r2
 800081e:	d100      	bne.n	8000822 <memset+0xa>
 8000820:	4770      	bx	lr
 8000822:	f803 1b01 	strb.w	r1, [r3], #1
 8000826:	e7f9      	b.n	800081c <memset+0x4>

08000828 <strcpy>:
 8000828:	4603      	mov	r3, r0
 800082a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800082e:	f803 2b01 	strb.w	r2, [r3], #1
 8000832:	2a00      	cmp	r2, #0
 8000834:	d1f9      	bne.n	800082a <strcpy+0x2>
 8000836:	4770      	bx	lr

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
