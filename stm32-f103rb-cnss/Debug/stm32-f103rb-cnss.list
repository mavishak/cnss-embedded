
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000003b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  08000574  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000000  08000574  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08000574  00010638  2**0
=======
  1 .text         0000124c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016dc  080016dc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  080016dc  080016dc  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016dc  080016dc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080016e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  200000d0  080017b4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  080017b4  00020b28  2**0
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   00003d7d  00000000  00000000  0001059d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ac2  00000000  00000000  0001431a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00014de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00014f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000869  00000000  00000000  00015098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002205  00000000  00000000  00015901  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058975  00000000  00000000  00017b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007047b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000494  00000000  00000000  000704f8  2**2
=======
 12 .debug_info   000046bd  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c8f  00000000  00000000  000247b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00025448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00025640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ca5  00000000  00000000  000257d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000028b7  00000000  00000000  00036475  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058f29  00000000  00000000  00038d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000097c  00000000  00000000  00091cd0  2**2
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000150:	080004d0 	.word	0x080004d0
=======
 8000150:	08001364 	.word	0x08001364
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000168:	20000004 	.word	0x20000004
 800016c:	080004d0 	.word	0x080004d0
=======
 8000168:	200000d4 	.word	0x200000d4
 800016c:	08001364 	.word	0x08001364
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

<<<<<<< HEAD
08000180 <toggle_led>:
=======
08000180 <setImagePath>:
	uint32_t i = 9000000;//1300000;//1240000;//620000;//1000000; // 1/4 of a second
	while(i-- > 0);
}


void setImagePath(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	2100      	movs	r1, #0
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <setImagePath+0x24>)
 800018a:	f000 fcaf 	bl	8000aec <memset>
	sprintf((char*)image_path, "image/path");
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <setImagePath+0x24>)
 8000190:	4a05      	ldr	r2, [pc, #20]	; (80001a8 <setImagePath+0x28>)
 8000192:	ca07      	ldmia	r2, {r0, r1, r2}
 8000194:	c303      	stmia	r3!, {r0, r1}
 8000196:	801a      	strh	r2, [r3, #0]
 8000198:	3302      	adds	r3, #2
 800019a:	0c12      	lsrs	r2, r2, #16
 800019c:	701a      	strb	r2, [r3, #0]
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000478 	.word	0x20000478
 80001a8:	0800137c 	.word	0x0800137c

080001ac <recordAlert>:




void recordAlert(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP



	//Set client mode
	setClientMode();
 80001b0:	f000 f836 	bl	8000220 <setClientMode>

	//delay();
	write_usart2((uint8_t*)"1\r\n");
 80001b4:	4812      	ldr	r0, [pc, #72]	; (8000200 <recordAlert+0x54>)
 80001b6:	f000 fb0b 	bl	80007d0 <write_usart2>


	//Join access point
	joinAccessPoint();
 80001ba:	f000 f84f 	bl	800025c <joinAccessPoint>

	//delay();
	write_usart2((uint8_t*)"2\r\n");
 80001be:	4811      	ldr	r0, [pc, #68]	; (8000204 <recordAlert+0x58>)
 80001c0:	f000 fb06 	bl	80007d0 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	connectFirebaseHost();
 80001c4:	f000 f87a 	bl	80002bc <connectFirebaseHost>

	//delay();
	write_usart2((uint8_t*)"3\r\n");
 80001c8:	480f      	ldr	r0, [pc, #60]	; (8000208 <recordAlert+0x5c>)
 80001ca:	f000 fb01 	bl	80007d0 <write_usart2>


	//Set Image Path
	setImagePath(); //Need to check params later
 80001ce:	f7ff ffd7 	bl	8000180 <setImagePath>

	//delay();
	write_usart2((uint8_t*)"4\r\n");
 80001d2:	480e      	ldr	r0, [pc, #56]	; (800020c <recordAlert+0x60>)
 80001d4:	f000 fafc 	bl	80007d0 <write_usart2>

	//Create HTTP request
	createPostMsg();
 80001d8:	f000 f8c0 	bl	800035c <createPostMsg>

	//delay();
	write_usart2((uint8_t*)"5\r\n");
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <recordAlert+0x64>)
 80001de:	f000 faf7 	bl	80007d0 <write_usart2>


	//Send number of data bytes
	sendRequest();
 80001e2:	f000 f8ff 	bl	80003e4 <sendRequest>

	//delay();
	write_usart2((uint8_t*)"6\r\n");
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <recordAlert+0x68>)
 80001e8:	f000 faf2 	bl	80007d0 <write_usart2>

	//Read response
	readResponse();
 80001ec:	f000 f94a 	bl	8000484 <readResponse>

	//delay();
	write_usart2((uint8_t*)"7\r\n");
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <recordAlert+0x6c>)
 80001f2:	f000 faed 	bl	80007d0 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeCunnection();
	write_usart2((uint8_t*)"8\r\n");
 80001f6:	4809      	ldr	r0, [pc, #36]	; (800021c <recordAlert+0x70>)
 80001f8:	f000 faea 	bl	80007d0 <write_usart2>


}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	08001388 	.word	0x08001388
 8000204:	0800138c 	.word	0x0800138c
 8000208:	08001390 	.word	0x08001390
 800020c:	08001394 	.word	0x08001394
 8000210:	08001398 	.word	0x08001398
 8000214:	0800139c 	.word	0x0800139c
 8000218:	080013a0 	.word	0x080013a0
 800021c:	080013a4 	.word	0x080013a4

08000220 <setClientMode>:
}


/*This function sets ESP8266 modem to client mode,
 * returns uppon success.*/
void setClientMode(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	found = FALSE;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <setClientMode+0x2c>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <setClientMode+0x30>)
 800022c:	f000 fb0c 	bl	8000848 <write_usart1>
	while(!found){
 8000230:	e006      	b.n	8000240 <setClientMode+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <setClientMode+0x34>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <setClientMode+0x38>)
 8000236:	f000 fb79 	bl	800092c <search_usart1_buffer_Rx>
 800023a:	4602      	mov	r2, r0
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <setClientMode+0x2c>)
 800023e:	601a      	str	r2, [r3, #0]
	while(!found){
 8000240:	4b02      	ldr	r3, [pc, #8]	; (800024c <setClientMode+0x2c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d0f4      	beq.n	8000232 <setClientMode+0x12>
	}
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200000ec 	.word	0x200000ec
 8000250:	080013cc 	.word	0x080013cc
 8000254:	080013b0 	.word	0x080013b0
 8000258:	080013b8 	.word	0x080013b8

0800025c <joinAccessPoint>:


/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.*/
void joinAccessPoint(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000264:	2100      	movs	r1, #0
 8000266:	480e      	ldr	r0, [pc, #56]	; (80002a0 <joinAccessPoint+0x44>)
 8000268:	f000 fc40 	bl	8000aec <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <joinAccessPoint+0x48>)
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <joinAccessPoint+0x4c>)
 8000270:	490e      	ldr	r1, [pc, #56]	; (80002ac <joinAccessPoint+0x50>)
 8000272:	480b      	ldr	r0, [pc, #44]	; (80002a0 <joinAccessPoint+0x44>)
 8000274:	f000 fc42 	bl	8000afc <siprintf>

	found = FALSE;
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <joinAccessPoint+0x54>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 800027e:	4808      	ldr	r0, [pc, #32]	; (80002a0 <joinAccessPoint+0x44>)
 8000280:	f000 fae2 	bl	8000848 <write_usart1>

	while(!found){
 8000284:	e006      	b.n	8000294 <joinAccessPoint+0x38>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 8000286:	490b      	ldr	r1, [pc, #44]	; (80002b4 <joinAccessPoint+0x58>)
 8000288:	480b      	ldr	r0, [pc, #44]	; (80002b8 <joinAccessPoint+0x5c>)
 800028a:	f000 fb4f 	bl	800092c <search_usart1_buffer_Rx>
 800028e:	4602      	mov	r2, r0
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <joinAccessPoint+0x54>)
 8000292:	601a      	str	r2, [r3, #0]
	while(!found){
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <joinAccessPoint+0x54>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f4      	beq.n	8000286 <joinAccessPoint+0x2a>
	}

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200000f0 	.word	0x200000f0
 80002a4:	080013dc 	.word	0x080013dc
 80002a8:	080013e8 	.word	0x080013e8
 80002ac:	080013f4 	.word	0x080013f4
 80002b0:	200000ec 	.word	0x200000ec
 80002b4:	0800140c 	.word	0x0800140c
 80002b8:	080013b8 	.word	0x080013b8

080002bc <connectFirebaseHost>:


/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns upon success.*/
void connectFirebaseHost(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0


	//Create secure cunnection via SSL
	found = FALSE;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <connectFirebaseHost+0x78>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 80002c6:	481c      	ldr	r0, [pc, #112]	; (8000338 <connectFirebaseHost+0x7c>)
 80002c8:	f000 fabe 	bl	8000848 <write_usart1>
	while(!found){
 80002cc:	e006      	b.n	80002dc <connectFirebaseHost+0x20>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80002ce:	491b      	ldr	r1, [pc, #108]	; (800033c <connectFirebaseHost+0x80>)
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <connectFirebaseHost+0x84>)
 80002d2:	f000 fb2b 	bl	800092c <search_usart1_buffer_Rx>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <connectFirebaseHost+0x78>)
 80002da:	601a      	str	r2, [r3, #0]
	while(!found){
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <connectFirebaseHost+0x78>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f4      	beq.n	80002ce <connectFirebaseHost+0x12>
	}



	//Connect Firebase Host
	found = FALSE;
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <connectFirebaseHost+0x78>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80002ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ee:	2100      	movs	r1, #0
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <connectFirebaseHost+0x88>)
 80002f2:	f000 fbfb 	bl	8000aec <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <connectFirebaseHost+0x8c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <connectFirebaseHost+0x90>)
 80002fc:	4914      	ldr	r1, [pc, #80]	; (8000350 <connectFirebaseHost+0x94>)
 80002fe:	4811      	ldr	r0, [pc, #68]	; (8000344 <connectFirebaseHost+0x88>)
 8000300:	f000 fbfc 	bl	8000afc <siprintf>

	write_usart1((uint8_t*)command);
 8000304:	480f      	ldr	r0, [pc, #60]	; (8000344 <connectFirebaseHost+0x88>)
 8000306:	f000 fa9f 	bl	8000848 <write_usart1>

	while(!found){
 800030a:	e00d      	b.n	8000328 <connectFirebaseHost+0x6c>
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 800030c:	4911      	ldr	r1, [pc, #68]	; (8000354 <connectFirebaseHost+0x98>)
 800030e:	480c      	ldr	r0, [pc, #48]	; (8000340 <connectFirebaseHost+0x84>)
 8000310:	f000 fb0c 	bl	800092c <search_usart1_buffer_Rx>
 8000314:	4602      	mov	r2, r0
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <connectFirebaseHost+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
		found = search_usart1_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ALREADY_CONNECTED);
 800031a:	490f      	ldr	r1, [pc, #60]	; (8000358 <connectFirebaseHost+0x9c>)
 800031c:	4808      	ldr	r0, [pc, #32]	; (8000340 <connectFirebaseHost+0x84>)
 800031e:	f000 fb05 	bl	800092c <search_usart1_buffer_Rx>
 8000322:	4602      	mov	r2, r0
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <connectFirebaseHost+0x78>)
 8000326:	601a      	str	r2, [r3, #0]
	while(!found){
 8000328:	4b02      	ldr	r3, [pc, #8]	; (8000334 <connectFirebaseHost+0x78>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0ed      	beq.n	800030c <connectFirebaseHost+0x50>
	}


}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000ec 	.word	0x200000ec
 8000338:	08001414 	.word	0x08001414
 800033c:	080013b0 	.word	0x080013b0
 8000340:	080013b8 	.word	0x080013b8
 8000344:	200000f0 	.word	0x200000f0
 8000348:	20000058 	.word	0x20000058
 800034c:	20000000 	.word	0x20000000
 8000350:	0800142c 	.word	0x0800142c
 8000354:	0800140c 	.word	0x0800140c
 8000358:	0800144c 	.word	0x0800144c

0800035c <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	2100      	movs	r1, #0
 8000366:	4815      	ldr	r0, [pc, #84]	; (80003bc <createPostMsg+0x60>)
 8000368:	f000 fbc0 	bl	8000aec <memset>
	sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
 800036c:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <createPostMsg+0x64>)
 800036e:	4915      	ldr	r1, [pc, #84]	; (80003c4 <createPostMsg+0x68>)
 8000370:	4812      	ldr	r0, [pc, #72]	; (80003bc <createPostMsg+0x60>)
 8000372:	f000 fbc3 	bl	8000afc <siprintf>
	content_len = strlen((char*)content);
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <createPostMsg+0x60>)
 8000378:	f7ff fefa 	bl	8000170 <strlen>
 800037c:	4602      	mov	r2, r0
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <createPostMsg+0x6c>)
 8000380:	601a      	str	r2, [r3, #0]
	//content_len = strlen("{\"image_path\": \"\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}") + strlen((char*)image_path);


	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 8000382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000386:	2100      	movs	r1, #0
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <createPostMsg+0x70>)
 800038a:	f000 fbaf 	bl	8000aec <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <createPostMsg+0x6c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <createPostMsg+0x60>)
 8000394:	9202      	str	r2, [sp, #8]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <createPostMsg+0x74>)
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <createPostMsg+0x78>)
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <createPostMsg+0x7c>)
 80003a0:	490e      	ldr	r1, [pc, #56]	; (80003dc <createPostMsg+0x80>)
 80003a2:	480a      	ldr	r0, [pc, #40]	; (80003cc <createPostMsg+0x70>)
 80003a4:	f000 fbaa 	bl	8000afc <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80003a8:	4808      	ldr	r0, [pc, #32]	; (80003cc <createPostMsg+0x70>)
 80003aa:	f7ff fee1 	bl	8000170 <strlen>
 80003ae:	4603      	mov	r3, r0
 80003b0:	3b02      	subs	r3, #2
 80003b2:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <createPostMsg+0x84>)
 80003b4:	6013      	str	r3, [r2, #0]

}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200003f4 	.word	0x200003f4
 80003c0:	20000478 	.word	0x20000478
 80003c4:	08001460 	.word	0x08001460
 80003c8:	20000474 	.word	0x20000474
 80003cc:	200001f0 	.word	0x200001f0
 80003d0:	20000000 	.word	0x20000000
 80003d4:	2000002c 	.word	0x2000002c
 80003d8:	2000005c 	.word	0x2000005c
 80003dc:	080014b4 	.word	0x080014b4
 80003e0:	200003f0 	.word	0x200003f0

080003e4 <sendRequest>:


/*This function Sends request to firbase,
 * returns apun success.*/
void sendRequest(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

	found = FALSE;
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <sendRequest+0x78>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]

	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80003ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f2:	2100      	movs	r1, #0
 80003f4:	481a      	ldr	r0, [pc, #104]	; (8000460 <sendRequest+0x7c>)
 80003f6:	f000 fb79 	bl	8000aec <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <sendRequest+0x80>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	461a      	mov	r2, r3
 8000400:	4919      	ldr	r1, [pc, #100]	; (8000468 <sendRequest+0x84>)
 8000402:	4817      	ldr	r0, [pc, #92]	; (8000460 <sendRequest+0x7c>)
 8000404:	f000 fb7a 	bl	8000afc <siprintf>

	write_usart1((uint8_t*)command);
 8000408:	4815      	ldr	r0, [pc, #84]	; (8000460 <sendRequest+0x7c>)
 800040a:	f000 fa1d 	bl	8000848 <write_usart1>
	while(!found){
 800040e:	e00d      	b.n	800042c <sendRequest+0x48>
		found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000410:	4916      	ldr	r1, [pc, #88]	; (800046c <sendRequest+0x88>)
 8000412:	4817      	ldr	r0, [pc, #92]	; (8000470 <sendRequest+0x8c>)
 8000414:	f000 fa8a 	bl	800092c <search_usart1_buffer_Rx>
 8000418:	4602      	mov	r2, r0
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <sendRequest+0x78>)
 800041c:	601a      	str	r2, [r3, #0]
		found = search_usart1_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");//I think this should be here
 800041e:	4915      	ldr	r1, [pc, #84]	; (8000474 <sendRequest+0x90>)
 8000420:	4813      	ldr	r0, [pc, #76]	; (8000470 <sendRequest+0x8c>)
 8000422:	f000 fa83 	bl	800092c <search_usart1_buffer_Rx>
 8000426:	4602      	mov	r2, r0
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <sendRequest+0x78>)
 800042a:	601a      	str	r2, [r3, #0]
	while(!found){
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <sendRequest+0x78>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0ed      	beq.n	8000410 <sendRequest+0x2c>
	}
	found = FALSE;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <sendRequest+0x78>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]

	/*Send HTTP request*/
	write_usart1((uint8_t*)http);
 800043a:	480f      	ldr	r0, [pc, #60]	; (8000478 <sendRequest+0x94>)
 800043c:	f000 fa04 	bl	8000848 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(!found){
 8000440:	e006      	b.n	8000450 <sendRequest+0x6c>
		found = search_usart1_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000442:	490e      	ldr	r1, [pc, #56]	; (800047c <sendRequest+0x98>)
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <sendRequest+0x9c>)
 8000446:	f000 fa71 	bl	800092c <search_usart1_buffer_Rx>
 800044a:	4602      	mov	r2, r0
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <sendRequest+0x78>)
 800044e:	601a      	str	r2, [r3, #0]
	while(!found){
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <sendRequest+0x78>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f4      	beq.n	8000442 <sendRequest+0x5e>
	}

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000ec 	.word	0x200000ec
 8000460:	200000f0 	.word	0x200000f0
 8000464:	200003f0 	.word	0x200003f0
 8000468:	0800152c 	.word	0x0800152c
 800046c:	080013b0 	.word	0x080013b0
 8000470:	08001540 	.word	0x08001540
 8000474:	08001544 	.word	0x08001544
 8000478:	200001f0 	.word	0x200001f0
 800047c:	0800140c 	.word	0x0800140c
 8000480:	08001550 	.word	0x08001550

08000484 <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.*/
void readResponse(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

	found = FALSE;
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <readResponse+0x28>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
	while(!found){
 800048e:	e006      	b.n	800049e <readResponse+0x1a>
		//found = search_usart1_buffer_Rx((uint8_t *)"\r\n\r\nOK\r\n", (uint8_t *)AT_FAIL); //We counting on the appearance of OK in the HTTP response (we wont see the full response)
		found = search_usart1_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 8000490:	4907      	ldr	r1, [pc, #28]	; (80004b0 <readResponse+0x2c>)
 8000492:	4808      	ldr	r0, [pc, #32]	; (80004b4 <readResponse+0x30>)
 8000494:	f000 fa4a 	bl	800092c <search_usart1_buffer_Rx>
 8000498:	4602      	mov	r2, r0
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <readResponse+0x28>)
 800049c:	601a      	str	r2, [r3, #0]
	while(!found){
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <readResponse+0x28>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f4      	beq.n	8000490 <readResponse+0xc>
	}

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000ec 	.word	0x200000ec
 80004b0:	0800140c 	.word	0x0800140c
 80004b4:	08001544 	.word	0x08001544

080004b8 <toggle_led>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

}


void toggle_led()
{
<<<<<<< HEAD
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
=======
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

	if(state == OFF)
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <toggle_led+0x3c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d109      	bne.n	80004d8 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <toggle_led+0x40>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <toggle_led+0x40>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	60d3      	str	r3, [r2, #12]
		state=ON;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <toggle_led+0x3c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
<<<<<<< HEAD
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000635 	.word	0x20000635
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:
=======
 80004d6:	e008      	b.n	80004ea <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <toggle_led+0x40>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <toggle_led+0x40>)
 80004de:	f023 0320 	bic.w	r3, r3, #32
 80004e2:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <toggle_led+0x3c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000b20 	.word	0x20000b20
 80004f8:	40010800 	.word	0x40010800

080004fc <EXTI4_IRQHandler>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
<<<<<<< HEAD
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 f899 	bl	8000310 <write_usart2>

}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	080004e8 	.word	0x080004e8

080001ec <main>:
=======
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <EXTI4_IRQHandler+0x20>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <EXTI4_IRQHandler+0x20>)
 8000506:	f043 0310 	orr.w	r3, r3, #16
 800050a:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 800050c:	f7ff ffd4 	bl	80004b8 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <EXTI4_IRQHandler+0x24>)
 8000512:	f000 f95d 	bl	80007d0 <write_usart2>

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010400 	.word	0x40010400
 8000520:	080015fc 	.word	0x080015fc

08000524 <main>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
#include "esp8266_WiFi.h" /*for testing usart1...*/
#include "timers.h"


int main(void)
{
<<<<<<< HEAD
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
=======
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
<<<<<<< HEAD
 80001f0:	f000 f83a 	bl	8000268 <init_usart2>
	init_timer2();
 80001f4:	f000 f804 	bl	8000200 <init_timer2>
	//recordAlert();


	while(1)
	{
		test_timer2();
 80001f8:	f000 f822 	bl	8000240 <test_timer2>
 80001fc:	e7fc      	b.n	80001f8 <main+0xc>
	...

08000200 <init_timer2>:
#include "timers.h"
#include "usart.h"
#include <string.h>
#include <stdio.h>

void init_timer2(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	//Not useful: RCC->APB1RSTR |= 0x00000001; // TIM2RST: TIM2 timer reset(redundant ???)
//-----???????-----------------


	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <init_timer2+0x3c>)
 8000206:	69db      	ldr	r3, [r3, #28]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <init_timer2+0x3c>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	61d3      	str	r3, [r2, #28]

	/* AFIO  {p. in the reference manual} */
	//RCC->APB2ENR |= 0x00000001;

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0xFFFF;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000218:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0007;//0xFFFF;
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	2207      	movs	r2, #7
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c

	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR
	//TIM2->CR1 |= 0x0080; // ARPE
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]

	/* TIMx auto-reload register (TIMx_ARR) {p.419 in the Reference manual} */
	//TIM2->ARR//holds the number of ticks that the timer will count

	//When the time is over - the UIF bit is set to 1
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000

08000240 <test_timer2>:

/*USART2 has to be enabled*/
void test_timer2(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

	uint32_t i = TIM2->CNT;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024c:	607b      	str	r3, [r7, #4]
	write_usart2((uint8_t *)i);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f85d 	bl	8000310 <write_usart2>

//	write_usart2((uint8_t *)TIM2->CNT);
	write_usart2((uint8_t *)"\r\n");
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <test_timer2+0x24>)
 8000258:	f000 f85a 	bl	8000310 <write_usart2>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08000568 	.word	0x08000568

08000268 <init_usart2>:
=======
 8000528:	f000 f8a0 	bl	800066c <init_usart2>
	init_usart1(); // for ESP8266
 800052c:	f000 f8d2 	bl	80006d4 <init_usart1>
	//write_usart2((uint8_t*)AT_COMMAND);

	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <main+0x18>)
 8000532:	f000 f94d 	bl	80007d0 <write_usart2>

	//TestWifiConnection(); //THE FUNCTION NAME HAS NOTHING TO DO WITH IT"S CONTENT...! :)~

	while(1)
	{
		recordAlert();
 8000536:	f7ff fe39 	bl	80001ac <recordAlert>
 800053a:	e7fc      	b.n	8000536 <main+0x12>
 800053c:	0800167c 	.word	0x0800167c

08000540 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <_sbrk+0x50>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x16>
		heap_end = &end;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <_sbrk+0x50>)
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <_sbrk+0x54>)
 8000554:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <_sbrk+0x50>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <_sbrk+0x50>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	466a      	mov	r2, sp
 8000566:	4293      	cmp	r3, r2
 8000568:	d907      	bls.n	800057a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800056a:	f000 fa95 	bl	8000a98 <__errno>
 800056e:	4602      	mov	r2, r0
 8000570:	230c      	movs	r3, #12
 8000572:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
 8000578:	e006      	b.n	8000588 <_sbrk+0x48>
	}

	heap_end += incr;
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <_sbrk+0x50>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <_sbrk+0x50>)
 8000584:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200004f8 	.word	0x200004f8
 8000594:	20000b28 	.word	0x20000b28

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	; (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db0b      	blt.n	800060a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 021f 	and.w	r2, r3, #31
 80005f8:	4906      	ldr	r1, [pc, #24]	; (8000614 <__NVIC_EnableIRQ+0x34>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	095b      	lsrs	r3, r3, #5
 8000600:	2001      	movs	r0, #1
 8000602:	fa00 f202 	lsl.w	r2, r0, r2
 8000606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100

08000618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db0a      	blt.n	8000642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <__NVIC_SetPriority+0x4c>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	440b      	add	r3, r1
 800063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000640:	e00a      	b.n	8000658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <__NVIC_SetPriority+0x50>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	3b04      	subs	r3, #4
 8000650:	0112      	lsls	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	440b      	add	r3, r1
 8000656:	761a      	strb	r2, [r3, #24]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <init_usart2>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
<<<<<<< HEAD
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
=======
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
<<<<<<< HEAD
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <init_usart2+0x5c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <init_usart2+0x5c>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <init_usart2+0x60>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <init_usart2+0x60>)
 800027e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <init_usart2+0x60>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <init_usart2+0x60>)
 800028a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800028e:	6013      	str	r3, [r2, #0]
=======
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <init_usart2+0x5c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <init_usart2+0x5c>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <init_usart2+0x60>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <init_usart2+0x60>)
 8000682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000686:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <init_usart2+0x60>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <init_usart2+0x60>)
 800068e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000692:	6013      	str	r3, [r2, #0]
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
<<<<<<< HEAD
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <init_usart2+0x5c>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <init_usart2+0x5c>)
 8000296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029a:	61d3      	str	r3, [r2, #28]
=======
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <init_usart2+0x5c>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <init_usart2+0x5c>)
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069e:	61d3      	str	r3, [r2, #28]
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
<<<<<<< HEAD
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <init_usart2+0x64>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <init_usart2+0x64>)
 80002a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a6:	60d3      	str	r3, [r2, #12]
=======
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <init_usart2+0x64>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <init_usart2+0x64>)
 80006a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006aa:	60d3      	str	r3, [r2, #12]
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
<<<<<<< HEAD
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <init_usart2+0x64>)
 80002aa:	f240 324d 	movw	r2, #845	; 0x34d
 80002ae:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <init_usart2+0x64>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <init_usart2+0x64>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	60d3      	str	r3, [r2, #12]
=======
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <init_usart2+0x64>)
 80006ae:	f240 324d 	movw	r2, #845	; 0x34d
 80006b2:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <init_usart2+0x64>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <init_usart2+0x64>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	60d3      	str	r3, [r2, #12]
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
<<<<<<< HEAD
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40004400 	.word	0x40004400

080002d0 <set_usart2_buffer_Tx>:
}
=======
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40004400 	.word	0x40004400

080006d4 <init_usart1>:


/* Usart1 will be use for communication with esp8266. */
void init_usart1(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0


	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <init_usart1+0xb0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <init_usart1+0xb0>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <init_usart1+0xb4>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <init_usart1+0xb4>)
 80006ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ee:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <init_usart1+0xb4>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4a24      	ldr	r2, [pc, #144]	; (8000788 <init_usart1+0xb4>)
 80006f6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006fa:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <init_usart1+0xb4>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <init_usart1+0xb4>)
 8000702:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000706:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <init_usart1+0xb4>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <init_usart1+0xb4>)
 800070e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000712:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <init_usart1+0xb4>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <init_usart1+0xb4>)
 800071a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800071e:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <init_usart1+0xb0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <init_usart1+0xb0>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <init_usart1+0xb8>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <init_usart1+0xb8>)
 8000732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000736:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <init_usart1+0xb8>)
 800073a:	2245      	movs	r2, #69	; 0x45
 800073c:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <init_usart1+0xb8>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <init_usart1+0xb8>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	60d3      	str	r3, [r2, #12]

	/*Init Receive buffer*/
	set_usart1_buffer_Rx();
 800074a:	f000 f8d9 	bl	8000900 <set_usart1_buffer_Rx>

	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <init_usart1+0xb8>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <init_usart1+0xb8>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	60d3      	str	r3, [r2, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <init_usart1+0xb8>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <init_usart1+0xb8>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000768:	2007      	movs	r0, #7
 800076a:	f7ff ff15 	bl	8000598 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800076e:	2100      	movs	r1, #0
 8000770:	2025      	movs	r0, #37	; 0x25
 8000772:	f7ff ff51 	bl	8000618 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 8000776:	2025      	movs	r0, #37	; 0x25
 8000778:	f7ff ff32 	bl	80005e0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800077c:	b662      	cpsie	i
	__enable_irq();

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800
 800078c:	40013800 	.word	0x40013800

08000790 <set_usart2_buffer_Tx>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
<<<<<<< HEAD
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80002d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002dc:	2100      	movs	r1, #0
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002e0:	f000 f8e6 	bl	80004b0 <memset>
=======
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079c:	2100      	movs	r1, #0
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <set_usart2_buffer_Tx+0x3c>)
 80007a0:	f000 f9a4 	bl	8000aec <memset>
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
<<<<<<< HEAD
 80002e4:	6879      	ldr	r1, [r7, #4]
 80002e6:	4809      	ldr	r0, [pc, #36]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002e8:	f000 f8ea 	bl	80004c0 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff3f 	bl	8000170 <strlen>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000001c 	.word	0x2000001c

08000310 <write_usart2>:
=======
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <set_usart2_buffer_Tx+0x3c>)
 80007a8:	f000 f9c8 	bl	8000b3c <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fcdf 	bl	8000170 <strlen>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <set_usart2_buffer_Tx+0x3c>)
 80007b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <set_usart2_buffer_Tx+0x3c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200004fc 	.word	0x200004fc

080007d0 <write_usart2>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
<<<<<<< HEAD
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ffd9 	bl	80002d0 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 800031e:	e014      	b.n	800034a <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000320:	bf00      	nop
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <write_usart2+0x70>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <write_usart2+0x74>)
 8000330:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <write_usart2+0x74>)
 8000336:	5cd2      	ldrb	r2, [r2, r3]
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <write_usart2+0x70>)
 800033a:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <write_usart2+0x74>)
 800033e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000342:	3301      	adds	r3, #1
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <write_usart2+0x74>)
 8000346:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <write_usart2+0x74>)
 800034c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <write_usart2+0x74>)
 8000352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000356:	429a      	cmp	r2, r3
 8000358:	d3e2      	bcc.n	8000320 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800035a:	bf00      	nop
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <write_usart2+0x70>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000364:	2b40      	cmp	r3, #64	; 0x40
 8000366:	d1f9      	bne.n	800035c <write_usart2+0x4c>
	usart2.write_index = 0;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <write_usart2+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <write_usart2+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40004400 	.word	0x40004400
 8000384:	2000001c 	.word	0x2000001c

08000388 <USART1_IRQHandler>:
	}

}

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <USART1_IRQHandler+0x80>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b20      	cmp	r3, #32
 8000396:	d132      	bne.n	80003fe <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <USART1_IRQHandler+0x80>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <USART1_IRQHandler+0x84>)
 80003a0:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <USART1_IRQHandler+0x88>)
 80003a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80003a8:	3301      	adds	r3, #1
 80003aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003ae:	d20a      	bcs.n	80003c6 <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <USART1_IRQHandler+0x88>)
 80003b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <USART1_IRQHandler+0x84>)
 80003b8:	7811      	ldrb	r1, [r2, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <USART1_IRQHandler+0x88>)
 80003bc:	4413      	add	r3, r2
 80003be:	460a      	mov	r2, r1
 80003c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80003c4:	e00d      	b.n	80003e2 <USART1_IRQHandler+0x5a>
=======
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffd9 	bl	8000790 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80007de:	e014      	b.n	800080a <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80007e0:	bf00      	nop
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <write_usart2+0x70>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <write_usart2+0x74>)
 80007f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007f4:	4a13      	ldr	r2, [pc, #76]	; (8000844 <write_usart2+0x74>)
 80007f6:	5cd2      	ldrb	r2, [r2, r3]
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <write_usart2+0x70>)
 80007fa:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <write_usart2+0x74>)
 80007fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000802:	3301      	adds	r3, #1
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <write_usart2+0x74>)
 8000806:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <write_usart2+0x74>)
 800080c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <write_usart2+0x74>)
 8000812:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000816:	429a      	cmp	r2, r3
 8000818:	d3e2      	bcc.n	80007e0 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800081a:	bf00      	nop
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <write_usart2+0x70>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	2b40      	cmp	r3, #64	; 0x40
 8000826:	d1f9      	bne.n	800081c <write_usart2+0x4c>
	usart2.write_index = 0;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <write_usart2+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <write_usart2+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40004400 	.word	0x40004400
 8000844:	200004fc 	.word	0x200004fc

08000848 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f835 	bl	80008c0 <set_usart1_buffer_Tx>

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8000856:	e014      	b.n	8000882 <write_usart1+0x3a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000858:	bf00      	nop
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <write_usart1+0x70>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <write_usart1+0x12>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <write_usart1+0x74>)
 8000868:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <write_usart1+0x74>)
 800086e:	5cd2      	ldrb	r2, [r2, r3]
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <write_usart1+0x70>)
 8000872:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <write_usart1+0x74>)
 8000876:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800087a:	3301      	adds	r3, #1
 800087c:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <write_usart1+0x74>)
 800087e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <write_usart1+0x74>)
 8000884:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <write_usart1+0x74>)
 800088a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800088e:	429a      	cmp	r2, r3
 8000890:	d3e2      	bcc.n	8000858 <write_usart1+0x10>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8000892:	bf00      	nop
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <write_usart1+0x70>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089c:	2b40      	cmp	r3, #64	; 0x40
 800089e:	d1f9      	bne.n	8000894 <write_usart1+0x4c>
	usart1.write_index = 0;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <write_usart1+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <write_usart1+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40013800 	.word	0x40013800
 80008bc:	20000704 	.word	0x20000704

080008c0 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	2100      	movs	r1, #0
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <set_usart1_buffer_Tx+0x3c>)
 80008d0:	f000 f90c 	bl	8000aec <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <set_usart1_buffer_Tx+0x3c>)
 80008d8:	f000 f930 	bl	8000b3c <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fc47 	bl	8000170 <strlen>
 80008e2:	4602      	mov	r2, r0
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <set_usart1_buffer_Tx+0x3c>)
 80008e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <set_usart1_buffer_Tx+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000704 	.word	0x20000704

08000900 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	2100      	movs	r1, #0
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <set_usart1_buffer_Rx+0x24>)
 800090c:	f000 f8ee 	bl	8000aec <memset>
	usart1.Rx_len = 0;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <set_usart1_buffer_Rx+0x28>)
 8000912:	2200      	movs	r2, #0
 8000914:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <set_usart1_buffer_Rx+0x28>)
 800091a:	2200      	movs	r2, #0
 800091c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000904 	.word	0x20000904
 8000928:	20000704 	.word	0x20000704

0800092c <search_usart1_buffer_Rx>:


uint32_t search_usart1_buffer_Rx(uint8_t *pass, uint8_t *fail){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <search_usart1_buffer_Rx+0x7c>)
 8000938:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800093c:	3301      	adds	r3, #1
 800093e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000942:	d223      	bcs.n	800098c <search_usart1_buffer_Rx+0x60>

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 8000948:	f000 f900 	bl	8000b4c <strstr>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <search_usart1_buffer_Rx+0x34>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 8000954:	f7ff ff3c 	bl	80007d0 <write_usart2>
			set_usart1_buffer_Rx();
 8000958:	f7ff ffd2 	bl	8000900 <set_usart1_buffer_Rx>
			return (uint32_t)TRUE;
 800095c:	2301      	movs	r3, #1
 800095e:	e01e      	b.n	800099e <search_usart1_buffer_Rx+0x72>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8000960:	6839      	ldr	r1, [r7, #0]
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 8000964:	f000 f8f2 	bl	8000b4c <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <search_usart1_buffer_Rx+0x50>
			write_usart2((uint8_t*)usart1.Rx); //write response to screen
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 8000970:	f7ff ff2e 	bl	80007d0 <write_usart2>
			set_usart1_buffer_Rx();
 8000974:	f7ff ffc4 	bl	8000900 <set_usart1_buffer_Rx>
			return (uint32_t)FALSE;
 8000978:	2300      	movs	r3, #0
 800097a:	e010      	b.n	800099e <search_usart1_buffer_Rx+0x72>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 800097e:	f7ff ff27 	bl	80007d0 <write_usart2>
			write_usart2((uint8_t*)"\r\n"); //for debuging
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <search_usart1_buffer_Rx+0x84>)
 8000984:	f7ff ff24 	bl	80007d0 <write_usart2>
			return (uint32_t)FALSE;
 8000988:	2300      	movs	r3, #0
 800098a:	e008      	b.n	800099e <search_usart1_buffer_Rx+0x72>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW\r\n");
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <search_usart1_buffer_Rx+0x88>)
 800098e:	f7ff ff1f 	bl	80007d0 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <search_usart1_buffer_Rx+0x80>)
 8000994:	f7ff ff1c 	bl	80007d0 <write_usart2>
		set_usart1_buffer_Rx();
 8000998:	f7ff ffb2 	bl	8000900 <set_usart1_buffer_Rx>
		return (uint32_t)FALSE; //FALSE
 800099c:	2300      	movs	r3, #0
	}

}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000704 	.word	0x20000704
 80009ac:	20000904 	.word	0x20000904
 80009b0:	08001690 	.word	0x08001690
 80009b4:	08001694 	.word	0x08001694

080009b8 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <USART1_IRQHandler+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	2b20      	cmp	r3, #32
 80009c6:	d132      	bne.n	8000a2e <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <USART1_IRQHandler+0x80>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <USART1_IRQHandler+0x84>)
 80009d0:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <USART1_IRQHandler+0x88>)
 80009d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80009d8:	3301      	adds	r3, #1
 80009da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009de:	d20a      	bcs.n	80009f6 <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <USART1_IRQHandler+0x88>)
 80009e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <USART1_IRQHandler+0x84>)
 80009e8:	7811      	ldrb	r1, [r2, #0]
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <USART1_IRQHandler+0x88>)
 80009ec:	4413      	add	r3, r2
 80009ee:	460a      	mov	r2, r1
 80009f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80009f4:	e00d      	b.n	8000a12 <USART1_IRQHandler+0x5a>
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
		}
		else{
			//Restart index
			usart1.read_index = 0;
<<<<<<< HEAD
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <USART1_IRQHandler+0x88>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <USART1_IRQHandler+0x88>)
 80003d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <USART1_IRQHandler+0x84>)
 80003d6:	7811      	ldrb	r1, [r2, #0]
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <USART1_IRQHandler+0x88>)
 80003da:	4413      	add	r3, r2
 80003dc:	460a      	mov	r2, r1
 80003de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <USART1_IRQHandler+0x88>)
 80003e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <USART1_IRQHandler+0x88>)
 80003ec:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <USART1_IRQHandler+0x88>)
 80003f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <USART1_IRQHandler+0x88>)
 80003fa:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
=======
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <USART1_IRQHandler+0x88>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <USART1_IRQHandler+0x84>)
 8000a06:	7811      	ldrb	r1, [r2, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a0a:	4413      	add	r3, r2
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a1c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <USART1_IRQHandler+0x88>)
 8000a2a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
	}


}
<<<<<<< HEAD
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40013800 	.word	0x40013800
 800040c:	20000634 	.word	0x20000634
 8000410:	20000224 	.word	0x20000224

08000414 <Reset_Handler>:
=======
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	20000b14 	.word	0x20000b14
 8000a40:	20000704 	.word	0x20000704

08000a44 <Reset_Handler>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< HEAD
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490e      	ldr	r1, [pc, #56]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0b      	ldr	r4, [pc, #44]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800043e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fed1 	bl	80001ec <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000638 	.word	0x20000638

08000464 <ADC1_2_IRQHandler>:
=======
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0b      	ldr	r4, [pc, #44]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a6e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000a72:	f000 f817 	bl	8000aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fd55 	bl	8000524 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   r0, =_estack
 8000a7c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000a88:	080016e4 	.word	0x080016e4
  ldr r2, =_sbss
 8000a8c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000a90:	20000b28 	.word	0x20000b28

08000a94 <ADC1_2_IRQHandler>:
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8000464:	e7fe      	b.n	8000464 <ADC1_2_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2500      	movs	r5, #0
 800046c:	4e0c      	ldr	r6, [pc, #48]	; (80004a0 <__libc_init_array+0x38>)
 800046e:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 8000470:	1ba4      	subs	r4, r4, r6
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	42a5      	cmp	r5, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	f000 f82a 	bl	80004d0 <_init>
 800047c:	2500      	movs	r5, #0
 800047e:	4e0a      	ldr	r6, [pc, #40]	; (80004a8 <__libc_init_array+0x40>)
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <__libc_init_array+0x44>)
 8000482:	1ba4      	subs	r4, r4, r6
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	42a5      	cmp	r5, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000490:	4798      	blx	r3
 8000492:	3501      	adds	r5, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800049a:	4798      	blx	r3
 800049c:	3501      	adds	r5, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	0800056c 	.word	0x0800056c
 80004a4:	0800056c 	.word	0x0800056c
 80004a8:	0800056c 	.word	0x0800056c
 80004ac:	08000570 	.word	0x08000570

080004b0 <memset>:
 80004b0:	4603      	mov	r3, r0
 80004b2:	4402      	add	r2, r0
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d100      	bne.n	80004ba <memset+0xa>
 80004b8:	4770      	bx	lr
 80004ba:	f803 1b01 	strb.w	r1, [r3], #1
 80004be:	e7f9      	b.n	80004b4 <memset+0x4>

080004c0 <strcpy>:
 80004c0:	4603      	mov	r3, r0
 80004c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004c6:	f803 2b01 	strb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1f9      	bne.n	80004c2 <strcpy+0x2>
 80004ce:	4770      	bx	lr

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
=======
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <__errno>:
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <__errno+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000006c 	.word	0x2000006c

08000aa4 <__libc_init_array>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	4e0c      	ldr	r6, [pc, #48]	; (8000adc <__libc_init_array+0x38>)
 8000aaa:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <__libc_init_array+0x3c>)
 8000aac:	1ba4      	subs	r4, r4, r6
 8000aae:	10a4      	asrs	r4, r4, #2
 8000ab0:	42a5      	cmp	r5, r4
 8000ab2:	d109      	bne.n	8000ac8 <__libc_init_array+0x24>
 8000ab4:	f000 fc56 	bl	8001364 <_init>
 8000ab8:	2500      	movs	r5, #0
 8000aba:	4e0a      	ldr	r6, [pc, #40]	; (8000ae4 <__libc_init_array+0x40>)
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <__libc_init_array+0x44>)
 8000abe:	1ba4      	subs	r4, r4, r6
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	d105      	bne.n	8000ad2 <__libc_init_array+0x2e>
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000acc:	4798      	blx	r3
 8000ace:	3501      	adds	r5, #1
 8000ad0:	e7ee      	b.n	8000ab0 <__libc_init_array+0xc>
 8000ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ad6:	4798      	blx	r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e7f2      	b.n	8000ac2 <__libc_init_array+0x1e>
 8000adc:	080016dc 	.word	0x080016dc
 8000ae0:	080016dc 	.word	0x080016dc
 8000ae4:	080016dc 	.word	0x080016dc
 8000ae8:	080016e0 	.word	0x080016e0

08000aec <memset>:
 8000aec:	4603      	mov	r3, r0
 8000aee:	4402      	add	r2, r0
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d100      	bne.n	8000af6 <memset+0xa>
 8000af4:	4770      	bx	lr
 8000af6:	f803 1b01 	strb.w	r1, [r3], #1
 8000afa:	e7f9      	b.n	8000af0 <memset+0x4>

08000afc <siprintf>:
 8000afc:	b40e      	push	{r1, r2, r3}
 8000afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b02:	b500      	push	{lr}
 8000b04:	b09c      	sub	sp, #112	; 0x70
 8000b06:	ab1d      	add	r3, sp, #116	; 0x74
 8000b08:	9002      	str	r0, [sp, #8]
 8000b0a:	9006      	str	r0, [sp, #24]
 8000b0c:	9107      	str	r1, [sp, #28]
 8000b0e:	9104      	str	r1, [sp, #16]
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <siprintf+0x38>)
 8000b12:	4909      	ldr	r1, [pc, #36]	; (8000b38 <siprintf+0x3c>)
 8000b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b18:	9105      	str	r1, [sp, #20]
 8000b1a:	6800      	ldr	r0, [r0, #0]
 8000b1c:	a902      	add	r1, sp, #8
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f000 f888 	bl	8000c34 <_svfiprintf_r>
 8000b24:	2200      	movs	r2, #0
 8000b26:	9b02      	ldr	r3, [sp, #8]
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	b01c      	add	sp, #112	; 0x70
 8000b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b30:	b003      	add	sp, #12
 8000b32:	4770      	bx	lr
 8000b34:	2000006c 	.word	0x2000006c
 8000b38:	ffff0208 	.word	0xffff0208

08000b3c <strcpy>:
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000b42:	f803 2b01 	strb.w	r2, [r3], #1
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d1f9      	bne.n	8000b3e <strcpy+0x2>
 8000b4a:	4770      	bx	lr

08000b4c <strstr>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	7803      	ldrb	r3, [r0, #0]
 8000b50:	b17b      	cbz	r3, 8000b72 <strstr+0x26>
 8000b52:	4604      	mov	r4, r0
 8000b54:	7823      	ldrb	r3, [r4, #0]
 8000b56:	4620      	mov	r0, r4
 8000b58:	1c66      	adds	r6, r4, #1
 8000b5a:	b17b      	cbz	r3, 8000b7c <strstr+0x30>
 8000b5c:	1e4a      	subs	r2, r1, #1
 8000b5e:	1e63      	subs	r3, r4, #1
 8000b60:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8000b64:	b14d      	cbz	r5, 8000b7a <strstr+0x2e>
 8000b66:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8000b6a:	4634      	mov	r4, r6
 8000b6c:	42af      	cmp	r7, r5
 8000b6e:	d0f7      	beq.n	8000b60 <strstr+0x14>
 8000b70:	e7f0      	b.n	8000b54 <strstr+0x8>
 8000b72:	780b      	ldrb	r3, [r1, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf18      	it	ne
 8000b78:	2000      	movne	r0, #0
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	e7fc      	b.n	8000b7a <strstr+0x2e>

08000b80 <__ssputs_r>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	688e      	ldr	r6, [r1, #8]
 8000b86:	4682      	mov	sl, r0
 8000b88:	429e      	cmp	r6, r3
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	4690      	mov	r8, r2
 8000b8e:	4699      	mov	r9, r3
 8000b90:	d837      	bhi.n	8000c02 <__ssputs_r+0x82>
 8000b92:	898a      	ldrh	r2, [r1, #12]
 8000b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b98:	d031      	beq.n	8000bfe <__ssputs_r+0x7e>
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	6825      	ldr	r5, [r4, #0]
 8000b9e:	6909      	ldr	r1, [r1, #16]
 8000ba0:	1a6f      	subs	r7, r5, r1
 8000ba2:	6965      	ldr	r5, [r4, #20]
 8000ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ba8:	fb95 f5f3 	sdiv	r5, r5, r3
 8000bac:	f109 0301 	add.w	r3, r9, #1
 8000bb0:	443b      	add	r3, r7
 8000bb2:	429d      	cmp	r5, r3
 8000bb4:	bf38      	it	cc
 8000bb6:	461d      	movcc	r5, r3
 8000bb8:	0553      	lsls	r3, r2, #21
 8000bba:	d530      	bpl.n	8000c1e <__ssputs_r+0x9e>
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	f000 fb37 	bl	8001230 <_malloc_r>
 8000bc2:	4606      	mov	r6, r0
 8000bc4:	b950      	cbnz	r0, 8000bdc <__ssputs_r+0x5c>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f8ca 3000 	str.w	r3, [sl]
 8000bd0:	89a3      	ldrh	r3, [r4, #12]
 8000bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd6:	81a3      	strh	r3, [r4, #12]
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	463a      	mov	r2, r7
 8000bde:	6921      	ldr	r1, [r4, #16]
 8000be0:	f000 fab6 	bl	8001150 <memcpy>
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	6126      	str	r6, [r4, #16]
 8000bf2:	443e      	add	r6, r7
 8000bf4:	6026      	str	r6, [r4, #0]
 8000bf6:	464e      	mov	r6, r9
 8000bf8:	6165      	str	r5, [r4, #20]
 8000bfa:	1bed      	subs	r5, r5, r7
 8000bfc:	60a5      	str	r5, [r4, #8]
 8000bfe:	454e      	cmp	r6, r9
 8000c00:	d900      	bls.n	8000c04 <__ssputs_r+0x84>
 8000c02:	464e      	mov	r6, r9
 8000c04:	4632      	mov	r2, r6
 8000c06:	4641      	mov	r1, r8
 8000c08:	6820      	ldr	r0, [r4, #0]
 8000c0a:	f000 faac 	bl	8001166 <memmove>
 8000c0e:	68a3      	ldr	r3, [r4, #8]
 8000c10:	2000      	movs	r0, #0
 8000c12:	1b9b      	subs	r3, r3, r6
 8000c14:	60a3      	str	r3, [r4, #8]
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	441e      	add	r6, r3
 8000c1a:	6026      	str	r6, [r4, #0]
 8000c1c:	e7dc      	b.n	8000bd8 <__ssputs_r+0x58>
 8000c1e:	462a      	mov	r2, r5
 8000c20:	f000 fb60 	bl	80012e4 <_realloc_r>
 8000c24:	4606      	mov	r6, r0
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d1e2      	bne.n	8000bf0 <__ssputs_r+0x70>
 8000c2a:	6921      	ldr	r1, [r4, #16]
 8000c2c:	4650      	mov	r0, sl
 8000c2e:	f000 fab3 	bl	8001198 <_free_r>
 8000c32:	e7c8      	b.n	8000bc6 <__ssputs_r+0x46>

08000c34 <_svfiprintf_r>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	461d      	mov	r5, r3
 8000c3a:	898b      	ldrh	r3, [r1, #12]
 8000c3c:	b09d      	sub	sp, #116	; 0x74
 8000c3e:	061f      	lsls	r7, r3, #24
 8000c40:	4680      	mov	r8, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4616      	mov	r6, r2
 8000c46:	d50f      	bpl.n	8000c68 <_svfiprintf_r+0x34>
 8000c48:	690b      	ldr	r3, [r1, #16]
 8000c4a:	b96b      	cbnz	r3, 8000c68 <_svfiprintf_r+0x34>
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	f000 faef 	bl	8001230 <_malloc_r>
 8000c52:	6020      	str	r0, [r4, #0]
 8000c54:	6120      	str	r0, [r4, #16]
 8000c56:	b928      	cbnz	r0, 8000c64 <_svfiprintf_r+0x30>
 8000c58:	230c      	movs	r3, #12
 8000c5a:	f8c8 3000 	str.w	r3, [r8]
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	e0c8      	b.n	8000df6 <_svfiprintf_r+0x1c2>
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	6163      	str	r3, [r4, #20]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c72:	2330      	movs	r3, #48	; 0x30
 8000c74:	f04f 0b01 	mov.w	fp, #1
 8000c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c7c:	9503      	str	r5, [sp, #12]
 8000c7e:	4637      	mov	r7, r6
 8000c80:	463d      	mov	r5, r7
 8000c82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000c86:	b10b      	cbz	r3, 8000c8c <_svfiprintf_r+0x58>
 8000c88:	2b25      	cmp	r3, #37	; 0x25
 8000c8a:	d13e      	bne.n	8000d0a <_svfiprintf_r+0xd6>
 8000c8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8000c90:	d00b      	beq.n	8000caa <_svfiprintf_r+0x76>
 8000c92:	4653      	mov	r3, sl
 8000c94:	4632      	mov	r2, r6
 8000c96:	4621      	mov	r1, r4
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f7ff ff71 	bl	8000b80 <__ssputs_r>
 8000c9e:	3001      	adds	r0, #1
 8000ca0:	f000 80a4 	beq.w	8000dec <_svfiprintf_r+0x1b8>
 8000ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ca6:	4453      	add	r3, sl
 8000ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8000caa:	783b      	ldrb	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 809d 	beq.w	8000dec <_svfiprintf_r+0x1b8>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cbc:	9304      	str	r3, [sp, #16]
 8000cbe:	9307      	str	r3, [sp, #28]
 8000cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8000cc6:	462f      	mov	r7, r5
 8000cc8:	2205      	movs	r2, #5
 8000cca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000cce:	4850      	ldr	r0, [pc, #320]	; (8000e10 <_svfiprintf_r+0x1dc>)
 8000cd0:	f000 fa30 	bl	8001134 <memchr>
 8000cd4:	9b04      	ldr	r3, [sp, #16]
 8000cd6:	b9d0      	cbnz	r0, 8000d0e <_svfiprintf_r+0xda>
 8000cd8:	06d9      	lsls	r1, r3, #27
 8000cda:	bf44      	itt	mi
 8000cdc:	2220      	movmi	r2, #32
 8000cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000ce2:	071a      	lsls	r2, r3, #28
 8000ce4:	bf44      	itt	mi
 8000ce6:	222b      	movmi	r2, #43	; 0x2b
 8000ce8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000cec:	782a      	ldrb	r2, [r5, #0]
 8000cee:	2a2a      	cmp	r2, #42	; 0x2a
 8000cf0:	d015      	beq.n	8000d1e <_svfiprintf_r+0xea>
 8000cf2:	462f      	mov	r7, r5
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	250a      	movs	r5, #10
 8000cf8:	9a07      	ldr	r2, [sp, #28]
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d00:	3b30      	subs	r3, #48	; 0x30
 8000d02:	2b09      	cmp	r3, #9
 8000d04:	d94d      	bls.n	8000da2 <_svfiprintf_r+0x16e>
 8000d06:	b1b8      	cbz	r0, 8000d38 <_svfiprintf_r+0x104>
 8000d08:	e00f      	b.n	8000d2a <_svfiprintf_r+0xf6>
 8000d0a:	462f      	mov	r7, r5
 8000d0c:	e7b8      	b.n	8000c80 <_svfiprintf_r+0x4c>
 8000d0e:	4a40      	ldr	r2, [pc, #256]	; (8000e10 <_svfiprintf_r+0x1dc>)
 8000d10:	463d      	mov	r5, r7
 8000d12:	1a80      	subs	r0, r0, r2
 8000d14:	fa0b f000 	lsl.w	r0, fp, r0
 8000d18:	4318      	orrs	r0, r3
 8000d1a:	9004      	str	r0, [sp, #16]
 8000d1c:	e7d3      	b.n	8000cc6 <_svfiprintf_r+0x92>
 8000d1e:	9a03      	ldr	r2, [sp, #12]
 8000d20:	1d11      	adds	r1, r2, #4
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	9103      	str	r1, [sp, #12]
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	db01      	blt.n	8000d2e <_svfiprintf_r+0xfa>
 8000d2a:	9207      	str	r2, [sp, #28]
 8000d2c:	e004      	b.n	8000d38 <_svfiprintf_r+0x104>
 8000d2e:	4252      	negs	r2, r2
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	9207      	str	r2, [sp, #28]
 8000d36:	9304      	str	r3, [sp, #16]
 8000d38:	783b      	ldrb	r3, [r7, #0]
 8000d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8000d3c:	d10c      	bne.n	8000d58 <_svfiprintf_r+0x124>
 8000d3e:	787b      	ldrb	r3, [r7, #1]
 8000d40:	2b2a      	cmp	r3, #42	; 0x2a
 8000d42:	d133      	bne.n	8000dac <_svfiprintf_r+0x178>
 8000d44:	9b03      	ldr	r3, [sp, #12]
 8000d46:	3702      	adds	r7, #2
 8000d48:	1d1a      	adds	r2, r3, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	9203      	str	r2, [sp, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bfb8      	it	lt
 8000d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	4d2e      	ldr	r5, [pc, #184]	; (8000e14 <_svfiprintf_r+0x1e0>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	7839      	ldrb	r1, [r7, #0]
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f000 f9e8 	bl	8001134 <memchr>
 8000d64:	b138      	cbz	r0, 8000d76 <_svfiprintf_r+0x142>
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	1b40      	subs	r0, r0, r5
 8000d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8000d6e:	9b04      	ldr	r3, [sp, #16]
 8000d70:	3701      	adds	r7, #1
 8000d72:	4303      	orrs	r3, r0
 8000d74:	9304      	str	r3, [sp, #16]
 8000d76:	7839      	ldrb	r1, [r7, #0]
 8000d78:	2206      	movs	r2, #6
 8000d7a:	4827      	ldr	r0, [pc, #156]	; (8000e18 <_svfiprintf_r+0x1e4>)
 8000d7c:	1c7e      	adds	r6, r7, #1
 8000d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d82:	f000 f9d7 	bl	8001134 <memchr>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d038      	beq.n	8000dfc <_svfiprintf_r+0x1c8>
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <_svfiprintf_r+0x1e8>)
 8000d8c:	bb13      	cbnz	r3, 8000dd4 <_svfiprintf_r+0x1a0>
 8000d8e:	9b03      	ldr	r3, [sp, #12]
 8000d90:	3307      	adds	r3, #7
 8000d92:	f023 0307 	bic.w	r3, r3, #7
 8000d96:	3308      	adds	r3, #8
 8000d98:	9303      	str	r3, [sp, #12]
 8000d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d9c:	444b      	add	r3, r9
 8000d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000da0:	e76d      	b.n	8000c7e <_svfiprintf_r+0x4a>
 8000da2:	fb05 3202 	mla	r2, r5, r2, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	460f      	mov	r7, r1
 8000daa:	e7a6      	b.n	8000cfa <_svfiprintf_r+0xc6>
 8000dac:	2300      	movs	r3, #0
 8000dae:	250a      	movs	r5, #10
 8000db0:	4619      	mov	r1, r3
 8000db2:	3701      	adds	r7, #1
 8000db4:	9305      	str	r3, [sp, #20]
 8000db6:	4638      	mov	r0, r7
 8000db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dbc:	3a30      	subs	r2, #48	; 0x30
 8000dbe:	2a09      	cmp	r2, #9
 8000dc0:	d903      	bls.n	8000dca <_svfiprintf_r+0x196>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0c8      	beq.n	8000d58 <_svfiprintf_r+0x124>
 8000dc6:	9105      	str	r1, [sp, #20]
 8000dc8:	e7c6      	b.n	8000d58 <_svfiprintf_r+0x124>
 8000dca:	fb05 2101 	mla	r1, r5, r1, r2
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e7f0      	b.n	8000db6 <_svfiprintf_r+0x182>
 8000dd4:	ab03      	add	r3, sp, #12
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4622      	mov	r2, r4
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_svfiprintf_r+0x1ec>)
 8000ddc:	a904      	add	r1, sp, #16
 8000dde:	4640      	mov	r0, r8
 8000de0:	f3af 8000 	nop.w
 8000de4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000de8:	4681      	mov	r9, r0
 8000dea:	d1d6      	bne.n	8000d9a <_svfiprintf_r+0x166>
 8000dec:	89a3      	ldrh	r3, [r4, #12]
 8000dee:	065b      	lsls	r3, r3, #25
 8000df0:	f53f af35 	bmi.w	8000c5e <_svfiprintf_r+0x2a>
 8000df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000df6:	b01d      	add	sp, #116	; 0x74
 8000df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dfc:	ab03      	add	r3, sp, #12
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4622      	mov	r2, r4
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_svfiprintf_r+0x1ec>)
 8000e04:	a904      	add	r1, sp, #16
 8000e06:	4640      	mov	r0, r8
 8000e08:	f000 f882 	bl	8000f10 <_printf_i>
 8000e0c:	e7ea      	b.n	8000de4 <_svfiprintf_r+0x1b0>
 8000e0e:	bf00      	nop
 8000e10:	080016a8 	.word	0x080016a8
 8000e14:	080016ae 	.word	0x080016ae
 8000e18:	080016b2 	.word	0x080016b2
 8000e1c:	00000000 	.word	0x00000000
 8000e20:	08000b81 	.word	0x08000b81

08000e24 <_printf_common>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	4691      	mov	r9, r2
 8000e2a:	461f      	mov	r7, r3
 8000e2c:	688a      	ldr	r2, [r1, #8]
 8000e2e:	690b      	ldr	r3, [r1, #16]
 8000e30:	4606      	mov	r6, r0
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bfb8      	it	lt
 8000e36:	4613      	movlt	r3, r2
 8000e38:	f8c9 3000 	str.w	r3, [r9]
 8000e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e40:	460c      	mov	r4, r1
 8000e42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e46:	b112      	cbz	r2, 8000e4e <_printf_common+0x2a>
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f8c9 3000 	str.w	r3, [r9]
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	0699      	lsls	r1, r3, #26
 8000e52:	bf42      	ittt	mi
 8000e54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000e58:	3302      	addmi	r3, #2
 8000e5a:	f8c9 3000 	strmi.w	r3, [r9]
 8000e5e:	6825      	ldr	r5, [r4, #0]
 8000e60:	f015 0506 	ands.w	r5, r5, #6
 8000e64:	d107      	bne.n	8000e76 <_printf_common+0x52>
 8000e66:	f104 0a19 	add.w	sl, r4, #25
 8000e6a:	68e3      	ldr	r3, [r4, #12]
 8000e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	dc29      	bgt.n	8000eca <_printf_common+0xa6>
 8000e76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000e7a:	6822      	ldr	r2, [r4, #0]
 8000e7c:	3300      	adds	r3, #0
 8000e7e:	bf18      	it	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	0692      	lsls	r2, r2, #26
 8000e84:	d42e      	bmi.n	8000ee4 <_printf_common+0xc0>
 8000e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e8a:	4639      	mov	r1, r7
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	47c0      	blx	r8
 8000e90:	3001      	adds	r0, #1
 8000e92:	d021      	beq.n	8000ed8 <_printf_common+0xb4>
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	68e5      	ldr	r5, [r4, #12]
 8000e98:	f003 0306 	and.w	r3, r3, #6
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	bf18      	it	ne
 8000ea0:	2500      	movne	r5, #0
 8000ea2:	f8d9 2000 	ldr.w	r2, [r9]
 8000ea6:	f04f 0900 	mov.w	r9, #0
 8000eaa:	bf08      	it	eq
 8000eac:	1aad      	subeq	r5, r5, r2
 8000eae:	68a3      	ldr	r3, [r4, #8]
 8000eb0:	6922      	ldr	r2, [r4, #16]
 8000eb2:	bf08      	it	eq
 8000eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	bfc4      	itt	gt
 8000ebc:	1a9b      	subgt	r3, r3, r2
 8000ebe:	18ed      	addgt	r5, r5, r3
 8000ec0:	341a      	adds	r4, #26
 8000ec2:	454d      	cmp	r5, r9
 8000ec4:	d11a      	bne.n	8000efc <_printf_common+0xd8>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e008      	b.n	8000edc <_printf_common+0xb8>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4652      	mov	r2, sl
 8000ece:	4639      	mov	r1, r7
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	47c0      	blx	r8
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	d103      	bne.n	8000ee0 <_printf_common+0xbc>
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	3501      	adds	r5, #1
 8000ee2:	e7c2      	b.n	8000e6a <_printf_common+0x46>
 8000ee4:	2030      	movs	r0, #48	; 0x30
 8000ee6:	18e1      	adds	r1, r4, r3
 8000ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ef2:	4422      	add	r2, r4
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000efa:	e7c4      	b.n	8000e86 <_printf_common+0x62>
 8000efc:	2301      	movs	r3, #1
 8000efe:	4622      	mov	r2, r4
 8000f00:	4639      	mov	r1, r7
 8000f02:	4630      	mov	r0, r6
 8000f04:	47c0      	blx	r8
 8000f06:	3001      	adds	r0, #1
 8000f08:	d0e6      	beq.n	8000ed8 <_printf_common+0xb4>
 8000f0a:	f109 0901 	add.w	r9, r9, #1
 8000f0e:	e7d8      	b.n	8000ec2 <_printf_common+0x9e>

08000f10 <_printf_i>:
 8000f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000f18:	460c      	mov	r4, r1
 8000f1a:	7e09      	ldrb	r1, [r1, #24]
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	296e      	cmp	r1, #110	; 0x6e
 8000f20:	4617      	mov	r7, r2
 8000f22:	4606      	mov	r6, r0
 8000f24:	4698      	mov	r8, r3
 8000f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000f28:	f000 80b3 	beq.w	8001092 <_printf_i+0x182>
 8000f2c:	d822      	bhi.n	8000f74 <_printf_i+0x64>
 8000f2e:	2963      	cmp	r1, #99	; 0x63
 8000f30:	d036      	beq.n	8000fa0 <_printf_i+0x90>
 8000f32:	d80a      	bhi.n	8000f4a <_printf_i+0x3a>
 8000f34:	2900      	cmp	r1, #0
 8000f36:	f000 80b9 	beq.w	80010ac <_printf_i+0x19c>
 8000f3a:	2958      	cmp	r1, #88	; 0x58
 8000f3c:	f000 8083 	beq.w	8001046 <_printf_i+0x136>
 8000f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000f48:	e032      	b.n	8000fb0 <_printf_i+0xa0>
 8000f4a:	2964      	cmp	r1, #100	; 0x64
 8000f4c:	d001      	beq.n	8000f52 <_printf_i+0x42>
 8000f4e:	2969      	cmp	r1, #105	; 0x69
 8000f50:	d1f6      	bne.n	8000f40 <_printf_i+0x30>
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	6813      	ldr	r3, [r2, #0]
 8000f56:	0605      	lsls	r5, r0, #24
 8000f58:	f103 0104 	add.w	r1, r3, #4
 8000f5c:	d52a      	bpl.n	8000fb4 <_printf_i+0xa4>
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6011      	str	r1, [r2, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da03      	bge.n	8000f6e <_printf_i+0x5e>
 8000f66:	222d      	movs	r2, #45	; 0x2d
 8000f68:	425b      	negs	r3, r3
 8000f6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8000f6e:	486f      	ldr	r0, [pc, #444]	; (800112c <_printf_i+0x21c>)
 8000f70:	220a      	movs	r2, #10
 8000f72:	e039      	b.n	8000fe8 <_printf_i+0xd8>
 8000f74:	2973      	cmp	r1, #115	; 0x73
 8000f76:	f000 809d 	beq.w	80010b4 <_printf_i+0x1a4>
 8000f7a:	d808      	bhi.n	8000f8e <_printf_i+0x7e>
 8000f7c:	296f      	cmp	r1, #111	; 0x6f
 8000f7e:	d020      	beq.n	8000fc2 <_printf_i+0xb2>
 8000f80:	2970      	cmp	r1, #112	; 0x70
 8000f82:	d1dd      	bne.n	8000f40 <_printf_i+0x30>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	e003      	b.n	8000f96 <_printf_i+0x86>
 8000f8e:	2975      	cmp	r1, #117	; 0x75
 8000f90:	d017      	beq.n	8000fc2 <_printf_i+0xb2>
 8000f92:	2978      	cmp	r1, #120	; 0x78
 8000f94:	d1d4      	bne.n	8000f40 <_printf_i+0x30>
 8000f96:	2378      	movs	r3, #120	; 0x78
 8000f98:	4865      	ldr	r0, [pc, #404]	; (8001130 <_printf_i+0x220>)
 8000f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f9e:	e055      	b.n	800104c <_printf_i+0x13c>
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fa6:	1d19      	adds	r1, r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6011      	str	r1, [r2, #0]
 8000fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e08c      	b.n	80010ce <_printf_i+0x1be>
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000fba:	6011      	str	r1, [r2, #0]
 8000fbc:	bf18      	it	ne
 8000fbe:	b21b      	sxthne	r3, r3
 8000fc0:	e7cf      	b.n	8000f62 <_printf_i+0x52>
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	6825      	ldr	r5, [r4, #0]
 8000fc6:	1d18      	adds	r0, r3, #4
 8000fc8:	6010      	str	r0, [r2, #0]
 8000fca:	0628      	lsls	r0, r5, #24
 8000fcc:	d501      	bpl.n	8000fd2 <_printf_i+0xc2>
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	e002      	b.n	8000fd8 <_printf_i+0xc8>
 8000fd2:	0668      	lsls	r0, r5, #25
 8000fd4:	d5fb      	bpl.n	8000fce <_printf_i+0xbe>
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	296f      	cmp	r1, #111	; 0x6f
 8000fda:	bf14      	ite	ne
 8000fdc:	220a      	movne	r2, #10
 8000fde:	2208      	moveq	r2, #8
 8000fe0:	4852      	ldr	r0, [pc, #328]	; (800112c <_printf_i+0x21c>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fe8:	6865      	ldr	r5, [r4, #4]
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	60a5      	str	r5, [r4, #8]
 8000fee:	f2c0 8095 	blt.w	800111c <_printf_i+0x20c>
 8000ff2:	6821      	ldr	r1, [r4, #0]
 8000ff4:	f021 0104 	bic.w	r1, r1, #4
 8000ff8:	6021      	str	r1, [r4, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d13d      	bne.n	800107a <_printf_i+0x16a>
 8000ffe:	2d00      	cmp	r5, #0
 8001000:	f040 808e 	bne.w	8001120 <_printf_i+0x210>
 8001004:	4665      	mov	r5, ip
 8001006:	2a08      	cmp	r2, #8
 8001008:	d10b      	bne.n	8001022 <_printf_i+0x112>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	07db      	lsls	r3, r3, #31
 800100e:	d508      	bpl.n	8001022 <_printf_i+0x112>
 8001010:	6923      	ldr	r3, [r4, #16]
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	bfde      	ittt	le
 8001018:	2330      	movle	r3, #48	; 0x30
 800101a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800101e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001022:	ebac 0305 	sub.w	r3, ip, r5
 8001026:	6123      	str	r3, [r4, #16]
 8001028:	f8cd 8000 	str.w	r8, [sp]
 800102c:	463b      	mov	r3, r7
 800102e:	aa03      	add	r2, sp, #12
 8001030:	4621      	mov	r1, r4
 8001032:	4630      	mov	r0, r6
 8001034:	f7ff fef6 	bl	8000e24 <_printf_common>
 8001038:	3001      	adds	r0, #1
 800103a:	d14d      	bne.n	80010d8 <_printf_i+0x1c8>
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	b005      	add	sp, #20
 8001042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001046:	4839      	ldr	r0, [pc, #228]	; (800112c <_printf_i+0x21c>)
 8001048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	6821      	ldr	r1, [r4, #0]
 8001050:	1d1d      	adds	r5, r3, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6015      	str	r5, [r2, #0]
 8001056:	060a      	lsls	r2, r1, #24
 8001058:	d50b      	bpl.n	8001072 <_printf_i+0x162>
 800105a:	07ca      	lsls	r2, r1, #31
 800105c:	bf44      	itt	mi
 800105e:	f041 0120 	orrmi.w	r1, r1, #32
 8001062:	6021      	strmi	r1, [r4, #0]
 8001064:	b91b      	cbnz	r3, 800106e <_printf_i+0x15e>
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	f022 0220 	bic.w	r2, r2, #32
 800106c:	6022      	str	r2, [r4, #0]
 800106e:	2210      	movs	r2, #16
 8001070:	e7b7      	b.n	8000fe2 <_printf_i+0xd2>
 8001072:	064d      	lsls	r5, r1, #25
 8001074:	bf48      	it	mi
 8001076:	b29b      	uxthmi	r3, r3
 8001078:	e7ef      	b.n	800105a <_printf_i+0x14a>
 800107a:	4665      	mov	r5, ip
 800107c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001080:	fb02 3311 	mls	r3, r2, r1, r3
 8001084:	5cc3      	ldrb	r3, [r0, r3]
 8001086:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800108a:	460b      	mov	r3, r1
 800108c:	2900      	cmp	r1, #0
 800108e:	d1f5      	bne.n	800107c <_printf_i+0x16c>
 8001090:	e7b9      	b.n	8001006 <_printf_i+0xf6>
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	6825      	ldr	r5, [r4, #0]
 8001096:	1d18      	adds	r0, r3, #4
 8001098:	6961      	ldr	r1, [r4, #20]
 800109a:	6010      	str	r0, [r2, #0]
 800109c:	0628      	lsls	r0, r5, #24
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	d501      	bpl.n	80010a6 <_printf_i+0x196>
 80010a2:	6019      	str	r1, [r3, #0]
 80010a4:	e002      	b.n	80010ac <_printf_i+0x19c>
 80010a6:	066a      	lsls	r2, r5, #25
 80010a8:	d5fb      	bpl.n	80010a2 <_printf_i+0x192>
 80010aa:	8019      	strh	r1, [r3, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	4665      	mov	r5, ip
 80010b0:	6123      	str	r3, [r4, #16]
 80010b2:	e7b9      	b.n	8001028 <_printf_i+0x118>
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	1d19      	adds	r1, r3, #4
 80010b8:	6011      	str	r1, [r2, #0]
 80010ba:	681d      	ldr	r5, [r3, #0]
 80010bc:	6862      	ldr	r2, [r4, #4]
 80010be:	2100      	movs	r1, #0
 80010c0:	4628      	mov	r0, r5
 80010c2:	f000 f837 	bl	8001134 <memchr>
 80010c6:	b108      	cbz	r0, 80010cc <_printf_i+0x1bc>
 80010c8:	1b40      	subs	r0, r0, r5
 80010ca:	6060      	str	r0, [r4, #4]
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	6123      	str	r3, [r4, #16]
 80010d0:	2300      	movs	r3, #0
 80010d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010d6:	e7a7      	b.n	8001028 <_printf_i+0x118>
 80010d8:	6923      	ldr	r3, [r4, #16]
 80010da:	462a      	mov	r2, r5
 80010dc:	4639      	mov	r1, r7
 80010de:	4630      	mov	r0, r6
 80010e0:	47c0      	blx	r8
 80010e2:	3001      	adds	r0, #1
 80010e4:	d0aa      	beq.n	800103c <_printf_i+0x12c>
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	079b      	lsls	r3, r3, #30
 80010ea:	d413      	bmi.n	8001114 <_printf_i+0x204>
 80010ec:	68e0      	ldr	r0, [r4, #12]
 80010ee:	9b03      	ldr	r3, [sp, #12]
 80010f0:	4298      	cmp	r0, r3
 80010f2:	bfb8      	it	lt
 80010f4:	4618      	movlt	r0, r3
 80010f6:	e7a3      	b.n	8001040 <_printf_i+0x130>
 80010f8:	2301      	movs	r3, #1
 80010fa:	464a      	mov	r2, r9
 80010fc:	4639      	mov	r1, r7
 80010fe:	4630      	mov	r0, r6
 8001100:	47c0      	blx	r8
 8001102:	3001      	adds	r0, #1
 8001104:	d09a      	beq.n	800103c <_printf_i+0x12c>
 8001106:	3501      	adds	r5, #1
 8001108:	68e3      	ldr	r3, [r4, #12]
 800110a:	9a03      	ldr	r2, [sp, #12]
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	42ab      	cmp	r3, r5
 8001110:	dcf2      	bgt.n	80010f8 <_printf_i+0x1e8>
 8001112:	e7eb      	b.n	80010ec <_printf_i+0x1dc>
 8001114:	2500      	movs	r5, #0
 8001116:	f104 0919 	add.w	r9, r4, #25
 800111a:	e7f5      	b.n	8001108 <_printf_i+0x1f8>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ac      	bne.n	800107a <_printf_i+0x16a>
 8001120:	7803      	ldrb	r3, [r0, #0]
 8001122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800112a:	e76c      	b.n	8001006 <_printf_i+0xf6>
 800112c:	080016b9 	.word	0x080016b9
 8001130:	080016ca 	.word	0x080016ca

08001134 <memchr>:
 8001134:	b510      	push	{r4, lr}
 8001136:	b2c9      	uxtb	r1, r1
 8001138:	4402      	add	r2, r0
 800113a:	4290      	cmp	r0, r2
 800113c:	4603      	mov	r3, r0
 800113e:	d101      	bne.n	8001144 <memchr+0x10>
 8001140:	2300      	movs	r3, #0
 8001142:	e003      	b.n	800114c <memchr+0x18>
 8001144:	781c      	ldrb	r4, [r3, #0]
 8001146:	3001      	adds	r0, #1
 8001148:	428c      	cmp	r4, r1
 800114a:	d1f6      	bne.n	800113a <memchr+0x6>
 800114c:	4618      	mov	r0, r3
 800114e:	bd10      	pop	{r4, pc}

08001150 <memcpy>:
 8001150:	b510      	push	{r4, lr}
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	440a      	add	r2, r1
 8001156:	4291      	cmp	r1, r2
 8001158:	d100      	bne.n	800115c <memcpy+0xc>
 800115a:	bd10      	pop	{r4, pc}
 800115c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001164:	e7f7      	b.n	8001156 <memcpy+0x6>

08001166 <memmove>:
 8001166:	4288      	cmp	r0, r1
 8001168:	b510      	push	{r4, lr}
 800116a:	eb01 0302 	add.w	r3, r1, r2
 800116e:	d807      	bhi.n	8001180 <memmove+0x1a>
 8001170:	1e42      	subs	r2, r0, #1
 8001172:	4299      	cmp	r1, r3
 8001174:	d00a      	beq.n	800118c <memmove+0x26>
 8001176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800117a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800117e:	e7f8      	b.n	8001172 <memmove+0xc>
 8001180:	4283      	cmp	r3, r0
 8001182:	d9f5      	bls.n	8001170 <memmove+0xa>
 8001184:	1881      	adds	r1, r0, r2
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	42d3      	cmn	r3, r2
 800118a:	d100      	bne.n	800118e <memmove+0x28>
 800118c:	bd10      	pop	{r4, pc}
 800118e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001192:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001196:	e7f7      	b.n	8001188 <memmove+0x22>

08001198 <_free_r>:
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4605      	mov	r5, r0
 800119c:	2900      	cmp	r1, #0
 800119e:	d043      	beq.n	8001228 <_free_r+0x90>
 80011a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011a4:	1f0c      	subs	r4, r1, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bfb8      	it	lt
 80011aa:	18e4      	addlt	r4, r4, r3
 80011ac:	f000 f8d0 	bl	8001350 <__malloc_lock>
 80011b0:	4a1e      	ldr	r2, [pc, #120]	; (800122c <_free_r+0x94>)
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	4610      	mov	r0, r2
 80011b6:	b933      	cbnz	r3, 80011c6 <_free_r+0x2e>
 80011b8:	6063      	str	r3, [r4, #4]
 80011ba:	6014      	str	r4, [r2, #0]
 80011bc:	4628      	mov	r0, r5
 80011be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011c2:	f000 b8c6 	b.w	8001352 <__malloc_unlock>
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	d90b      	bls.n	80011e2 <_free_r+0x4a>
 80011ca:	6821      	ldr	r1, [r4, #0]
 80011cc:	1862      	adds	r2, r4, r1
 80011ce:	4293      	cmp	r3, r2
 80011d0:	bf01      	itttt	eq
 80011d2:	681a      	ldreq	r2, [r3, #0]
 80011d4:	685b      	ldreq	r3, [r3, #4]
 80011d6:	1852      	addeq	r2, r2, r1
 80011d8:	6022      	streq	r2, [r4, #0]
 80011da:	6063      	str	r3, [r4, #4]
 80011dc:	6004      	str	r4, [r0, #0]
 80011de:	e7ed      	b.n	80011bc <_free_r+0x24>
 80011e0:	4613      	mov	r3, r2
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	b10a      	cbz	r2, 80011ea <_free_r+0x52>
 80011e6:	42a2      	cmp	r2, r4
 80011e8:	d9fa      	bls.n	80011e0 <_free_r+0x48>
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	1858      	adds	r0, r3, r1
 80011ee:	42a0      	cmp	r0, r4
 80011f0:	d10b      	bne.n	800120a <_free_r+0x72>
 80011f2:	6820      	ldr	r0, [r4, #0]
 80011f4:	4401      	add	r1, r0
 80011f6:	1858      	adds	r0, r3, r1
 80011f8:	4282      	cmp	r2, r0
 80011fa:	6019      	str	r1, [r3, #0]
 80011fc:	d1de      	bne.n	80011bc <_free_r+0x24>
 80011fe:	6810      	ldr	r0, [r2, #0]
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	4401      	add	r1, r0
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	e7d8      	b.n	80011bc <_free_r+0x24>
 800120a:	d902      	bls.n	8001212 <_free_r+0x7a>
 800120c:	230c      	movs	r3, #12
 800120e:	602b      	str	r3, [r5, #0]
 8001210:	e7d4      	b.n	80011bc <_free_r+0x24>
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	1821      	adds	r1, r4, r0
 8001216:	428a      	cmp	r2, r1
 8001218:	bf01      	itttt	eq
 800121a:	6811      	ldreq	r1, [r2, #0]
 800121c:	6852      	ldreq	r2, [r2, #4]
 800121e:	1809      	addeq	r1, r1, r0
 8001220:	6021      	streq	r1, [r4, #0]
 8001222:	6062      	str	r2, [r4, #4]
 8001224:	605c      	str	r4, [r3, #4]
 8001226:	e7c9      	b.n	80011bc <_free_r+0x24>
 8001228:	bd38      	pop	{r3, r4, r5, pc}
 800122a:	bf00      	nop
 800122c:	20000b18 	.word	0x20000b18

08001230 <_malloc_r>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	1ccd      	adds	r5, r1, #3
 8001234:	f025 0503 	bic.w	r5, r5, #3
 8001238:	3508      	adds	r5, #8
 800123a:	2d0c      	cmp	r5, #12
 800123c:	bf38      	it	cc
 800123e:	250c      	movcc	r5, #12
 8001240:	2d00      	cmp	r5, #0
 8001242:	4606      	mov	r6, r0
 8001244:	db01      	blt.n	800124a <_malloc_r+0x1a>
 8001246:	42a9      	cmp	r1, r5
 8001248:	d903      	bls.n	8001252 <_malloc_r+0x22>
 800124a:	230c      	movs	r3, #12
 800124c:	6033      	str	r3, [r6, #0]
 800124e:	2000      	movs	r0, #0
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	f000 f87d 	bl	8001350 <__malloc_lock>
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <_malloc_r+0xac>)
 8001258:	6814      	ldr	r4, [r2, #0]
 800125a:	4621      	mov	r1, r4
 800125c:	b991      	cbnz	r1, 8001284 <_malloc_r+0x54>
 800125e:	4c20      	ldr	r4, [pc, #128]	; (80012e0 <_malloc_r+0xb0>)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	b91b      	cbnz	r3, 800126c <_malloc_r+0x3c>
 8001264:	4630      	mov	r0, r6
 8001266:	f000 f863 	bl	8001330 <_sbrk_r>
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	4629      	mov	r1, r5
 800126e:	4630      	mov	r0, r6
 8001270:	f000 f85e 	bl	8001330 <_sbrk_r>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d124      	bne.n	80012c2 <_malloc_r+0x92>
 8001278:	230c      	movs	r3, #12
 800127a:	4630      	mov	r0, r6
 800127c:	6033      	str	r3, [r6, #0]
 800127e:	f000 f868 	bl	8001352 <__malloc_unlock>
 8001282:	e7e4      	b.n	800124e <_malloc_r+0x1e>
 8001284:	680b      	ldr	r3, [r1, #0]
 8001286:	1b5b      	subs	r3, r3, r5
 8001288:	d418      	bmi.n	80012bc <_malloc_r+0x8c>
 800128a:	2b0b      	cmp	r3, #11
 800128c:	d90f      	bls.n	80012ae <_malloc_r+0x7e>
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	18cc      	adds	r4, r1, r3
 8001292:	50cd      	str	r5, [r1, r3]
 8001294:	4630      	mov	r0, r6
 8001296:	f000 f85c 	bl	8001352 <__malloc_unlock>
 800129a:	f104 000b 	add.w	r0, r4, #11
 800129e:	1d23      	adds	r3, r4, #4
 80012a0:	f020 0007 	bic.w	r0, r0, #7
 80012a4:	1ac3      	subs	r3, r0, r3
 80012a6:	d0d3      	beq.n	8001250 <_malloc_r+0x20>
 80012a8:	425a      	negs	r2, r3
 80012aa:	50e2      	str	r2, [r4, r3]
 80012ac:	e7d0      	b.n	8001250 <_malloc_r+0x20>
 80012ae:	684b      	ldr	r3, [r1, #4]
 80012b0:	428c      	cmp	r4, r1
 80012b2:	bf16      	itet	ne
 80012b4:	6063      	strne	r3, [r4, #4]
 80012b6:	6013      	streq	r3, [r2, #0]
 80012b8:	460c      	movne	r4, r1
 80012ba:	e7eb      	b.n	8001294 <_malloc_r+0x64>
 80012bc:	460c      	mov	r4, r1
 80012be:	6849      	ldr	r1, [r1, #4]
 80012c0:	e7cc      	b.n	800125c <_malloc_r+0x2c>
 80012c2:	1cc4      	adds	r4, r0, #3
 80012c4:	f024 0403 	bic.w	r4, r4, #3
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	d005      	beq.n	80012d8 <_malloc_r+0xa8>
 80012cc:	1a21      	subs	r1, r4, r0
 80012ce:	4630      	mov	r0, r6
 80012d0:	f000 f82e 	bl	8001330 <_sbrk_r>
 80012d4:	3001      	adds	r0, #1
 80012d6:	d0cf      	beq.n	8001278 <_malloc_r+0x48>
 80012d8:	6025      	str	r5, [r4, #0]
 80012da:	e7db      	b.n	8001294 <_malloc_r+0x64>
 80012dc:	20000b18 	.word	0x20000b18
 80012e0:	20000b1c 	.word	0x20000b1c

080012e4 <_realloc_r>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4607      	mov	r7, r0
 80012e8:	4614      	mov	r4, r2
 80012ea:	460e      	mov	r6, r1
 80012ec:	b921      	cbnz	r1, 80012f8 <_realloc_r+0x14>
 80012ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80012f2:	4611      	mov	r1, r2
 80012f4:	f7ff bf9c 	b.w	8001230 <_malloc_r>
 80012f8:	b922      	cbnz	r2, 8001304 <_realloc_r+0x20>
 80012fa:	f7ff ff4d 	bl	8001198 <_free_r>
 80012fe:	4625      	mov	r5, r4
 8001300:	4628      	mov	r0, r5
 8001302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001304:	f000 f826 	bl	8001354 <_malloc_usable_size_r>
 8001308:	42a0      	cmp	r0, r4
 800130a:	d20f      	bcs.n	800132c <_realloc_r+0x48>
 800130c:	4621      	mov	r1, r4
 800130e:	4638      	mov	r0, r7
 8001310:	f7ff ff8e 	bl	8001230 <_malloc_r>
 8001314:	4605      	mov	r5, r0
 8001316:	2800      	cmp	r0, #0
 8001318:	d0f2      	beq.n	8001300 <_realloc_r+0x1c>
 800131a:	4631      	mov	r1, r6
 800131c:	4622      	mov	r2, r4
 800131e:	f7ff ff17 	bl	8001150 <memcpy>
 8001322:	4631      	mov	r1, r6
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff ff37 	bl	8001198 <_free_r>
 800132a:	e7e9      	b.n	8001300 <_realloc_r+0x1c>
 800132c:	4635      	mov	r5, r6
 800132e:	e7e7      	b.n	8001300 <_realloc_r+0x1c>

08001330 <_sbrk_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	2300      	movs	r3, #0
 8001334:	4c05      	ldr	r4, [pc, #20]	; (800134c <_sbrk_r+0x1c>)
 8001336:	4605      	mov	r5, r0
 8001338:	4608      	mov	r0, r1
 800133a:	6023      	str	r3, [r4, #0]
 800133c:	f7ff f900 	bl	8000540 <_sbrk>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_sbrk_r+0x1a>
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	b103      	cbz	r3, 800134a <_sbrk_r+0x1a>
 8001348:	602b      	str	r3, [r5, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	20000b24 	.word	0x20000b24

08001350 <__malloc_lock>:
 8001350:	4770      	bx	lr

08001352 <__malloc_unlock>:
 8001352:	4770      	bx	lr

08001354 <_malloc_usable_size_r>:
 8001354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001358:	1f18      	subs	r0, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	bfbc      	itt	lt
 800135e:	580b      	ldrlt	r3, [r1, r0]
 8001360:	18c0      	addlt	r0, r0, r3
 8001362:	4770      	bx	lr

08001364 <_init>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr

08001370 <_fini>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	bf00      	nop
 8001374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001376:	bc08      	pop	{r3}
 8001378:	469e      	mov	lr, r3
 800137a:	4770      	bx	lr
>>>>>>> 2cbdcb6f61c10bb5fe19d6016fffb4daa7ed315a
