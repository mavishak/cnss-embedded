
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000350  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000350  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001aff  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000627  00000000  00000000  00011e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  000124a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c8  00000000  00000000  000125b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000003dc  00000000  00000000  00012678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000169d  00000000  00000000  00012a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057422  00000000  00000000  000140f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006b513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000028c  00000000  00000000  0006b590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000330 	.word	0x08000330

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000330 	.word	0x08000330

08000170 <toggle_led>:

}


void toggle_led()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <toggle_led+0x3c>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d109      	bne.n	8000190 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <toggle_led+0x40>)
 800017e:	68db      	ldr	r3, [r3, #12]
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <toggle_led+0x40>)
 8000182:	f043 0320 	orr.w	r3, r3, #32
 8000186:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000188:	4b08      	ldr	r3, [pc, #32]	; (80001ac <toggle_led+0x3c>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800018e:	e008      	b.n	80001a2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <toggle_led+0x40>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <toggle_led+0x40>)
 8000196:	f023 0320 	bic.w	r3, r3, #32
 800019a:	60d3      	str	r3, [r2, #12]
		state=OFF;
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <toggle_led+0x3c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	40010800 	.word	0x40010800

080001b4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <EXTI4_IRQHandler+0x18>)
 80001ba:	695b      	ldr	r3, [r3, #20]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <EXTI4_IRQHandler+0x18>)
 80001be:	f043 0310 	orr.w	r3, r3, #16
 80001c2:	6153      	str	r3, [r2, #20]
	toggle_led();
 80001c4:	f7ff ffd4 	bl	8000170 <toggle_led>

}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010400 	.word	0x40010400

080001d0 <EXTI15_10_IRQHandler>:

/*Interrupt service routine for sensor using pin D6 (PB10) as input mode*/
void EXTI15_10_IRQHandler(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <EXTI15_10_IRQHandler+0x18>)
 80001d6:	695b      	ldr	r3, [r3, #20]
 80001d8:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <EXTI15_10_IRQHandler+0x18>)
 80001da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001de:	6153      	str	r3, [r2, #20]
	toggle_led();
 80001e0:	f7ff ffc6 	bl	8000170 <toggle_led>

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40010400 	.word	0x40010400

080001ec <main>:




int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();

	init_usart();
 80001f0:	f000 f80a 	bl	8000208 <init_usart>
	while(1)
	{
		write();
 80001f4:	f000 f83c 	bl	8000270 <write>
 80001f8:	e7fc      	b.n	80001f4 <main+0x8>

080001fa <SysTick_Handler>:
}
*/


void SysTick_Handler(void)
{
 80001fa:	b480      	push	{r7}
 80001fc:	af00      	add	r7, sp, #0

}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
	...

08000208 <init_usart>:
#include "hc-sr501pir_sensor.h"
#include "cmsis_gcc.h"/*for __disable/enable_irq()*/
#include "core_cm3.h" /*for NVIC_enableIRQ() and NVIC_SetPriority()*/


void init_usart(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7)

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <init_usart+0x5c>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a14      	ldr	r2, [pc, #80]	; (8000264 <init_usart+0x5c>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are exept for bit 2 (see RM 9.2.1)
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <init_usart+0x60>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <init_usart+0x60>)
 800021e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <init_usart+0x60>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <init_usart+0x60>)
 800022a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800022e:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8)
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <init_usart+0x5c>)
 8000232:	69db      	ldr	r3, [r3, #28]
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <init_usart+0x5c>)
 8000236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023a:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <init_usart+0x64>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <init_usart+0x64>)
 8000242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000246:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	//USART2->BRR = 0xEA6; // 9600 bps (see https://www.programmersought.com/article/11991629979/ and RM 27.6.3)
	USART2->BRR = 0xD05;
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <init_usart+0x64>)
 800024a:	f640 5205 	movw	r2, #3333	; 0xd05
 800024e:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <init_usart+0x64>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <init_usart+0x64>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800
 800026c:	40004400 	.word	0x40004400

08000270 <write>:

/*USART2 write function with no interrupt*/
void write(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

	//while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmition is complete TC=1 (see RM 27.6.1)
	//wait while data is not transferd
	//wait while txe==0
	while(((USART2->SR) & 0x00000080) == 0x00000000);// TXE != 1 // == 0x00000000); // != 0x00000080 check TXE (see RM 27.6.1)
 8000274:	bf00      	nop
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <write+0x20>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <write+0x6>
	USART2->DR = (uint8_t)('U' & 0xFF); //send data (see RM 27.6.2)
 8000282:	4b03      	ldr	r3, [pc, #12]	; (8000290 <write+0x20>)
 8000284:	2255      	movs	r2, #85	; 0x55
 8000286:	605a      	str	r2, [r3, #4]

}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40004400 	.word	0x40004400

08000294 <Reset_Handler>:
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
 8000296:	4685      	mov	sp, r0
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x6>)
 800029a:	490e      	ldr	r1, [pc, #56]	; (80002d4 <LoopForever+0xa>)
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <LoopForever+0xe>)
 800029e:	2300      	movs	r3, #0
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:
 80002a2:	58d4      	ldr	r4, [r2, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:
 80002a8:	18c4      	adds	r4, r0, r3
 80002aa:	428c      	cmp	r4, r1
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <LoopForever+0x12>)
 80002b0:	4c0b      	ldr	r4, [pc, #44]	; (80002e0 <LoopForever+0x16>)
 80002b2:	2300      	movs	r3, #0
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:
 80002b6:	6013      	str	r3, [r2, #0]
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:
 80002ba:	42a2      	cmp	r2, r4
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>
 80002be:	f3af 8000 	nop.w
 80002c2:	f000 f811 	bl	80002e8 <__libc_init_array>
 80002c6:	f7ff ff91 	bl	80001ec <main>

080002ca <LoopForever>:
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
 80002cc:	20005000 	.word	0x20005000
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000000 	.word	0x20000000
 80002d8:	08000350 	.word	0x08000350
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000020 	.word	0x20000020

080002e4 <ADC1_2_IRQHandler>:
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2500      	movs	r5, #0
 80002ec:	4e0c      	ldr	r6, [pc, #48]	; (8000320 <__libc_init_array+0x38>)
 80002ee:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002f0:	1ba4      	subs	r4, r4, r6
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a5      	cmp	r5, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	f000 f81a 	bl	8000330 <_init>
 80002fc:	2500      	movs	r5, #0
 80002fe:	4e0a      	ldr	r6, [pc, #40]	; (8000328 <__libc_init_array+0x40>)
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <__libc_init_array+0x44>)
 8000302:	1ba4      	subs	r4, r4, r6
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a5      	cmp	r5, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000310:	4798      	blx	r3
 8000312:	3501      	adds	r5, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800031a:	4798      	blx	r3
 800031c:	3501      	adds	r5, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
