
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002250  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08002380  08002380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002780  08002780  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08002780  08002780  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002780  08002780  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08002788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200000d4  0800285c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800285c  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b68  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000155b  00000000  00000000  00027c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b8  00000000  00000000  000291c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000320  00000000  00000000  00029578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000020fa  00000000  00000000  00029898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000044bd  00000000  00000000  0002b992  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059399  00000000  00000000  0002fe4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000891e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001004  00000000  00000000  00089264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08002368 	.word	0x08002368

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08002368 	.word	0x08002368

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <alert_Handler>:

	memset((char*)image_path, '\0', PATH_SIZE*sizeof(uint8_t));
	sprintf((char*)image_path, "image/path");
}

void *alert_Handler(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0


	uint32_t i  = 3;
 8000186:	2303      	movs	r3, #3
 8000188:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 800018a:	e002      	b.n	8000192 <alert_Handler+0x12>
		i--;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3b01      	subs	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
	while(i > 0  && !recordAlert() && connection_closed){
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d008      	beq.n	80001aa <alert_Handler+0x2a>
 8000198:	f000 f856 	bl	8000248 <recordAlert>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d103      	bne.n	80001aa <alert_Handler+0x2a>
 80001a2:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <alert_Handler+0x34>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f0      	bne.n	800018c <alert_Handler+0xc>
	}

	return NULL;
 80001aa:	2300      	movs	r3, #0

}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000478 	.word	0x20000478

080001b8 <control_Handler>:

void *control_Handler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0

	state = NON; // this will change in checkSwitchState()
 80001be:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <control_Handler+0x7c>)
 80001c0:	2203      	movs	r2, #3
 80001c2:	701a      	strb	r2, [r3, #0]

	uint32_t i  = 3;
 80001c4:	2303      	movs	r3, #3
 80001c6:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001c8:	e002      	b.n	80001d0 <control_Handler+0x18>
		i--;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	607b      	str	r3, [r7, #4]
	while(i > 0  && !checkSwitchState() && connection_closed){
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d008      	beq.n	80001e8 <control_Handler+0x30>
 80001d6:	f000 f8ab 	bl	8000330 <checkSwitchState>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d103      	bne.n	80001e8 <control_Handler+0x30>
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <control_Handler+0x80>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1f0      	bne.n	80001ca <control_Handler+0x12>
	}

	if(state == OFF || state == NO_PATH){
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <control_Handler+0x7c>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d003      	beq.n	80001f8 <control_Handler+0x40>
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <control_Handler+0x7c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d107      	bne.n	8000208 <control_Handler+0x50>
		disable_sensor();
 80001f8:	f000 fdda 	bl	8000db0 <disable_sensor>
		disable_timer3(); // otherwise the timer will keep going for ever and an overflow will occur
 80001fc:	f000 ffc0 	bl	8001180 <disable_timer3>
		write_usart2((uint8_t*)("\r\nOFF/NO_PATH\r\n"));
 8000200:	480e      	ldr	r0, [pc, #56]	; (800023c <control_Handler+0x84>)
 8000202:	f001 f9cf 	bl	80015a4 <write_usart2>
 8000206:	e010      	b.n	800022a <control_Handler+0x72>
	}

	else if(state == ON){
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <control_Handler+0x7c>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d105      	bne.n	800021c <control_Handler+0x64>
		enable_sensor();
 8000210:	f000 fdc2 	bl	8000d98 <enable_sensor>
		write_usart2((uint8_t*)("\r\nON\r\n"));
 8000214:	480a      	ldr	r0, [pc, #40]	; (8000240 <control_Handler+0x88>)
 8000216:	f001 f9c5 	bl	80015a4 <write_usart2>
 800021a:	e006      	b.n	800022a <control_Handler+0x72>
	}
	else{ //NON
		disable_sensor(); // As there is no comunication with Firebase there is no sence for the sensor to be on and send alerts.
 800021c:	f000 fdc8 	bl	8000db0 <disable_sensor>
		disable_timer3(); // otherwise the timer will keep going for ever and an overflow will occur
 8000220:	f000 ffae 	bl	8001180 <disable_timer3>
		write_usart2((uint8_t*)("\r\nNON\r\n"));
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <control_Handler+0x8c>)
 8000226:	f001 f9bd 	bl	80015a4 <write_usart2>
	}

	return NULL;
 800022a:	2300      	movs	r3, #0


}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000479 	.word	0x20000479
 8000238:	20000478 	.word	0x20000478
 800023c:	0800238c 	.word	0x0800238c
 8000240:	0800239c 	.word	0x0800239c
 8000244:	080023a4 	.word	0x080023a4

08000248 <recordAlert>:


/*This function sends an alert to realtime DB in containing the time of the alert firebase
 * before using this function
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL recordAlert(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In recordAlert()\r\n"); // for debugging
 800024c:	482f      	ldr	r0, [pc, #188]	; (800030c <recordAlert+0xc4>)
 800024e:	f001 f9a9 	bl	80015a4 <write_usart2>

	connection_closed = TRUE;
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <recordAlert+0xc8>)
 8000254:	2201      	movs	r2, #1
 8000256:	701a      	strb	r2, [r3, #0]
//	 if(!reset(3,6)){
//		return FALSE;
//	 }
//	 delay_with_timer4(1);

	write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP
 8000258:	482e      	ldr	r0, [pc, #184]	; (8000314 <recordAlert+0xcc>)
 800025a:	f001 f9a3 	bl	80015a4 <write_usart2>


	//Set client mode
	if(!setClientMode(2,6)){
 800025e:	2106      	movs	r1, #6
 8000260:	2002      	movs	r0, #2
 8000262:	f000 f8d5 	bl	8000410 <setClientMode>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d101      	bne.n	8000270 <recordAlert+0x28>
		return FALSE;
 800026c:	2300      	movs	r3, #0
 800026e:	e04b      	b.n	8000308 <recordAlert+0xc0>
	}
	write_usart2((uint8_t*)"1\r\n");
 8000270:	4829      	ldr	r0, [pc, #164]	; (8000318 <recordAlert+0xd0>)
 8000272:	f001 f997 	bl	80015a4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(2,10)){
 8000276:	210a      	movs	r1, #10
 8000278:	2002      	movs	r0, #2
 800027a:	f000 f90b 	bl	8000494 <joinAccessPoint>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d101      	bne.n	8000288 <recordAlert+0x40>
		return FALSE;
 8000284:	2300      	movs	r3, #0
 8000286:	e03f      	b.n	8000308 <recordAlert+0xc0>
	}
	write_usart2((uint8_t*)"2\r\n");
 8000288:	4824      	ldr	r0, [pc, #144]	; (800031c <recordAlert+0xd4>)
 800028a:	f001 f98b 	bl	80015a4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 800028e:	231e      	movs	r3, #30
 8000290:	2206      	movs	r2, #6
 8000292:	2102      	movs	r1, #2
 8000294:	2002      	movs	r0, #2
 8000296:	f000 f951 	bl	800053c <connectFirebaseHost>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d101      	bne.n	80002a4 <recordAlert+0x5c>
		return FALSE;
 80002a0:	2300      	movs	r3, #0
 80002a2:	e031      	b.n	8000308 <recordAlert+0xc0>
	}
	write_usart2((uint8_t*)"3\r\n");
 80002a4:	481e      	ldr	r0, [pc, #120]	; (8000320 <recordAlert+0xd8>)
 80002a6:	f001 f97d 	bl	80015a4 <write_usart2>
	//Set Image Path
	//setImagePath(); //Need to check params later
	//write_usart2((uint8_t*)"4\r\n");

	//Create HTTP request
	createPostMsg();
 80002aa:	f000 f9e7 	bl	800067c <createPostMsg>
	write_usart2((uint8_t*)"4\r\n");
 80002ae:	481d      	ldr	r0, [pc, #116]	; (8000324 <recordAlert+0xdc>)
 80002b0:	f001 f978 	bl	80015a4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 80002b4:	2328      	movs	r3, #40	; 0x28
 80002b6:	221e      	movs	r2, #30
 80002b8:	2102      	movs	r1, #2
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 fa4c 	bl	8000758 <sendRequest>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d109      	bne.n	80002da <recordAlert+0x92>
		//closeConnection(3,3); // original line
		connection_closed = closeConnection(2,6);
 80002c6:	2106      	movs	r1, #6
 80002c8:	2002      	movs	r0, #2
 80002ca:	f000 fb63 	bl	8000994 <closeConnection>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <recordAlert+0xc8>)
 80002d4:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	e016      	b.n	8000308 <recordAlert+0xc0>
	}
	write_usart2((uint8_t*)"5\r\n");
 80002da:	4813      	ldr	r0, [pc, #76]	; (8000328 <recordAlert+0xe0>)
 80002dc:	f001 f962 	bl	80015a4 <write_usart2>

	//Read response
	if(!readResponse(120)){ //timeout set t0 3 minutes
 80002e0:	2078      	movs	r0, #120	; 0x78
 80002e2:	f000 fadb 	bl	800089c <readResponse>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d109      	bne.n	8000300 <recordAlert+0xb8>
		//closeConnection(3,3); //original line
		connection_closed = closeConnection(2,6);
 80002ec:	2106      	movs	r1, #6
 80002ee:	2002      	movs	r0, #2
 80002f0:	f000 fb50 	bl	8000994 <closeConnection>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <recordAlert+0xc8>)
 80002fa:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	e003      	b.n	8000308 <recordAlert+0xc0>
	}

	write_usart2((uint8_t*)"6\r\n");
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <recordAlert+0xe4>)
 8000302:	f001 f94f 	bl	80015a4 <write_usart2>

	//Close cunnection with firebase -  firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//write_usart2((uint8_t*)"7\r\n");

	return TRUE;
 8000306:	2301      	movs	r3, #1

}
 8000308:	4618      	mov	r0, r3
 800030a:	bd80      	pop	{r7, pc}
 800030c:	080023ac 	.word	0x080023ac
 8000310:	20000478 	.word	0x20000478
 8000314:	080023c0 	.word	0x080023c0
 8000318:	080023c4 	.word	0x080023c4
 800031c:	080023c8 	.word	0x080023c8
 8000320:	080023cc 	.word	0x080023cc
 8000324:	080023d0 	.word	0x080023d0
 8000328:	080023d4 	.word	0x080023d4
 800032c:	080023d8 	.word	0x080023d8

08000330 <checkSwitchState>:


/*This function retreaves 'on/off' state from realtime DB
 * init_usart1(), init_usart2() and init_timer4() must be executed.*/
BOOL checkSwitchState(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

	write_usart2((uint8_t*)"In checkSwitchState()\r\n"); // for debugging
 8000334:	482e      	ldr	r0, [pc, #184]	; (80003f0 <checkSwitchState+0xc0>)
 8000336:	f001 f935 	bl	80015a4 <write_usart2>

	connection_closed = TRUE;//added 30.4.21
 800033a:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <checkSwitchState+0xc4>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]

	//write_usart2((uint8_t*)"0\r\n"); //with this it reaches AT+CWJAP


	//Set client mode
	if(!setClientMode(2,6)){
 8000340:	2106      	movs	r1, #6
 8000342:	2002      	movs	r0, #2
 8000344:	f000 f864 	bl	8000410 <setClientMode>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d101      	bne.n	8000352 <checkSwitchState+0x22>
		return FALSE;
 800034e:	2300      	movs	r3, #0
 8000350:	e04b      	b.n	80003ea <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"1\r\n");
 8000352:	4829      	ldr	r0, [pc, #164]	; (80003f8 <checkSwitchState+0xc8>)
 8000354:	f001 f926 	bl	80015a4 <write_usart2>

	//Join access point
	if(!joinAccessPoint(2,10)){
 8000358:	210a      	movs	r1, #10
 800035a:	2002      	movs	r0, #2
 800035c:	f000 f89a 	bl	8000494 <joinAccessPoint>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <checkSwitchState+0x3a>
		return FALSE;
 8000366:	2300      	movs	r3, #0
 8000368:	e03f      	b.n	80003ea <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"2\r\n");
 800036a:	4824      	ldr	r0, [pc, #144]	; (80003fc <checkSwitchState+0xcc>)
 800036c:	f001 f91a 	bl	80015a4 <write_usart2>

	/*Default: AT+CIPMUX=0 (according to: AT instruction set- 5.2.15)*/

	//Connect HOST IP
	if(!connectFirebaseHost(2,2,6,30)){
 8000370:	231e      	movs	r3, #30
 8000372:	2206      	movs	r2, #6
 8000374:	2102      	movs	r1, #2
 8000376:	2002      	movs	r0, #2
 8000378:	f000 f8e0 	bl	800053c <connectFirebaseHost>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d101      	bne.n	8000386 <checkSwitchState+0x56>
		return FALSE;
 8000382:	2300      	movs	r3, #0
 8000384:	e031      	b.n	80003ea <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"3\r\n");
 8000386:	481e      	ldr	r0, [pc, #120]	; (8000400 <checkSwitchState+0xd0>)
 8000388:	f001 f90c 	bl	80015a4 <write_usart2>


	//Create HTTP request
	createGetMsg();
 800038c:	f000 f9bc 	bl	8000708 <createGetMsg>
	write_usart2((uint8_t*)"4\r\n");
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <checkSwitchState+0xd4>)
 8000392:	f001 f907 	bl	80015a4 <write_usart2>


	//Send number of data bytes
	if(!sendRequest(2,2,30,40)){
 8000396:	2328      	movs	r3, #40	; 0x28
 8000398:	221e      	movs	r2, #30
 800039a:	2102      	movs	r1, #2
 800039c:	2002      	movs	r0, #2
 800039e:	f000 f9db 	bl	8000758 <sendRequest>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d109      	bne.n	80003bc <checkSwitchState+0x8c>
		connection_closed = closeConnection(2,6);
 80003a8:	2106      	movs	r1, #6
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 faf2 	bl	8000994 <closeConnection>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <checkSwitchState+0xc4>)
 80003b6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e016      	b.n	80003ea <checkSwitchState+0xba>
	}
	write_usart2((uint8_t*)"5\r\n");
 80003bc:	4812      	ldr	r0, [pc, #72]	; (8000408 <checkSwitchState+0xd8>)
 80003be:	f001 f8f1 	bl	80015a4 <write_usart2>

	//Read response
	if(!parseResponse(120)){//timeout set t0 3 minutes
 80003c2:	2078      	movs	r0, #120	; 0x78
 80003c4:	f000 fa9c 	bl	8000900 <parseResponse>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d109      	bne.n	80003e2 <checkSwitchState+0xb2>
		connection_closed = closeConnection(2,6);//added 30.4.21
 80003ce:	2106      	movs	r1, #6
 80003d0:	2002      	movs	r0, #2
 80003d2:	f000 fadf 	bl	8000994 <closeConnection>
 80003d6:	4603      	mov	r3, r0
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <checkSwitchState+0xc4>)
 80003dc:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80003de:	2300      	movs	r3, #0
 80003e0:	e003      	b.n	80003ea <checkSwitchState+0xba>
	}

	write_usart2((uint8_t*)"6\r\n");
 80003e2:	480a      	ldr	r0, [pc, #40]	; (800040c <checkSwitchState+0xdc>)
 80003e4:	f001 f8de 	bl	80015a4 <write_usart2>

	//Close cunnection with firebase - this might be useless as firebase already closes connection with "CLOSED" response
	//closeConnection(3,3);
	//write_usart2((uint8_t*)"7\r\n");

	return TRUE;
 80003e8:	2301      	movs	r3, #1


}
 80003ea:	4618      	mov	r0, r3
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	080023dc 	.word	0x080023dc
 80003f4:	20000478 	.word	0x20000478
 80003f8:	080023c4 	.word	0x080023c4
 80003fc:	080023c8 	.word	0x080023c8
 8000400:	080023cc 	.word	0x080023cc
 8000404:	080023d0 	.word	0x080023d0
 8000408:	080023d4 	.word	0x080023d4
 800040c:	080023d8 	.word	0x080023d8

08000410 <setClientMode>:

/*This function sets ESP8266 modem to client mode,
 * returns uppon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL setClientMode(uint32_t tries, uint32_t timeout){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <setClientMode+0x74>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CWMODE);
 8000420:	4819      	ldr	r0, [pc, #100]	; (8000488 <setClientMode+0x78>)
 8000422:	f001 f971 	bl	8001708 <write_usart1>
	while(tries > 0){
 8000426:	e024      	b.n	8000472 <setClientMode+0x62>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000428:	f000 fff6 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d009      	beq.n	8000446 <setClientMode+0x36>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR); //returns true only if AT_OK is found
 8000432:	4916      	ldr	r1, [pc, #88]	; (800048c <setClientMode+0x7c>)
 8000434:	4816      	ldr	r0, [pc, #88]	; (8000490 <setClientMode+0x80>)
 8000436:	f001 f9ef 	bl	8001818 <USART1_search_buffer_Rx>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <setClientMode+0x74>)
 8000440:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000442:	f000 fff3 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <setClientMode+0x74>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d105      	bne.n	800045a <setClientMode+0x4a>
 800044e:	6838      	ldr	r0, [r7, #0]
 8000450:	f000 feb2 	bl	80011b8 <timeout_with_timer4>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0e6      	beq.n	8000428 <setClientMode+0x18>
			}
		}
		if(found == PASS){
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <setClientMode+0x74>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d101      	bne.n	8000466 <setClientMode+0x56>
			return TRUE;
 8000462:	2301      	movs	r3, #1
 8000464:	e009      	b.n	800047a <setClientMode+0x6a>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3b01      	subs	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CWMODE);
 800046c:	4806      	ldr	r0, [pc, #24]	; (8000488 <setClientMode+0x78>)
 800046e:	f001 f94b 	bl	8001708 <write_usart1>
	while(tries > 0){
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1e6      	bne.n	8000446 <setClientMode+0x36>
		}
	}
	return FALSE;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000006c 	.word	0x2000006c
 8000488:	08002418 	.word	0x08002418
 800048c:	080023fc 	.word	0x080023fc
 8000490:	08002404 	.word	0x08002404

08000494 <joinAccessPoint>:

/*This function connects the WiFi modem ESP8266 to the given SSID in configurations.h,
 * returns upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response.*/
BOOL joinAccessPoint(uint32_t tries, uint32_t timeout){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]

	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 800049e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a2:	2100      	movs	r1, #0
 80004a4:	481e      	ldr	r0, [pc, #120]	; (8000520 <joinAccessPoint+0x8c>)
 80004a6:	f001 fb2c 	bl	8001b02 <memset>
	sprintf((char*)command, "AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,PWD);
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <joinAccessPoint+0x90>)
 80004ac:	4a1e      	ldr	r2, [pc, #120]	; (8000528 <joinAccessPoint+0x94>)
 80004ae:	491f      	ldr	r1, [pc, #124]	; (800052c <joinAccessPoint+0x98>)
 80004b0:	481b      	ldr	r0, [pc, #108]	; (8000520 <joinAccessPoint+0x8c>)
 80004b2:	f001 fb2f 	bl	8001b14 <siprintf>

	found = STANDBY;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <joinAccessPoint+0x9c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80004bc:	4818      	ldr	r0, [pc, #96]	; (8000520 <joinAccessPoint+0x8c>)
 80004be:	f001 f923 	bl	8001708 <write_usart1>
	while(tries > 0){
 80004c2:	e024      	b.n	800050e <joinAccessPoint+0x7a>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 80004c4:	f000 ffa8 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d009      	beq.n	80004e2 <joinAccessPoint+0x4e>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_FAIL);
 80004ce:	4919      	ldr	r1, [pc, #100]	; (8000534 <joinAccessPoint+0xa0>)
 80004d0:	4819      	ldr	r0, [pc, #100]	; (8000538 <joinAccessPoint+0xa4>)
 80004d2:	f001 f9a1 	bl	8001818 <USART1_search_buffer_Rx>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <joinAccessPoint+0x9c>)
 80004dc:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80004de:	f000 ffa5 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <joinAccessPoint+0x9c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d105      	bne.n	80004f6 <joinAccessPoint+0x62>
 80004ea:	6838      	ldr	r0, [r7, #0]
 80004ec:	f000 fe64 	bl	80011b8 <timeout_with_timer4>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0e6      	beq.n	80004c4 <joinAccessPoint+0x30>
			}
		}
		if(found == PASS){
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <joinAccessPoint+0x9c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <joinAccessPoint+0x6e>
			return TRUE;
 80004fe:	2301      	movs	r3, #1
 8000500:	e009      	b.n	8000516 <joinAccessPoint+0x82>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3b01      	subs	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)command);
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <joinAccessPoint+0x8c>)
 800050a:	f001 f8fd 	bl	8001708 <write_usart1>
	while(tries > 0){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1e6      	bne.n	80004e2 <joinAccessPoint+0x4e>
		}
	}
	return FALSE;
 8000514:	2300      	movs	r3, #0

}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000f0 	.word	0x200000f0
 8000524:	08002428 	.word	0x08002428
 8000528:	08002434 	.word	0x08002434
 800052c:	08002440 	.word	0x08002440
 8000530:	2000006c 	.word	0x2000006c
 8000534:	08002458 	.word	0x08002458
 8000538:	08002404 	.word	0x08002404

0800053c <connectFirebaseHost>:
/*This function cunnects to firebase via secure HTTP (HTTPS) using SSL,
 * returns TRUE upon success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 * need to enter tries and timout for both SSL AT_command and CIPSTART AT_command*/
BOOL connectFirebaseHost(uint32_t _ssl_tries, uint32_t _cipstart_tries , uint32_t _ssl_timeout, uint32_t  _cipstart_timeout){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
 8000548:	603b      	str	r3, [r7, #0]


	//Create secure cunnection via SSL
	found = STANDBY;
 800054a:	4b43      	ldr	r3, [pc, #268]	; (8000658 <connectFirebaseHost+0x11c>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");//at_instruction: 5.2.4 page 50
 8000550:	4842      	ldr	r0, [pc, #264]	; (800065c <connectFirebaseHost+0x120>)
 8000552:	f001 f8d9 	bl	8001708 <write_usart1>
	while(_ssl_tries > 0){
 8000556:	e022      	b.n	800059e <connectFirebaseHost+0x62>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000558:	f000 ff5e 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d009      	beq.n	8000576 <connectFirebaseHost+0x3a>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 8000562:	493f      	ldr	r1, [pc, #252]	; (8000660 <connectFirebaseHost+0x124>)
 8000564:	483f      	ldr	r0, [pc, #252]	; (8000664 <connectFirebaseHost+0x128>)
 8000566:	f001 f957 	bl	8001818 <USART1_search_buffer_Rx>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <connectFirebaseHost+0x11c>)
 8000570:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000572:	f000 ff5b 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_ssl_timeout)){
 8000576:	4b38      	ldr	r3, [pc, #224]	; (8000658 <connectFirebaseHost+0x11c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d105      	bne.n	800058a <connectFirebaseHost+0x4e>
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 fe1a 	bl	80011b8 <timeout_with_timer4>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0e6      	beq.n	8000558 <connectFirebaseHost+0x1c>
			}
		}
		if(found == PASS){
 800058a:	4b33      	ldr	r3, [pc, #204]	; (8000658 <connectFirebaseHost+0x11c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d009      	beq.n	80005a6 <connectFirebaseHost+0x6a>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_ssl_tries--;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3b01      	subs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)"AT+CIPSSLSIZE=4096\r\n");
 8000598:	4830      	ldr	r0, [pc, #192]	; (800065c <connectFirebaseHost+0x120>)
 800059a:	f001 f8b5 	bl	8001708 <write_usart1>
	while(_ssl_tries > 0){
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1e8      	bne.n	8000576 <connectFirebaseHost+0x3a>
 80005a4:	e000      	b.n	80005a8 <connectFirebaseHost+0x6c>
			break; //move on to next command
 80005a6:	bf00      	nop
		}
	}

	if(found == FAIL || found == STANDBY){
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <connectFirebaseHost+0x11c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d003      	beq.n	80005b8 <connectFirebaseHost+0x7c>
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <connectFirebaseHost+0x11c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d101      	bne.n	80005bc <connectFirebaseHost+0x80>
		return FALSE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	e048      	b.n	800064e <connectFirebaseHost+0x112>
	}



	//Connect Firebase Host
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 80005bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c0:	2100      	movs	r1, #0
 80005c2:	4829      	ldr	r0, [pc, #164]	; (8000668 <connectFirebaseHost+0x12c>)
 80005c4:	f001 fa9d 	bl	8001b02 <memset>
	sprintf((char*)command, "AT+CIPSTART=\"SSL\",\"%s\",%ld\r\n",(char*)firebase_host, https_port);
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <connectFirebaseHost+0x130>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <connectFirebaseHost+0x134>)
 80005ce:	4929      	ldr	r1, [pc, #164]	; (8000674 <connectFirebaseHost+0x138>)
 80005d0:	4825      	ldr	r0, [pc, #148]	; (8000668 <connectFirebaseHost+0x12c>)
 80005d2:	f001 fa9f 	bl	8001b14 <siprintf>

	found = STANDBY;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <connectFirebaseHost+0x11c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 80005dc:	4822      	ldr	r0, [pc, #136]	; (8000668 <connectFirebaseHost+0x12c>)
 80005de:	f001 f893 	bl	8001708 <write_usart1>
	while(_cipstart_tries > 0){
 80005e2:	e030      	b.n	8000646 <connectFirebaseHost+0x10a>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 80005e4:	f000 ff18 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d015      	beq.n	800061a <connectFirebaseHost+0xde>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80005ee:	491c      	ldr	r1, [pc, #112]	; (8000660 <connectFirebaseHost+0x124>)
 80005f0:	481c      	ldr	r0, [pc, #112]	; (8000664 <connectFirebaseHost+0x128>)
 80005f2:	f001 f911 	bl	8001818 <USART1_search_buffer_Rx>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <connectFirebaseHost+0x11c>)
 80005fc:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <connectFirebaseHost+0x11c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d107      	bne.n	8000616 <connectFirebaseHost+0xda>
					found = USART1_search_buffer_Rx((uint8_t *)AT_ALREADY_CONNECTED, (uint8_t *)AT_ERROR);// CRITICAL!
 8000606:	4916      	ldr	r1, [pc, #88]	; (8000660 <connectFirebaseHost+0x124>)
 8000608:	481b      	ldr	r0, [pc, #108]	; (8000678 <connectFirebaseHost+0x13c>)
 800060a:	f001 f905 	bl	8001818 <USART1_search_buffer_Rx>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <connectFirebaseHost+0x11c>)
 8000614:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 8000616:	f000 ff09 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_cipstart_timeout)){
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <connectFirebaseHost+0x11c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d105      	bne.n	800062e <connectFirebaseHost+0xf2>
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f000 fdc8 	bl	80011b8 <timeout_with_timer4>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0da      	beq.n	80005e4 <connectFirebaseHost+0xa8>
			}
		}
		if(found == PASS){
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <connectFirebaseHost+0x11c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <connectFirebaseHost+0xfe>
			return TRUE;
 8000636:	2301      	movs	r3, #1
 8000638:	e009      	b.n	800064e <connectFirebaseHost+0x112>
		}
		else{ // FAIL OR TIMEOUT
			_cipstart_tries--;
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	3b01      	subs	r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)command);
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <connectFirebaseHost+0x12c>)
 8000642:	f001 f861 	bl	8001708 <write_usart1>
	while(_cipstart_tries > 0){
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1e6      	bne.n	800061a <connectFirebaseHost+0xde>
		}
	}
	return FALSE;
 800064c:	2300      	movs	r3, #0



}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000006c 	.word	0x2000006c
 800065c:	08002460 	.word	0x08002460
 8000660:	080023fc 	.word	0x080023fc
 8000664:	08002404 	.word	0x08002404
 8000668:	200000f0 	.word	0x200000f0
 800066c:	20000058 	.word	0x20000058
 8000670:	20000000 	.word	0x20000000
 8000674:	08002478 	.word	0x08002478
 8000678:	08002498 	.word	0x08002498

0800067c <createPostMsg>:


/*This function builds HTTP request to send to firebase,
 * Returns when done*/
void createPostMsg(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af04      	add	r7, sp, #16

	//Set HTTP body content
	memset((char*)content, '\0', CONTENT_SIZE*sizeof(uint8_t));
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	2100      	movs	r1, #0
 8000686:	4817      	ldr	r0, [pc, #92]	; (80006e4 <createPostMsg+0x68>)
 8000688:	f001 fa3b 	bl	8001b02 <memset>
	//sprintf((char*)content,"{\"image_path\": \"%s\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}",(char*)image_path);
	sprintf((char*)content,"{\"image_path\": \"image/path\", \"notes\": \"alarm went off!\", \"timestamp\": {\".sv\": \"timestamp\"}}");
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <createPostMsg+0x68>)
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <createPostMsg+0x6c>)
 8000690:	4610      	mov	r0, r2
 8000692:	4619      	mov	r1, r3
 8000694:	235c      	movs	r3, #92	; 0x5c
 8000696:	461a      	mov	r2, r3
 8000698:	f001 fa28 	bl	8001aec <memcpy>
	content_len = strlen((char*)content);
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <createPostMsg+0x68>)
 800069e:	f7ff fd67 	bl	8000170 <strlen>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <createPostMsg+0x70>)
 80006a6:	601a      	str	r2, [r3, #0]

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	2100      	movs	r1, #0
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <createPostMsg+0x74>)
 80006b0:	f001 fa27 	bl	8001b02 <memset>
	sprintf((char*)http,"POST /devices/%s/history.json?auth=%s HTTP/1.0\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n%s\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)content); // HTTP/1.0- Allow only one request
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <createPostMsg+0x70>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <createPostMsg+0x68>)
 80006ba:	9202      	str	r2, [sp, #8]
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <createPostMsg+0x78>)
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <createPostMsg+0x7c>)
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <createPostMsg+0x80>)
 80006c6:	490e      	ldr	r1, [pc, #56]	; (8000700 <createPostMsg+0x84>)
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <createPostMsg+0x74>)
 80006ca:	f001 fa23 	bl	8001b14 <siprintf>
	//sprintf((char*)http,"POST /devices/%s/history.json?auth=%s&print=silent HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %ld\r\n\r\n{\"image_path\": \"%s\", \"notes\": \"alarm went off\", \"timestamp\": {\".sv\": \"timestamp\"}}\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host,content_len,(char*)image_path); // HTTP/1.0- Allow only one request
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <createPostMsg+0x74>)
 80006d0:	f7ff fd4e 	bl	8000170 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	3b02      	subs	r3, #2
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <createPostMsg+0x88>)
 80006da:	6013      	str	r3, [r2, #0]

}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200003f4 	.word	0x200003f4
 80006e8:	080024ac 	.word	0x080024ac
 80006ec:	20000474 	.word	0x20000474
 80006f0:	200001f0 	.word	0x200001f0
 80006f4:	20000000 	.word	0x20000000
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	2000005c 	.word	0x2000005c
 8000700:	08002508 	.word	0x08002508
 8000704:	200003f0 	.word	0x200003f0

08000708 <createGetMsg>:

void createGetMsg(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af02      	add	r7, sp, #8

	//Set HTTP request
	memset((char*)http, '\0', HTTP_SIZE*sizeof(uint8_t));
 800070e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000712:	2100      	movs	r1, #0
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <createGetMsg+0x38>)
 8000716:	f001 f9f4 	bl	8001b02 <memset>
	sprintf((char*)http,"GET /devices/%s/control/state.json?auth=%s HTTP/1.0\r\nHost: %s\r\n\r\n\r\n",(char*)device_id,(char*)firebase_auth_key,(char*)firebase_host); // HTTP/1.0- Allow only one request
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <createGetMsg+0x3c>)
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <createGetMsg+0x40>)
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <createGetMsg+0x44>)
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <createGetMsg+0x48>)
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <createGetMsg+0x38>)
 8000726:	f001 f9f5 	bl	8001b14 <siprintf>
	http_len = strlen((char*)http)-strlen("\r\n"); // the last \r\n is for the AT command, and not included in the request's length
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <createGetMsg+0x38>)
 800072c:	f7ff fd20 	bl	8000170 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	3b02      	subs	r3, #2
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <createGetMsg+0x4c>)
 8000736:	6013      	str	r3, [r2, #0]

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001f0 	.word	0x200001f0
 8000744:	20000000 	.word	0x20000000
 8000748:	2000002c 	.word	0x2000002c
 800074c:	2000005c 	.word	0x2000005c
 8000750:	08002580 	.word	0x08002580
 8000754:	200003f0 	.word	0x200003f0

08000758 <sendRequest>:
/*This function Sends request to firbase,
 * returns apun success.
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response
 */
BOOL sendRequest(uint32_t _CIPSEND_tries,uint32_t _SEND_OK_tries , uint32_t _CIPSEND_timeout, uint32_t _SEND_OK_timeout ){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	603b      	str	r3, [r7, #0]


	/*Send Request Length - number of data bytes to be sent*/
	memset((char*)command, '\0', COMMAND_SIZE*sizeof(uint8_t));
 8000766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076a:	2100      	movs	r1, #0
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <sendRequest+0x11c>)
 800076e:	f001 f9c8 	bl	8001b02 <memset>
	sprintf((char*)command, "AT+CIPSEND=%ld\r\n",http_len);
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <sendRequest+0x120>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	4940      	ldr	r1, [pc, #256]	; (800087c <sendRequest+0x124>)
 800077a:	483e      	ldr	r0, [pc, #248]	; (8000874 <sendRequest+0x11c>)
 800077c:	f001 f9ca 	bl	8001b14 <siprintf>

	found = STANDBY;
 8000780:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <sendRequest+0x128>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)command);
 8000786:	483b      	ldr	r0, [pc, #236]	; (8000874 <sendRequest+0x11c>)
 8000788:	f000 ffbe 	bl	8001708 <write_usart1>
	while(_CIPSEND_tries > 0){
 800078c:	e02e      	b.n	80007ec <sendRequest+0x94>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 800078e:	f000 fe43 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d015      	beq.n	80007c4 <sendRequest+0x6c>
				found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)AT_ERROR);
 8000798:	493a      	ldr	r1, [pc, #232]	; (8000884 <sendRequest+0x12c>)
 800079a:	483b      	ldr	r0, [pc, #236]	; (8000888 <sendRequest+0x130>)
 800079c:	f001 f83c 	bl	8001818 <USART1_search_buffer_Rx>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b36      	ldr	r3, [pc, #216]	; (8000880 <sendRequest+0x128>)
 80007a6:	701a      	strb	r2, [r3, #0]
				if(found == STANDBY){
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <sendRequest+0x128>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d107      	bne.n	80007c0 <sendRequest+0x68>
					found = USART1_search_buffer_Rx((uint8_t *)">", (uint8_t *)"CLOSED\r\n");
 80007b0:	4936      	ldr	r1, [pc, #216]	; (800088c <sendRequest+0x134>)
 80007b2:	4835      	ldr	r0, [pc, #212]	; (8000888 <sendRequest+0x130>)
 80007b4:	f001 f830 	bl	8001818 <USART1_search_buffer_Rx>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <sendRequest+0x128>)
 80007be:	701a      	strb	r2, [r3, #0]
				}
				USART1_NEW_LINE_READ_set();
 80007c0:	f000 fe34 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_CIPSEND_timeout)){
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <sendRequest+0x128>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <sendRequest+0x80>
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fcf3 	bl	80011b8 <timeout_with_timer4>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0da      	beq.n	800078e <sendRequest+0x36>
			}
		}
		if(found == PASS){
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <sendRequest+0x128>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d009      	beq.n	80007f4 <sendRequest+0x9c>
			break; //move on to next command
		}
		else{ // FAIL OR TIMEOUT
			_CIPSEND_tries--;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
			write_usart1((uint8_t*)command);
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <sendRequest+0x11c>)
 80007e8:	f000 ff8e 	bl	8001708 <write_usart1>
	while(_CIPSEND_tries > 0){
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1e8      	bne.n	80007c4 <sendRequest+0x6c>
 80007f2:	e000      	b.n	80007f6 <sendRequest+0x9e>
			break; //move on to next command
 80007f4:	bf00      	nop
		}
	}
	if(found == FAIL || found == STANDBY){
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <sendRequest+0x128>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d003      	beq.n	8000806 <sendRequest+0xae>
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <sendRequest+0x128>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d101      	bne.n	800080a <sendRequest+0xb2>
		return FALSE;
 8000806:	2300      	movs	r3, #0
 8000808:	e02f      	b.n	800086a <sendRequest+0x112>
	}


	/*Send HTTP request*/
	found = STANDBY;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <sendRequest+0x128>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)http);
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <sendRequest+0x138>)
 8000812:	f000 ff79 	bl	8001708 <write_usart1>

	/*Wait for SEND_OK after this a response will come*/
	while(_SEND_OK_tries > 0){
 8000816:	e024      	b.n	8000862 <sendRequest+0x10a>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 8000818:	f000 fdfe 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d009      	beq.n	8000836 <sendRequest+0xde>
				found = USART1_search_buffer_Rx((uint8_t *)SEND_OK, (uint8_t *)AT_FAIL);
 8000822:	491c      	ldr	r1, [pc, #112]	; (8000894 <sendRequest+0x13c>)
 8000824:	481c      	ldr	r0, [pc, #112]	; (8000898 <sendRequest+0x140>)
 8000826:	f000 fff7 	bl	8001818 <USART1_search_buffer_Rx>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <sendRequest+0x128>)
 8000830:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 8000832:	f000 fdfb 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(_SEND_OK_timeout)){
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <sendRequest+0x128>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d105      	bne.n	800084a <sendRequest+0xf2>
 800083e:	6838      	ldr	r0, [r7, #0]
 8000840:	f000 fcba 	bl	80011b8 <timeout_with_timer4>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0e6      	beq.n	8000818 <sendRequest+0xc0>
			}
		}
		if(found == PASS){
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <sendRequest+0x128>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <sendRequest+0xfe>
			return TRUE;
 8000852:	2301      	movs	r3, #1
 8000854:	e009      	b.n	800086a <sendRequest+0x112>
		}
		else{
			_SEND_OK_tries--;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3b01      	subs	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
			write_usart1((uint8_t*)http);
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <sendRequest+0x138>)
 800085e:	f000 ff53 	bl	8001708 <write_usart1>
	while(_SEND_OK_tries > 0){
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1e6      	bne.n	8000836 <sendRequest+0xde>
		}
	}
	return FALSE;
 8000868:	2300      	movs	r3, #0

}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000f0 	.word	0x200000f0
 8000878:	200003f0 	.word	0x200003f0
 800087c:	080025c4 	.word	0x080025c4
 8000880:	2000006c 	.word	0x2000006c
 8000884:	080023fc 	.word	0x080023fc
 8000888:	080025d8 	.word	0x080025d8
 800088c:	080025dc 	.word	0x080025dc
 8000890:	200001f0 	.word	0x200001f0
 8000894:	08002458 	.word	0x08002458
 8000898:	080025e8 	.word	0x080025e8

0800089c <readResponse>:


/*This function waits for response from firebase,
 * and returns once response is recieved.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL readResponse(uint32_t timeout){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <readResponse+0x58>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80008aa:	e00e      	b.n	80008ca <readResponse+0x2e>
		if(USART1_NEW_LINE_FOUND_get()){
 80008ac:	f000 fdb4 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d009      	beq.n	80008ca <readResponse+0x2e>
			found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 80008b6:	4910      	ldr	r1, [pc, #64]	; (80008f8 <readResponse+0x5c>)
 80008b8:	4810      	ldr	r0, [pc, #64]	; (80008fc <readResponse+0x60>)
 80008ba:	f000 ffad 	bl	8001818 <USART1_search_buffer_Rx>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <readResponse+0x58>)
 80008c4:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ_set();
 80008c6:	f000 fdb1 	bl	800142c <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <readResponse+0x58>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d105      	bne.n	80008de <readResponse+0x42>
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 fc70 	bl	80011b8 <timeout_with_timer4>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d0e6      	beq.n	80008ac <readResponse+0x10>
		}
	}
	if(found == PASS){
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <readResponse+0x58>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <readResponse+0x4e>
		return TRUE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <readResponse+0x50>
	}
	else{
		return FALSE;
 80008ea:	2300      	movs	r3, #0
	}

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000006c 	.word	0x2000006c
 80008f8:	08002458 	.word	0x08002458
 80008fc:	080025dc 	.word	0x080025dc

08000900 <parseResponse>:


// THIS NEEDS TO CHANGE NEED TO CHECK WETHER IT'S ON OR OFF for that we need to retreive the content.
BOOL parseResponse(uint32_t timeout){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	found = STANDBY;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <parseResponse+0x78>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
	state = NON;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <parseResponse+0x7c>)
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 8000914:	e01b      	b.n	800094e <parseResponse+0x4e>
		if(USART1_NEW_LINE_FOUND_get()){
 8000916:	f000 fd7f 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d016      	beq.n	800094e <parseResponse+0x4e>
			state = USART1_check_state_buffer_Rx((uint8_t *)"\"on\"CLOSED", (uint8_t *)"\"off\"CLOSED", (uint8_t *)"nullCLOSED");
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <parseResponse+0x80>)
 8000922:	4918      	ldr	r1, [pc, #96]	; (8000984 <parseResponse+0x84>)
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <parseResponse+0x88>)
 8000926:	f000 ffcf 	bl	80018c8 <USART1_check_state_buffer_Rx>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <parseResponse+0x7c>)
 8000930:	701a      	strb	r2, [r3, #0]
			if(state != NON){
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <parseResponse+0x7c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d007      	beq.n	800094a <parseResponse+0x4a>
				found = USART1_search_buffer_Rx((uint8_t *)"CLOSED\r\n", (uint8_t *)AT_FAIL);
 800093a:	4914      	ldr	r1, [pc, #80]	; (800098c <parseResponse+0x8c>)
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <parseResponse+0x90>)
 800093e:	f000 ff6b 	bl	8001818 <USART1_search_buffer_Rx>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <parseResponse+0x78>)
 8000948:	701a      	strb	r2, [r3, #0]
			}
			USART1_NEW_LINE_READ_set();
 800094a:	f000 fd6f 	bl	800142c <USART1_NEW_LINE_READ_set>
	while(found == STANDBY && !timeout_with_timer4(timeout)){
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <parseResponse+0x78>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d105      	bne.n	8000962 <parseResponse+0x62>
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 fc2e 	bl	80011b8 <timeout_with_timer4>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0d9      	beq.n	8000916 <parseResponse+0x16>
		}
	}
	if(found == PASS){
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <parseResponse+0x78>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <parseResponse+0x6e>
		return TRUE;
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <parseResponse+0x70>
	}
	else{
		return FALSE;
 800096e:	2300      	movs	r3, #0
	}

}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000006c 	.word	0x2000006c
 800097c:	20000479 	.word	0x20000479
 8000980:	080025f4 	.word	0x080025f4
 8000984:	08002600 	.word	0x08002600
 8000988:	0800260c 	.word	0x0800260c
 800098c:	08002458 	.word	0x08002458
 8000990:	080025dc 	.word	0x080025dc

08000994 <closeConnection>:


/*This function closes connection
 * tries: number of times to send ping incase of timeout or failure.
 * timeout (in seconds): number of seconds to wait for response*/
BOOL closeConnection(uint32_t tries, uint32_t timeout){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]

	found = STANDBY;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <closeConnection+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
	write_usart1((uint8_t*)AT_CIPCLOSE);
 80009a4:	4819      	ldr	r0, [pc, #100]	; (8000a0c <closeConnection+0x78>)
 80009a6:	f000 feaf 	bl	8001708 <write_usart1>
	while(tries > 0){
 80009aa:	e024      	b.n	80009f6 <closeConnection+0x62>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
			if(USART1_NEW_LINE_FOUND_get()){
 80009ac:	f000 fd34 	bl	8001418 <USART1_NEW_LINE_FOUND_get>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d009      	beq.n	80009ca <closeConnection+0x36>
				found = USART1_search_buffer_Rx((uint8_t *)AT_OK, (uint8_t *)AT_ERROR);
 80009b6:	4916      	ldr	r1, [pc, #88]	; (8000a10 <closeConnection+0x7c>)
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <closeConnection+0x80>)
 80009ba:	f000 ff2d 	bl	8001818 <USART1_search_buffer_Rx>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <closeConnection+0x74>)
 80009c4:	701a      	strb	r2, [r3, #0]
				USART1_NEW_LINE_READ_set();
 80009c6:	f000 fd31 	bl	800142c <USART1_NEW_LINE_READ_set>
		while(found == STANDBY && !timeout_with_timer4(timeout)){
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <closeConnection+0x74>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d105      	bne.n	80009de <closeConnection+0x4a>
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f000 fbf0 	bl	80011b8 <timeout_with_timer4>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0e6      	beq.n	80009ac <closeConnection+0x18>
			}
		}
		if(found == PASS){
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <closeConnection+0x74>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <closeConnection+0x56>
			return TRUE;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e009      	b.n	80009fe <closeConnection+0x6a>
		}
		else{ // FAIL OR TIMEOUT
			tries--;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
			write_usart1((uint8_t*)AT_CIPCLOSE);
 80009f0:	4806      	ldr	r0, [pc, #24]	; (8000a0c <closeConnection+0x78>)
 80009f2:	f000 fe89 	bl	8001708 <write_usart1>
	while(tries > 0){
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1e6      	bne.n	80009ca <closeConnection+0x36>
		}
	}
	return FALSE;
 80009fc:	2300      	movs	r3, #0

}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	08002618 	.word	0x08002618
 8000a10:	080023fc 	.word	0x080023fc
 8000a14:	08002404 	.word	0x08002404

08000a18 <init_queue>:

static Queue queue;


void init_queue()
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	//write_usart2((uint8_t*)("<-init_queue->\r\n"));
	queue.writeIndex = 0; // tail, holds next index to write in
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <init_queue+0x24>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	queue.readIndex = 0; // head, holds next index to read from
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <init_queue+0x24>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	queue.accept = GO;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <init_queue+0x24>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	2000047c 	.word	0x2000047c

08000a40 <add_event>:


void add_event(Handler handler)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

	if(queue_isFull()){
 8000a48:	f000 f854 	bl	8000af4 <queue_isFull>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d118      	bne.n	8000a84 <add_event+0x44>
		return;
	}

	queue.eq[queue.writeIndex].handler = handler;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <add_event+0x4c>)
 8000a54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <add_event+0x4c>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if(queue.writeIndex < (QUEUE_SIZE - 1))
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <add_event+0x4c>)
 8000a62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a66:	2b3e      	cmp	r3, #62	; 0x3e
 8000a68:	d807      	bhi.n	8000a7a <add_event+0x3a>
		queue.writeIndex++;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <add_event+0x4c>)
 8000a6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <add_event+0x4c>)
 8000a74:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8000a78:	e005      	b.n	8000a86 <add_event+0x46>
	else
		queue.writeIndex = 0;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <add_event+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000a82:	e000      	b.n	8000a86 <add_event+0x46>
		return;
 8000a84:	bf00      	nop

}
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000047c 	.word	0x2000047c

08000a90 <do_event>:



void *do_event()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	void *res;

	if(queue_isEmpty()){
 8000a96:	f000 f843 	bl	8000b20 <queue_isEmpty>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <do_event+0x14>
		return NULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e020      	b.n	8000ae6 <do_event+0x56>
	}

   res = queue.eq[queue.readIndex].handler();
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <do_event+0x60>)
 8000aa6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <do_event+0x60>)
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	4798      	blx	r3
 8000ab2:	6078      	str	r0, [r7, #4]
   queue.eq[queue.readIndex].handler = NULL; // cleanup
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <do_event+0x60>)
 8000ab6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <do_event+0x60>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


   if(queue.readIndex < (QUEUE_SIZE - 1))
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <do_event+0x60>)
 8000ac4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8000aca:	d807      	bhi.n	8000adc <do_event+0x4c>
      queue.readIndex++;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <do_event+0x60>)
 8000ace:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <do_event+0x60>)
 8000ad6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8000ada:	e003      	b.n	8000ae4 <do_event+0x54>
   else
      queue.readIndex = 0;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <do_event+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

   return res;
 8000ae4:	687b      	ldr	r3, [r7, #4]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000047c 	.word	0x2000047c

08000af4 <queue_isFull>:


BOOL queue_isFull()
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	return (queue.readIndex == ((queue.writeIndex + 1) % QUEUE_SIZE));
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <queue_isFull+0x28>)
 8000afa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <queue_isFull+0x28>)
 8000b00:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b04:	3301      	adds	r3, #1
 8000b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	2000047c 	.word	0x2000047c

08000b20 <queue_isEmpty>:


BOOL queue_isEmpty()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	 return queue.readIndex == queue.writeIndex;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <queue_isEmpty+0x24>)
 8000b26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <queue_isEmpty+0x24>)
 8000b2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b30:	429a      	cmp	r2, r3
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000047c 	.word	0x2000047c

08000b48 <EXTI15_10_IRQHandler>:
}
*/

// Interrupt service routine for user button
void EXTI15_10_IRQHandler(void) //EXTI4_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	EXTI->PR = 0x00002000; //reset flag by writing 1 to bit 13 (reference manual 10.3.6)
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <EXTI15_10_IRQHandler+0x24>)
 8000b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b52:	615a      	str	r2, [r3, #20]
	EXTI->PR |= 0x00000400; //reset flag by writing 1 to bit 10 (reference manual 10.3.6)
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <EXTI15_10_IRQHandler+0x24>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <EXTI15_10_IRQHandler+0x24>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6153      	str	r3, [r2, #20]

	add_event(interrupt_handler);
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <EXTI15_10_IRQHandler+0x28>)
 8000b62:	f7ff ff6d 	bl	8000a40 <add_event>
	//	else
	//	{
	//		GPIOA->ODR &= ~(0x0020);
	//		state=OFF;
	//	}
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010400 	.word	0x40010400
 8000b70:	08000b75 	.word	0x08000b75

08000b74 <interrupt_handler>:

void *interrupt_handler(void){
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <interrupt_handler+0x3c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <interrupt_handler+0x20>
	{
		GPIOA->ODR |= 0x0020;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <interrupt_handler+0x40>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <interrupt_handler+0x40>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <interrupt_handler+0x3c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e008      	b.n	8000ba6 <interrupt_handler+0x32>
	}
	else
	{
		GPIOA->ODR &= ~(0x0020);
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <interrupt_handler+0x40>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <interrupt_handler+0x40>)
 8000b9a:	f023 0320 	bic.w	r3, r3, #32
 8000b9e:	60d3      	str	r3, [r2, #12]
		state=OFF;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <interrupt_handler+0x3c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
	}

	return NULL;
 8000ba6:	2300      	movs	r3, #0

}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000bd0 	.word	0x20000bd0
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4906      	ldr	r1, [pc, #24]	; (8000c34 <__NVIC_EnableIRQ+0x34>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db10      	blt.n	8000c6c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <__NVIC_DisableIRQ+0x40>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	3320      	adds	r3, #32
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0c      	blt.n	8000ca8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_ClearPendingIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	3360      	adds	r3, #96	; 0x60
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <init_sensor_with_interrupt>:
 * This functions intiolizes pin D5
 * to listen for sensors change in mode.
 * If motion is sensed an iterrupt occurs and triggers EXTI4_IRQHandler(void)
 * Inorder to enable sensor, one must call enable_sensor().
 */
void init_sensor_with_interrupt(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0


	/*~~~USING D5 (PB4)~~~*/

	/*Enabla RCC for GPIO Port B*/
	RCC->APB2ENR |= 0x00000008; //enable reset and control clock for port B (see reference manual 8.3.7)
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <init_sensor_with_interrupt+0x7c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <init_sensor_with_interrupt+0x7c>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6193      	str	r3, [r2, #24]

	/*Enable RCC for AFIO (alternative function - interrupt)*/
	RCC->APB2ENR |= 0x00000001; //enable AFIO clk for interrupts (see reference manual 7.3.7 and 9.4)
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <init_sensor_with_interrupt+0x7c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <init_sensor_with_interrupt+0x7c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6193      	str	r3, [r2, #24]

	/*Configure sensor input pin (When motion detected senser pinout switches from low to high*/
	GPIOB->CRL &= 0xFFF0FFFF; //reset CNF and MODE only for bit 4, leave all the rest as they are
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d2e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000d32:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00080000; //PB4 configured to Input with pull-up / pull-down | Input mode (reset state) (see refrence manual 9.2.2)
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d3e:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= 0x00000010; //PB4 configures as pull-up (see reference manual 9.2.4 and Table 20 pg. 161)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <init_sensor_with_interrupt+0x80>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i

	/*Enable external interrupt*/
	__disable_irq();
	//NOTE: EXTICR2 is reachable via the index 1
	AFIO->EXTICR[1] |= 0x00000001; // Allow interupts for line_4 (see reference manual 9.4.4 and pg. 210)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <init_sensor_with_interrupt+0x84>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <init_sensor_with_interrupt+0x84>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= 0x00000010; //Enable iterrupt with mask for port B pin 4 (see reference manual 10.3.1)
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <init_sensor_with_interrupt+0x88>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <init_sensor_with_interrupt+0x88>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= 0x00000010 ; //rising trigger selection register (see reference manual 10.3.3)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <init_sensor_with_interrupt+0x88>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <init_sensor_with_interrupt+0x88>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6093      	str	r3, [r2, #8]
	NVIC_SetPriorityGrouping(7); //?//This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000d72:	2007      	movs	r0, #7
 8000d74:	f7ff ff20 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(EXTI4_IRQn,0); //set all interrupt priotity to zero so that no preemption uccors.
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f7ff ff9c 	bl	8000cb8 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d80:	b662      	cpsie	i
	//NVIC_EnableIRQ(EXTI4_IRQn); //enable handler - enable handler later
	__enable_irq();

	/*~~~______________~~~*/

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40010000 	.word	0x40010000
 8000d94:	40010400 	.word	0x40010400

08000d98 <enable_sensor>:

void enable_sensor(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i

	__disable_irq();
	NVIC_ClearPendingIRQ(EXTI4_IRQn); // clear pending interrupts from before enable
 8000d9e:	200a      	movs	r0, #10
 8000da0:	f7ff ff6c 	bl	8000c7c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn); // enable handler - enable handler later
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff ff2b 	bl	8000c00 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000daa:	b662      	cpsie	i
	__enable_irq();

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <disable_sensor>:

void disable_sensor(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i

	__disable_irq();
	NVIC_DisableIRQ(EXTI4_IRQn); //disable handler
 8000db6:	200a      	movs	r0, #10
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_DisableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dbc:	b662      	cpsie	i
	__enable_irq();

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <EXTI4_IRQHandler>:
	}
}

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <EXTI4_IRQHandler+0x38>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <EXTI4_IRQHandler+0x38>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6153      	str	r3, [r2, #20]
	if(timeout_done_timer3())
 8000dd4:	f000 fa42 	bl	800125c <timeout_done_timer3>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <EXTI4_IRQHandler+0x2e>
	{
		write_usart2((uint8_t*)("\r\nSENSOR_IF\r\n"));//For test
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <EXTI4_IRQHandler+0x3c>)
 8000de0:	f000 fbe0 	bl	80015a4 <write_usart2>
		add_event(alert_Handler);
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <EXTI4_IRQHandler+0x40>)
 8000de6:	f7ff fe2b 	bl	8000a40 <add_event>
		set_timeout_timer3(60); //60 seconds = 1 minute
 8000dea:	203c      	movs	r0, #60	; 0x3c
 8000dec:	f000 fa26 	bl	800123c <set_timeout_timer3>
	else{
		write_usart2((uint8_t*)("\r\nSENSOR_ELSE\r\n"));//For test
	}


}
 8000df0:	e002      	b.n	8000df8 <EXTI4_IRQHandler+0x34>
		write_usart2((uint8_t*)("\r\nSENSOR_ELSE\r\n"));//For test
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <EXTI4_IRQHandler+0x44>)
 8000df4:	f000 fbd6 	bl	80015a4 <write_usart2>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010400 	.word	0x40010400
 8000e00:	080026b8 	.word	0x080026b8
 8000e04:	08000181 	.word	0x08000181
 8000e08:	080026c8 	.word	0x080026c8

08000e0c <main>:
//#include "gpio_signal.h" /*for testing*/
/*FOR TESTING*/


int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	//set_sys_clock_to_32MHz();
	//init_MCO();

	USART2_init(); // for debugging
 8000e10:	f000 fb18 	bl	8001444 <USART2_init>

	init_queue();
 8000e14:	f7ff fe00 	bl	8000a18 <init_queue>
	init_sensor_with_interrupt(); // sensor interrupts are not inabled
 8000e18:	f7ff ff78 	bl	8000d0c <init_sensor_with_interrupt>

	init_timer2(); // for monitoring switch state.
 8000e1c:	f000 f8be 	bl	8000f9c <init_timer2>
	init_timer3(); // for sensor delay
 8000e20:	f000 f8fe 	bl	8001020 <init_timer3>
	init_timer4(); // for ESP8266 timeout
 8000e24:	f000 f938 	bl	8001098 <init_timer4>

	USART1_init(); // for ESP8266
 8000e28:	f000 fb40 	bl	80014ac <USART1_init>


	//init_i2c1();
	write_usart2((uint8_t*)("\r\n_______________\r\n"));//For test
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <main+0x34>)
 8000e2e:	f000 fbb9 	bl	80015a4 <write_usart2>
	//enable_sensor(); // FOR TESTING

	while(1)
	{

		do_event();
 8000e32:	f7ff fe2d 	bl	8000a90 <do_event>
		monitor_switch_state(120); // every 2 minutes
 8000e36:	2078      	movs	r0, #120	; 0x78
 8000e38:	f000 f830 	bl	8000e9c <monitor_switch_state>
		do_event();
 8000e3c:	e7f9      	b.n	8000e32 <main+0x26>
 8000e3e:	bf00      	nop
 8000e40:	080026d8 	.word	0x080026d8

08000e44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x50>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x16>
		heap_end = &end;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <_sbrk+0x50>)
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <_sbrk+0x54>)
 8000e58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_sbrk+0x50>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_sbrk+0x50>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	466a      	mov	r2, sp
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d907      	bls.n	8000e7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e6e:	f000 fe13 	bl	8001a98 <__errno>
 8000e72:	4602      	mov	r2, r0
 8000e74:	230c      	movs	r3, #12
 8000e76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	e006      	b.n	8000e8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_sbrk+0x50>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <_sbrk+0x50>)
 8000e88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000588 	.word	0x20000588
 8000e98:	20000bd8 	.word	0x20000bd8

08000e9c <monitor_switch_state>:
#include "timers.h"
#include "esp8266_Firebase.h"
#include "usart.h"
#include "event_queue.h"

void monitor_switch_state(uint32_t seconds){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	if(timeout_done_timer2()){
 8000ea4:	f000 f9b2 	bl	800120c <timeout_done_timer2>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <monitor_switch_state+0x1e>
		add_event(control_Handler);
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <monitor_switch_state+0x28>)
 8000eb0:	f7ff fdc6 	bl	8000a40 <add_event>
		set_timeout_timer2(seconds);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f999 	bl	80011ec <set_timeout_timer2>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	080001b9 	.word	0x080001b9

08000ec8 <__NVIC_SetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4906      	ldr	r1, [pc, #24]	; (8000f44 <__NVIC_EnableIRQ+0x34>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <init_timer2>:
static TIMER timer3;
static TIMER timer4;


/*init's timer2 to  interrupt once a second when enabled*/
void init_timer2(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <init_timer2+0x7c>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <init_timer2+0x7c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	61d3      	str	r3, [r2, #28]
	//	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8000fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i

	__disable_irq();
	TIM2->DIER |= 0x0001; // Update Interrupt Enable
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= 0x0001; // Update Genaration
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f7ff ff68 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM2_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f7ff ffa4 	bl	8000f48 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn); //enable handler
 8001000:	201c      	movs	r0, #28
 8001002:	f7ff ff85 	bl	8000f10 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001006:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM2->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer2.countTicks = 0;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <init_timer2+0x80>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
	timer2.targetTick = 0;
 800100e:	4b03      	ldr	r3, [pc, #12]	; (800101c <init_timer2+0x80>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	2000058c 	.word	0x2000058c

08001020 <init_timer3>:

/*init's timer3 to  interrupt once a milli second when enabled*/
void init_timer3(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000002; // TIM3EN: TIM3 timer clock enable
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <init_timer3+0x6c>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <init_timer3+0x6c>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	61d3      	str	r3, [r2, #28]
//	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM3 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM3->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <init_timer3+0x70>)
 8001032:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM3 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM3->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <init_timer3+0x70>)
 800103a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <init_timer3+0x70>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <init_timer3+0x70>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i

	__disable_irq();
	TIM3->DIER |= 0x0001; // Update Interrupt Enable
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <init_timer3+0x70>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <init_timer3+0x70>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	60d3      	str	r3, [r2, #12]
	TIM3->EGR |= 0x0001; // Update Genaration
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <init_timer3+0x70>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <init_timer3+0x70>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 8001066:	2007      	movs	r0, #7
 8001068:	f7ff ff2e 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM3_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 800106c:	2100      	movs	r1, #0
 800106e:	201d      	movs	r0, #29
 8001070:	f7ff ff6a 	bl	8000f48 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn); //enable handler
 8001074:	201d      	movs	r0, #29
 8001076:	f7ff ff4b 	bl	8000f10 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800107a:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM3->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM3->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer3.countTicks = 0;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <init_timer3+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	timer3.targetTick = 0;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <init_timer3+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40000400 	.word	0x40000400
 8001094:	20000594 	.word	0x20000594

08001098 <init_timer4>:

/*init's timer4 to  interrupt once a second when enabled*/
void init_timer4(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000004; // TIM4EN: TIM4 timer clock enable
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <init_timer4+0x6c>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <init_timer4+0x6c>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	61d3      	str	r3, [r2, #28]

	/* ARR*PSC=8,000,000 -> 1s */

	/* TIM4 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM4->PSC = 0x07D0; //0x07D0[Hex] = 2000[dec]
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <init_timer4+0x70>)
 80010aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM4 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM4->ARR = 0x0FA0; //0x0FA0[Hex] = 4000[dec]
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <init_timer4+0x70>)
 80010b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CR1 |= 0x0004; // URS- generate an interrupt only in over/under flow
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <init_timer4+0x70>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <init_timer4+0x70>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i

	__disable_irq();
	TIM4->DIER |= 0x0001; // Update Interrupt Enable
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <init_timer4+0x70>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <init_timer4+0x70>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	60d3      	str	r3, [r2, #12]
	TIM4->EGR |= 0x0001; // Update Genaration
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <init_timer4+0x70>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <init_timer4+0x70>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6153      	str	r3, [r2, #20]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 80010de:	2007      	movs	r0, #7
 80010e0:	f7ff fef2 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(TIM4_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 80010e4:	2100      	movs	r1, #0
 80010e6:	201e      	movs	r0, #30
 80010e8:	f7ff ff2e 	bl	8000f48 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn); //enable handler
 80010ec:	201e      	movs	r0, #30
 80010ee:	f7ff ff0f 	bl	8000f10 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80010f2:	b662      	cpsie	i
	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM4->CR1 |= 0x0010; // DIR- counter direction (By default: counting up)
	//TIM4->CR1 |= 0x0001; // CEN: Counter enable (we enabled it in the delay- in order not to trigger an interrupt)

	/*Initialize timer*/
	timer4.countTicks = 0;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <init_timer4+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	timer4.targetTick = 0;
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <init_timer4+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	40000800 	.word	0x40000800
 800110c:	2000059c 	.word	0x2000059c

08001110 <enable_timer2>:


void enable_timer2(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8001114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <enable_timer3>:

void enable_timer3(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	TIM3->CR1 |= 0x0001; // CEN: Counter enable
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <enable_timer3+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <enable_timer3+0x18>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40000400 	.word	0x40000400

08001148 <enable_timer4>:

void enable_timer4(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	TIM4->CR1 |= 0x0001; // CEN: Counter enable
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <enable_timer4+0x18>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <enable_timer4+0x18>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40000800 	.word	0x40000800

08001164 <disable_timer2>:


void disable_timer2(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(0x0001); // CEN: Counter disable
 8001168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <disable_timer3>:

void disable_timer3(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~(0x0001); // CEN: Counter disable
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <disable_timer3+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <disable_timer3+0x18>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40000400 	.word	0x40000400

0800119c <disable_timer4>:

void disable_timer4(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~(0x0001); // CEN: Counter disable
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <disable_timer4+0x18>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a03      	ldr	r2, [pc, #12]	; (80011b4 <disable_timer4+0x18>)
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40000800 	.word	0x40000800

080011b8 <timeout_with_timer4>:
}

/*when the function reaches the timeout, it returns TRUE (=1).
 Else returns false*/
BOOL timeout_with_timer4(uint32_t num_of_sec)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	enable_timer4();
 80011c0:	f7ff ffc2 	bl	8001148 <enable_timer4>

	if(timer4.countTicks >= num_of_sec){
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <timeout_with_timer4+0x30>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d806      	bhi.n	80011dc <timeout_with_timer4+0x24>
		disable_timer4();
 80011ce:	f7ff ffe5 	bl	800119c <disable_timer4>
		timer4.countTicks = 0;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <timeout_with_timer4+0x30>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
		return TRUE;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <timeout_with_timer4+0x26>
	}
	return FALSE;
 80011dc:	2300      	movs	r3, #0

}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000059c 	.word	0x2000059c

080011ec <set_timeout_timer2>:


void set_timeout_timer2(uint32_t num_of_sec)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	timer2.targetTick = num_of_sec;
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <set_timeout_timer2+0x1c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6053      	str	r3, [r2, #4]
	enable_timer2();
 80011fa:	f7ff ff89 	bl	8001110 <enable_timer2>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000058c 	.word	0x2000058c

0800120c <timeout_done_timer2>:

BOOL timeout_done_timer2(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0


	if(timer2.countTicks >= timer2.targetTick){
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <timeout_done_timer2+0x2c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <timeout_done_timer2+0x2c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d309      	bcc.n	8001230 <timeout_done_timer2+0x24>

		disable_timer2();
 800121c:	f7ff ffa2 	bl	8001164 <disable_timer2>
		timer2.countTicks = 0;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <timeout_done_timer2+0x2c>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
		timer2.targetTick = 0; // cleanup
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <timeout_done_timer2+0x2c>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
		return TRUE;
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <timeout_done_timer2+0x26>
	}
	return FALSE;
 8001230:	2300      	movs	r3, #0

}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000058c 	.word	0x2000058c

0800123c <set_timeout_timer3>:

/*This function sets timer3 num_of_sec_timer3 to param num_of_sec, and enables timer3 timeout*/
void set_timeout_timer3(uint32_t num_of_sec)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	timer3.targetTick = num_of_sec;
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <set_timeout_timer3+0x1c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6053      	str	r3, [r2, #4]
	enable_timer3();
 800124a:	f7ff ff6f 	bl	800112c <enable_timer3>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000594 	.word	0x20000594

0800125c <timeout_done_timer3>:

/*returns true if timeout is done, otherwise returns false*/
BOOL timeout_done_timer3(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

	if(timer3.countTicks >= timer3.targetTick){
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <timeout_done_timer3+0x2c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <timeout_done_timer3+0x2c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d309      	bcc.n	8001280 <timeout_done_timer3+0x24>

		disable_timer3();
 800126c:	f7ff ff88 	bl	8001180 <disable_timer3>
		timer3.countTicks = 0;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <timeout_done_timer3+0x2c>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		timer3.targetTick = 0; // cleanup
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <timeout_done_timer3+0x2c>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
		return TRUE;
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <timeout_done_timer3+0x26>
	}
	return FALSE;
 8001280:	2300      	movs	r3, #0

}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000594 	.word	0x20000594

0800128c <TIM2_IRQHandler>:
}



void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	if((TIM2->SR & 0x0001) == 0x0001)
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10c      	bne.n	80012b8 <TIM2_IRQHandler+0x2c>
	{
		TIM2->SR &= ~(0x0001);
 800129e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6113      	str	r3, [r2, #16]
		timer2.countTicks++;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <TIM2_IRQHandler+0x38>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <TIM2_IRQHandler+0x38>)
 80012b6:	6013      	str	r3, [r2, #0]

	}
	write_usart2((uint8_t*)("\r\nTIMER2\r\n"));//For test
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <TIM2_IRQHandler+0x3c>)
 80012ba:	f000 f973 	bl	80015a4 <write_usart2>


}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000058c 	.word	0x2000058c
 80012c8:	080026ec 	.word	0x080026ec

080012cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if((TIM3->SR & 0x0001) == 0x0001)
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <TIM3_IRQHandler+0x30>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10a      	bne.n	80012f2 <TIM3_IRQHandler+0x26>
	{
		TIM3->SR &= ~(0x0001);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <TIM3_IRQHandler+0x30>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <TIM3_IRQHandler+0x30>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6113      	str	r3, [r2, #16]
		timer3.countTicks++;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <TIM3_IRQHandler+0x34>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <TIM3_IRQHandler+0x34>)
 80012f0:	6013      	str	r3, [r2, #0]

	}
	write_usart2((uint8_t*)("\r\nTIMER3\r\n"));//For test
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <TIM3_IRQHandler+0x38>)
 80012f4:	f000 f956 	bl	80015a4 <write_usart2>


}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40000400 	.word	0x40000400
 8001300:	20000594 	.word	0x20000594
 8001304:	080026f8 	.word	0x080026f8

08001308 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if((TIM4->SR & 0x0001) == 0x0001)
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <TIM4_IRQHandler+0x30>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10a      	bne.n	800132e <TIM4_IRQHandler+0x26>
	{
		TIM4->SR &= ~(0x0001);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <TIM4_IRQHandler+0x30>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <TIM4_IRQHandler+0x30>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6113      	str	r3, [r2, #16]
		timer4.countTicks++;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <TIM4_IRQHandler+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <TIM4_IRQHandler+0x34>)
 800132c:	6013      	str	r3, [r2, #0]

	}
	write_usart2((uint8_t*)("\r\nTIMER4\r\n"));//For test
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <TIM4_IRQHandler+0x38>)
 8001330:	f000 f938 	bl	80015a4 <write_usart2>

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40000800 	.word	0x40000800
 800133c:	2000059c 	.word	0x2000059c
 8001340:	08002704 	.word	0x08002704

08001344 <__NVIC_SetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <__NVIC_EnableIRQ+0x34>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <USART1_NEW_LINE_FOUND_get>:


static BOOL USART1_NEW_LINE_FOUND; // This variable flags a new line in USART1 Rx
static BOOL USART1_NEW_LINE_READ;

BOOL USART1_NEW_LINE_FOUND_get(void){
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	return USART1_NEW_LINE_FOUND;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <USART1_NEW_LINE_FOUND_get+0x10>)
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000bbd 	.word	0x20000bbd

0800142c <USART1_NEW_LINE_READ_set>:

void USART1_NEW_LINE_READ_set(void){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	USART1_NEW_LINE_READ = TRUE;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <USART1_NEW_LINE_READ_set+0x14>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000bbe 	.word	0x20000bbe

08001444 <USART2_init>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void USART2_init(){
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <USART2_init+0x5c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <USART2_init+0x5c>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <USART2_init+0x60>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <USART2_init+0x60>)
 800145a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800145e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <USART2_init+0x60>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <USART2_init+0x60>)
 8001466:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800146a:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <USART2_init+0x5c>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <USART2_init+0x5c>)
 8001472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001476:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <USART2_init+0x64>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <USART2_init+0x64>)
 800147e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001482:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <USART2_init+0x64>)
 8001486:	f240 324d 	movw	r2, #845	; 0x34d
 800148a:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <USART2_init+0x64>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <USART2_init+0x64>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40004400 	.word	0x40004400

080014ac <USART1_init>:


/* Usart1 will be use for communication with esp8266. */
void USART1_init(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <USART1_init+0xac>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a28      	ldr	r2, [pc, #160]	; (8001558 <USART1_init+0xac>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]

	/*Configure USART1 Tx (PA9) as Output*/
	GPIOA->CRH &= 0xFFFFFF0F; //Leave all bits as they are except for bit 9 (see RM 9.2.2)
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <USART1_init+0xb0>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <USART1_init+0xb0>)
 80014c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014c6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000A0; //Configure as Alternate function output Push-pull | max speed 2 MHz (See RM 9.2.2 and pg.181).
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <USART1_init+0xb0>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a23      	ldr	r2, [pc, #140]	; (800155c <USART1_init+0xb0>)
 80014ce:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80014d2:	6053      	str	r3, [r2, #4]
	//Maybe this is supposed to be better:
	//GPIOA->CRH |= 0x000000B0; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.2)

	/*Configure USART1 Rx (PA10) as Input*/
	GPIOA->CRH &= 0xFFFFF0FF; //Leave all bits as they are except for bit 10 (see RM 9.2.2)
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <USART1_init+0xb0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a20      	ldr	r2, [pc, #128]	; (800155c <USART1_init+0xb0>)
 80014da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014de:	6053      	str	r3, [r2, #4]
	//For Input Pull-Up (See RM pg.167)
	GPIOA->CRH |= 0x00000800; //Configure as input with pull up/pull down (See RM 9.2.2).
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <USART1_init+0xb0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <USART1_init+0xb0>)
 80014e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ea:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= 0x00000400;//(See RM pg.161 and 9.2.4)
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <USART1_init+0xb0>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <USART1_init+0xb0>)
 80014f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f6:	60d3      	str	r3, [r2, #12]
	//For floating input (See RM pg.167)
	//GPIOA->CRH |= 0x00000400; //Configure as floating input (See RM 9.2.2)- might be better?


	/*Enable RCC for USART1*/
	RCC->APB2ENR |= 0x00004000; // (See RM 8.3.7)
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <USART1_init+0xac>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <USART1_init+0xac>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001502:	6193      	str	r3, [r2, #24]
	/*Enable RCC for Alternate funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //Is this line needed?? NO

	/*Following directions RM pg.792 (Setting Tx procesure)*/
	/*Following directions RM pg.795 (Setting Rx procesure) */
	USART1->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <USART1_init+0xb4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <USART1_init+0xb4>)
 800150a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800150e:	60d3      	str	r3, [r2, #12]
	//USART1->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART1->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)


	/*Set Baude Rate for USART1 115200 (The optimal buadrate for AT COMMANDS)*/
	USART1->BRR = 0x45; // 115200 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree) //We think that USART1&USART2 use the same clock (HSI)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <USART1_init+0xb4>)
 8001512:	2245      	movs	r2, #69	; 0x45
 8001514:	609a      	str	r2, [r3, #8]


	/*Enable Tx*/
	USART1->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <USART1_init+0xb4>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <USART1_init+0xb4>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	60d3      	str	r3, [r2, #12]


	/*Enable USART Receive*/
	USART1->CR1 |= 0x00000004;// Set the RE bit in USART_CR1 to enable USART Receive  (see RM 27.6.4)
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <USART1_init+0xb4>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <USART1_init+0xb4>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800152e:	b672      	cpsid	i


	/*Enable USART Receive Interrupt*/
	 __disable_irq();
	USART1->CR1 |= 0x00000020; // Set RXNEIE to enable Rx interrupt(see RM 27.6.4)
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <USART1_init+0xb4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <USART1_init+0xb4>)
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriorityGrouping(7); //This should disable interrupt nesting(priority wont be not allowed)//->MABY IT'S THE DEFAULT
 800153c:	2007      	movs	r0, #7
 800153e:	f7ff ff01 	bl	8001344 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(USART1_IRQn,0); //set all interrupt priority to zero so that no preemption occurs.//->MABY IT'S THE DEFAULT
 8001542:	2100      	movs	r1, #0
 8001544:	2025      	movs	r0, #37	; 0x25
 8001546:	f7ff ff3d 	bl	80013c4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn); //enable handler
 800154a:	2025      	movs	r0, #37	; 0x25
 800154c:	f7ff ff1e 	bl	800138c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001550:	b662      	cpsie	i
	__enable_irq();

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40010800 	.word	0x40010800
 8001560:	40013800 	.word	0x40013800

08001564 <set_usart2_buffer_Tx>:


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 800156c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001570:	2100      	movs	r1, #0
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <set_usart2_buffer_Tx+0x3c>)
 8001574:	f000 fac5 	bl	8001b02 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4809      	ldr	r0, [pc, #36]	; (80015a0 <set_usart2_buffer_Tx+0x3c>)
 800157c:	f000 faea 	bl	8001b54 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe fdf5 	bl	8000170 <strlen>
 8001586:	4602      	mov	r2, r0
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <set_usart2_buffer_Tx+0x3c>)
 800158a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <set_usart2_buffer_Tx+0x3c>)
 8001590:	2200      	movs	r2, #0
 8001592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200005a4 	.word	0x200005a4

080015a4 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffd9 	bl	8001564 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 80015b2:	e014      	b.n	80015de <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 80015b4:	bf00      	nop
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <write_usart2+0x70>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f9      	beq.n	80015b6 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <write_usart2+0x74>)
 80015c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015c8:	4a13      	ldr	r2, [pc, #76]	; (8001618 <write_usart2+0x74>)
 80015ca:	5cd2      	ldrb	r2, [r2, r3]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <write_usart2+0x70>)
 80015ce:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <write_usart2+0x74>)
 80015d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <write_usart2+0x74>)
 80015da:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <write_usart2+0x74>)
 80015e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <write_usart2+0x74>)
 80015e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3e2      	bcc.n	80015b4 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80015ee:	bf00      	nop
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <write_usart2+0x70>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f8:	2b40      	cmp	r3, #64	; 0x40
 80015fa:	d1f9      	bne.n	80015f0 <write_usart2+0x4c>
	usart2.write_index = 0;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <write_usart2+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <write_usart2+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	200005a4 	.word	0x200005a4

0800161c <USART2_write_line>:


void USART2_write_line(uint8_t *start, uint8_t *end){
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]

	// Set buffer Tx
	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	2100      	movs	r1, #0
 800162c:	4833      	ldr	r0, [pc, #204]	; (80016fc <USART2_write_line+0xe0>)
 800162e:	f000 fa68 	bl	8001b02 <memset>
	if((BUFF_SIZE - (end - start) + 1) < 0){
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800163c:	3301      	adds	r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	da0c      	bge.n	800165c <USART2_write_line+0x40>
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <USART2_write_line+0xe0>)
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <USART2_write_line+0xe4>)
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	682b      	ldr	r3, [r5, #0]
 8001650:	6023      	str	r3, [r4, #0]
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <USART2_write_line+0xe0>)
 8001654:	2213      	movs	r2, #19
 8001656:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800165a:	e01a      	b.n	8001692 <USART2_write_line+0x76>
	}
	else{
		uint32_t i = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
		usart2.Tx_len = end - start;
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <USART2_write_line+0xe0>)
 800166a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(start < end){
 800166e:	e00c      	b.n	800168a <USART2_write_line+0x6e>
			usart2.Tx[i] = *start;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7819      	ldrb	r1, [r3, #0]
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <USART2_write_line+0xe0>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	460a      	mov	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
			start++;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3301      	adds	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
			i++;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3301      	adds	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
		while(start < end){
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3ee      	bcc.n	8001670 <USART2_write_line+0x54>
		}

	}

	// Write to screen
	usart2.write_index = 0;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <USART2_write_line+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	while(usart2.write_index < usart2.Tx_len)
 800169a:	e014      	b.n	80016c6 <USART2_write_line+0xaa>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 800169c:	bf00      	nop
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <USART2_write_line+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f9      	beq.n	800169e <USART2_write_line+0x82>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <USART2_write_line+0xe0>)
 80016ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <USART2_write_line+0xe0>)
 80016b2:	5cd2      	ldrb	r2, [r2, r3]
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <USART2_write_line+0xe8>)
 80016b6:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <USART2_write_line+0xe0>)
 80016ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016be:	3301      	adds	r3, #1
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <USART2_write_line+0xe0>)
 80016c2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <USART2_write_line+0xe0>)
 80016c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <USART2_write_line+0xe0>)
 80016ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3e2      	bcc.n	800169c <USART2_write_line+0x80>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 80016d6:	bf00      	nop
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <USART2_write_line+0xe8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d1f9      	bne.n	80016d8 <USART2_write_line+0xbc>
	usart2.write_index = 0;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <USART2_write_line+0xe0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <USART2_write_line+0xe0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdb0      	pop	{r4, r5, r7, pc}
 80016fc:	200005a4 	.word	0x200005a4
 8001700:	08002710 	.word	0x08002710
 8001704:	40004400 	.word	0x40004400

08001708 <write_usart1>:


/*USART1 write function with no interrupt.*/
void write_usart1(uint8_t *command){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]


	/*Set usart1_buffer_Tx with command*/
	set_usart1_buffer_Tx(command);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f841 	bl	8001798 <set_usart1_buffer_Tx>

	/*Prepare buffer Rx for response*/
	set_usart1_buffer_Rx();
 8001716:	f000 f85f 	bl	80017d8 <set_usart1_buffer_Rx>

	// set initial values to Rx interrupt flags
	USART1_NEW_LINE_FOUND = FALSE;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <write_usart1+0x80>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
	USART1_NEW_LINE_READ = TRUE;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <write_usart1+0x84>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]

	/*Send command*/
	while(usart1.write_index < usart1.Tx_len)
 8001726:	e014      	b.n	8001752 <write_usart1+0x4a>
	{
		while(((USART1->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8001728:	bf00      	nop
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <write_usart1+0x88>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f9      	beq.n	800172a <write_usart1+0x22>
		USART1->DR = (uint8_t)(usart1.Tx[usart1.write_index] & 0xFF); //send data (see RM 27.6.2)
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <write_usart1+0x8c>)
 8001738:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <write_usart1+0x8c>)
 800173e:	5cd2      	ldrb	r2, [r2, r3]
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <write_usart1+0x88>)
 8001742:	605a      	str	r2, [r3, #4]
		usart1.write_index++;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <write_usart1+0x8c>)
 8001746:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800174a:	3301      	adds	r3, #1
 800174c:	4a11      	ldr	r2, [pc, #68]	; (8001794 <write_usart1+0x8c>)
 800174e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
	while(usart1.write_index < usart1.Tx_len)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <write_usart1+0x8c>)
 8001754:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <write_usart1+0x8c>)
 800175a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800175e:	429a      	cmp	r2, r3
 8001760:	d3e2      	bcc.n	8001728 <write_usart1+0x20>
	}
	while(((USART1->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 8001762:	bf00      	nop
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <write_usart1+0x88>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d1f9      	bne.n	8001764 <write_usart1+0x5c>
	usart1.write_index = 0;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <write_usart1+0x8c>)
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	usart1.Tx_len = 0;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <write_usart1+0x8c>)
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000bbd 	.word	0x20000bbd
 800178c:	20000bbe 	.word	0x20000bbe
 8001790:	40013800 	.word	0x40013800
 8001794:	200007ac 	.word	0x200007ac

08001798 <set_usart1_buffer_Tx>:


void set_usart1_buffer_Tx(uint8_t *command){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

	/*Write command into usart1_buffer_Tx*/
	memset(usart1.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	2100      	movs	r1, #0
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <set_usart1_buffer_Tx+0x3c>)
 80017a8:	f000 f9ab 	bl	8001b02 <memset>
	if((BUFF_SIZE - strlen((char*)command) + 1) < 0){
		strcpy((char*)usart1.Tx,"Error command to Long\r\n");
		usart1.Tx_len = strlen((char*)"Error command to Long\r\n");
	}
	else{
		strcpy((char*)usart1.Tx,(char*)command);
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <set_usart1_buffer_Tx+0x3c>)
 80017b0:	f000 f9d0 	bl	8001b54 <strcpy>
		usart1.Tx_len = strlen((char*)command);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7fe fcdb 	bl	8000170 <strlen>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <set_usart1_buffer_Tx+0x3c>)
 80017be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	}
	usart1.write_index = 0;
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <set_usart1_buffer_Tx+0x3c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200007ac 	.word	0x200007ac

080017d8 <set_usart1_buffer_Rx>:


/*This function inits Rx buffer variables - should be called in init_usart1*/
void set_usart1_buffer_Rx(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	memset(usart1.Rx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	2100      	movs	r1, #0
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <set_usart1_buffer_Rx+0x30>)
 80017e4:	f000 f98d 	bl	8001b02 <memset>
	usart1.Rx_len = 0;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <set_usart1_buffer_Rx+0x34>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	usart1.read_index = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <set_usart1_buffer_Rx+0x34>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	// FOR DEBUGGING SEARCH BUFFER RX //
	START = usart1.Rx;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <set_usart1_buffer_Rx+0x38>)
 80017fa:	4a03      	ldr	r2, [pc, #12]	; (8001808 <set_usart1_buffer_Rx+0x30>)
 80017fc:	601a      	str	r2, [r3, #0]
	END = usart1.Rx;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <set_usart1_buffer_Rx+0x3c>)
 8001800:	4a01      	ldr	r2, [pc, #4]	; (8001808 <set_usart1_buffer_Rx+0x30>)
 8001802:	601a      	str	r2, [r3, #0]

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200009ac 	.word	0x200009ac
 800180c:	200007ac 	.word	0x200007ac
 8001810:	20000bc0 	.word	0x20000bc0
 8001814:	20000bc4 	.word	0x20000bc4

08001818 <USART1_search_buffer_Rx>:

/*This function returns 3 values type STATE - defined by common.h:
 * PASS - when pass param is found.
 * FAIL - when fail param is found.
 * STANDBY - when neither pass param or fail param are found.*/
STATE USART1_search_buffer_Rx(uint8_t *pass, uint8_t *fail){
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <USART1_search_buffer_Rx+0x9c>)
 8001824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001828:	3301      	adds	r3, #1
 800182a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182e:	d236      	bcs.n	800189e <USART1_search_buffer_Rx+0x86>

		START = END;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <USART1_search_buffer_Rx+0xa0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <USART1_search_buffer_Rx+0xa4>)
 8001836:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <USART1_search_buffer_Rx+0x9c>)
 800183a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <USART1_search_buffer_Rx+0xa8>)
 8001840:	4413      	add	r3, r2
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <USART1_search_buffer_Rx+0xa0>)
 8001844:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)pass)){
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <USART1_search_buffer_Rx+0xa8>)
 800184a:	f000 f98b 	bl	8001b64 <strstr>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <USART1_search_buffer_Rx+0x50>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <USART1_search_buffer_Rx+0xa4>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <USART1_search_buffer_Rx+0xa0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff fedc 	bl	800161c <USART2_write_line>
			return (uint32_t)PASS;
 8001864:	2300      	movs	r3, #0
 8001866:	e021      	b.n	80018ac <USART1_search_buffer_Rx+0x94>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)fail)){
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <USART1_search_buffer_Rx+0xa8>)
 800186c:	f000 f97a 	bl	8001b64 <strstr>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <USART1_search_buffer_Rx+0x72>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <USART1_search_buffer_Rx+0xa4>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <USART1_search_buffer_Rx+0xa0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fecb 	bl	800161c <USART2_write_line>
			return (uint32_t)FAIL;
 8001886:	2302      	movs	r3, #2
 8001888:	e010      	b.n	80018ac <USART1_search_buffer_Rx+0x94>
		}
		else{
			USART2_write_line((uint8_t*)START, (uint8_t*)END); // write response to screen
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <USART1_search_buffer_Rx+0xa4>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <USART1_search_buffer_Rx+0xa0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f7ff fec1 	bl	800161c <USART2_write_line>
			return (uint32_t)STANDBY;
 800189a:	2301      	movs	r3, #1
 800189c:	e006      	b.n	80018ac <USART1_search_buffer_Rx+0x94>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end?*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <USART1_search_buffer_Rx+0xac>)
 80018a0:	f7ff fe80 	bl	80015a4 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <USART1_search_buffer_Rx+0xa8>)
 80018a6:	f7ff fe7d 	bl	80015a4 <write_usart2>
		return (uint32_t)FAIL;
 80018aa:	2302      	movs	r3, #2
	}

}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200007ac 	.word	0x200007ac
 80018b8:	20000bc4 	.word	0x20000bc4
 80018bc:	20000bc0 	.word	0x20000bc0
 80018c0:	200009ac 	.word	0x200009ac
 80018c4:	08002724 	.word	0x08002724

080018c8 <USART1_check_state_buffer_Rx>:


/*this function searches USART1 buffer Rx for on or off, to be used
 * in esp8266_Firebase.c in searchSwitchState() -> parseResponse.
 * This function does NOT clean buffer*/
SWITCH_STATE USART1_check_state_buffer_Rx(uint8_t *on, uint8_t *off,uint8_t *no_path){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]

	/*!TODO:need to check that usart1.Rx buffer wasn't overflow*/
	if((usart1.Rx_len + 1) < BUFF_SIZE){
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <USART1_check_state_buffer_Rx+0xb8>)
 80018d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018da:	3301      	adds	r3, #1
 80018dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e0:	d242      	bcs.n	8001968 <USART1_check_state_buffer_Rx+0xa0>

		START = END;
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <USART1_check_state_buffer_Rx+0xbc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a28      	ldr	r2, [pc, #160]	; (8001988 <USART1_check_state_buffer_Rx+0xc0>)
 80018e8:	6013      	str	r3, [r2, #0]
		END = usart1.Rx + usart1.Rx_len;
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <USART1_check_state_buffer_Rx+0xb8>)
 80018ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 80018f2:	4413      	add	r3, r2
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <USART1_check_state_buffer_Rx+0xbc>)
 80018f6:	6013      	str	r3, [r2, #0]

		if(strstr((const char*)usart1.Rx , (const char*)on)){
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	4824      	ldr	r0, [pc, #144]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 80018fc:	f000 f932 	bl	8001b64 <strstr>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <USART1_check_state_buffer_Rx+0x52>
			USART2_write_line((uint8_t*)START, (uint8_t*)END); //write response to screen
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <USART1_check_state_buffer_Rx+0xc0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <USART1_check_state_buffer_Rx+0xbc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f7ff fe83 	bl	800161c <USART2_write_line>
			return (uint32_t)ON;
 8001916:	2301      	movs	r3, #1
 8001918:	e02d      	b.n	8001976 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)off)){
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	481b      	ldr	r0, [pc, #108]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 800191e:	f000 f921 	bl	8001b64 <strstr>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <USART1_check_state_buffer_Rx+0x74>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <USART1_check_state_buffer_Rx+0xc0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <USART1_check_state_buffer_Rx+0xbc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f7ff fe72 	bl	800161c <USART2_write_line>
			return (uint32_t)OFF;
 8001938:	2300      	movs	r3, #0
 800193a:	e01c      	b.n	8001976 <USART1_check_state_buffer_Rx+0xae>
		}
		else if(strstr((const char*)usart1.Rx , (const char*)no_path)){
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 8001940:	f000 f910 	bl	8001b64 <strstr>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <USART1_check_state_buffer_Rx+0x96>
			USART2_write_line((uint8_t*)START, (uint8_t*)END);  //write response to screen
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <USART1_check_state_buffer_Rx+0xc0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <USART1_check_state_buffer_Rx+0xbc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f7ff fe61 	bl	800161c <USART2_write_line>
			return (uint32_t)NO_PATH;
 800195a:	2302      	movs	r3, #2
 800195c:	e00b      	b.n	8001976 <USART1_check_state_buffer_Rx+0xae>
		}
		else{
			write_usart2((uint8_t*)usart1.Rx);//for debuging
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 8001960:	f7ff fe20 	bl	80015a4 <write_usart2>
			return (uint32_t)NON;
 8001964:	2303      	movs	r3, #3
 8001966:	e006      	b.n	8001976 <USART1_check_state_buffer_Rx+0xae>

	}

	else{
		/*!TODO: when usart1.Rx buffer is overflown start check from end??*/
		write_usart2((uint8_t*)"\r\nBUFFER_OVERFLOW::RX BUFFER CONTENT\r\n");
 8001968:	4809      	ldr	r0, [pc, #36]	; (8001990 <USART1_check_state_buffer_Rx+0xc8>)
 800196a:	f7ff fe1b 	bl	80015a4 <write_usart2>
		write_usart2((uint8_t*)usart1.Rx);
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <USART1_check_state_buffer_Rx+0xc4>)
 8001970:	f7ff fe18 	bl	80015a4 <write_usart2>
		return (uint32_t)NO_PATH;
 8001974:	2302      	movs	r3, #2
	}

}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200007ac 	.word	0x200007ac
 8001984:	20000bc4 	.word	0x20000bc4
 8001988:	20000bc0 	.word	0x20000bc0
 800198c:	200009ac 	.word	0x200009ac
 8001990:	08002724 	.word	0x08002724

08001994 <USART1_IRQHandler>:

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <USART1_IRQHandler+0x9c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d141      	bne.n	8001a28 <USART1_IRQHandler+0x94>

		c = USART1->DR; // clear RXNE bit
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <USART1_IRQHandler+0x9c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <USART1_IRQHandler+0xa0>)
 80019ac:	701a      	strb	r2, [r3, #0]
		if((usart1.read_index + 1) >= BUFF_SIZE){
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019b4:	3301      	adds	r3, #1
 80019b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ba:	d303      	bcc.n	80019c4 <USART1_IRQHandler+0x30>
			usart1.read_index = 0;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019ca:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <USART1_IRQHandler+0xa0>)
 80019cc:	7811      	ldrb	r1, [r2, #0]
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019d0:	4413      	add	r3, r2
 80019d2:	460a      	mov	r2, r1
 80019d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		usart1.read_index++;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019de:	3301      	adds	r3, #1
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019e2:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++; // count total chars received
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80019ec:	3301      	adds	r3, #1
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <USART1_IRQHandler+0xa4>)
 80019f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

		if(c == (uint8_t)'\n' && USART1_NEW_LINE_READ){
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <USART1_IRQHandler+0xa0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d10a      	bne.n	8001a12 <USART1_IRQHandler+0x7e>
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <USART1_IRQHandler+0xa8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <USART1_IRQHandler+0x7e>
			USART1_NEW_LINE_FOUND = TRUE;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <USART1_IRQHandler+0xac>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
			USART1_NEW_LINE_READ = FALSE;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <USART1_IRQHandler+0xa8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]


	}


}
 8001a10:	e00a      	b.n	8001a28 <USART1_IRQHandler+0x94>
		else if(c != (uint8_t)'\n' && USART1_NEW_LINE_READ){
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <USART1_IRQHandler+0xa0>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d006      	beq.n	8001a28 <USART1_IRQHandler+0x94>
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <USART1_IRQHandler+0xa8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <USART1_IRQHandler+0x94>
			USART1_NEW_LINE_FOUND = FALSE;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <USART1_IRQHandler+0xac>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40013800 	.word	0x40013800
 8001a34:	20000bbc 	.word	0x20000bbc
 8001a38:	200007ac 	.word	0x200007ac
 8001a3c:	20000bbe 	.word	0x20000bbe
 8001a40:	20000bbd 	.word	0x20000bbd

08001a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <LoopForever+0xe>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a60:	4c0b      	ldr	r4, [pc, #44]	; (8001a90 <LoopForever+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a6e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001a72:	f000 f817 	bl	8001aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7ff f9c9 	bl	8000e0c <main>

08001a7a <LoopForever>:

LoopForever:
    b LoopForever
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
  ldr   r0, =_estack
 8001a7c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001a88:	08002788 	.word	0x08002788
  ldr r2, =_sbss
 8001a8c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001a90:	20000bd8 	.word	0x20000bd8

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <__errno>:
 8001a98:	4b01      	ldr	r3, [pc, #4]	; (8001aa0 <__errno+0x8>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000070 	.word	0x20000070

08001aa4 <__libc_init_array>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	4e0c      	ldr	r6, [pc, #48]	; (8001adc <__libc_init_array+0x38>)
 8001aaa:	4c0d      	ldr	r4, [pc, #52]	; (8001ae0 <__libc_init_array+0x3c>)
 8001aac:	1ba4      	subs	r4, r4, r6
 8001aae:	10a4      	asrs	r4, r4, #2
 8001ab0:	42a5      	cmp	r5, r4
 8001ab2:	d109      	bne.n	8001ac8 <__libc_init_array+0x24>
 8001ab4:	f000 fc58 	bl	8002368 <_init>
 8001ab8:	2500      	movs	r5, #0
 8001aba:	4e0a      	ldr	r6, [pc, #40]	; (8001ae4 <__libc_init_array+0x40>)
 8001abc:	4c0a      	ldr	r4, [pc, #40]	; (8001ae8 <__libc_init_array+0x44>)
 8001abe:	1ba4      	subs	r4, r4, r6
 8001ac0:	10a4      	asrs	r4, r4, #2
 8001ac2:	42a5      	cmp	r5, r4
 8001ac4:	d105      	bne.n	8001ad2 <__libc_init_array+0x2e>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001acc:	4798      	blx	r3
 8001ace:	3501      	adds	r5, #1
 8001ad0:	e7ee      	b.n	8001ab0 <__libc_init_array+0xc>
 8001ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ad6:	4798      	blx	r3
 8001ad8:	3501      	adds	r5, #1
 8001ada:	e7f2      	b.n	8001ac2 <__libc_init_array+0x1e>
 8001adc:	08002780 	.word	0x08002780
 8001ae0:	08002780 	.word	0x08002780
 8001ae4:	08002780 	.word	0x08002780
 8001ae8:	08002784 	.word	0x08002784

08001aec <memcpy>:
 8001aec:	b510      	push	{r4, lr}
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	440a      	add	r2, r1
 8001af2:	4291      	cmp	r1, r2
 8001af4:	d100      	bne.n	8001af8 <memcpy+0xc>
 8001af6:	bd10      	pop	{r4, pc}
 8001af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b00:	e7f7      	b.n	8001af2 <memcpy+0x6>

08001b02 <memset>:
 8001b02:	4603      	mov	r3, r0
 8001b04:	4402      	add	r2, r0
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d100      	bne.n	8001b0c <memset+0xa>
 8001b0a:	4770      	bx	lr
 8001b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8001b10:	e7f9      	b.n	8001b06 <memset+0x4>
	...

08001b14 <siprintf>:
 8001b14:	b40e      	push	{r1, r2, r3}
 8001b16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b1a:	b500      	push	{lr}
 8001b1c:	b09c      	sub	sp, #112	; 0x70
 8001b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8001b20:	9002      	str	r0, [sp, #8]
 8001b22:	9006      	str	r0, [sp, #24]
 8001b24:	9107      	str	r1, [sp, #28]
 8001b26:	9104      	str	r1, [sp, #16]
 8001b28:	4808      	ldr	r0, [pc, #32]	; (8001b4c <siprintf+0x38>)
 8001b2a:	4909      	ldr	r1, [pc, #36]	; (8001b50 <siprintf+0x3c>)
 8001b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b30:	9105      	str	r1, [sp, #20]
 8001b32:	6800      	ldr	r0, [r0, #0]
 8001b34:	a902      	add	r1, sp, #8
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	f000 f888 	bl	8001c4c <_svfiprintf_r>
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	9b02      	ldr	r3, [sp, #8]
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	b01c      	add	sp, #112	; 0x70
 8001b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b48:	b003      	add	sp, #12
 8001b4a:	4770      	bx	lr
 8001b4c:	20000070 	.word	0x20000070
 8001b50:	ffff0208 	.word	0xffff0208

08001b54 <strcpy>:
 8001b54:	4603      	mov	r3, r0
 8001b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b5a:	f803 2b01 	strb.w	r2, [r3], #1
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d1f9      	bne.n	8001b56 <strcpy+0x2>
 8001b62:	4770      	bx	lr

08001b64 <strstr>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	7803      	ldrb	r3, [r0, #0]
 8001b68:	b17b      	cbz	r3, 8001b8a <strstr+0x26>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	7823      	ldrb	r3, [r4, #0]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	1c66      	adds	r6, r4, #1
 8001b72:	b17b      	cbz	r3, 8001b94 <strstr+0x30>
 8001b74:	1e4a      	subs	r2, r1, #1
 8001b76:	1e63      	subs	r3, r4, #1
 8001b78:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001b7c:	b14d      	cbz	r5, 8001b92 <strstr+0x2e>
 8001b7e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001b82:	4634      	mov	r4, r6
 8001b84:	42af      	cmp	r7, r5
 8001b86:	d0f7      	beq.n	8001b78 <strstr+0x14>
 8001b88:	e7f0      	b.n	8001b6c <strstr+0x8>
 8001b8a:	780b      	ldrb	r3, [r1, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf18      	it	ne
 8001b90:	2000      	movne	r0, #0
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b94:	4618      	mov	r0, r3
 8001b96:	e7fc      	b.n	8001b92 <strstr+0x2e>

08001b98 <__ssputs_r>:
 8001b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b9c:	688e      	ldr	r6, [r1, #8]
 8001b9e:	4682      	mov	sl, r0
 8001ba0:	429e      	cmp	r6, r3
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	d837      	bhi.n	8001c1a <__ssputs_r+0x82>
 8001baa:	898a      	ldrh	r2, [r1, #12]
 8001bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bb0:	d031      	beq.n	8001c16 <__ssputs_r+0x7e>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	6825      	ldr	r5, [r4, #0]
 8001bb6:	6909      	ldr	r1, [r1, #16]
 8001bb8:	1a6f      	subs	r7, r5, r1
 8001bba:	6965      	ldr	r5, [r4, #20]
 8001bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8001bc4:	f109 0301 	add.w	r3, r9, #1
 8001bc8:	443b      	add	r3, r7
 8001bca:	429d      	cmp	r5, r3
 8001bcc:	bf38      	it	cc
 8001bce:	461d      	movcc	r5, r3
 8001bd0:	0553      	lsls	r3, r2, #21
 8001bd2:	d530      	bpl.n	8001c36 <__ssputs_r+0x9e>
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f000 fb2d 	bl	8002234 <_malloc_r>
 8001bda:	4606      	mov	r6, r0
 8001bdc:	b950      	cbnz	r0, 8001bf4 <__ssputs_r+0x5c>
 8001bde:	230c      	movs	r3, #12
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f8ca 3000 	str.w	r3, [sl]
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bf4:	463a      	mov	r2, r7
 8001bf6:	6921      	ldr	r1, [r4, #16]
 8001bf8:	f7ff ff78 	bl	8001aec <memcpy>
 8001bfc:	89a3      	ldrh	r3, [r4, #12]
 8001bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c06:	81a3      	strh	r3, [r4, #12]
 8001c08:	6126      	str	r6, [r4, #16]
 8001c0a:	443e      	add	r6, r7
 8001c0c:	6026      	str	r6, [r4, #0]
 8001c0e:	464e      	mov	r6, r9
 8001c10:	6165      	str	r5, [r4, #20]
 8001c12:	1bed      	subs	r5, r5, r7
 8001c14:	60a5      	str	r5, [r4, #8]
 8001c16:	454e      	cmp	r6, r9
 8001c18:	d900      	bls.n	8001c1c <__ssputs_r+0x84>
 8001c1a:	464e      	mov	r6, r9
 8001c1c:	4632      	mov	r2, r6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	f000 faa1 	bl	8002168 <memmove>
 8001c26:	68a3      	ldr	r3, [r4, #8]
 8001c28:	2000      	movs	r0, #0
 8001c2a:	1b9b      	subs	r3, r3, r6
 8001c2c:	60a3      	str	r3, [r4, #8]
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	441e      	add	r6, r3
 8001c32:	6026      	str	r6, [r4, #0]
 8001c34:	e7dc      	b.n	8001bf0 <__ssputs_r+0x58>
 8001c36:	462a      	mov	r2, r5
 8001c38:	f000 fb56 	bl	80022e8 <_realloc_r>
 8001c3c:	4606      	mov	r6, r0
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d1e2      	bne.n	8001c08 <__ssputs_r+0x70>
 8001c42:	6921      	ldr	r1, [r4, #16]
 8001c44:	4650      	mov	r0, sl
 8001c46:	f000 faa9 	bl	800219c <_free_r>
 8001c4a:	e7c8      	b.n	8001bde <__ssputs_r+0x46>

08001c4c <_svfiprintf_r>:
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	461d      	mov	r5, r3
 8001c52:	898b      	ldrh	r3, [r1, #12]
 8001c54:	b09d      	sub	sp, #116	; 0x74
 8001c56:	061f      	lsls	r7, r3, #24
 8001c58:	4680      	mov	r8, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	4616      	mov	r6, r2
 8001c5e:	d50f      	bpl.n	8001c80 <_svfiprintf_r+0x34>
 8001c60:	690b      	ldr	r3, [r1, #16]
 8001c62:	b96b      	cbnz	r3, 8001c80 <_svfiprintf_r+0x34>
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	f000 fae5 	bl	8002234 <_malloc_r>
 8001c6a:	6020      	str	r0, [r4, #0]
 8001c6c:	6120      	str	r0, [r4, #16]
 8001c6e:	b928      	cbnz	r0, 8001c7c <_svfiprintf_r+0x30>
 8001c70:	230c      	movs	r3, #12
 8001c72:	f8c8 3000 	str.w	r3, [r8]
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7a:	e0c8      	b.n	8001e0e <_svfiprintf_r+0x1c2>
 8001c7c:	2340      	movs	r3, #64	; 0x40
 8001c7e:	6163      	str	r3, [r4, #20]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9309      	str	r3, [sp, #36]	; 0x24
 8001c84:	2320      	movs	r3, #32
 8001c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c8a:	2330      	movs	r3, #48	; 0x30
 8001c8c:	f04f 0b01 	mov.w	fp, #1
 8001c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c94:	9503      	str	r5, [sp, #12]
 8001c96:	4637      	mov	r7, r6
 8001c98:	463d      	mov	r5, r7
 8001c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c9e:	b10b      	cbz	r3, 8001ca4 <_svfiprintf_r+0x58>
 8001ca0:	2b25      	cmp	r3, #37	; 0x25
 8001ca2:	d13e      	bne.n	8001d22 <_svfiprintf_r+0xd6>
 8001ca4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ca8:	d00b      	beq.n	8001cc2 <_svfiprintf_r+0x76>
 8001caa:	4653      	mov	r3, sl
 8001cac:	4632      	mov	r2, r6
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	f7ff ff71 	bl	8001b98 <__ssputs_r>
 8001cb6:	3001      	adds	r0, #1
 8001cb8:	f000 80a4 	beq.w	8001e04 <_svfiprintf_r+0x1b8>
 8001cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cbe:	4453      	add	r3, sl
 8001cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8001cc2:	783b      	ldrb	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 809d 	beq.w	8001e04 <_svfiprintf_r+0x1b8>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cd4:	9304      	str	r3, [sp, #16]
 8001cd6:	9307      	str	r3, [sp, #28]
 8001cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8001cde:	462f      	mov	r7, r5
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001ce6:	4850      	ldr	r0, [pc, #320]	; (8001e28 <_svfiprintf_r+0x1dc>)
 8001ce8:	f000 fa30 	bl	800214c <memchr>
 8001cec:	9b04      	ldr	r3, [sp, #16]
 8001cee:	b9d0      	cbnz	r0, 8001d26 <_svfiprintf_r+0xda>
 8001cf0:	06d9      	lsls	r1, r3, #27
 8001cf2:	bf44      	itt	mi
 8001cf4:	2220      	movmi	r2, #32
 8001cf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001cfa:	071a      	lsls	r2, r3, #28
 8001cfc:	bf44      	itt	mi
 8001cfe:	222b      	movmi	r2, #43	; 0x2b
 8001d00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d04:	782a      	ldrb	r2, [r5, #0]
 8001d06:	2a2a      	cmp	r2, #42	; 0x2a
 8001d08:	d015      	beq.n	8001d36 <_svfiprintf_r+0xea>
 8001d0a:	462f      	mov	r7, r5
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	250a      	movs	r5, #10
 8001d10:	9a07      	ldr	r2, [sp, #28]
 8001d12:	4639      	mov	r1, r7
 8001d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d18:	3b30      	subs	r3, #48	; 0x30
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	d94d      	bls.n	8001dba <_svfiprintf_r+0x16e>
 8001d1e:	b1b8      	cbz	r0, 8001d50 <_svfiprintf_r+0x104>
 8001d20:	e00f      	b.n	8001d42 <_svfiprintf_r+0xf6>
 8001d22:	462f      	mov	r7, r5
 8001d24:	e7b8      	b.n	8001c98 <_svfiprintf_r+0x4c>
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <_svfiprintf_r+0x1dc>)
 8001d28:	463d      	mov	r5, r7
 8001d2a:	1a80      	subs	r0, r0, r2
 8001d2c:	fa0b f000 	lsl.w	r0, fp, r0
 8001d30:	4318      	orrs	r0, r3
 8001d32:	9004      	str	r0, [sp, #16]
 8001d34:	e7d3      	b.n	8001cde <_svfiprintf_r+0x92>
 8001d36:	9a03      	ldr	r2, [sp, #12]
 8001d38:	1d11      	adds	r1, r2, #4
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	9103      	str	r1, [sp, #12]
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	db01      	blt.n	8001d46 <_svfiprintf_r+0xfa>
 8001d42:	9207      	str	r2, [sp, #28]
 8001d44:	e004      	b.n	8001d50 <_svfiprintf_r+0x104>
 8001d46:	4252      	negs	r2, r2
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	9207      	str	r2, [sp, #28]
 8001d4e:	9304      	str	r3, [sp, #16]
 8001d50:	783b      	ldrb	r3, [r7, #0]
 8001d52:	2b2e      	cmp	r3, #46	; 0x2e
 8001d54:	d10c      	bne.n	8001d70 <_svfiprintf_r+0x124>
 8001d56:	787b      	ldrb	r3, [r7, #1]
 8001d58:	2b2a      	cmp	r3, #42	; 0x2a
 8001d5a:	d133      	bne.n	8001dc4 <_svfiprintf_r+0x178>
 8001d5c:	9b03      	ldr	r3, [sp, #12]
 8001d5e:	3702      	adds	r7, #2
 8001d60:	1d1a      	adds	r2, r3, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	9203      	str	r2, [sp, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bfb8      	it	lt
 8001d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d6e:	9305      	str	r3, [sp, #20]
 8001d70:	4d2e      	ldr	r5, [pc, #184]	; (8001e2c <_svfiprintf_r+0x1e0>)
 8001d72:	2203      	movs	r2, #3
 8001d74:	7839      	ldrb	r1, [r7, #0]
 8001d76:	4628      	mov	r0, r5
 8001d78:	f000 f9e8 	bl	800214c <memchr>
 8001d7c:	b138      	cbz	r0, 8001d8e <_svfiprintf_r+0x142>
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	1b40      	subs	r0, r0, r5
 8001d82:	fa03 f000 	lsl.w	r0, r3, r0
 8001d86:	9b04      	ldr	r3, [sp, #16]
 8001d88:	3701      	adds	r7, #1
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	7839      	ldrb	r1, [r7, #0]
 8001d90:	2206      	movs	r2, #6
 8001d92:	4827      	ldr	r0, [pc, #156]	; (8001e30 <_svfiprintf_r+0x1e4>)
 8001d94:	1c7e      	adds	r6, r7, #1
 8001d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d9a:	f000 f9d7 	bl	800214c <memchr>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d038      	beq.n	8001e14 <_svfiprintf_r+0x1c8>
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <_svfiprintf_r+0x1e8>)
 8001da4:	bb13      	cbnz	r3, 8001dec <_svfiprintf_r+0x1a0>
 8001da6:	9b03      	ldr	r3, [sp, #12]
 8001da8:	3307      	adds	r3, #7
 8001daa:	f023 0307 	bic.w	r3, r3, #7
 8001dae:	3308      	adds	r3, #8
 8001db0:	9303      	str	r3, [sp, #12]
 8001db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001db4:	444b      	add	r3, r9
 8001db6:	9309      	str	r3, [sp, #36]	; 0x24
 8001db8:	e76d      	b.n	8001c96 <_svfiprintf_r+0x4a>
 8001dba:	fb05 3202 	mla	r2, r5, r2, r3
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	460f      	mov	r7, r1
 8001dc2:	e7a6      	b.n	8001d12 <_svfiprintf_r+0xc6>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	250a      	movs	r5, #10
 8001dc8:	4619      	mov	r1, r3
 8001dca:	3701      	adds	r7, #1
 8001dcc:	9305      	str	r3, [sp, #20]
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dd4:	3a30      	subs	r2, #48	; 0x30
 8001dd6:	2a09      	cmp	r2, #9
 8001dd8:	d903      	bls.n	8001de2 <_svfiprintf_r+0x196>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0c8      	beq.n	8001d70 <_svfiprintf_r+0x124>
 8001dde:	9105      	str	r1, [sp, #20]
 8001de0:	e7c6      	b.n	8001d70 <_svfiprintf_r+0x124>
 8001de2:	fb05 2101 	mla	r1, r5, r1, r2
 8001de6:	2301      	movs	r3, #1
 8001de8:	4607      	mov	r7, r0
 8001dea:	e7f0      	b.n	8001dce <_svfiprintf_r+0x182>
 8001dec:	ab03      	add	r3, sp, #12
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4622      	mov	r2, r4
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_svfiprintf_r+0x1ec>)
 8001df4:	a904      	add	r1, sp, #16
 8001df6:	4640      	mov	r0, r8
 8001df8:	f3af 8000 	nop.w
 8001dfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e00:	4681      	mov	r9, r0
 8001e02:	d1d6      	bne.n	8001db2 <_svfiprintf_r+0x166>
 8001e04:	89a3      	ldrh	r3, [r4, #12]
 8001e06:	065b      	lsls	r3, r3, #25
 8001e08:	f53f af35 	bmi.w	8001c76 <_svfiprintf_r+0x2a>
 8001e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e0e:	b01d      	add	sp, #116	; 0x74
 8001e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e14:	ab03      	add	r3, sp, #12
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4622      	mov	r2, r4
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_svfiprintf_r+0x1ec>)
 8001e1c:	a904      	add	r1, sp, #16
 8001e1e:	4640      	mov	r0, r8
 8001e20:	f000 f882 	bl	8001f28 <_printf_i>
 8001e24:	e7ea      	b.n	8001dfc <_svfiprintf_r+0x1b0>
 8001e26:	bf00      	nop
 8001e28:	0800274b 	.word	0x0800274b
 8001e2c:	08002751 	.word	0x08002751
 8001e30:	08002755 	.word	0x08002755
 8001e34:	00000000 	.word	0x00000000
 8001e38:	08001b99 	.word	0x08001b99

08001e3c <_printf_common>:
 8001e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e40:	4691      	mov	r9, r2
 8001e42:	461f      	mov	r7, r3
 8001e44:	688a      	ldr	r2, [r1, #8]
 8001e46:	690b      	ldr	r3, [r1, #16]
 8001e48:	4606      	mov	r6, r0
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	bfb8      	it	lt
 8001e4e:	4613      	movlt	r3, r2
 8001e50:	f8c9 3000 	str.w	r3, [r9]
 8001e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e58:	460c      	mov	r4, r1
 8001e5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e5e:	b112      	cbz	r2, 8001e66 <_printf_common+0x2a>
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8c9 3000 	str.w	r3, [r9]
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	0699      	lsls	r1, r3, #26
 8001e6a:	bf42      	ittt	mi
 8001e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e70:	3302      	addmi	r3, #2
 8001e72:	f8c9 3000 	strmi.w	r3, [r9]
 8001e76:	6825      	ldr	r5, [r4, #0]
 8001e78:	f015 0506 	ands.w	r5, r5, #6
 8001e7c:	d107      	bne.n	8001e8e <_printf_common+0x52>
 8001e7e:	f104 0a19 	add.w	sl, r4, #25
 8001e82:	68e3      	ldr	r3, [r4, #12]
 8001e84:	f8d9 2000 	ldr.w	r2, [r9]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	42ab      	cmp	r3, r5
 8001e8c:	dc29      	bgt.n	8001ee2 <_printf_common+0xa6>
 8001e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	3300      	adds	r3, #0
 8001e96:	bf18      	it	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	0692      	lsls	r2, r2, #26
 8001e9c:	d42e      	bmi.n	8001efc <_printf_common+0xc0>
 8001e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ea2:	4639      	mov	r1, r7
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	47c0      	blx	r8
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	d021      	beq.n	8001ef0 <_printf_common+0xb4>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	68e5      	ldr	r5, [r4, #12]
 8001eb0:	f003 0306 	and.w	r3, r3, #6
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	bf18      	it	ne
 8001eb8:	2500      	movne	r5, #0
 8001eba:	f8d9 2000 	ldr.w	r2, [r9]
 8001ebe:	f04f 0900 	mov.w	r9, #0
 8001ec2:	bf08      	it	eq
 8001ec4:	1aad      	subeq	r5, r5, r2
 8001ec6:	68a3      	ldr	r3, [r4, #8]
 8001ec8:	6922      	ldr	r2, [r4, #16]
 8001eca:	bf08      	it	eq
 8001ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bfc4      	itt	gt
 8001ed4:	1a9b      	subgt	r3, r3, r2
 8001ed6:	18ed      	addgt	r5, r5, r3
 8001ed8:	341a      	adds	r4, #26
 8001eda:	454d      	cmp	r5, r9
 8001edc:	d11a      	bne.n	8001f14 <_printf_common+0xd8>
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e008      	b.n	8001ef4 <_printf_common+0xb8>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	4639      	mov	r1, r7
 8001ee8:	4630      	mov	r0, r6
 8001eea:	47c0      	blx	r8
 8001eec:	3001      	adds	r0, #1
 8001eee:	d103      	bne.n	8001ef8 <_printf_common+0xbc>
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef8:	3501      	adds	r5, #1
 8001efa:	e7c2      	b.n	8001e82 <_printf_common+0x46>
 8001efc:	2030      	movs	r0, #48	; 0x30
 8001efe:	18e1      	adds	r1, r4, r3
 8001f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f0a:	4422      	add	r2, r4
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f12:	e7c4      	b.n	8001e9e <_printf_common+0x62>
 8001f14:	2301      	movs	r3, #1
 8001f16:	4622      	mov	r2, r4
 8001f18:	4639      	mov	r1, r7
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	47c0      	blx	r8
 8001f1e:	3001      	adds	r0, #1
 8001f20:	d0e6      	beq.n	8001ef0 <_printf_common+0xb4>
 8001f22:	f109 0901 	add.w	r9, r9, #1
 8001f26:	e7d8      	b.n	8001eda <_printf_common+0x9e>

08001f28 <_printf_i>:
 8001f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f30:	460c      	mov	r4, r1
 8001f32:	7e09      	ldrb	r1, [r1, #24]
 8001f34:	b085      	sub	sp, #20
 8001f36:	296e      	cmp	r1, #110	; 0x6e
 8001f38:	4617      	mov	r7, r2
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f40:	f000 80b3 	beq.w	80020aa <_printf_i+0x182>
 8001f44:	d822      	bhi.n	8001f8c <_printf_i+0x64>
 8001f46:	2963      	cmp	r1, #99	; 0x63
 8001f48:	d036      	beq.n	8001fb8 <_printf_i+0x90>
 8001f4a:	d80a      	bhi.n	8001f62 <_printf_i+0x3a>
 8001f4c:	2900      	cmp	r1, #0
 8001f4e:	f000 80b9 	beq.w	80020c4 <_printf_i+0x19c>
 8001f52:	2958      	cmp	r1, #88	; 0x58
 8001f54:	f000 8083 	beq.w	800205e <_printf_i+0x136>
 8001f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f60:	e032      	b.n	8001fc8 <_printf_i+0xa0>
 8001f62:	2964      	cmp	r1, #100	; 0x64
 8001f64:	d001      	beq.n	8001f6a <_printf_i+0x42>
 8001f66:	2969      	cmp	r1, #105	; 0x69
 8001f68:	d1f6      	bne.n	8001f58 <_printf_i+0x30>
 8001f6a:	6820      	ldr	r0, [r4, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	0605      	lsls	r5, r0, #24
 8001f70:	f103 0104 	add.w	r1, r3, #4
 8001f74:	d52a      	bpl.n	8001fcc <_printf_i+0xa4>
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da03      	bge.n	8001f86 <_printf_i+0x5e>
 8001f7e:	222d      	movs	r2, #45	; 0x2d
 8001f80:	425b      	negs	r3, r3
 8001f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f86:	486f      	ldr	r0, [pc, #444]	; (8002144 <_printf_i+0x21c>)
 8001f88:	220a      	movs	r2, #10
 8001f8a:	e039      	b.n	8002000 <_printf_i+0xd8>
 8001f8c:	2973      	cmp	r1, #115	; 0x73
 8001f8e:	f000 809d 	beq.w	80020cc <_printf_i+0x1a4>
 8001f92:	d808      	bhi.n	8001fa6 <_printf_i+0x7e>
 8001f94:	296f      	cmp	r1, #111	; 0x6f
 8001f96:	d020      	beq.n	8001fda <_printf_i+0xb2>
 8001f98:	2970      	cmp	r1, #112	; 0x70
 8001f9a:	d1dd      	bne.n	8001f58 <_printf_i+0x30>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	e003      	b.n	8001fae <_printf_i+0x86>
 8001fa6:	2975      	cmp	r1, #117	; 0x75
 8001fa8:	d017      	beq.n	8001fda <_printf_i+0xb2>
 8001faa:	2978      	cmp	r1, #120	; 0x78
 8001fac:	d1d4      	bne.n	8001f58 <_printf_i+0x30>
 8001fae:	2378      	movs	r3, #120	; 0x78
 8001fb0:	4865      	ldr	r0, [pc, #404]	; (8002148 <_printf_i+0x220>)
 8001fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fb6:	e055      	b.n	8002064 <_printf_i+0x13c>
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fbe:	1d19      	adds	r1, r3, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e08c      	b.n	80020e6 <_printf_i+0x1be>
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fd2:	6011      	str	r1, [r2, #0]
 8001fd4:	bf18      	it	ne
 8001fd6:	b21b      	sxthne	r3, r3
 8001fd8:	e7cf      	b.n	8001f7a <_printf_i+0x52>
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	6825      	ldr	r5, [r4, #0]
 8001fde:	1d18      	adds	r0, r3, #4
 8001fe0:	6010      	str	r0, [r2, #0]
 8001fe2:	0628      	lsls	r0, r5, #24
 8001fe4:	d501      	bpl.n	8001fea <_printf_i+0xc2>
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e002      	b.n	8001ff0 <_printf_i+0xc8>
 8001fea:	0668      	lsls	r0, r5, #25
 8001fec:	d5fb      	bpl.n	8001fe6 <_printf_i+0xbe>
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	296f      	cmp	r1, #111	; 0x6f
 8001ff2:	bf14      	ite	ne
 8001ff4:	220a      	movne	r2, #10
 8001ff6:	2208      	moveq	r2, #8
 8001ff8:	4852      	ldr	r0, [pc, #328]	; (8002144 <_printf_i+0x21c>)
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002000:	6865      	ldr	r5, [r4, #4]
 8002002:	2d00      	cmp	r5, #0
 8002004:	60a5      	str	r5, [r4, #8]
 8002006:	f2c0 8095 	blt.w	8002134 <_printf_i+0x20c>
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	f021 0104 	bic.w	r1, r1, #4
 8002010:	6021      	str	r1, [r4, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d13d      	bne.n	8002092 <_printf_i+0x16a>
 8002016:	2d00      	cmp	r5, #0
 8002018:	f040 808e 	bne.w	8002138 <_printf_i+0x210>
 800201c:	4665      	mov	r5, ip
 800201e:	2a08      	cmp	r2, #8
 8002020:	d10b      	bne.n	800203a <_printf_i+0x112>
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	07db      	lsls	r3, r3, #31
 8002026:	d508      	bpl.n	800203a <_printf_i+0x112>
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	bfde      	ittt	le
 8002030:	2330      	movle	r3, #48	; 0x30
 8002032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800203a:	ebac 0305 	sub.w	r3, ip, r5
 800203e:	6123      	str	r3, [r4, #16]
 8002040:	f8cd 8000 	str.w	r8, [sp]
 8002044:	463b      	mov	r3, r7
 8002046:	aa03      	add	r2, sp, #12
 8002048:	4621      	mov	r1, r4
 800204a:	4630      	mov	r0, r6
 800204c:	f7ff fef6 	bl	8001e3c <_printf_common>
 8002050:	3001      	adds	r0, #1
 8002052:	d14d      	bne.n	80020f0 <_printf_i+0x1c8>
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	b005      	add	sp, #20
 800205a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800205e:	4839      	ldr	r0, [pc, #228]	; (8002144 <_printf_i+0x21c>)
 8002060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002064:	6813      	ldr	r3, [r2, #0]
 8002066:	6821      	ldr	r1, [r4, #0]
 8002068:	1d1d      	adds	r5, r3, #4
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6015      	str	r5, [r2, #0]
 800206e:	060a      	lsls	r2, r1, #24
 8002070:	d50b      	bpl.n	800208a <_printf_i+0x162>
 8002072:	07ca      	lsls	r2, r1, #31
 8002074:	bf44      	itt	mi
 8002076:	f041 0120 	orrmi.w	r1, r1, #32
 800207a:	6021      	strmi	r1, [r4, #0]
 800207c:	b91b      	cbnz	r3, 8002086 <_printf_i+0x15e>
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	f022 0220 	bic.w	r2, r2, #32
 8002084:	6022      	str	r2, [r4, #0]
 8002086:	2210      	movs	r2, #16
 8002088:	e7b7      	b.n	8001ffa <_printf_i+0xd2>
 800208a:	064d      	lsls	r5, r1, #25
 800208c:	bf48      	it	mi
 800208e:	b29b      	uxthmi	r3, r3
 8002090:	e7ef      	b.n	8002072 <_printf_i+0x14a>
 8002092:	4665      	mov	r5, ip
 8002094:	fbb3 f1f2 	udiv	r1, r3, r2
 8002098:	fb02 3311 	mls	r3, r2, r1, r3
 800209c:	5cc3      	ldrb	r3, [r0, r3]
 800209e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020a2:	460b      	mov	r3, r1
 80020a4:	2900      	cmp	r1, #0
 80020a6:	d1f5      	bne.n	8002094 <_printf_i+0x16c>
 80020a8:	e7b9      	b.n	800201e <_printf_i+0xf6>
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	6825      	ldr	r5, [r4, #0]
 80020ae:	1d18      	adds	r0, r3, #4
 80020b0:	6961      	ldr	r1, [r4, #20]
 80020b2:	6010      	str	r0, [r2, #0]
 80020b4:	0628      	lsls	r0, r5, #24
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	d501      	bpl.n	80020be <_printf_i+0x196>
 80020ba:	6019      	str	r1, [r3, #0]
 80020bc:	e002      	b.n	80020c4 <_printf_i+0x19c>
 80020be:	066a      	lsls	r2, r5, #25
 80020c0:	d5fb      	bpl.n	80020ba <_printf_i+0x192>
 80020c2:	8019      	strh	r1, [r3, #0]
 80020c4:	2300      	movs	r3, #0
 80020c6:	4665      	mov	r5, ip
 80020c8:	6123      	str	r3, [r4, #16]
 80020ca:	e7b9      	b.n	8002040 <_printf_i+0x118>
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	1d19      	adds	r1, r3, #4
 80020d0:	6011      	str	r1, [r2, #0]
 80020d2:	681d      	ldr	r5, [r3, #0]
 80020d4:	6862      	ldr	r2, [r4, #4]
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f000 f837 	bl	800214c <memchr>
 80020de:	b108      	cbz	r0, 80020e4 <_printf_i+0x1bc>
 80020e0:	1b40      	subs	r0, r0, r5
 80020e2:	6060      	str	r0, [r4, #4]
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	6123      	str	r3, [r4, #16]
 80020e8:	2300      	movs	r3, #0
 80020ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ee:	e7a7      	b.n	8002040 <_printf_i+0x118>
 80020f0:	6923      	ldr	r3, [r4, #16]
 80020f2:	462a      	mov	r2, r5
 80020f4:	4639      	mov	r1, r7
 80020f6:	4630      	mov	r0, r6
 80020f8:	47c0      	blx	r8
 80020fa:	3001      	adds	r0, #1
 80020fc:	d0aa      	beq.n	8002054 <_printf_i+0x12c>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	079b      	lsls	r3, r3, #30
 8002102:	d413      	bmi.n	800212c <_printf_i+0x204>
 8002104:	68e0      	ldr	r0, [r4, #12]
 8002106:	9b03      	ldr	r3, [sp, #12]
 8002108:	4298      	cmp	r0, r3
 800210a:	bfb8      	it	lt
 800210c:	4618      	movlt	r0, r3
 800210e:	e7a3      	b.n	8002058 <_printf_i+0x130>
 8002110:	2301      	movs	r3, #1
 8002112:	464a      	mov	r2, r9
 8002114:	4639      	mov	r1, r7
 8002116:	4630      	mov	r0, r6
 8002118:	47c0      	blx	r8
 800211a:	3001      	adds	r0, #1
 800211c:	d09a      	beq.n	8002054 <_printf_i+0x12c>
 800211e:	3501      	adds	r5, #1
 8002120:	68e3      	ldr	r3, [r4, #12]
 8002122:	9a03      	ldr	r2, [sp, #12]
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	42ab      	cmp	r3, r5
 8002128:	dcf2      	bgt.n	8002110 <_printf_i+0x1e8>
 800212a:	e7eb      	b.n	8002104 <_printf_i+0x1dc>
 800212c:	2500      	movs	r5, #0
 800212e:	f104 0919 	add.w	r9, r4, #25
 8002132:	e7f5      	b.n	8002120 <_printf_i+0x1f8>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ac      	bne.n	8002092 <_printf_i+0x16a>
 8002138:	7803      	ldrb	r3, [r0, #0]
 800213a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800213e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002142:	e76c      	b.n	800201e <_printf_i+0xf6>
 8002144:	0800275c 	.word	0x0800275c
 8002148:	0800276d 	.word	0x0800276d

0800214c <memchr>:
 800214c:	b510      	push	{r4, lr}
 800214e:	b2c9      	uxtb	r1, r1
 8002150:	4402      	add	r2, r0
 8002152:	4290      	cmp	r0, r2
 8002154:	4603      	mov	r3, r0
 8002156:	d101      	bne.n	800215c <memchr+0x10>
 8002158:	2300      	movs	r3, #0
 800215a:	e003      	b.n	8002164 <memchr+0x18>
 800215c:	781c      	ldrb	r4, [r3, #0]
 800215e:	3001      	adds	r0, #1
 8002160:	428c      	cmp	r4, r1
 8002162:	d1f6      	bne.n	8002152 <memchr+0x6>
 8002164:	4618      	mov	r0, r3
 8002166:	bd10      	pop	{r4, pc}

08002168 <memmove>:
 8002168:	4288      	cmp	r0, r1
 800216a:	b510      	push	{r4, lr}
 800216c:	eb01 0302 	add.w	r3, r1, r2
 8002170:	d807      	bhi.n	8002182 <memmove+0x1a>
 8002172:	1e42      	subs	r2, r0, #1
 8002174:	4299      	cmp	r1, r3
 8002176:	d00a      	beq.n	800218e <memmove+0x26>
 8002178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800217c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002180:	e7f8      	b.n	8002174 <memmove+0xc>
 8002182:	4283      	cmp	r3, r0
 8002184:	d9f5      	bls.n	8002172 <memmove+0xa>
 8002186:	1881      	adds	r1, r0, r2
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	42d3      	cmn	r3, r2
 800218c:	d100      	bne.n	8002190 <memmove+0x28>
 800218e:	bd10      	pop	{r4, pc}
 8002190:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002194:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002198:	e7f7      	b.n	800218a <memmove+0x22>
	...

0800219c <_free_r>:
 800219c:	b538      	push	{r3, r4, r5, lr}
 800219e:	4605      	mov	r5, r0
 80021a0:	2900      	cmp	r1, #0
 80021a2:	d043      	beq.n	800222c <_free_r+0x90>
 80021a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021a8:	1f0c      	subs	r4, r1, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bfb8      	it	lt
 80021ae:	18e4      	addlt	r4, r4, r3
 80021b0:	f000 f8d0 	bl	8002354 <__malloc_lock>
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <_free_r+0x94>)
 80021b6:	6813      	ldr	r3, [r2, #0]
 80021b8:	4610      	mov	r0, r2
 80021ba:	b933      	cbnz	r3, 80021ca <_free_r+0x2e>
 80021bc:	6063      	str	r3, [r4, #4]
 80021be:	6014      	str	r4, [r2, #0]
 80021c0:	4628      	mov	r0, r5
 80021c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021c6:	f000 b8c6 	b.w	8002356 <__malloc_unlock>
 80021ca:	42a3      	cmp	r3, r4
 80021cc:	d90b      	bls.n	80021e6 <_free_r+0x4a>
 80021ce:	6821      	ldr	r1, [r4, #0]
 80021d0:	1862      	adds	r2, r4, r1
 80021d2:	4293      	cmp	r3, r2
 80021d4:	bf01      	itttt	eq
 80021d6:	681a      	ldreq	r2, [r3, #0]
 80021d8:	685b      	ldreq	r3, [r3, #4]
 80021da:	1852      	addeq	r2, r2, r1
 80021dc:	6022      	streq	r2, [r4, #0]
 80021de:	6063      	str	r3, [r4, #4]
 80021e0:	6004      	str	r4, [r0, #0]
 80021e2:	e7ed      	b.n	80021c0 <_free_r+0x24>
 80021e4:	4613      	mov	r3, r2
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	b10a      	cbz	r2, 80021ee <_free_r+0x52>
 80021ea:	42a2      	cmp	r2, r4
 80021ec:	d9fa      	bls.n	80021e4 <_free_r+0x48>
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	1858      	adds	r0, r3, r1
 80021f2:	42a0      	cmp	r0, r4
 80021f4:	d10b      	bne.n	800220e <_free_r+0x72>
 80021f6:	6820      	ldr	r0, [r4, #0]
 80021f8:	4401      	add	r1, r0
 80021fa:	1858      	adds	r0, r3, r1
 80021fc:	4282      	cmp	r2, r0
 80021fe:	6019      	str	r1, [r3, #0]
 8002200:	d1de      	bne.n	80021c0 <_free_r+0x24>
 8002202:	6810      	ldr	r0, [r2, #0]
 8002204:	6852      	ldr	r2, [r2, #4]
 8002206:	4401      	add	r1, r0
 8002208:	6019      	str	r1, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	e7d8      	b.n	80021c0 <_free_r+0x24>
 800220e:	d902      	bls.n	8002216 <_free_r+0x7a>
 8002210:	230c      	movs	r3, #12
 8002212:	602b      	str	r3, [r5, #0]
 8002214:	e7d4      	b.n	80021c0 <_free_r+0x24>
 8002216:	6820      	ldr	r0, [r4, #0]
 8002218:	1821      	adds	r1, r4, r0
 800221a:	428a      	cmp	r2, r1
 800221c:	bf01      	itttt	eq
 800221e:	6811      	ldreq	r1, [r2, #0]
 8002220:	6852      	ldreq	r2, [r2, #4]
 8002222:	1809      	addeq	r1, r1, r0
 8002224:	6021      	streq	r1, [r4, #0]
 8002226:	6062      	str	r2, [r4, #4]
 8002228:	605c      	str	r4, [r3, #4]
 800222a:	e7c9      	b.n	80021c0 <_free_r+0x24>
 800222c:	bd38      	pop	{r3, r4, r5, pc}
 800222e:	bf00      	nop
 8002230:	20000bc8 	.word	0x20000bc8

08002234 <_malloc_r>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	1ccd      	adds	r5, r1, #3
 8002238:	f025 0503 	bic.w	r5, r5, #3
 800223c:	3508      	adds	r5, #8
 800223e:	2d0c      	cmp	r5, #12
 8002240:	bf38      	it	cc
 8002242:	250c      	movcc	r5, #12
 8002244:	2d00      	cmp	r5, #0
 8002246:	4606      	mov	r6, r0
 8002248:	db01      	blt.n	800224e <_malloc_r+0x1a>
 800224a:	42a9      	cmp	r1, r5
 800224c:	d903      	bls.n	8002256 <_malloc_r+0x22>
 800224e:	230c      	movs	r3, #12
 8002250:	6033      	str	r3, [r6, #0]
 8002252:	2000      	movs	r0, #0
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	f000 f87d 	bl	8002354 <__malloc_lock>
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <_malloc_r+0xac>)
 800225c:	6814      	ldr	r4, [r2, #0]
 800225e:	4621      	mov	r1, r4
 8002260:	b991      	cbnz	r1, 8002288 <_malloc_r+0x54>
 8002262:	4c20      	ldr	r4, [pc, #128]	; (80022e4 <_malloc_r+0xb0>)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	b91b      	cbnz	r3, 8002270 <_malloc_r+0x3c>
 8002268:	4630      	mov	r0, r6
 800226a:	f000 f863 	bl	8002334 <_sbrk_r>
 800226e:	6020      	str	r0, [r4, #0]
 8002270:	4629      	mov	r1, r5
 8002272:	4630      	mov	r0, r6
 8002274:	f000 f85e 	bl	8002334 <_sbrk_r>
 8002278:	1c43      	adds	r3, r0, #1
 800227a:	d124      	bne.n	80022c6 <_malloc_r+0x92>
 800227c:	230c      	movs	r3, #12
 800227e:	4630      	mov	r0, r6
 8002280:	6033      	str	r3, [r6, #0]
 8002282:	f000 f868 	bl	8002356 <__malloc_unlock>
 8002286:	e7e4      	b.n	8002252 <_malloc_r+0x1e>
 8002288:	680b      	ldr	r3, [r1, #0]
 800228a:	1b5b      	subs	r3, r3, r5
 800228c:	d418      	bmi.n	80022c0 <_malloc_r+0x8c>
 800228e:	2b0b      	cmp	r3, #11
 8002290:	d90f      	bls.n	80022b2 <_malloc_r+0x7e>
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	18cc      	adds	r4, r1, r3
 8002296:	50cd      	str	r5, [r1, r3]
 8002298:	4630      	mov	r0, r6
 800229a:	f000 f85c 	bl	8002356 <__malloc_unlock>
 800229e:	f104 000b 	add.w	r0, r4, #11
 80022a2:	1d23      	adds	r3, r4, #4
 80022a4:	f020 0007 	bic.w	r0, r0, #7
 80022a8:	1ac3      	subs	r3, r0, r3
 80022aa:	d0d3      	beq.n	8002254 <_malloc_r+0x20>
 80022ac:	425a      	negs	r2, r3
 80022ae:	50e2      	str	r2, [r4, r3]
 80022b0:	e7d0      	b.n	8002254 <_malloc_r+0x20>
 80022b2:	684b      	ldr	r3, [r1, #4]
 80022b4:	428c      	cmp	r4, r1
 80022b6:	bf16      	itet	ne
 80022b8:	6063      	strne	r3, [r4, #4]
 80022ba:	6013      	streq	r3, [r2, #0]
 80022bc:	460c      	movne	r4, r1
 80022be:	e7eb      	b.n	8002298 <_malloc_r+0x64>
 80022c0:	460c      	mov	r4, r1
 80022c2:	6849      	ldr	r1, [r1, #4]
 80022c4:	e7cc      	b.n	8002260 <_malloc_r+0x2c>
 80022c6:	1cc4      	adds	r4, r0, #3
 80022c8:	f024 0403 	bic.w	r4, r4, #3
 80022cc:	42a0      	cmp	r0, r4
 80022ce:	d005      	beq.n	80022dc <_malloc_r+0xa8>
 80022d0:	1a21      	subs	r1, r4, r0
 80022d2:	4630      	mov	r0, r6
 80022d4:	f000 f82e 	bl	8002334 <_sbrk_r>
 80022d8:	3001      	adds	r0, #1
 80022da:	d0cf      	beq.n	800227c <_malloc_r+0x48>
 80022dc:	6025      	str	r5, [r4, #0]
 80022de:	e7db      	b.n	8002298 <_malloc_r+0x64>
 80022e0:	20000bc8 	.word	0x20000bc8
 80022e4:	20000bcc 	.word	0x20000bcc

080022e8 <_realloc_r>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	4607      	mov	r7, r0
 80022ec:	4614      	mov	r4, r2
 80022ee:	460e      	mov	r6, r1
 80022f0:	b921      	cbnz	r1, 80022fc <_realloc_r+0x14>
 80022f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022f6:	4611      	mov	r1, r2
 80022f8:	f7ff bf9c 	b.w	8002234 <_malloc_r>
 80022fc:	b922      	cbnz	r2, 8002308 <_realloc_r+0x20>
 80022fe:	f7ff ff4d 	bl	800219c <_free_r>
 8002302:	4625      	mov	r5, r4
 8002304:	4628      	mov	r0, r5
 8002306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002308:	f000 f826 	bl	8002358 <_malloc_usable_size_r>
 800230c:	42a0      	cmp	r0, r4
 800230e:	d20f      	bcs.n	8002330 <_realloc_r+0x48>
 8002310:	4621      	mov	r1, r4
 8002312:	4638      	mov	r0, r7
 8002314:	f7ff ff8e 	bl	8002234 <_malloc_r>
 8002318:	4605      	mov	r5, r0
 800231a:	2800      	cmp	r0, #0
 800231c:	d0f2      	beq.n	8002304 <_realloc_r+0x1c>
 800231e:	4631      	mov	r1, r6
 8002320:	4622      	mov	r2, r4
 8002322:	f7ff fbe3 	bl	8001aec <memcpy>
 8002326:	4631      	mov	r1, r6
 8002328:	4638      	mov	r0, r7
 800232a:	f7ff ff37 	bl	800219c <_free_r>
 800232e:	e7e9      	b.n	8002304 <_realloc_r+0x1c>
 8002330:	4635      	mov	r5, r6
 8002332:	e7e7      	b.n	8002304 <_realloc_r+0x1c>

08002334 <_sbrk_r>:
 8002334:	b538      	push	{r3, r4, r5, lr}
 8002336:	2300      	movs	r3, #0
 8002338:	4c05      	ldr	r4, [pc, #20]	; (8002350 <_sbrk_r+0x1c>)
 800233a:	4605      	mov	r5, r0
 800233c:	4608      	mov	r0, r1
 800233e:	6023      	str	r3, [r4, #0]
 8002340:	f7fe fd80 	bl	8000e44 <_sbrk>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d102      	bne.n	800234e <_sbrk_r+0x1a>
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	b103      	cbz	r3, 800234e <_sbrk_r+0x1a>
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	bd38      	pop	{r3, r4, r5, pc}
 8002350:	20000bd4 	.word	0x20000bd4

08002354 <__malloc_lock>:
 8002354:	4770      	bx	lr

08002356 <__malloc_unlock>:
 8002356:	4770      	bx	lr

08002358 <_malloc_usable_size_r>:
 8002358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800235c:	1f18      	subs	r0, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfbc      	itt	lt
 8002362:	580b      	ldrlt	r3, [r1, r0]
 8002364:	18c0      	addlt	r0, r0, r3
 8002366:	4770      	bx	lr

08002368 <_init>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr

08002374 <_fini>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr
