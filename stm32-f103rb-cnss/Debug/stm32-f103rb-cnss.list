
stm32-f103rb-cnss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00010574  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  08000574  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  20000000  08000574  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08000574  00010638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d7d  00000000  00000000  0001059d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ac2  00000000  00000000  0001431a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00014de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00014f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000869  00000000  00000000  00015098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002205  00000000  00000000  00015901  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058975  00000000  00000000  00017b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007047b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000494  00000000  00000000  000704f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004d0 	.word	0x080004d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004d0 	.word	0x080004d0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <toggle_led>:

}


void toggle_led()
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0

	if(state == OFF)
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <toggle_led+0x3c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d109      	bne.n	80001a0 <toggle_led+0x20>
	{
		GPIOA->ODR |= 0x0020;
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <toggle_led+0x40>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <toggle_led+0x40>)
 8000192:	f043 0320 	orr.w	r3, r3, #32
 8000196:	60d3      	str	r3, [r2, #12]
		state=ON;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <toggle_led+0x3c>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
	else
	{
		GPIOA->ODR &= ~(0x0020);
		state=OFF;
	}
}
 800019e:	e008      	b.n	80001b2 <toggle_led+0x32>
		GPIOA->ODR &= ~(0x0020);
 80001a0:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <toggle_led+0x40>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <toggle_led+0x40>)
 80001a6:	f023 0320 	bic.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
		state=OFF;
 80001ac:	4b03      	ldr	r3, [pc, #12]	; (80001bc <toggle_led+0x3c>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000635 	.word	0x20000635
 80001c0:	40010800 	.word	0x40010800

080001c4 <EXTI4_IRQHandler>:

/*Interrupt service routine for sensor using pin D5 (PB4) as input mode*/
void EXTI4_IRQHandler(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	EXTI->PR |= 0x00000010; //reset flag by writing 1 to bit 4 (reference manual 10.3.6)
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ca:	695b      	ldr	r3, [r3, #20]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <EXTI4_IRQHandler+0x20>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6153      	str	r3, [r2, #20]

	toggle_led(); //This is temporary for testing.
 80001d4:	f7ff ffd4 	bl	8000180 <toggle_led>
	write_usart2((uint8_t*)MSG); //This chould be executed using the event_queue
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <EXTI4_IRQHandler+0x24>)
 80001da:	f000 f899 	bl	8000310 <write_usart2>

}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010400 	.word	0x40010400
 80001e8:	080004e8 	.word	0x080004e8

080001ec <main>:
#include "esp8266_WiFi.h" /*for testing usart1...*/
#include "timers.h"


int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//init_sensor_with_interrupt();
	//init_sensor_led_response();
	init_usart2(); // for dbugging
 80001f0:	f000 f83a 	bl	8000268 <init_usart2>
	init_timer2();
 80001f4:	f000 f804 	bl	8000200 <init_timer2>
	//recordAlert();


	while(1)
	{
		test_timer2();
 80001f8:	f000 f822 	bl	8000240 <test_timer2>
 80001fc:	e7fc      	b.n	80001f8 <main+0xc>
	...

08000200 <init_timer2>:
#include "timers.h"
#include "usart.h"
#include <string.h>
#include <stdio.h>

void init_timer2(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	//Not useful: RCC->APB1RSTR |= 0x00000001; // TIM2RST: TIM2 timer reset(redundant ???)
//-----???????-----------------


	/* APB1 peripheral clock enable register (RCC_APB1ENR) {p.148 in the reference manual} */
	RCC->APB1ENR |= 0x00000001; // TIM2EN: TIM2 timer clock enable
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <init_timer2+0x3c>)
 8000206:	69db      	ldr	r3, [r3, #28]
 8000208:	4a0c      	ldr	r2, [pc, #48]	; (800023c <init_timer2+0x3c>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	61d3      	str	r3, [r2, #28]

	/* AFIO  {p. in the reference manual} */
	//RCC->APB2ENR |= 0x00000001;

	/* TIM2 Set Prescaler {see: 15.4.11 in the Reference manual}*/
	TIM2->PSC = 0xFFFF;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000218:	629a      	str	r2, [r3, #40]	; 0x28

	/* TIM2 Set TIMx auto-reload register {p.419 in the Reference manual}*/
	TIM2->ARR = 0x0007;//0xFFFF;
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	2207      	movs	r2, #7
 8000220:	62da      	str	r2, [r3, #44]	; 0x2c

	/* TIMx control register 1 (TIMx_CR1) {p.404 in the reference manual} */
	//TIM2->CR1 |= 0x0010; // DIR
	//TIM2->CR1 |= 0x0080; // ARPE
	TIM2->CR1 |= 0x0001; // CEN: Counter enable
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]

	/* TIMx auto-reload register (TIMx_ARR) {p.419 in the Reference manual} */
	//TIM2->ARR//holds the number of ticks that the timer will count

	//When the time is over - the UIF bit is set to 1
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40021000 	.word	0x40021000

08000240 <test_timer2>:

/*USART2 has to be enabled*/
void test_timer2(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

	uint32_t i = TIM2->CNT;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024c:	607b      	str	r3, [r7, #4]
	write_usart2((uint8_t *)i);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f85d 	bl	8000310 <write_usart2>

//	write_usart2((uint8_t *)TIM2->CNT);
	write_usart2((uint8_t *)"\r\n");
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <test_timer2+0x24>)
 8000258:	f000 f85a 	bl	8000310 <write_usart2>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08000568 	.word	0x08000568

08000268 <init_usart2>:

/*This functions Inits all registors that have to do with enabling USART2 (ST-LINK/V.2)
 *inorder to send message to computer.
 *Note: Interrupts are not enabled intentionally.
 *This program works when TeraTerm speed is set to 9600*/
void init_usart2(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	/*ADDED...*/
	/*Enable RCC for Alternate Funcion for PINs*/
	//RCC->APB2ENR |= 0x00000001; //  (see RM 8.3.7) //I don't think this line is needed...

	/*Enabla RCC for GPIO Port A*/
	RCC->APB2ENR |= 0x00000004; // (see RM 8.3.7)
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <init_usart2+0x5c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <init_usart2+0x5c>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]

	/*Configure USART2 Tx (PA2) as Output */
	GPIOA->CRL &= 0xFFFFF0FF; //Leave all bits as they are except for bit 2 (see RM 9.2.1)
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <init_usart2+0x60>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <init_usart2+0x60>)
 800027e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0x00000A00; //Configure as Alternate function output Push-pull | Speed 2 MHz (see RM 9.2.1)
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <init_usart2+0x60>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <init_usart2+0x60>)
 800028a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800028e:	6013      	str	r3, [r2, #0]
	//GPIOA->CRL |= 0x00000B00; //Configure as Alternate function output Push-pull | Speed 50 MHz (see RM 9.2.1)
	/*...ADDED*/


	/*Enable RCC for USART2*/
	RCC->APB1ENR |= 0x00020000; // (see RM 8.3.8) IS THIS REALLY NEEDED??
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <init_usart2+0x5c>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <init_usart2+0x5c>)
 8000296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029a:	61d3      	str	r3, [r2, #28]


	/*Following directions RM pg.792 */
	USART2->CR1 |= 0x00002000; //Enable the USART by writing the UE bit in USART_CR1 register to 1 (see RM 27.6.4)
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <init_usart2+0x64>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <init_usart2+0x64>)
 80002a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a6:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 &= ~(0x00001000); //Program the M bit in USART_CR1 to define the word length to 8 (by default) (see RM 27.6.4)
	//USART2->CR1 &= ~(0x00000400); //Parity Controle Disable (by default) (see RM 27.6.4)
	//USART2->CR2 &= ~(0x00003000); //Program the number of stop bits in USART_CR2 to 1 (by defualt) (see RM 27.6.5)

	/*Set Baude rate*/
	USART2->BRR = 0x34D; //9600 bps (see RM p.798 for BRR calculation and RM p.93 Fig.8 for clock tree)
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <init_usart2+0x64>)
 80002aa:	f240 324d 	movw	r2, #845	; 0x34d
 80002ae:	609a      	str	r2, [r3, #8]

	/*Enable Uart Transmit*/
	USART2->CR1 |= 0x00000008; // Set the TE bit in USART_CR1 to send an idle frame as first transmission. see RM 27.6.4)
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <init_usart2+0x64>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <init_usart2+0x64>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn); //enable handler
	__enable_irq();*/

	/*Enable Uart Recirve*/
	//Maybe afterwords - as of now don't need
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40004400 	.word	0x40004400

080002d0 <set_usart2_buffer_Tx>:
}


/*This function sets the Tx buffer up with chosen message.
 * One may choose to use the default MSG defined in usart.h*/
void set_usart2_buffer_Tx(uint8_t *msg){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]


	memset(usart2.Tx, '\0', BUFF_SIZE*sizeof(uint8_t));
 80002d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002dc:	2100      	movs	r1, #0
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002e0:	f000 f8e6 	bl	80004b0 <memset>
	if((BUFF_SIZE - strlen((char*)msg) + 1) < 0){
		strcpy((char*)usart2.Tx,"Error msg to Long\r\n");
		usart2.Tx_len = strlen((char*)"Error msg to Long\r\n");
	}
	else{
		strcpy((char*)usart2.Tx,(char*)msg);
 80002e4:	6879      	ldr	r1, [r7, #4]
 80002e6:	4809      	ldr	r0, [pc, #36]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002e8:	f000 f8ea 	bl	80004c0 <strcpy>
		usart2.Tx_len = strlen((char*)msg);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff3f 	bl	8000170 <strlen>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}

	usart2.write_index = 0;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <set_usart2_buffer_Tx+0x3c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000001c 	.word	0x2000001c

08000310 <write_usart2>:


/*USART2 write function with no interrupt.
 *This function writes msg written in buffet_Tx to USART2_DR.*/
void write_usart2(uint8_t* msg){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]


	set_usart2_buffer_Tx(msg);
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ffd9 	bl	80002d0 <set_usart2_buffer_Tx>

	while(usart2.write_index < usart2.Tx_len)
 800031e:	e014      	b.n	800034a <write_usart2+0x3a>
	{
		while(((USART2->SR) & 0x00000080) == 0x00000000);// wait while data is not yet transfered (TXE != 1)(see RM 27.6.1)
 8000320:	bf00      	nop
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <write_usart2+0x70>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <write_usart2+0x12>
		USART2->DR = (uint8_t)(usart2.Tx[usart2.write_index] & 0xFF); //send data (see RM 27.6.2)
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <write_usart2+0x74>)
 8000330:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000334:	4a13      	ldr	r2, [pc, #76]	; (8000384 <write_usart2+0x74>)
 8000336:	5cd2      	ldrb	r2, [r2, r3]
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <write_usart2+0x70>)
 800033a:	605a      	str	r2, [r3, #4]
		usart2.write_index++;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <write_usart2+0x74>)
 800033e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000342:	3301      	adds	r3, #1
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <write_usart2+0x74>)
 8000346:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	while(usart2.write_index < usart2.Tx_len)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <write_usart2+0x74>)
 800034c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <write_usart2+0x74>)
 8000352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000356:	429a      	cmp	r2, r3
 8000358:	d3e2      	bcc.n	8000320 <write_usart2+0x10>
	}
	while(((USART2->SR) & 0x00000040) !=  0x00000040); //wait until transmission is complete TC=1 (see RM 27.6.1)
 800035a:	bf00      	nop
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <write_usart2+0x70>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000364:	2b40      	cmp	r3, #64	; 0x40
 8000366:	d1f9      	bne.n	800035c <write_usart2+0x4c>
	usart2.write_index = 0;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <write_usart2+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	usart2.Tx_len = 0;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <write_usart2+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40004400 	.word	0x40004400
 8000384:	2000001c 	.word	0x2000001c

08000388 <USART1_IRQHandler>:
	}

}

/*USART1 Interrupt Handler - Only Rx is set to have interrupts*/
void USART1_IRQHandler(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	if(((USART1->SR) & 0x00000020) == 0x00000020){ //Check if RXNE=1, this means that Rx interrupt occurred (see RM 27.6.1)
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <USART1_IRQHandler+0x80>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b20      	cmp	r3, #32
 8000396:	d132      	bne.n	80003fe <USART1_IRQHandler+0x76>

		c = USART1->DR; //This clear RXNE bit
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <USART1_IRQHandler+0x80>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <USART1_IRQHandler+0x84>)
 80003a0:	701a      	strb	r2, [r3, #0]
		if((usart1.Rx_len + 1) < BUFF_SIZE){
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <USART1_IRQHandler+0x88>)
 80003a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80003a8:	3301      	adds	r3, #1
 80003aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003ae:	d20a      	bcs.n	80003c6 <USART1_IRQHandler+0x3e>
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <USART1_IRQHandler+0x88>)
 80003b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <USART1_IRQHandler+0x84>)
 80003b8:	7811      	ldrb	r1, [r2, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <USART1_IRQHandler+0x88>)
 80003bc:	4413      	add	r3, r2
 80003be:	460a      	mov	r2, r1
 80003c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80003c4:	e00d      	b.n	80003e2 <USART1_IRQHandler+0x5a>
		}
		else{
			//Restart index
			usart1.read_index = 0;
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <USART1_IRQHandler+0x88>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			usart1.Rx[usart1.read_index] = (uint8_t)(c & 0xFF);
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <USART1_IRQHandler+0x88>)
 80003d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <USART1_IRQHandler+0x84>)
 80003d6:	7811      	ldrb	r1, [r2, #0]
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <USART1_IRQHandler+0x88>)
 80003da:	4413      	add	r3, r2
 80003dc:	460a      	mov	r2, r1
 80003de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		}
		usart1.read_index++;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <USART1_IRQHandler+0x88>)
 80003e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <USART1_IRQHandler+0x88>)
 80003ec:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		usart1.Rx_len++;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <USART1_IRQHandler+0x88>)
 80003f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <USART1_IRQHandler+0x88>)
 80003fa:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
	}


}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40013800 	.word	0x40013800
 800040c:	20000634 	.word	0x20000634
 8000410:	20000224 	.word	0x20000224

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041a:	490e      	ldr	r1, [pc, #56]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000430:	4c0b      	ldr	r4, [pc, #44]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800043e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fed1 	bl	80001ec <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000458:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 800045c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000460:	20000638 	.word	0x20000638

08000464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_2_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2500      	movs	r5, #0
 800046c:	4e0c      	ldr	r6, [pc, #48]	; (80004a0 <__libc_init_array+0x38>)
 800046e:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 8000470:	1ba4      	subs	r4, r4, r6
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	42a5      	cmp	r5, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	f000 f82a 	bl	80004d0 <_init>
 800047c:	2500      	movs	r5, #0
 800047e:	4e0a      	ldr	r6, [pc, #40]	; (80004a8 <__libc_init_array+0x40>)
 8000480:	4c0a      	ldr	r4, [pc, #40]	; (80004ac <__libc_init_array+0x44>)
 8000482:	1ba4      	subs	r4, r4, r6
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	42a5      	cmp	r5, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000490:	4798      	blx	r3
 8000492:	3501      	adds	r5, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800049a:	4798      	blx	r3
 800049c:	3501      	adds	r5, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	0800056c 	.word	0x0800056c
 80004a4:	0800056c 	.word	0x0800056c
 80004a8:	0800056c 	.word	0x0800056c
 80004ac:	08000570 	.word	0x08000570

080004b0 <memset>:
 80004b0:	4603      	mov	r3, r0
 80004b2:	4402      	add	r2, r0
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d100      	bne.n	80004ba <memset+0xa>
 80004b8:	4770      	bx	lr
 80004ba:	f803 1b01 	strb.w	r1, [r3], #1
 80004be:	e7f9      	b.n	80004b4 <memset+0x4>

080004c0 <strcpy>:
 80004c0:	4603      	mov	r3, r0
 80004c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80004c6:	f803 2b01 	strb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1f9      	bne.n	80004c2 <strcpy+0x2>
 80004ce:	4770      	bx	lr

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
